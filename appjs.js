! function (a, b) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {
        if (!a.document) throw new Error("Plugin player requires");
        return b(a)
    } : b(a)
}("undefined" != typeof window ? window : this, function (a, b) {
    var c = [],
        d = c.slice,
        e = c.concat,
        f = c.push,
        g = c.indexOf,
        h = {},
        i = h.toString,
        j = h.hasOwnProperty,
        k = {},
        l = "1.11.2",
        m = function (a, b) {
            return new m.fn.init(a, b)
        },
        n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        o = /^-ms-/,
        p = /-([\da-z])/gi,
        q = function (a, b) {
            return b.toUpperCase()
        };
    m.fn = m.prototype = {
        jquery: l,
        constructor: m,
        selector: "",
        length: 0,
        toArray: function () {
            return d.call(this)
        },
        get: function (a) {
            return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this)
        },
        pushStack: function (a) {
            var b = m.merge(this.constructor(), a);
            return b.prevObject = this, b.context = this.context, b
        },
        each: function (a, b) {
            return m.each(this, a, b)
        },
        map: function (a) {
            return this.pushStack(m.map(this, function (b, c) {
                return a.call(b, c, b)
            }))
        },
        slice: function () {
            return this.pushStack(d.apply(this, arguments))
        },
        first: function () {
            return this.eq(0)
        },
        last: function () {
            return this.eq(-1)
        },
        eq: function (a) {
            var b = this.length,
                c = +a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [this[c]] : [])
        },
        end: function () {
            return this.prevObject || this.constructor(null)
        },
        push: f,
        sort: c.sort,
        splice: c.splice
    }, m.extend = m.fn.extend = function () {
        var a, b, c, d, e, f, g = arguments[0] || {},
            h = 1,
            i = arguments.length,
            j = !1;
        for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++)
            if (null != (e = arguments[h]))
                for (d in e) a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));
        return g
    }, m.extend({
        expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function (a) {
            throw new Error(a)
        },
        noop: function () {},
        isFunction: function (a) {
            return "function" === m.type(a)
        },
        isArray: Array.isArray || function (a) {
            return "array" === m.type(a)
        },
        isWindow: function (a) {
            return null != a && a == a.window
        },
        isNumeric: function (a) {
            return !m.isArray(a) && a - parseFloat(a) + 1 >= 0
        },
        isEmptyObject: function (a) {
            var b;
            for (b in a) return !1;
            return !0
        },
        isPlainObject: function (a) {
            var b;
            if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;
            try {
                if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1
            } catch (c) {
                return !1
            }
            if (k.ownLast)
                for (b in a) return j.call(a, b);
            for (b in a);
            return void 0 === b || j.call(a, b)
        },
        type: function (a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a
        },
        globalEval: function (b) {
            b && m.trim(b) && (a.execScript || function (b) {
                a.eval.call(a, b)
            })(b)
        },
        camelCase: function (a) {
            return a.replace(o, "ms-").replace(p, q)
        },
        nodeName: function (a, b) {
            return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
        },
        each: function (a, b, c) {
            var d, e = 0,
                f = a.length,
                g = r(a);
            if (c) {
                if (g) {
                    for (; f > e; e++)
                        if (d = b.apply(a[e], c), d === !1) break
                } else
                    for (e in a)
                        if (d = b.apply(a[e], c), d === !1) break
            } else if (g) {
                for (; f > e; e++)
                    if (d = b.call(a[e], e, a[e]), d === !1) break
            } else
                for (e in a)
                    if (d = b.call(a[e], e, a[e]), d === !1) break;
            return a
        },
        trim: function (a) {
            return null == a ? "" : (a + "").replace(n, "")
        },
        makeArray: function (a, b) {
            var c = b || [];
            return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c
        },
        inArray: function (a, b, c) {
            var d;
            if (b) {
                if (g) return g.call(b, a, c);
                for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++)
                    if (c in b && b[c] === a) return c
            }
            return -1
        },
        merge: function (a, b) {
            var c = +b.length,
                d = 0,
                e = a.length;
            while (c > d) a[e++] = b[d++];
            if (c !== c)
                while (void 0 !== b[d]) a[e++] = b[d++];
            return a.length = e, a
        },
        grep: function (a, b, c) {
            for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) d = !b(a[f], f), d !== h && e.push(a[f]);
            return e
        },
        map: function (a, b, c) {
            var d, f = 0,
                g = a.length,
                h = r(a),
                i = [];
            if (h)
                for (; g > f; f++) d = b(a[f], f, c), null != d && i.push(d);
            else
                for (f in a) d = b(a[f], f, c), null != d && i.push(d);
            return e.apply([], i)
        },
        guid: 1,
        proxy: function (a, b) {
            var c, e, f;
            return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function () {
                return a.apply(b || this, c.concat(d.call(arguments)))
            }, e.guid = a.guid = a.guid || m.guid++, e) : void 0
        },
        now: function () {
            return +new Date
        },
        support: k
    }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
        h["[object " + b + "]"] = b.toLowerCase()
    });

    function r(a) {
        var b = a.length,
            c = m.type(a);
        return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a
    }
    var s = function (a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date,
            v = a.document,
            w = 0,
            x = 0,
            y = hb(),
            z = hb(),
            A = hb(),
            B = function (a, b) {
                return a === b && (l = !0), 0
            },
            C = 1 << 31,
            D = {}.hasOwnProperty,
            E = [],
            F = E.pop,
            G = E.push,
            H = E.push,
            I = E.slice,
            J = function (a, b) {
                for (var c = 0, d = a.length; d > c; c++)
                    if (a[c] === b) return c;
                return -1
            },
            K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            L = "[\\x20\\t\\r\\n\\f]",
            M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            N = M.replace("w", "w#"),
            O = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + N + "))|)" + L + "*\\]",
            P = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + O + ")*)|.*)\\)|)",
            Q = new RegExp(L + "+", "g"),
            R = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
            S = new RegExp("^" + L + "*," + L + "*"),
            T = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
            U = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"),
            V = new RegExp(P),
            W = new RegExp("^" + N + "$"),
            X = {
                ID: new RegExp("^#(" + M + ")"),
                CLASS: new RegExp("^\\.(" + M + ")"),
                TAG: new RegExp("^(" + M.replace("w", "w*") + ")"),
                ATTR: new RegExp("^" + O),
                PSEUDO: new RegExp("^" + P),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + K + ")$", "i"),
                needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i")
            },
            Y = /^(?:input|select|textarea|button)$/i,
            Z = /^h\d$/i,
            $ = /^[^{]+\{\s*\[native \w/,
            _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            ab = /[+~]/,
            bb = /'|\\/g,
            cb = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"),
            db = function (a, b, c) {
                var d = "0x" + b - 65536;
                return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320)
            },
            eb = function () {
                m()
            };
        try {
            H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType
        } catch (fb) {
            H = {
                apply: E.length ? function (a, b) {
                    G.apply(a, I.call(b))
                } : function (a, b) {
                    var c = a.length,
                        d = 0;
                    while (a[c++] = b[d++]);
                    a.length = c - 1
                }
            }
        }

        function gb(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, "string" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;
            if (!e && p) {
                if (11 !== k && (f = _.exec(a)))
                    if (j = f[1]) {
                        if (9 === k) {
                            if (h = b.getElementById(j), !h || !h.parentNode) return d;
                            if (h.id === j) return d.push(h), d
                        } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d
                    } else {
                        if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;
                        if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), d
                    } if (c.qsa && (!q || !q.test(a))) {
                    if (s = r = u, w = b, x = 1 !== k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
                        o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;
                        while (l--) o[l] = s + rb(o[l]);
                        w = ab.test(a) && pb(b.parentNode) || b, x = o.join(",")
                    }
                    if (x) try {
                        return H.apply(d, w.querySelectorAll(x)), d
                    } catch (y) {} finally {
                        r || b.removeAttribute("id")
                    }
                }
            }
            return i(a.replace(R, "$1"), b, d, e)
        }

        function hb() {
            var a = [];

            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e
            }
            return b
        }

        function ib(a) {
            return a[u] = !0, a
        }

        function jb(a) {
            var b = n.createElement("div");
            try {
                return !!a(b)
            } catch (c) {
                return !1
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null
            }
        }

        function kb(a, b) {
            var c = a.split("|"),
                e = a.length;
            while (e--) d.attrHandle[c[e]] = b
        }

        function lb(a, b) {
            var c = b && a,
                d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);
            if (d) return d;
            if (c)
                while (c = c.nextSibling)
                    if (c === b) return -1;
            return a ? 1 : -1
        }

        function mb(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a
            }
        }

        function nb(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a
            }
        }

        function ob(a) {
            return ib(function (b) {
                return b = +b, ib(function (c, d) {
                    var e, f = a([], c.length, b),
                        g = f.length;
                    while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e]))
                })
            })
        }

        function pb(a) {
            return a && "undefined" != typeof a.getElementsByTagName && a
        }
        c = gb.support = {}, f = gb.isXML = function (a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return b ? "HTML" !== b.nodeName : !1
        }, m = gb.setDocument = function (a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener("unload", eb, !1) : e.attachEvent && e.attachEvent("onunload", eb)), p = !f(g), c.attributes = jb(function (a) {
                return a.className = "i", !a.getAttribute("className")
            }), c.getElementsByTagName = jb(function (a) {
                return a.appendChild(g.createComment("")), !a.getElementsByTagName("*").length
            }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = jb(function (a) {
                return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length
            }), c.getById ? (d.find.ID = function (a, b) {
                if ("undefined" != typeof b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [c] : []
                }
            }, d.filter.ID = function (a) {
                var b = a.replace(cb, db);
                return function (a) {
                    return a.getAttribute("id") === b
                }
            }) : (delete d.find.ID, d.filter.ID = function (a) {
                var b = a.replace(cb, db);
                return function (a) {
                    var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
                    return c && c.value === b
                }
            }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
                return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0
            } : function (a, b) {
                var c, d = [],
                    e = 0,
                    f = b.getElementsByTagName(a);
                if ("*" === a) {
                    while (c = f[e++]) 1 === c.nodeType && d.push(c);
                    return d
                }
                return f
            }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
                return p ? b.getElementsByClassName(a) : void 0
            }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (jb(function (a) {
                o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\f]' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]")
            }), jb(function (a) {
                var b = g.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:")
            })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && jb(function (a) {
                c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", P)
            }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a,
                    d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)))
            } : function (a, b) {
                if (b)
                    while (b = b.parentNode)
                        if (b === a) return !0;
                return !1
            }, B = b ? function (a, b) {
                if (a === b) return l = !0, 0;
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1)
            } : function (a, b) {
                if (a === b) return l = !0, 0;
                var c, d = 0,
                    e = a.parentNode,
                    f = b.parentNode,
                    h = [a],
                    i = [b];
                if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;
                if (e === f) return lb(a, b);
                c = a;
                while (c = c.parentNode) h.unshift(c);
                c = b;
                while (c = c.parentNode) i.unshift(c);
                while (h[d] === i[d]) d++;
                return d ? lb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0
            }, g) : n
        }, gb.matches = function (a, b) {
            return gb(a, null, null, b)
        }, gb.matchesSelector = function (a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
                var d = s.call(a, b);
                if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d
            } catch (e) {}
            return gb(b, n, null, [a]).length > 0
        }, gb.contains = function (a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b)
        }, gb.attr = function (a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()],
                f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
            return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null
        }, gb.error = function (a) {
            throw new Error("Syntax error, unrecognized expression: " + a)
        }, gb.uniqueSort = function (a) {
            var b, d = [],
                e = 0,
                f = 0;
            if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                while (b = a[f++]) b === a[f] && (e = d.push(f));
                while (e--) a.splice(d[e], 1)
            }
            return k = null, a
        }, e = gb.getText = function (a) {
            var b, c = "",
                d = 0,
                f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ("string" == typeof a.textContent) return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling) c += e(a)
                } else if (3 === f || 4 === f) return a.nodeValue
            } else
                while (b = a[d++]) c += e(b);
            return c
        }, d = gb.selectors = {
            cacheLength: 50,
            createPseudo: ib,
            match: X,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function (a) {
                    return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4)
                },
                CHILD: function (a) {
                    return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || gb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && gb.error(a[0]), a
                },
                PSEUDO: function (a) {
                    var b, c = !a[6] && a[2];
                    return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3))
                }
            },
            filter: {
                TAG: function (a) {
                    var b = a.replace(cb, db).toLowerCase();
                    return "*" === a ? function () {
                        return !0
                    } : function (a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b
                    }
                },
                CLASS: function (a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function (a) {
                        return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "")
                    })
                },
                ATTR: function (a, b, c) {
                    return function (d) {
                        var e = gb.attr(d, a);
                        return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(Q, " ") + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0
                    }
                },
                CHILD: function (a, b, c, d, e) {
                    var f = "nth" !== a.slice(0, 3),
                        g = "last" !== a.slice(-4),
                        h = "of-type" === b;
                    return 1 === d && 0 === e ? function (a) {
                        return !!a.parentNode
                    } : function (b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling",
                            q = b.parentNode,
                            r = h && b.nodeName.toLowerCase(),
                            s = !i && !h;
                        if (q) {
                            if (f) {
                                while (p) {
                                    l = b;
                                    while (l = l[p])
                                        if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                                    o = p = "only" === a && !o && "nextSibling"
                                }
                                return !0
                            }
                            if (o = [g ? q.firstChild : q.lastChild], g && s) {
                                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];
                                while (l = ++n && l && l[p] || (m = n = 0) || o.pop())
                                    if (1 === l.nodeType && ++m && l === b) {
                                        k[a] = [w, n, m];
                                        break
                                    }
                            } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];
                            else
                                while (l = ++n && l && l[p] || (m = n = 0) || o.pop())
                                    if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;
                            return m -= e, m === d || m % d === 0 && m / d >= 0
                        }
                    }
                },
                PSEUDO: function (a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || gb.error("unsupported pseudo: " + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ib(function (a, c) {
                        var d, f = e(a, b),
                            g = f.length;
                        while (g--) d = J(a, f[g]), a[d] = !(c[d] = f[g])
                    }) : function (a) {
                        return e(a, 0, c)
                    }) : e
                }
            },
            pseudos: {
                not: ib(function (a) {
                    var b = [],
                        c = [],
                        d = h(a.replace(R, "$1"));
                    return d[u] ? ib(function (a, b, c, e) {
                        var f, g = d(a, null, e, []),
                            h = a.length;
                        while (h--)(f = g[h]) && (a[h] = !(b[h] = f))
                    }) : function (a, e, f) {
                        return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop()
                    }
                }),
                has: ib(function (a) {
                    return function (b) {
                        return gb(a, b).length > 0
                    }
                }),
                contains: ib(function (a) {
                    return a = a.replace(cb, db),
                        function (b) {
                            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1
                        }
                }),
                lang: ib(function (a) {
                    return W.test(a || "") || gb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(),
                        function (b) {
                            var c;
                            do
                                if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType);
                            return !1
                        }
                }),
                target: function (b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id
                },
                root: function (a) {
                    return a === o
                },
                focus: function (a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex)
                },
                enabled: function (a) {
                    return a.disabled === !1
                },
                disabled: function (a) {
                    return a.disabled === !0
                },
                checked: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && !!a.checked || "option" === b && !!a.selected
                },
                selected: function (a) {
                    return a.parentNode && a.parentNode.selectedIndex, a.selected === !0
                },
                empty: function (a) {
                    for (a = a.firstChild; a; a = a.nextSibling)
                        if (a.nodeType < 6) return !1;
                    return !0
                },
                parent: function (a) {
                    return !d.pseudos.empty(a)
                },
                header: function (a) {
                    return Z.test(a.nodeName)
                },
                input: function (a) {
                    return Y.test(a.nodeName)
                },
                button: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && "button" === a.type || "button" === b
                },
                text: function (a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase())
                },
                first: ob(function () {
                    return [0]
                }),
                last: ob(function (a, b) {
                    return [b - 1]
                }),
                eq: ob(function (a, b, c) {
                    return [0 > c ? c + b : c]
                }),
                even: ob(function (a, b) {
                    for (var c = 0; b > c; c += 2) a.push(c);
                    return a
                }),
                odd: ob(function (a, b) {
                    for (var c = 1; b > c; c += 2) a.push(c);
                    return a
                }),
                lt: ob(function (a, b, c) {
                    for (var d = 0 > c ? c + b : c; --d >= 0;) a.push(d);
                    return a
                }),
                gt: ob(function (a, b, c) {
                    for (var d = 0 > c ? c + b : c; ++d < b;) a.push(d);
                    return a
                })
            }
        }, d.pseudos.nth = d.pseudos.eq;
        for (b in {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            }) d.pseudos[b] = mb(b);
        for (b in {
                submit: !0,
                reset: !0
            }) d.pseudos[b] = nb(b);

        function qb() {}
        qb.prototype = d.filters = d.pseudos, d.setFilters = new qb, g = gb.tokenize = function (a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k) return b ? 0 : k.slice(0);
            h = a, i = [], j = d.preFilter;
            while (h) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(R, " ")
                }), h = h.slice(c.length));
                for (g in d.filter) !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
                    value: c,
                    type: g,
                    matches: e
                }), h = h.slice(c.length));
                if (!c) break
            }
            return b ? h.length : h ? gb.error(a) : z(a, i).slice(0)
        };

        function rb(a) {
            for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
            return d
        }

        function sb(a, b, c) {
            var d = b.dir,
                e = c && "parentNode" === d,
                f = x++;
            return b.first ? function (b, c, f) {
                while (b = b[d])
                    if (1 === b.nodeType || e) return a(b, c, f)
            } : function (b, c, g) {
                var h, i, j = [w, f];
                if (g) {
                    while (b = b[d])
                        if ((1 === b.nodeType || e) && a(b, c, g)) return !0
                } else
                    while (b = b[d])
                        if (1 === b.nodeType || e) {
                            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
                            if (i[d] = j, j[2] = a(b, c, g)) return !0
                        }
            }
        }

        function tb(a) {
            return a.length > 1 ? function (b, c, d) {
                var e = a.length;
                while (e--)
                    if (!a[e](b, c, d)) return !1;
                return !0
            } : a[0]
        }

        function ub(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++) gb(a, b[d], c);
            return c
        }

        function vb(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)(f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
            return g
        }

        function wb(a, b, c, d, e, f) {
            return d && !d[u] && (d = wb(d)), e && !e[u] && (e = wb(e, f)), ib(function (f, g, h, i) {
                var j, k, l, m = [],
                    n = [],
                    o = g.length,
                    p = f || ub(b || "*", h.nodeType ? [h] : h, []),
                    q = !a || !f && b ? p : vb(p, m, a, h, i),
                    r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = vb(r, n), d(j, [], h, i), k = j.length;
                    while (k--)(l = j[k]) && (r[n[k]] = !(q[n[k]] = l))
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            while (k--)(l = r[k]) && j.push(q[k] = l);
                            e(null, r = [], j, i)
                        }
                        k = r.length;
                        while (k--)(l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l))
                    }
                } else r = vb(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r)
            })
        }

        function xb(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = sb(function (a) {
                    return a === b
                }, h, !0), l = sb(function (a) {
                    return J(b, a) > -1
                }, h, !0), m = [function (a, c, d) {
                    var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                    return b = null, e
                }]; f > i; i++)
                if (c = d.relative[a[i].type]) m = [sb(tb(m), c)];
                else {
                    if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                        for (e = ++i; f > e; e++)
                            if (d.relative[a[e].type]) break;
                        return wb(i > 1 && tb(m), i > 1 && rb(a.slice(0, i - 1).concat({
                            value: " " === a[i - 2].type ? "*" : ""
                        })).replace(R, "$1"), c, e > i && xb(a.slice(i, e)), f > e && xb(a = a.slice(e)), f > e && rb(a))
                    }
                    m.push(c)
                } return tb(m)
        }

        function yb(a, b) {
            var c = b.length > 0,
                e = a.length > 0,
                f = function (f, g, h, i, k) {
                    var l, m, o, p = 0,
                        q = "0",
                        r = f && [],
                        s = [],
                        t = j,
                        u = f || e && d.find.TAG("*", k),
                        v = w += null == t ? 1 : Math.random() || .1,
                        x = u.length;
                    for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                        if (e && l) {
                            m = 0;
                            while (o = a[m++])
                                if (o(l, g, h)) {
                                    i.push(l);
                                    break
                                } k && (w = v)
                        }
                        c && ((l = !o && l) && p--, f && r.push(l))
                    }
                    if (p += q, c && q !== p) {
                        m = 0;
                        while (o = b[m++]) o(r, s, g, h);
                        if (f) {
                            if (p > 0)
                                while (q--) r[q] || s[q] || (s[q] = F.call(i));
                            s = vb(s)
                        }
                        H.apply(i, s), k && !f && s.length > 0 && p + b.length > 1 && gb.uniqueSort(i)
                    }
                    return k && (w = v, j = t), r
                };
            return c ? ib(f) : f
        }
        return h = gb.compile = function (a, b) {
            var c, d = [],
                e = [],
                f = A[a + " "];
            if (!f) {
                b || (b = g(a)), c = b.length;
                while (c--) f = xb(b[c]), f[u] ? d.push(f) : e.push(f);
                f = A(a, yb(e, d)), f.selector = a
            }
            return f
        }, i = gb.select = function (a, b, e, f) {
            var i, j, k, l, m, n = "function" == typeof a && a,
                o = !f && g(a = n.selector || a);
            if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                    if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;
                    n && (b = b.parentNode), a = a.slice(j.shift().value.length)
                }
                i = X.needsContext.test(a) ? 0 : j.length;
                while (i--) {
                    if (k = j[i], d.relative[l = k.type]) break;
                    if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && pb(b.parentNode) || b))) {
                        if (j.splice(i, 1), a = f.length && rb(j), !a) return H.apply(e, f), e;
                        break
                    }
                }
            }
            return (n || h(a, o))(f, b, !p, e, ab.test(a) && pb(b.parentNode) || b), e
        }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = jb(function (a) {
            return 1 & a.compareDocumentPosition(n.createElement("div"))
        }), jb(function (a) {
            return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href")
        }) || kb("type|href|height|width", function (a, b, c) {
            return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2)
        }), c.attributes && jb(function (a) {
            return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value")
        }) || kb("value", function (a, b, c) {
            return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue
        }), jb(function (a) {
            return null == a.getAttribute("disabled")
        }) || kb(K, function (a, b, c) {
            var d;
            return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
        }), gb
    }(a);
    m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;
    var t = m.expr.match.needsContext,
        u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        v = /^.[^:#\[\.,]*$/;

    function w(a, b, c) {
        if (m.isFunction(b)) return m.grep(a, function (a, d) {
            return !!b.call(a, d, a) !== c
        });
        if (b.nodeType) return m.grep(a, function (a) {
            return a === b !== c
        });
        if ("string" == typeof b) {
            if (v.test(b)) return m.filter(b, a, c);
            b = m.filter(b, a)
        }
        return m.grep(a, function (a) {
            return m.inArray(a, b) >= 0 !== c
        })
    }
    m.filter = function (a, b, c) {
        var d = b[0];
        return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {
            return 1 === a.nodeType
        }))
    }, m.fn.extend({
        find: function (a) {
            var b, c = [],
                d = this,
                e = d.length;
            if ("string" != typeof a) return this.pushStack(m(a).filter(function () {
                for (b = 0; e > b; b++)
                    if (m.contains(d[b], this)) return !0
            }));
            for (b = 0; e > b; b++) m.find(a, d[b], c);
            return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c
        },
        filter: function (a) {
            return this.pushStack(w(this, a || [], !1))
        },
        not: function (a) {
            return this.pushStack(w(this, a || [], !0))
        },
        is: function (a) {
            return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length
        }
    });
    var x, y = a.document,
        z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
        A = m.fn.init = function (a, b) {
            var c, d;
            if (!a) return this;
            if ("string" == typeof a) {
                if (c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);
                if (c[1]) {
                    if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b))
                        for (c in b) m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                    return this
                }
                if (d = y.getElementById(c[2]), d && d.parentNode) {
                    if (d.id !== c[2]) return x.find(a);
                    this.length = 1, this[0] = d
                }
                return this.context = y, this.selector = a, this
            }
            return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? "undefined" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this))
        };
    A.prototype = m.fn, x = m(y);
    var B = /^(?:parents|prev(?:Until|All))/,
        C = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    m.extend({
        dir: function (a, b, c) {
            var d = [],
                e = a[b];
            while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) 1 === e.nodeType && d.push(e), e = e[b];
            return d
        },
        sibling: function (a, b) {
            for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
            return c
        }
    }), m.fn.extend({
        has: function (a) {
            var b, c = m(a, this),
                d = c.length;
            return this.filter(function () {
                for (b = 0; d > b; b++)
                    if (m.contains(this, c[b])) return !0
            })
        },
        closest: function (a, b) {
            for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++)
                for (c = this[d]; c && c !== b; c = c.parentNode)
                    if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                        f.push(c);
                        break
                    } return this.pushStack(f.length > 1 ? m.unique(f) : f)
        },
        index: function (a) {
            return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function (a, b) {
            return this.pushStack(m.unique(m.merge(this.get(), m(a, b))))
        },
        addBack: function (a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
        }
    });

    function D(a, b) {
        do a = a[b]; while (a && 1 !== a.nodeType);
        return a
    }
    m.each({
        parent: function (a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null
        },
        parents: function (a) {
            return m.dir(a, "parentNode")
        },
        parentsUntil: function (a, b, c) {
            return m.dir(a, "parentNode", c)
        },
        next: function (a) {
            return D(a, "nextSibling")
        },
        prev: function (a) {
            return D(a, "previousSibling")
        },
        nextAll: function (a) {
            return m.dir(a, "nextSibling")
        },
        prevAll: function (a) {
            return m.dir(a, "previousSibling")
        },
        nextUntil: function (a, b, c) {
            return m.dir(a, "nextSibling", c)
        },
        prevUntil: function (a, b, c) {
            return m.dir(a, "previousSibling", c)
        },
        siblings: function (a) {
            return m.sibling((a.parentNode || {}).firstChild, a)
        },
        children: function (a) {
            return m.sibling(a.firstChild)
        },
        contents: function (a) {
            return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes)
        }
    }, function (a, b) {
        m.fn[a] = function (c, d) {
            var e = m.map(this, b, c);
            return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e)
        }
    });
    var E = /\S+/g,
        F = {};

    function G(a) {
        var b = F[a] = {};
        return m.each(a.match(E) || [], function (a, c) {
            b[c] = !0
        }), b
    }
    m.Callbacks = function (a) {
        a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);
        var b, c, d, e, f, g, h = [],
            i = !a.once && [],
            j = function (l) {
                for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++)
                    if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                        c = !1;
                        break
                    } b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable())
            },
            k = {
                add: function () {
                    if (h) {
                        var d = h.length;
                        ! function f(b) {
                            m.each(b, function (b, c) {
                                var d = m.type(c);
                                "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c)
                            })
                        }(arguments), b ? e = h.length : c && (g = d, j(c))
                    }
                    return this
                },
                remove: function () {
                    return h && m.each(arguments, function (a, c) {
                        var d;
                        while ((d = m.inArray(c, h, d)) > -1) h.splice(d, 1), b && (e >= d && e--, f >= d && f--)
                    }), this
                },
                has: function (a) {
                    return a ? m.inArray(a, h) > -1 : !(!h || !h.length)
                },
                empty: function () {
                    return h = [], e = 0, this
                },
                disable: function () {
                    return h = i = c = void 0, this
                },
                disabled: function () {
                    return !h
                },
                lock: function () {
                    return i = void 0, c || k.disable(), this
                },
                locked: function () {
                    return !i
                },
                fireWith: function (a, c) {
                    return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this
                },
                fire: function () {
                    return k.fireWith(this, arguments), this
                },
                fired: function () {
                    return !!d
                }
            };
        return k
    }, m.extend({
        Deferred: function (a) {
            var b = [
                    ["resolve", "done", m.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", m.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", m.Callbacks("memory")]
                ],
                c = "pending",
                d = {
                    state: function () {
                        return c
                    },
                    always: function () {
                        return e.done(arguments).fail(arguments), this
                    },
                    then: function () {
                        var a = arguments;
                        return m.Deferred(function (c) {
                            m.each(b, function (b, f) {
                                var g = m.isFunction(a[b]) && a[b];
                                e[f[1]](function () {
                                    var a = g && g.apply(this, arguments);
                                    a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments)
                                })
                            }), a = null
                        }).promise()
                    },
                    promise: function (a) {
                        return null != a ? m.extend(a, d) : d
                    }
                },
                e = {};
            return d.pipe = d.then, m.each(b, function (a, f) {
                var g = f[2],
                    h = f[3];
                d[f[1]] = g.add, h && g.add(function () {
                    c = h
                }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
                    return e[f[0] + "With"](this === e ? d : this, arguments), this
                }, e[f[0] + "With"] = g.fireWith
            }), d.promise(e), a && a.call(e, e), e
        },
        when: function (a) {
            var b = 0,
                c = d.call(arguments),
                e = c.length,
                f = 1 !== e || a && m.isFunction(a.promise) ? e : 0,
                g = 1 === f ? a : m.Deferred(),
                h = function (a, b, c) {
                    return function (e) {
                        b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c)
                    }
                },
                i, j, k;
            if (e > 1)
                for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
            return f || g.resolveWith(k, c), g.promise()
        }
    });
    var H;
    m.fn.ready = function (a) {
        return m.ready.promise().done(a), this
    }, m.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function (a) {
            a ? m.readyWait++ : m.ready(!0)
        },
        ready: function (a) {
            if (a === !0 ? !--m.readyWait : !m.isReady) {
                if (!y.body) return setTimeout(m.ready);
                m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), m(y).off("ready")))
            }
        }
    });

    function I() {
        y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J))
    }

    function J() {
        (y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), m.ready())
    }
    m.ready.promise = function (b) {
        if (!H)
            if (H = m.Deferred(), "complete" === y.readyState) setTimeout(m.ready);
            else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), a.addEventListener("load", J, !1);
        else {
            y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);
            var c = !1;
            try {
                c = null == a.frameElement && y.documentElement
            } catch (d) {}
            c && c.doScroll && ! function e() {
                if (!m.isReady) {
                    try {
                        c.doScroll("left")
                    } catch (a) {
                        return setTimeout(e, 50)
                    }
                    I(), m.ready()
                }
            }()
        }
        return H.promise(b)
    };
    var K = "undefined",
        L;
    for (L in m(k)) break;
    k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function () {
            var a, b, c, d;
            c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d))
        }),
        function () {
            var a = y.createElement("div");
            if (null == k.deleteExpando) {
                k.deleteExpando = !0;
                try {
                    delete a.test
                } catch (b) {
                    k.deleteExpando = !1
                }
            }
            a = null
        }(), m.acceptData = function (a) {
            var b = m.noData[(a.nodeName + " ").toLowerCase()],
                c = +a.nodeType || 1;
            return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b
        };
    var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        N = /([A-Z])/g;

    function O(a, b, c) {
        if (void 0 === c && 1 === a.nodeType) {
            var d = "data-" + b.replace(N, "-$1").toLowerCase();
            if (c = a.getAttribute(d), "string" == typeof c) {
                try {
                    c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c
                } catch (e) {}
                m.data(a, b, c)
            } else c = void 0
        }
        return c
    }

    function P(a) {
        var b;
        for (b in a)
            if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
        return !0
    }

    function Q(a, b, d, e) {
        if (m.acceptData(a)) {
            var f, g, h = m.expando,
                i = a.nodeType,
                j = i ? m.cache : a,
                k = i ? a[h] : a[h] && h;
            if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : {
                toJSON: m.noop
            }), ("object" == typeof b || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f
        }
    }

    function R(a, b, c) {
        if (m.acceptData(a)) {
            var d, e, f = a.nodeType,
                g = f ? m.cache : a,
                h = f ? a[m.expando] : m.expando;
            if (g[h]) {
                if (b && (d = c ? g[h] : g[h].data)) {
                    m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length;
                    while (e--) delete d[b[e]];
                    if (c ? !P(d) : !m.isEmptyObject(d)) return
                }(c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null)
            }
        }
    }
    m.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function (a) {
            return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a)
        },
        data: function (a, b, c) {
            return Q(a, b, c)
        },
        removeData: function (a, b) {
            return R(a, b)
        },
        _data: function (a, b, c) {
            return Q(a, b, c, !0)
        },
        _removeData: function (a, b) {
            return R(a, b, !0)
        }
    }), m.fn.extend({
        data: function (a, b) {
            var c, d, e, f = this[0],
                g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {
                    c = g.length;
                    while (c--) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));
                    m._data(f, "parsedAttrs", !0)
                }
                return e
            }
            return "object" == typeof a ? this.each(function () {
                m.data(this, a)
            }) : arguments.length > 1 ? this.each(function () {
                m.data(this, a, b)
            }) : f ? O(f, a, m.data(f, a)) : void 0
        },
        removeData: function (a) {
            return this.each(function () {
                m.removeData(this, a)
            })
        }
    }), m.extend({
        queue: function (a, b, c) {
            var d;
            return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0
        },
        dequeue: function (a, b) {
            b = b || "fx";
            var c = m.queue(a, b),
                d = c.length,
                e = c.shift(),
                f = m._queueHooks(a, b),
                g = function () {
                    m.dequeue(a, b)
                };
            "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire()
        },
        _queueHooks: function (a, b) {
            var c = b + "queueHooks";
            return m._data(a, c) || m._data(a, c, {
                empty: m.Callbacks("once memory").add(function () {
                    m._removeData(a, b + "queue"), m._removeData(a, c)
                })
            })
        }
    }), m.fn.extend({
        queue: function (a, b) {
            var c = 2;
            return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {
                var c = m.queue(this, a, b);
                m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a)
            })
        },
        dequeue: function (a) {
            return this.each(function () {
                m.dequeue(this, a)
            })
        },
        clearQueue: function (a) {
            return this.queue(a || "fx", [])
        },
        promise: function (a, b) {
            var c, d = 1,
                e = m.Deferred(),
                f = this,
                g = this.length,
                h = function () {
                    --d || e.resolveWith(f, [f])
                };
            "string" != typeof a && (b = a, a = void 0), a = a || "fx";
            while (g--) c = m._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b)
        }
    });
    var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        T = ["Top", "Right", "Bottom", "Left"],
        U = function (a, b) {
            return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a)
        },
        V = m.access = function (a, b, c, d, e, f, g) {
            var h = 0,
                i = a.length,
                j = null == c;
            if ("object" === m.type(c)) {
                e = !0;
                for (h in c) m.access(a, b, h, c[h], !0, f, g)
            } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {
                    return j.call(m(a), c)
                })), b))
                for (; i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
            return e ? a : j ? b.call(a) : i ? b(a[0], c) : f
        },
        W = /^(?:checkbox|radio)$/i;
    ! function () {
        var a = y.createElement("input"),
            b = y.createElement("div"),
            c = y.createDocumentFragment();
        if (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent("onclick", function () {
                k.noCloneEvent = !1
            }), b.cloneNode(!0).click()), null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete b.test
            } catch (d) {
                k.deleteExpando = !1
            }
        }
    }(),
    function () {
        var b, c, d = y.createElement("div");
        for (b in {
                submit: !0,
                change: !0,
                focusin: !0
            }) c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = d.attributes[c].expando === !1);
        d = null
    }();
    var X = /^(?:input|select|textarea)$/i,
        Y = /^key/,
        Z = /^(?:mouse|pointer|contextmenu)|click/,
        $ = /^(?:focusinfocus|focusoutblur)$/,
        _ = /^([^.]*)(?:\.(.+)|)$/;

    function ab() {
        return !0
    }

    function bb() {
        return !1
    }

    function cb() {
        try {
            return y.activeElement
        } catch (a) {}
    }
    m.event = {
        global: {},
        add: function (a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m._data(a);
            if (r) {
                c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {
                    return typeof m === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments)
                }, k.elem = a), b = (b || "").match(E) || [""], h = b.length;
                while (h--) f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({
                    type: o,
                    origType: q,
                    data: d,
                    handler: c,
                    guid: c.guid,
                    selector: e,
                    needsContext: e && m.expr.match.needsContext.test(e),
                    namespace: p.join(".")
                }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);
                a = null
            }
        },
        remove: function (a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m.hasData(a) && m._data(a);
            if (r && (k = r.events)) {
                b = (b || "").match(E) || [""], j = b.length;
                while (j--)
                    if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
                        l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;
                        while (f--) g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
                        i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o])
                    } else
                        for (o in k) m.event.remove(a, o + b[j], c, d, !0);
                m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"))
            }
        },
        trigger: function (b, c, d, e) {
            var f, g, h, i, k, l, n, o = [d || y],
                p = j.call(b, "type") ? b.type : b,
                q = j.call(b, "namespace") ? b.namespace.split(".") : [];
            if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {
                if (!e && !k.noBubble && !m.isWindow(d)) {
                    for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), l = h;
                    l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a)
                }
                n = 0;
                while ((h = o[n++]) && !b.isPropagationStopped()) b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());
                if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {
                    l = d[g], l && (d[g] = null), m.event.triggered = p;
                    try {
                        d[p]()
                    } catch (r) {}
                    m.event.triggered = void 0, l && (d[g] = l)
                }
                return b.result
            }
        },
        dispatch: function (a) {
            a = m.event.fix(a);
            var b, c, e, f, g, h = [],
                i = d.call(arguments),
                j = (m._data(this, "events") || {})[a.type] || [],
                k = m.event.special[a.type] || {};
            if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
                h = m.event.handlers.call(this, a, j), b = 0;
                while ((f = h[b++]) && !a.isPropagationStopped()) {
                    a.currentTarget = f.elem, g = 0;
                    while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped())(!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()))
                }
                return k.postDispatch && k.postDispatch.call(this, a), a.result
            }
        },
        handlers: function (a, b) {
            var c, d, e, f, g = [],
                h = b.delegateCount,
                i = a.target;
            if (h && i.nodeType && (!a.button || "click" !== a.type))
                for (; i != this; i = i.parentNode || this)
                    if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
                        for (e = [], f = 0; h > f; f++) d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);
                        e.length && g.push({
                            elem: i,
                            handlers: e
                        })
                    } return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
            }), g
        },
        fix: function (a) {
            if (a[m.expando]) return a;
            var b, c, d, e = a.type,
                f = a,
                g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;
            while (b--) c = d[b], a[c] = f[c];
            return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function (a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function (a, b) {
                var c, d, e, f = b.button,
                    g = b.fromElement;
                return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function () {
                    if (this !== cb() && this.focus) try {
                        return this.focus(), !1
                    } catch (a) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function () {
                    return this === cb() && this.blur ? (this.blur(), !1) : void 0
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function () {
                    return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0
                },
                _default: function (a) {
                    return m.nodeName(a.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function (a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result)
                }
            }
        },
        simulate: function (a, b, c, d) {
            var e = m.extend(new m.Event, c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault()
        }
    }, m.removeEvent = y.removeEventListener ? function (a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1)
    } : function (a, b, c) {
        var d = "on" + b;
        a.detachEvent && (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c))
    }, m.Event = function (a, b) {
        return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void(this[m.expando] = !0)) : new m.Event(a, b)
    }, m.Event.prototype = {
        isDefaultPrevented: bb,
        isPropagationStopped: bb,
        isImmediatePropagationStopped: bb,
        preventDefault: function () {
            var a = this.originalEvent;
            this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1)
        },
        stopPropagation: function () {
            var a = this.originalEvent;
            this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0)
        },
        stopImmediatePropagation: function () {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation()
        }
    }, m.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function (a, b) {
        m.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function (a) {
                var c, d = this,
                    e = a.relatedTarget,
                    f = a.handleObj;
                return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c
            }
        }
    }), k.submitBubbles || (m.event.special.submit = {
        setup: function () {
            return m.nodeName(this, "form") ? !1 : void m.event.add(this, "click._submit keypress._submit", function (a) {
                var b = a.target,
                    c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;
                c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function (a) {
                    a._submit_bubble = !0
                }), m._data(c, "submitBubbles", !0))
            })
        },
        postDispatch: function (a) {
            a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0))
        },
        teardown: function () {
            return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit")
        }
    }), k.changeBubbles || (m.event.special.change = {
        setup: function () {
            return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function (a) {
                "checked" === a.originalEvent.propertyName && (this._just_changed = !0)
            }), m.event.add(this, "click._change", function (a) {
                this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0)
            })), !1) : void m.event.add(this, "beforeactivate._change", function (a) {
                var b = a.target;
                X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function (a) {
                    !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0)
                }), m._data(b, "changeBubbles", !0))
            })
        },
        handle: function (a) {
            var b = a.target;
            return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0
        },
        teardown: function () {
            return m.event.remove(this, "._change"), !X.test(this.nodeName)
        }
    }), k.focusinBubbles || m.each({
        focus: "focusin",
        blur: "focusout"
    }, function (a, b) {
        var c = function (a) {
            m.event.simulate(b, a.target, m.event.fix(a), !0)
        };
        m.event.special[b] = {
            setup: function () {
                var d = this.ownerDocument || this,
                    e = m._data(d, b);
                e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1)
            },
            teardown: function () {
                var d = this.ownerDocument || this,
                    e = m._data(d, b) - 1;
                e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b))
            }
        }
    }), m.fn.extend({
        on: function (a, b, c, d, e) {
            var f, g;
            if ("object" == typeof a) {
                "string" != typeof b && (c = c || b, b = void 0);
                for (f in a) this.on(f, b, c, a[f], e);
                return this
            }
            if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = bb;
            else if (!d) return this;
            return 1 === e && (g = d, d = function (a) {
                return m().off(a), g.apply(this, arguments)
            }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {
                m.event.add(this, a, d, c, b)
            })
        },
        one: function (a, b, c, d) {
            return this.on(a, b, c, d, 1)
        },
        off: function (a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
            if ("object" == typeof a) {
                for (e in a) this.off(e, b, a[e]);
                return this
            }
            return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function () {
                m.event.remove(this, a, c, b)
            })
        },
        trigger: function (a, b) {
            return this.each(function () {
                m.event.trigger(a, b, this)
            })
        },
        triggerHandler: function (a, b) {
            var c = this[0];
            return c ? m.event.trigger(a, b, c, !0) : void 0
        }
    });

    function db(a) {
        var b = eb.split("|"),
            c = a.createDocumentFragment();
        if (c.createElement)
            while (b.length) c.createElement(b.pop());
        return c
    }
    var eb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        fb = / jQuery\d+="(?:null|\d+)"/g,
        gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"),
        hb = /^\s+/,
        ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        jb = /<([\w:]+)/,
        kb = /<tbody/i,
        lb = /<|&#?\w+;/,
        mb = /<(?:script|style|link)/i,
        nb = /checked\s*(?:[^=]|=\s*.checked.)/i,
        ob = /^$|\/(?:java|ecma)script/i,
        pb = /^true\/(.*)/,
        qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        rb = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            area: [1, "<map>", "</map>"],
            param: [1, "<object>", "</object>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
        },
        sb = db(y),
        tb = sb.appendChild(y.createElement("div"));
    rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;

    function ub(a, b) {
        var c, d, e = 0,
            f = typeof a.getElementsByTagName !== K ? a.getElementsByTagName(b || "*") : typeof a.querySelectorAll !== K ? a.querySelectorAll(b || "*") : void 0;
        if (!f)
            for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));
        return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f
    }

    function vb(a) {
        W.test(a.type) && (a.defaultChecked = a.checked)
    }

    function wb(a, b) {
        return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
    }

    function xb(a) {
        return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a
    }

    function yb(a) {
        var b = pb.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute("type"), a
    }

    function zb(a, b) {
        for (var c, d = 0; null != (c = a[d]); d++) m._data(c, "globalEval", !b || m._data(b[d], "globalEval"))
    }

    function Ab(a, b) {
        if (1 === b.nodeType && m.hasData(a)) {
            var c, d, e, f = m._data(a),
                g = m._data(b, f),
                h = f.events;
            if (h) {
                delete g.handle, g.events = {};
                for (c in h)
                    for (d = 0, e = h[c].length; e > d; d++) m.event.add(b, c, h[c][d])
            }
            g.data && (g.data = m.extend({}, g.data))
        }
    }

    function Bb(a, b) {
        var c, d, e;
        if (1 === b.nodeType) {
            if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {
                e = m._data(b);
                for (d in e.events) m.removeEvent(b, d, e.handle);
                b.removeAttribute(m.expando)
            }
            "script" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue)
        }
    }
    m.extend({
        clone: function (a, b, c) {
            var d, e, f, g, h, i = m.contains(a.ownerDocument, a);
            if (k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a)))
                for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) d[g] && Bb(e, d[g]);
            if (b)
                if (c)
                    for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) Ab(e, d[g]);
                else Ab(a, f);
            return d = ub(f, "script"), d.length > 0 && zb(d, !i && ub(a, "script")), d = h = e = null, f
        },
        buildFragment: function (a, b, c, d) {
            for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++)
                if (f = a[q], f || 0 === f)
                    if ("object" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);
                    else if (lb.test(f)) {
                h = h || o.appendChild(b.createElement("div")), i = (jb.exec(f) || ["", ""])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2], e = l[0];
                while (e--) h = h.lastChild;
                if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody) {
                    f = "table" !== i || kb.test(f) ? "<table>" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;
                    while (e--) m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j)
                }
                m.merge(p, h.childNodes), h.textContent = "";
                while (h.firstChild) h.removeChild(h.firstChild);
                h = o.lastChild
            } else p.push(b.createTextNode(f));
            h && o.removeChild(h), k.appendChecked || m.grep(ub(p, "input"), vb), q = 0;
            while (f = p[q++])
                if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), "script"), g && zb(h), c)) {
                    e = 0;
                    while (f = h[e++]) ob.test(f.type || "") && c.push(f)
                } return h = null, o
        },
        cleanData: function (a, b) {
            for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++)
                if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {
                    if (g.events)
                        for (e in g.events) n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
                    j[f] && (delete j[f], l ? delete d[i] : typeof d.removeAttribute !== K ? d.removeAttribute(i) : d[i] = null, c.push(f))
                }
        }
    }), m.fn.extend({
        text: function (a) {
            return V(this, function (a) {
                return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a))
            }, null, a, arguments.length)
        },
        append: function () {
            return this.domManip(arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.appendChild(a)
                }
            })
        },
        prepend: function () {
            return this.domManip(arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.insertBefore(a, b.firstChild)
                }
            })
        },
        before: function () {
            return this.domManip(arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this)
            })
        },
        after: function () {
            return this.domManip(arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling)
            })
        },
        remove: function (a, b) {
            for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")), c.parentNode.removeChild(c));
            return this
        },
        empty: function () {
            for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && m.cleanData(ub(a, !1));
                while (a.firstChild) a.removeChild(a.firstChild);
                a.options && m.nodeName(a, "select") && (a.options.length = 0)
            }
            return this
        },
        clone: function (a, b) {
            return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
                return m.clone(this, a, b)
            })
        },
        html: function (a) {
            return V(this, function (a) {
                var b = this[0] || {},
                    c = 0,
                    d = this.length;
                if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;
                if (!("string" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || ["", ""])[1].toLowerCase()])) {
                    a = a.replace(ib, "<$1></$2>");
                    try {
                        for (; d > c; c++) b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);
                        b = 0
                    } catch (e) {}
                }
                b && this.empty().append(a)
            }, null, a, arguments.length)
        },
        replaceWith: function () {
            var a = arguments[0];
            return this.domManip(arguments, function (b) {
                a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this)
            }), a && (a.length || a.nodeType) ? this : this.remove()
        },
        detach: function (a) {
            return this.remove(a, !0)
        },
        domManip: function (a, b) {
            a = e.apply([], a);
            var c, d, f, g, h, i, j = 0,
                l = this.length,
                n = this,
                o = l - 1,
                p = a[0],
                q = m.isFunction(p);
            if (q || l > 1 && "string" == typeof p && !k.checkClone && nb.test(p)) return this.each(function (c) {
                var d = n.eq(c);
                q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b)
            });
            if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {
                for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, "script"))), b.call(this[j], d, j);
                if (f)
                    for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) d = g[j], ob.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qb, "")));
                i = c = null
            }
            return this
        }
    }), m.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (a, b) {
        m.fn[a] = function (a) {
            for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());
            return this.pushStack(e)
        }
    });
    var Cb, Db = {};

    function Eb(b, c) {
        var d, e = m(c.createElement(b)).appendTo(c.body),
            f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");
        return e.detach(), f
    }

    function Fb(a) {
        var b = y,
            c = Db[a];
        return c || (c = Eb(a, b), "none" !== c && c || (Cb = (Cb || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c
    }! function () {
        var a;
        k.shrinkWrapBlocks = function () {
            if (null != a) return a;
            a = !1;
            var b, c, d;
            return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0
        }
    }();
    var Gb = /^margin/,
        Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"),
        Ib, Jb, Kb = /^(top|right|bottom|left)$/;
    a.getComputedStyle ? (Ib = function (b) {
        return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null)
    }, Jb = function (a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + ""
    }) : y.documentElement.currentStyle && (Ib = function (a) {
        return a.currentStyle
    }, Jb = function (a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto"
    });

    function Lb(a, b) {
        return {
            get: function () {
                var c = a();
                if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments)
            }
        }
    }! function () {
        var b, c, d, e, f, g, h;
        if (b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = d && d.style) {
            c.cssText = "float:left;opacity:.5", k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, m.extend(k, {
                reliableHiddenOffsets: function () {
                    return null == g && i(), g
                },
                boxSizingReliable: function () {
                    return null == f && i(), f
                },
                pixelPosition: function () {
                    return null == e && i(), e
                },
                reliableMarginRight: function () {
                    return null == h && i(), h
                }
            });

            function i() {
                var b, c, d, i;
                c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, f = "4px" === (a.getComputedStyle(b, null) || {
                    width: "4px"
                }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight), b.removeChild(i)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", g = 0 === i[0].offsetHeight), c.removeChild(d))
            }
        }
    }(), m.swap = function (a, b, c, d) {
        var e, f, g = {};
        for (f in b) g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b) a.style[f] = g[f];
        return e
    };
    var Mb = /alpha\([^)]*\)/i,
        Nb = /opacity\s*=\s*([^)]*)/,
        Ob = /^(none|table(?!-c[ea]).+)/,
        Pb = new RegExp("^(" + S + ")(.*)$", "i"),
        Qb = new RegExp("^([+-])=(" + S + ")", "i"),
        Rb = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Sb = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        Tb = ["Webkit", "O", "Moz", "ms"];

    function Ub(a, b) {
        if (b in a) return b;
        var c = b.charAt(0).toUpperCase() + b.slice(1),
            d = b,
            e = Tb.length;
        while (e--)
            if (b = Tb[e] + c, b in a) return b;
        return d
    }

    function Vb(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fb(d.nodeName)))) : (e = U(d), (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
        for (g = 0; h > g; g++) d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
        return a
    }

    function Wb(a, b, c) {
        var d = Pb.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b
    }

    function Xb(a, b, c, d, e) {
        for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) "margin" === c && (g += m.css(a, c + T[f], !0, e)), d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));
        return g
    }

    function Yb(a, b, c) {
        var d = !0,
            e = "width" === b ? a.offsetWidth : a.offsetHeight,
            f = Ib(a),
            g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);
        if (0 >= e || null == e) {
            if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e)) return e;
            d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0
        }
        return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px"
    }
    m.extend({
        cssHooks: {
            opacity: {
                get: function (a, b) {
                    if (b) {
                        var c = Jb(a, "opacity");
                        return "" === c ? "1" : c
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": k.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function (a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = m.camelCase(b),
                    i = a.style;
                if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
                if (f = typeof c, "string" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try {
                    i[b] = c
                } catch (j) {}
            }
        },
        css: function (a, b, c, d) {
            var e, f, g, h = m.camelCase(b);
            return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), "normal" === f && b in Sb && (f = Sb[b]), "" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f
        }
    }), m.each(["height", "width"], function (a, b) {
        m.cssHooks[b] = {
            get: function (a, c, d) {
                return c ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Rb, function () {
                    return Yb(a, b, d)
                }) : Yb(a, b, d) : void 0
            },
            set: function (a, c, d) {
                var e = d && Ib(a);
                return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0)
            }
        }
    }), k.opacity || (m.cssHooks.opacity = {
        get: function (a, b) {
            return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : ""
        },
        set: function (a, b) {
            var c = a.style,
                d = a.currentStyle,
                e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
                f = d && d.filter || c.filter || "";
            c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Mb, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e)
        }
    }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {
        return b ? m.swap(a, {
            display: "inline-block"
        }, Jb, [a, "marginRight"]) : void 0
    }), m.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (a, b) {
        m.cssHooks[a + b] = {
            expand: function (c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
                return e
            }
        }, Gb.test(a) || (m.cssHooks[a + b].set = Wb)
    }), m.fn.extend({
        css: function (a, b) {
            return V(this, function (a, b, c) {
                var d, e, f = {},
                    g = 0;
                if (m.isArray(b)) {
                    for (d = Ib(a), e = b.length; e > g; g++) f[b[g]] = m.css(a, b[g], !1, d);
                    return f
                }
                return void 0 !== c ? m.style(a, b, c) : m.css(a, b)
            }, a, b, arguments.length > 1)
        },
        show: function () {
            return Vb(this, !0)
        },
        hide: function () {
            return Vb(this)
        },
        toggle: function (a) {
            return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
                U(this) ? m(this).show() : m(this).hide()
            })
        }
    });

    function Zb(a, b, c, d, e) {
        return new Zb.prototype.init(a, b, c, d, e)
    }
    m.Tween = Zb, Zb.prototype = {
        constructor: Zb,
        init: function (a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px")
        },
        cur: function () {
            var a = Zb.propHooks[this.prop];
            return a && a.get ? a.get(this) : Zb.propHooks._default.get(this)
        },
        run: function (a) {
            var b, c = Zb.propHooks[this.prop];
            return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this
        }
    }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = {
        _default: {
            get: function (a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop]
            },
            set: function (a) {
                m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now
            }
        }
    }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {
        set: function (a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now)
        }
    }, m.easing = {
        linear: function (a) {
            return a
        },
        swing: function (a) {
            return .5 - Math.cos(a * Math.PI) / 2
        }
    }, m.fx = Zb.prototype.init, m.fx.step = {};
    var $b, _b, ac = /^(?:toggle|show|hide)$/,
        bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"),
        cc = /queueHooks$/,
        dc = [ic],
        ec = {
            "*": [function (a, b) {
                var c = this.createTween(a, b),
                    d = c.cur(),
                    e = bc.exec(b),
                    f = e && e[3] || (m.cssNumber[a] ? "" : "px"),
                    g = (m.cssNumber[a] || "px" !== f && +d) && bc.exec(m.css(c.elem, a)),
                    h = 1,
                    i = 20;
                if (g && g[3] !== f) {
                    f = f || g[3], e = e || [], g = +d || 1;
                    do h = h || ".5", g /= h, m.style(c.elem, a, g + f); while (h !== (h = c.cur() / d) && 1 !== h && --i)
                }
                return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c
            }]
        };

    function fc() {
        return setTimeout(function () {
            $b = void 0
        }), $b = m.now()
    }

    function gc(a, b) {
        var c, d = {
                height: a
            },
            e = 0;
        for (b = b ? 1 : 0; 4 > e; e += 2 - b) c = T[e], d["margin" + c] = d["padding" + c] = a;
        return b && (d.opacity = d.width = a), d
    }

    function hc(a, b, c) {
        for (var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length; g > f; f++)
            if (d = e[f].call(c, b, a)) return d
    }

    function ic(a, b, c) {
        var d, e, f, g, h, i, j, l, n = this,
            o = {},
            p = a.style,
            q = a.nodeType && U(a),
            r = m._data(a, "fxshow");
        c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
            h.unqueued || i()
        }), h.unqueued++, n.always(function () {
            n.always(function () {
                h.unqueued--, m.queue(a, "fx").length || h.empty.fire()
            })
        })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, "display"), l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j, "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function () {
            p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2]
        }));
        for (d in b)
            if (e = b[d], ac.exec(e)) {
                if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) {
                    if ("show" !== e || !r || void 0 === r[d]) continue;
                    q = !0
                }
                o[d] = r && r[d] || m.style(a, d)
            } else j = void 0;
        if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j);
        else {
            r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {
                m(a).hide()
            }), n.done(function () {
                var b;
                m._removeData(a, "fxshow");
                for (b in o) m.style(a, b, o[b])
            });
            for (d in o) g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0))
        }
    }

    function jc(a, b) {
        var c, d, e, f, g;
        for (c in a)
            if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && "expand" in g) {
                f = g.expand(f), delete a[d];
                for (c in f) c in a || (a[c] = f[c], b[c] = e)
            } else b[d] = e
    }

    function kc(a, b, c) {
        var d, e, f = 0,
            g = dc.length,
            h = m.Deferred().always(function () {
                delete i.elem
            }),
            i = function () {
                if (e) return !1;
                for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) j.tweens[g].run(f);
                return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1)
            },
            j = h.promise({
                elem: a,
                props: m.extend({}, b),
                opts: m.extend(!0, {
                    specialEasing: {}
                }, c),
                originalProperties: b,
                originalOptions: c,
                startTime: $b || fc(),
                duration: c.duration,
                tweens: [],
                createTween: function (b, c) {
                    var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                    return j.tweens.push(d), d
                },
                stop: function (b) {
                    var c = 0,
                        d = b ? j.tweens.length : 0;
                    if (e) return this;
                    for (e = !0; d > c; c++) j.tweens[c].run(1);
                    return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this
                }
            }),
            k = j.props;
        for (jc(k, j.opts.specialEasing); g > f; f++)
            if (d = dc[f].call(j, a, k, j.opts)) return d;
        return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always)
    }
    m.Animation = m.extend(kc, {
            tweener: function (a, b) {
                m.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");
                for (var c, d = 0, e = a.length; e > d; d++) c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b)
            },
            prefilter: function (a, b) {
                b ? dc.unshift(a) : dc.push(a)
            }
        }), m.speed = function (a, b, c) {
            var d = a && "object" == typeof a ? m.extend({}, a) : {
                complete: c || !c && b || m.isFunction(a) && a,
                duration: a,
                easing: c && b || b && !m.isFunction(b) && b
            };
            return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {
                m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue)
            }, d
        }, m.fn.extend({
            fadeTo: function (a, b, c, d) {
                return this.filter(U).css("opacity", 0).show().end().animate({
                    opacity: b
                }, a, c, d)
            },
            animate: function (a, b, c, d) {
                var e = m.isEmptyObject(a),
                    f = m.speed(b, c, d),
                    g = function () {
                        var b = kc(this, m.extend({}, a), f);
                        (e || m._data(this, "finish")) && b.stop(!0)
                    };
                return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
            },
            stop: function (a, b, c) {
                var d = function (a) {
                    var b = a.stop;
                    delete a.stop, b(c)
                };
                return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
                    var b = !0,
                        e = null != a && a + "queueHooks",
                        f = m.timers,
                        g = m._data(this);
                    if (e) g[e] && g[e].stop && d(g[e]);
                    else
                        for (e in g) g[e] && g[e].stop && cc.test(e) && d(g[e]);
                    for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
                    (b || !c) && m.dequeue(this, a)
                })
            },
            finish: function (a) {
                return a !== !1 && (a = a || "fx"), this.each(function () {
                    var b, c = m._data(this),
                        d = c[a + "queue"],
                        e = c[a + "queueHooks"],
                        f = m.timers,
                        g = d ? d.length : 0;
                    for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                    for (b = 0; g > b; b++) d[b] && d[b].finish && d[b].finish.call(this);
                    delete c.finish
                })
            }
        }), m.each(["toggle", "show", "hide"], function (a, b) {
            var c = m.fn[b];
            m.fn[b] = function (a, d, e) {
                return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e)
            }
        }), m.each({
            slideDown: gc("show"),
            slideUp: gc("hide"),
            slideToggle: gc("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function (a, b) {
            m.fn[a] = function (a, c, d) {
                return this.animate(b, a, c, d)
            }
        }), m.timers = [], m.fx.tick = function () {
            var a, b = m.timers,
                c = 0;
            for ($b = m.now(); c < b.length; c++) a = b[c], a() || b[c] !== a || b.splice(c--, 1);
            b.length || m.fx.stop(), $b = void 0
        }, m.fx.timer = function (a) {
            m.timers.push(a), a() ? m.fx.start() : m.timers.pop()
        }, m.fx.interval = 13, m.fx.start = function () {
            _b || (_b = setInterval(m.fx.tick, m.fx.interval))
        }, m.fx.stop = function () {
            clearInterval(_b), _b = null
        }, m.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        }, m.fn.delay = function (a, b) {
            return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
                var d = setTimeout(b, a);
                c.stop = function () {
                    clearTimeout(d)
                }
            })
        },
        function () {
            var a, b, c, d, e;
            b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), k.radioValue = "t" === a.value
        }();
    var lc = /\r/g;
    m.fn.extend({
        val: function (a) {
            var b, c, d, e = this[0]; {
                if (arguments.length) return d = m.isFunction(a), this.each(function (c) {
                    var e;
                    1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function (a) {
                        return null == a ? "" : a + ""
                    })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e))
                });
                if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c)
            }
        }
    }), m.extend({
        valHooks: {
            option: {
                get: function (a) {
                    var b = m.find.attr(a, "value");
                    return null != b ? b : m.trim(m.text(a))
                }
            },
            select: {
                get: function (a) {
                    for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)
                        if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))) {
                            if (b = m(c).val(), f) return b;
                            g.push(b)
                        } return g
                },
                set: function (a, b) {
                    var c, d, e = a.options,
                        f = m.makeArray(b),
                        g = e.length;
                    while (g--)
                        if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0) try {
                            d.selected = c = !0
                        } catch (h) {
                            d.scrollHeight
                        } else d.selected = !1;
                    return c || (a.selectedIndex = -1), e
                }
            }
        }
    }), m.each(["radio", "checkbox"], function () {
        m.valHooks[this] = {
            set: function (a, b) {
                return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0
            }
        }, k.checkOn || (m.valHooks[this].get = function (a) {
            return null === a.getAttribute("value") ? "on" : a.value
        })
    });
    var mc, nc, oc = m.expr.attrHandle,
        pc = /^(?:checked|selected)$/i,
        qc = k.getSetAttribute,
        rc = k.input;
    m.fn.extend({
        attr: function (a, b) {
            return V(this, m.attr, a, b, arguments.length > 1)
        },
        removeAttr: function (a) {
            return this.each(function () {
                m.removeAttr(this, a)
            })
        }
    }), m.extend({
        attr: function (a, b, c) {
            var d, e, f = a.nodeType;
            if (a && 3 !== f && 8 !== f && 2 !== f) return typeof a.getAttribute === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void m.removeAttr(a, b))
        },
        removeAttr: function (a, b) {
            var c, d, e = 0,
                f = b && b.match(E);
            if (f && 1 === a.nodeType)
                while (c = f[e++]) d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), a.removeAttribute(qc ? c : d)
        },
        attrHooks: {
            type: {
                set: function (a, b) {
                    if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b
                    }
                }
            }
        }
    }), nc = {
        set: function (a, b, c) {
            return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, c
        }
    }, m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {
        var c = oc[b] || m.find.attr;
        oc[b] = rc && qc || !pc.test(b) ? function (a, b, d) {
            var e, f;
            return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e
        } : function (a, b, c) {
            return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null
        }
    }), rc && qc || (m.attrHooks.value = {
        set: function (a, b, c) {
            return m.nodeName(a, "input") ? void(a.defaultValue = b) : mc && mc.set(a, b, c)
        }
    }), qc || (mc = {
        set: function (a, b, c) {
            var d = a.getAttributeNode(c);
            return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0
        }
    }, oc.id = oc.name = oc.coords = function (a, b, c) {
        var d;
        return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null
    }, m.valHooks.button = {
        get: function (a, b) {
            var c = a.getAttributeNode(b);
            return c && c.specified ? c.value : void 0
        },
        set: mc.set
    }, m.attrHooks.contenteditable = {
        set: function (a, b, c) {
            mc.set(a, "" === b ? !1 : b, c)
        }
    }, m.each(["width", "height"], function (a, b) {
        m.attrHooks[b] = {
            set: function (a, c) {
                return "" === c ? (a.setAttribute(b, "auto"), c) : void 0
            }
        }
    })), k.style || (m.attrHooks.style = {
        get: function (a) {
            return a.style.cssText || void 0
        },
        set: function (a, b) {
            return a.style.cssText = b + ""
        }
    });
    var sc = /^(?:input|select|textarea|button|object)$/i,
        tc = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function (a, b) {
            return V(this, m.prop, a, b, arguments.length > 1)
        },
        removeProp: function (a) {
            return a = m.propFix[a] || a, this.each(function () {
                try {
                    this[a] = void 0, delete this[a]
                } catch (b) {}
            })
        }
    }), m.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function (a, b, c) {
            var d, e, f, g = a.nodeType;
            if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]
        },
        propHooks: {
            tabIndex: {
                get: function (a) {
                    var b = m.find.attr(a, "tabindex");
                    return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1
                }
            }
        }
    }), k.hrefNormalized || m.each(["href", "src"], function (a, b) {
        m.propHooks[b] = {
            get: function (a) {
                return a.getAttribute(b, 4)
            }
        }
    }), k.optSelected || (m.propHooks.selected = {
        get: function (a) {
            var b = a.parentNode;
            return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null
        }
    }), m.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        m.propFix[this.toLowerCase()] = this
    }), k.enctype || (m.propFix.enctype = "encoding");
    var uc = /[\t\r\n\f]/g;
    m.fn.extend({
        addClass: function (a) {
            var b, c, d, e, f, g, h = 0,
                i = this.length,
                j = "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function (b) {
                m(this).addClass(a.call(this, b, this.className))
            });
            if (j)
                for (b = (a || "").match(E) || []; i > h; h++)
                    if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : " ")) {
                        f = 0;
                        while (e = b[f++]) d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                        g = m.trim(d), c.className !== g && (c.className = g)
                    } return this
        },
        removeClass: function (a) {
            var b, c, d, e, f, g, h = 0,
                i = this.length,
                j = 0 === arguments.length || "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function (b) {
                m(this).removeClass(a.call(this, b, this.className))
            });
            if (j)
                for (b = (a || "").match(E) || []; i > h; h++)
                    if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : "")) {
                        f = 0;
                        while (e = b[f++])
                            while (d.indexOf(" " + e + " ") >= 0) d = d.replace(" " + e + " ", " ");
                        g = a ? m.trim(d) : "", c.className !== g && (c.className = g)
                    } return this
        },
        toggleClass: function (a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {
                m(this).toggleClass(a.call(this, c, this.className, b), b)
            } : function () {
                if ("string" === c) {
                    var b, d = 0,
                        e = m(this),
                        f = a.match(E) || [];
                    while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b)
                } else(c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || "")
            })
        },
        hasClass: function (a) {
            for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++)
                if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0) return !0;
            return !1
        }
    }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
        m.fn[b] = function (a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
        }
    }), m.fn.extend({
        hover: function (a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        },
        bind: function (a, b, c) {
            return this.on(a, null, b, c)
        },
        unbind: function (a, b) {
            return this.off(a, null, b)
        },
        delegate: function (a, b, c, d) {
            return this.on(b, a, c, d)
        },
        undelegate: function (a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c)
        }
    });
    var vc = m.now(),
        wc = /\?/,
        xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    m.parseJSON = function (b) {
        if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
        var c, d = null,
            e = m.trim(b + "");
        return e && !m.trim(e.replace(xc, function (a, b, e, f) {
            return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "")
        })) ? Function("return " + e)() : m.error("Invalid JSON: " + b)
    }, m.parseXML = function (b) {
        var c, d;
        if (!b || "string" != typeof b) return null;
        try {
            a.DOMParser ? (d = new DOMParser, c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b))
        } catch (e) {
            c = void 0
        }
        return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), c
    };
    var yc, zc, Ac = /#.*$/,
        Bc = /([?&])_=[^&]*/,
        Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
        Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Ec = /^(?:GET|HEAD)$/,
        Fc = /^\/\//,
        Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
        Hc = {},
        Ic = {},
        Jc = "*/".concat("*");
    try {
        zc = location.href
    } catch (Kc) {
        zc = y.createElement("a"), zc.href = "", zc = zc.href
    }
    yc = Gc.exec(zc.toLowerCase()) || [];

    function Lc(a) {
        return function (b, c) {
            "string" != typeof b && (c = b, b = "*");
            var d, e = 0,
                f = b.toLowerCase().match(E) || [];
            if (m.isFunction(c))
                while (d = f[e++]) "+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c)
        }
    }

    function Mc(a, b, c, d) {
        var e = {},
            f = a === Ic;

        function g(h) {
            var i;
            return e[h] = !0, m.each(a[h] || [], function (a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1)
            }), i
        }
        return g(b.dataTypes[0]) || !e["*"] && g("*")
    }

    function Nc(a, b) {
        var c, d, e = m.ajaxSettings.flatOptions || {};
        for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
        return c && m.extend(!0, a, c), a
    }

    function Oc(a, b, c) {
        var d, e, f, g, h = a.contents,
            i = a.dataTypes;
        while ("*" === i[0]) i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
        if (e)
            for (g in h)
                if (h[g] && h[g].test(e)) {
                    i.unshift(g);
                    break
                } if (i[0] in c) f = i[0];
        else {
            for (g in c) {
                if (!i[0] || a.converters[g + " " + i[0]]) {
                    f = g;
                    break
                }
                d || (d = g)
            }
            f = f || d
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0
    }

    function Pc(a, b, c, d) {
        var e, f, g, h, i, j = {},
            k = a.dataTypes.slice();
        if (k[1])
            for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        while (f)
            if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())
                if ("*" === f) f = i;
                else if ("*" !== i && i !== f) {
            if (g = j[i + " " + f] || j["* " + f], !g)
                for (e in j)
                    if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                        g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                        break
                    } if (g !== !0)
                if (g && a["throws"]) b = g(b);
                else try {
                    b = g(b)
                } catch (l) {
                    return {
                        state: "parsererror",
                        error: g ? l : "No conversion from " + i + " to " + f
                    }
                }
        }
        return {
            state: "success",
            data: b
        }
    }
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: zc,
            type: "GET",
            isLocal: Dc.test(yc[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Jc,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": m.parseJSON,
                "text xml": m.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function (a, b) {
            return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a)
        },
        ajaxPrefilter: Lc(Hc),
        ajaxTransport: Lc(Ic),
        ajax: function (a, b) {
            "object" == typeof a && (b = a, a = void 0), b = b || {};
            var c, d, e, f, g, h, i, j, k = m.ajaxSetup({}, b),
                l = k.context || k,
                n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,
                o = m.Deferred(),
                p = m.Callbacks("once memory"),
                q = k.statusCode || {},
                r = {},
                s = {},
                t = 0,
                u = "canceled",
                v = {
                    readyState: 0,
                    getResponseHeader: function (a) {
                        var b;
                        if (2 === t) {
                            if (!j) {
                                j = {};
                                while (b = Cc.exec(f)) j[b[1].toLowerCase()] = b[2]
                            }
                            b = j[a.toLowerCase()]
                        }
                        return null == b ? null : b
                    },
                    getAllResponseHeaders: function () {
                        return 2 === t ? f : null
                    },
                    setRequestHeader: function (a, b) {
                        var c = a.toLowerCase();
                        return t || (a = s[c] = s[c] || a, r[a] = b), this
                    },
                    overrideMimeType: function (a) {
                        return t || (k.mimeType = a), this
                    },
                    statusCode: function (a) {
                        var b;
                        if (a)
                            if (2 > t)
                                for (b in a) q[b] = [q[b], a[b]];
                            else v.always(a[v.status]);
                        return this
                    },
                    abort: function (a) {
                        var b = a || u;
                        return i && i.abort(b), x(0, b), this
                    }
                };
            if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + "").replace(Ac, "").replace(Fc, yc[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yc[3] || ("http:" === yc[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t) return v;
            h = m.event && k.global, h && 0 === m.active++ && m.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, "$1_=" + vc++) : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "") : k.accepts["*"]);
            for (d in k.headers) v.setRequestHeader(d, k.headers[d]);
            if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
            u = "abort";
            for (d in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) v[d](k[d]);
            if (i = Mc(Ic, k, b, v)) {
                v.readyState = 1, h && n.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {
                    v.abort("timeout")
                }, k.timeout));
                try {
                    t = 1, i.send(r, x)
                } catch (w) {
                    if (!(2 > t)) throw w;
                    x(-1, w)
                }
            } else x(-1, "No Transport");

            function x(a, b, c, d) {
                var j, r, s, u, w, x = b;
                2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), w = v.getResponseHeader("etag"), w && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger("ajaxComplete", [v, k]), --m.active || m.event.trigger("ajaxStop")))
            }
            return v
        },
        getJSON: function (a, b, c) {
            return m.get(a, b, c, "json")
        },
        getScript: function (a, b) {
            return m.get(a, void 0, b, "script")
        }
    }), m.each(["get", "post"], function (a, b) {
        m[b] = function (a, c, d, e) {
            return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            })
        }
    }), m._evalUrl = function (a) {
        return m.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            "throws": !0
        })
    }, m.fn.extend({
        wrapAll: function (a) {
            if (m.isFunction(a)) return this.each(function (b) {
                m(this).wrapAll(a.call(this, b))
            });
            if (this[0]) {
                var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
                    var a = this;
                    while (a.firstChild && 1 === a.firstChild.nodeType) a = a.firstChild;
                    return a
                }).append(this)
            }
            return this
        },
        wrapInner: function (a) {
            return this.each(m.isFunction(a) ? function (b) {
                m(this).wrapInner(a.call(this, b))
            } : function () {
                var b = m(this),
                    c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a)
            })
        },
        wrap: function (a) {
            var b = m.isFunction(a);
            return this.each(function (c) {
                m(this).wrapAll(b ? a.call(this, c) : a)
            })
        },
        unwrap: function () {
            return this.parent().each(function () {
                m.nodeName(this, "body") || m(this).replaceWith(this.childNodes)
            }).end()
        }
    }), m.expr.filters.hidden = function (a) {
        return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"))
    }, m.expr.filters.visible = function (a) {
        return !m.expr.filters.hidden(a)
    };
    var Qc = /%20/g,
        Rc = /\[\]$/,
        Sc = /\r?\n/g,
        Tc = /^(?:submit|button|image|reset|file)$/i,
        Uc = /^(?:input|select|textarea|keygen)/i;

    function Vc(a, b, c, d) {
        var e;
        if (m.isArray(b)) m.each(b, function (b, e) {
            c || Rc.test(a) ? d(a, e) : Vc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d)
        });
        else if (c || "object" !== m.type(b)) d(a, b);
        else
            for (e in b) Vc(a + "[" + e + "]", b[e], c, d)
    }
    m.param = function (a, b) {
        var c, d = [],
            e = function (a, b) {
                b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
            };
        if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function () {
            e(this.name, this.value)
        });
        else
            for (c in a) Vc(c, a[c], b, e);
        return d.join("&").replace(Qc, "+")
    }, m.fn.extend({
        serialize: function () {
            return m.param(this.serializeArray())
        },
        serializeArray: function () {
            return this.map(function () {
                var a = m.prop(this, "elements");
                return a ? m.makeArray(a) : this
            }).filter(function () {
                var a = this.type;
                return this.name && !m(this).is(":disabled") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a))
            }).map(function (a, b) {
                var c = m(this).val();
                return null == c ? null : m.isArray(c) ? m.map(c, function (a) {
                    return {
                        name: b.name,
                        value: a.replace(Sc, "\r\n")
                    }
                }) : {
                    name: b.name,
                    value: c.replace(Sc, "\r\n")
                }
            }).get()
        }
    }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c()
    } : Zc;
    var Wc = 0,
        Xc = {},
        Yc = m.ajaxSettings.xhr();
    a.attachEvent && a.attachEvent("onunload", function () {
        for (var a in Xc) Xc[a](void 0, !0)
    }), k.cors = !!Yc && "withCredentials" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function (a) {
        if (!a.crossDomain || k.cors) {
            var b;
            return {
                send: function (c, d) {
                    var e, f = a.xhr(),
                        g = ++Wc;
                    if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)
                        for (e in a.xhrFields) f[e] = a.xhrFields[e];
                    a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");
                    for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
                    f.send(a.hasContent && a.data || null), b = function (c, e) {
                        var h, i, j;
                        if (b && (e || 4 === f.readyState))
                            if (delete Xc[g], b = void 0, f.onreadystatechange = m.noop, e) 4 !== f.readyState && f.abort();
                            else {
                                j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);
                                try {
                                    i = f.statusText
                                } catch (k) {
                                    i = ""
                                }
                                h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404
                            } j && d(h, i, j, f.getAllResponseHeaders())
                    }, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Xc[g] = b : b()
                },
                abort: function () {
                    b && b(void 0, !0)
                }
            }
        }
    });

    function Zc() {
        try {
            return new a.XMLHttpRequest
        } catch (b) {}
    }

    function $c() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP")
        } catch (b) {}
    }
    m.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function (a) {
                return m.globalEval(a), a
            }
        }
    }), m.ajaxPrefilter("script", function (a) {
        void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1)
    }), m.ajaxTransport("script", function (a) {
        if (a.crossDomain) {
            var b, c = y.head || m("head")[0] || y.documentElement;
            return {
                send: function (d, e) {
                    b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {
                        (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"))
                    }, c.insertBefore(b, c.firstChild)
                },
                abort: function () {
                    b && b.onload(void 0, !0)
                }
            }
        }
    });
    var _c = [],
        ad = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var a = _c.pop() || m.expando + "_" + vc++;
            return this[a] = !0, a
        }
    }), m.ajaxPrefilter("json jsonp", function (b, c, d) {
        var e, f, g, h = b.jsonp !== !1 && (ad.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ad.test(b.data) && "data");
        return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, "$1" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
            return g || m.error(e + " was not called"), g[0]
        }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
            g = arguments
        }, d.always(function () {
            a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0
        }), "script") : void 0
    }), m.parseHTML = function (a, b, c) {
        if (!a || "string" != typeof a) return null;
        "boolean" == typeof b && (c = b, b = !1), b = b || y;
        var d = u.exec(a),
            e = !c && [];
        return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes))
    };
    var bd = m.fn.load;
    m.fn.load = function (a, b, c) {
        if ("string" != typeof a && bd) return bd.apply(this, arguments);
        var d, e, f, g = this,
            h = a.indexOf(" ");
        return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (f = "POST"), g.length > 0 && m.ajax({
            url: a,
            type: f,
            dataType: "html",
            data: b
        }).done(function (a) {
            e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a)
        }).complete(c && function (a, b) {
            g.each(c, e || [a.responseText, b, a])
        }), this
    }, m.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
        m.fn[b] = function (a) {
            return this.on(b, a)
        }
    }), m.expr.filters.animated = function (a) {
        return m.grep(m.timers, function (b) {
            return a === b.elem
        }).length
    };
    var cd = a.document.documentElement;

    function dd(a) {
        return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1
    }
    m.offset = {
        setOffset: function (a, b, c) {
            var d, e, f, g, h, i, j, k = m.css(a, "position"),
                l = m(a),
                n = {};
            "static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n)
        }
    }, m.fn.extend({
        offset: function (a) {
            if (arguments.length) return void 0 === a ? this : this.each(function (b) {
                m.offset.setOffset(this, a, b)
            });
            var b, c, d = {
                    top: 0,
                    left: 0
                },
                e = this[0],
                f = e && e.ownerDocument;
            if (f) return b = f.documentElement, m.contains(b, e) ? (typeof e.getBoundingClientRect !== K && (d = e.getBoundingClientRect()), c = dd(f), {
                top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)
            }) : d
        },
        position: function () {
            if (this[0]) {
                var a, b, c = {
                        top: 0,
                        left: 0
                    },
                    d = this[0];
                return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), c.left += m.css(a[0], "borderLeftWidth", !0)), {
                    top: b.top - c.top - m.css(d, "marginTop", !0),
                    left: b.left - c.left - m.css(d, "marginLeft", !0)
                }
            }
        },
        offsetParent: function () {
            return this.map(function () {
                var a = this.offsetParent || cd;
                while (a && !m.nodeName(a, "html") && "static" === m.css(a, "position")) a = a.offsetParent;
                return a || cd
            })
        }
    }), m.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function (a, b) {
        var c = /Y/.test(b);
        m.fn[a] = function (d) {
            return V(this, function (a, d, e) {
                var f = dd(a);
                return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void(f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e)
            }, a, d, arguments.length, null)
        }
    }), m.each(["top", "left"], function (a, b) {
        m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {
            return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + "px" : c) : void 0
        })
    }), m.each({
        Height: "height",
        Width: "width"
    }, function (a, b) {
        m.each({
            padding: "inner" + a,
            content: b,
            "": "outer" + a
        }, function (c, d) {
            m.fn[d] = function (d, e) {
                var f = arguments.length && (c || "boolean" != typeof d),
                    g = c || (d === !0 || e === !0 ? "margin" : "border");
                return V(this, function (b, c, d) {
                    var e;
                    return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g)
                }, b, f ? d : void 0, f, null)
            }
        })
    }), m.fn.size = function () {
        return this.length
    }, m.fn.andSelf = m.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {
        return m
    });
    var ed = a.jQuery,
        fd = a.$;
    return m.noConflict = function (b) {
        return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m
    }, typeof b === K && (a.jQuery = a.$ = m), m
});

function z(m) {};
! function (n) {
    "use strict";

    function t(n, t) {
        var r = (65535 & n) + (65535 & t);
        return (n >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r
    }

    function r(n, t) {
        return n << t | n >>> 32 - t
    }

    function e(n, e, o, u, c, f) {
        return t(r(t(t(e, n), t(u, f)), c), o)
    }

    function o(n, t, r, o, u, c, f) {
        return e(t & r | ~t & o, n, t, u, c, f)
    }

    function u(n, t, r, o, u, c, f) {
        return e(t & o | r & ~o, n, t, u, c, f)
    }

    function c(n, t, r, o, u, c, f) {
        return e(t ^ r ^ o, n, t, u, c, f)
    }

    function f(n, t, r, o, u, c, f) {
        return e(r ^ (t | ~o), n, t, u, c, f)
    }

    function i(n, r) {
        n[r >> 5] |= 128 << r % 32, n[14 + (r + 64 >>> 9 << 4)] = r;
        var e, i, a, d, h, l = 1732584193,
            g = -271733879,
            v = -1732584194,
            m = 271733878;
        for (e = 0; e < n.length; e += 16) i = l, a = g, d = v, h = m, g = f(g = f(g = f(g = f(g = c(g = c(g = c(g = c(g = u(g = u(g = u(g = u(g = o(g = o(g = o(g = o(g, v = o(v, m = o(m, l = o(l, g, v, m, n[e], 7, -680876936), g, v, n[e + 1], 12, -389564586), l, g, n[e + 2], 17, 606105819), m, l, n[e + 3], 22, -1044525330), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 4], 7, -176418897), g, v, n[e + 5], 12, 1200080426), l, g, n[e + 6], 17, -1473231341), m, l, n[e + 7], 22, -45705983), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 8], 7, 1770035416), g, v, n[e + 9], 12, -1958414417), l, g, n[e + 10], 17, -42063), m, l, n[e + 11], 22, -1990404162), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 12], 7, 1804603682), g, v, n[e + 13], 12, -40341101), l, g, n[e + 14], 17, -1502002290), m, l, n[e + 15], 22, 1236535329), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 1], 5, -165796510), g, v, n[e + 6], 9, -1069501632), l, g, n[e + 11], 14, 643717713), m, l, n[e], 20, -373897302), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 5], 5, -701558691), g, v, n[e + 10], 9, 38016083), l, g, n[e + 15], 14, -660478335), m, l, n[e + 4], 20, -405537848), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 9], 5, 568446438), g, v, n[e + 14], 9, -1019803690), l, g, n[e + 3], 14, -187363961), m, l, n[e + 8], 20, 1163531501), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 13], 5, -1444681467), g, v, n[e + 2], 9, -51403784), l, g, n[e + 7], 14, 1735328473), m, l, n[e + 12], 20, -1926607734), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 5], 4, -378558), g, v, n[e + 8], 11, -2022574463), l, g, n[e + 11], 16, 1839030562), m, l, n[e + 14], 23, -35309556), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 1], 4, -1530992060), g, v, n[e + 4], 11, 1272893353), l, g, n[e + 7], 16, -155497632), m, l, n[e + 10], 23, -1094730640), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 13], 4, 681279174), g, v, n[e], 11, -358537222), l, g, n[e + 3], 16, -722521979), m, l, n[e + 6], 23, 76029189), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 9], 4, -640364487), g, v, n[e + 12], 11, -421815835), l, g, n[e + 15], 16, 530742520), m, l, n[e + 2], 23, -995338651), v = f(v, m = f(m, l = f(l, g, v, m, n[e], 6, -198630844), g, v, n[e + 7], 10, 1126891415), l, g, n[e + 14], 15, -1416354905), m, l, n[e + 5], 21, -57434055), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 12], 6, 1700485571), g, v, n[e + 3], 10, -1894986606), l, g, n[e + 10], 15, -1051523), m, l, n[e + 1], 21, -2054922799), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 8], 6, 1873313359), g, v, n[e + 15], 10, -30611744), l, g, n[e + 6], 15, -1560198380), m, l, n[e + 13], 21, 1309151649), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 4], 6, -145523070), g, v, n[e + 11], 10, -1120210379), l, g, n[e + 2], 15, 718787259), m, l, n[e + 9], 21, -343485551), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m, h);
        return [l, g, v, m]
    }

    function a(n) {
        var t, r = "",
            e = 32 * n.length;
        for (t = 0; t < e; t += 8) r += String.fromCharCode(n[t >> 5] >>> t % 32 & 255);
        return r
    }

    function d(n) {
        var t, r = [];
        for (r[(n.length >> 2) - 1] = void 0, t = 0; t < r.length; t += 1) r[t] = 0;
        var e = 8 * n.length;
        for (t = 0; t < e; t += 8) r[t >> 5] |= (255 & n.charCodeAt(t / 8)) << t % 32;
        return r
    }

    function h(n) {
        return a(i(d(n), 8 * n.length))
    }

    function l(n, t) {
        var r, e, o = d(n),
            u = [],
            c = [];
        for (u[15] = c[15] = void 0, o.length > 16 && (o = i(o, 8 * n.length)), r = 0; r < 16; r += 1) u[r] = 909522486 ^ o[r], c[r] = 1549556828 ^ o[r];
        return e = i(u.concat(d(t)), 512 + 8 * t.length), a(i(c.concat(e), 640))
    }

    function g(n) {
        var t, r, e = "";
        for (r = 0; r < n.length; r += 1) t = n.charCodeAt(r), e += "0123456789abcdef".charAt(t >>> 4 & 15) + "0123456789abcdef".charAt(15 & t);
        return e
    }

    function v(n) {
        return unescape(encodeURIComponent(n))
    }

    function m(n) {
        return h(v(n))
    }

    function p(n) {
        return g(m(n))
    }

    function s(n, t) {
        return l(v(n), v(t))
    }

    function C(n, t) {
        return g(s(n, t))
    }

    function A(n, t, r) {
        return t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)
    }
    "function" == typeof define && define.amd ? define(function () {
        return A
    }) : "object" == typeof module && module.exports ? module.exports = A : n.md5 = A
}(this);

function addcss(u) {
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = u;
    link.media = 'all';
    document.getElementsByTagName('head')[0].appendChild(link)
}
var menuSel = 0,
    menuSubSel = -2;
var ua = navigator.userAgent.toLowerCase();
var tvKey, uaJ = "",
    booting = !0,
    xVol = 80,
    JtvServ = null;
var app_cors = !1,
    app_cors_once = !1,
    piframe = !1,
    hashR = !1,
    showfon = !0,
    ifrrw = !1,
    ifrreaded = !1,
    xhr_referer = 2;
if (/(polaroid|finlux)/i.test(ua)) {
    hashR = !0
}
if (ua.match(/sony/) || ua.match(/bravia/) || ua.match(/inettvbrowser/)) {
    hashR = !0
}
var model = "none",
    platform = "";
if (/polaroid/i.test(ua) || /sharp/i.test(ua) || /SRAF/.test(ua)) {
    hashR = !0;
    platform = "lg";
    model = uaJ = "sharp"
} else if (/smart-tv/i.test(ua) || /maple/i.test(ua) || /tizen/i.test(ua)) {
    var platform = "sams";
    uaJ = "sams";
    app_cors = !0
} else platform = "lg";
if (typeof box_low2 == "undefined") var box_low2 = !1;
var actual_img = !1;
if (typeof version_local_files == "undefined") version_local_files = 0;
if (typeof version_local_js == "undefined") version_local_js = 0;
if (typeof box_client != "undefined") {
    if (box_client == "sForkPlayer2.57lite" || box_client == "tForkPlayer2.57i") {
        platform = uaJ = "tizen";
        app_cors = !0;
        if (/maple/i.test(ua)) platform = uaJ = "sams"
    }
} else box_client = "ForkPlayer 2.5";
if (platform == "sams")
    if (typeof curWidget != 'object') platform = "tizen";
    else if (typeof curWidget.id == 'undefined') platform = "tizen";
if (ua.match(/webappmanager/)) {
    model = "lgusb";
    uaJ = "lg"
}
if (ua.match(/firefox\/2\.5/)) {
    box_low2 = !0;
    showfon = !1
}
if (ua.match(/webos.tv-201(5|6|7|8|9)/)) uaJ = "lgw2";
else if (ua.match(/webos/) || ua.match(/webappmanager/)) uaJ = "lgw";
else if (ua.match(/netcast/)) uaJ = "lg";
else if (ua.match(/lg simplesmart/)) {
    uaJ = "lg";
    model = "lgsimple"
} else if (ua.match(/philips/)) model = uaJ = "ph";
else if (ua.match(/technisat/) || ua.match(/sh4;.*presto/)) {
    model = uaJ = "spark";
    app_cors = !0;
    box_low2 = !0;
    showfon = !1
} else if (ua.match(/sony/)) model = uaJ = "sony";
else if (ua.match(/hisense/i)) model = uaJ = "hisense";
else if (ua.match(/skyworth/i)) model = uaJ = "skyworth";
else if (ua.match(/vestel/i)) model = uaJ = "vestel";
else if (ua.match(/playstation/)) {
    model = "sonyplaystation";
    uaJ = "sony"
} else if (ua.match(/bravia/)) {
    model = "sonybravia";
    uaJ = "sony"
} else if (ua.match(/inettvbrowser/)) model = uaJ = "sony";
else if (ua.match(/viera/)) model = uaJ = "pa";
else if (ua.match(/toshiba/)) model = uaJ = "ts";
else if (ua == "mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/55.0.2883.87 safari/537.36") model = uaJ = "chrome";
else if (ua.match(/(ucbrowser|tizen|tcl|qtembedded;|hbbtv|technisat|dune|mag200|netrange|hisense|smart-tv|maple|navi|lg|webos|webappmanager|opera tv|tv store|bravia|inettvbrowser|sraf)/)) models = "yes";
else {
    setTimeout(function () {
        // PullDataFrom("http://185.158.114.122/obovse.ru/alexkdpulg.php?id=errloadfork&" + ua);
        PullDataFrom("http://127.0.0.1/obovse.ru/alexkdpulg.php?id=errloadfork&" + ua)
    }, 4000)
}
if (document.location.href.indexOf("obovse.ru") > 0) var installedLocal = !1;
else installedLocal = !0;
if (document.location.href.indexOf("dns=") > 0) var uadns = document.location.href.split("dns=")[1];
else if (typeof dns != "undefined") uadns = dns;
else uadns = "";
if (document.location.href.indexOf("idesams") > 0) {
    platform = "sams";
    app_cors = !0
}
if (ua.match(/mag200/)) {
    model = uaJ = "mag";
    app_cors = !0
}
if (ua.match(/dune/)) {
    model = uaJ = "dune";
    app_cors = !0
}
if (ua.match(/android/)) {
    model = uaJ = "android";
    hashR = !0
}
if (typeof window.tizen != "undefined") {
    var is_tizen = 1;
    platform = uaJ = "tizen"
} else is_tizen = 0;
var optinput = "";
if (box_client == "aForkPlayer2.5") {
    model = platform = uaJ = "android-device";
    optinput = " readonly='true'";
    app_cors = !0;
    hashR = !1
}
if (typeof loader_orig != "undefined") {
    if (loader_orig == "lg_webos_ide") app_cors = !0
} else loader_orig = "";
var app_cors_referer = app_cors_orig = app_cors;
if (platform == "tizen") app_cors_referer = 0;
if (platform != "sams" && platform != "tizen" && uaJ != "mag" && uaJ != "dune") hashR = !0;
if (platform == "sams") {
    try {
        var innerW = screen.width;
        var innerH = screen.height
    } catch (e) {
        innerW = window.innerWidth;
        innerH = window.innerHeight
    }
} else {
    innerW = window.innerWidth;
    innerH = window.innerHeight
}

function $_(id) {
    return document.getElementById(id)
}
if (box_low == null) var box_low = !1;

function css_w(n, m, k) {
    if (box_low) {
        if (k != null)
            return k;
        if (m)
            return Math.ceil(n * 1.3333);
        else return Math.ceil(n / 1.3333)
    }
    if ((fhd && handler != "menu") || uaJ == "pa" || (innerW == 960 && innerH == 540)) {
        if ((fhd && handler != "menu") && k != null)
            return k;
        if (n == 61 && !box_low2)
            return n;
        var ind = 720 / innerH;
        if (m)
            return Math.ceil(n * ind);
        else return Math.ceil(n / ind)
    }
    if (uaJ == "mag" && resolution_prefix != null) {
        var ind = 1280 / innerW;
        if (m)
            return Math.ceil(n * ind);
        else return Math.ceil(n / ind)
    }
    return n
}

function css_wh(n, m, k) {
    if (box_low || (fhd && handler != "menu"))
        return css_w(n, m, k);
    if (uaJ == "pa" || (innerW == 960 && innerH == 540)) {
        if (n == 65 && !box_low2)
            return n;
        var ind = 1280 / innerW;
        if (m)
            return Math.ceil(n * ind);
        else return Math.ceil(n / ind)
    }
    if (uaJ == "mag" && resolution_prefix != null) {
        var ind = 720 / innerH;
        if (m)
            return Math.ceil(n * ind);
        else return Math.ceil(n / ind)
    } else return css_w(n, m, k)
}
var scmdf = !0,
    startcmd = "";

function loadinfo(s) {
    try {
        startcmd += s + "<br>";
        if (scmdf) {
            if (typeof loader_p == "undefined") {
                var div = document.createElement('div');
                div.id = "startcmd";
                div.style.height = css_wh(130) + "px";
                div.style.top = css_wh(innerH - 170) + "px";
                div.style.left = css_w(400) + "px";
                div.style.display = "block";
                div.style.width = css_w(480) + "px";
                div.style.padding = css_w(10) + "px";
                div.style.borderRadius = css_w(10) + "px";
                if (typeof randomStartImg == "undefined") div.style.color = "black";
                else div.style.color = "white";
                if (platform == "sams" && box_client != "sForkPlayer2.57f" && box_client != "sForkPlayer2.57i" && box_client != "sForkPlayer2.57k") div.style.backgroundColor = "#080808";
                div.style.fontSize = css_wh(16) + "px";
                div.style.position = "absolute";
                $_("startlogo").appendChild(div)
            }
            scmdf = !1
        }
        lO10OIOlxzlO100OIYpr("startcmd", startcmd)
    } catch (e) {}
}
if (platform == "sams") {
    try {
        tvKey = new Common.API.TVKeyValue();
        var VK_ENTER = tvKey.KEY_ENTER;
        var VK_PAUSE = tvKey.KEY_PAUSE;
        var VK_PAGE_UP = tvKey.KEY_CH_UP;
        var VK_PAGE_DOWN = tvKey.KEY_CH_DOWN;
        var VK_LEFT = tvKey.KEY_LEFT;
        var VK_UP = tvKey.KEY_UP;
        var VK_RIGHT = tvKey.KEY_RIGHT;
        var VK_DOWN = tvKey.KEY_DOWN;
        var VK_0 = tvKey.KEY_0;
        var VK_1 = tvKey.KEY_1;
        var VK_2 = tvKey.KEY_2;
        var VK_3 = tvKey.KEY_3;
        var VK_4 = tvKey.KEY_4;
        var VK_5 = tvKey.KEY_5;
        var VK_6 = tvKey.KEY_6;
        var VK_7 = tvKey.KEY_7;
        var VK_8 = tvKey.KEY_8;
        var VK_9 = tvKey.KEY_9;
        var VK_NUMPAD_0 = 96;
        var VK_NUMPAD_1 = 97;
        var VK_NUMPAD_2 = 98;
        var VK_NUMPAD_3 = 99;
        var VK_NUMPAD_4 = 100;
        var VK_NUMPAD_5 = 101;
        var VK_NUMPAD_6 = 102;
        var VK_NUMPAD_7 = 103;
        var VK_NUMPAD_8 = 104;
        var VK_NUMPAD_9 = 105;
        var VK_A = 90;
        var VK_B = 66;
        var VK_C = 67;
        var VK_D = 68;
        var VK_E = 69;
        var VK_G = 71;
        var VK_H = 72;
        var VK_I = 73;
        var VK_J = 74;
        var VK_K = 75;
        var VK_O = 79;
        var VK_Q = 81;
        var VK_R = 82;
        var VK_S = 83;
        var VK_T = 84;
        var VK_U = 85;
        var VK_V = 86;
        var VK_W = 87;
        var VK_X = 88;
        var VK_Y = 89;
        var VK_Z = 90;
        var VK_RED = tvKey.KEY_RED;
        var VK_GREEN = tvKey.KEY_GREEN;
        var VK_YELLOW = tvKey.KEY_YELLOW;
        var VK_BLUE = tvKey.KEY_BLUE;
        var VK_FAST_FWD = tvKey.KEY_FF;
        var VK_REWIND = tvKey.KEY_RW;
        var VK_STOP = tvKey.KEY_STOP;
        var VK_PLAY = tvKey.KEY_PLAY;
        var VK_MUTE = tvKey.KEY_MUTE;
        var VK_INFO = tvKey.KEY_INFO;
        var VK_BACK = tvKey.KEY_RETURN;
        var VK_EXIT = tvKey.KEY_EXIT;
        var VK_TOOLS = tvKey.KEY_TOOLS;
        var KEY_VOLUME_PLUS = 77;
        var KEY_VOLUME_MINUS = 76
    } catch (e) {
        platform = "tizen"
    }
}
if (platform != "sams") {
    var VK_ENTER = 13;
    var VK_PAUSE = 19;
    var VK_PAGE_UP = 33;
    var VK_PAGE_DOWN = 34;
    var VK_LEFT = 37;
    var VK_UP = 38;
    var VK_RIGHT = 39;
    var VK_DOWN = 40;
    var VK_HID_BACK = 8;
    var VK_HID_HOME = 36;
    var VK_HID_END = 35;
    var VK_HID_INSERT = 45;
    var VK_HID_DEL = 46;
    var VK_HID_ESC = 461;
    var VK_HID_CTRL = 17;
    var VK_HID_ALT = 18;
    var VK_HID_RT_ALT = 21;
    var VK_CAPS_LOCK = 20;
    var VK_SHIFT = 16;
    var VK_LANG_SEL = 229;
    var VK_0 = 48;
    var VK_1 = 49;
    var VK_2 = 50;
    var VK_3 = 51;
    var VK_4 = 52;
    var VK_5 = 53;
    var VK_6 = 54;
    var VK_7 = 55;
    var VK_8 = 56;
    var VK_9 = 57;
    var VK_NUMPAD_0 = 96;
    var VK_NUMPAD_1 = 97;
    var VK_NUMPAD_2 = 98;
    var VK_NUMPAD_3 = 99;
    var VK_NUMPAD_4 = 100;
    var VK_NUMPAD_5 = 101;
    var VK_NUMPAD_6 = 102;
    var VK_NUMPAD_7 = 103;
    var VK_NUMPAD_8 = 104;
    var VK_NUMPAD_9 = 105;
    var VK_GRAVE = 192;
    var VK_DASH = 189;
    var VK_EQUAL = 187;
    var VK_BACK_SLASH = 220;
    var VK_LEFT_BLACKET = 219;
    var VK_RIGHT_BLACKET = 221;
    var VK_SEMICOLON = 186;
    var VK_APOSTROPHE = 222;
    var VK_COMMA = 188;
    var VK_PERIOD = 190;
    var VK_SLASH = 191;
    var VK_SPACE_BAR = 32;
    var VK_A = 65;
    var VK_B = 66;
    var VK_C = 67;
    var VK_D = 68;
    var VK_E = 69;
    var VK_F = 70;
    var VK_G = 71;
    var VK_H = 72;
    var VK_I = 73;
    var VK_J = 74;
    var VK_K = 75;
    var VK_L = 76;
    var VK_M = 77;
    var VK_N = 78;
    var VK_O = 79;
    var VK_P = 80;
    var VK_Q = 81;
    var VK_R = 82;
    var VK_S = 83;
    var VK_T = 84;
    var VK_U = 85;
    var VK_V = 86;
    var VK_W = 87;
    var VK_X = 88;
    var VK_Y = 89;
    var VK_Z = 90;
    var VK_RED = 403;
    var VK_GREEN = 404;
    var VK_YELLOW = 405;
    var VK_BLUE = 406;
    var VK_REWIND = 412;
    var VK_STOP = 413;
    var VK_PLAY = 415;
    var VK_FAST_FWD = 417;
    var VK_INFO = 457;
    var VK_BACK = 461;
    var VK_LGE_MAGIC_VOICE = 1015;
    var KEY_VOLUME_PLUS = 999;
    var KEY_VOLUME_MINUS = 998
}
if (uaJ == "spark") {
    var VK_PAUSE = 66;
    var VK_PAGE_UP = 7;
    var VK_PAGE_DOWN = 8;
    var VK_RED = 112;
    var VK_GREEN = 113;
    var VK_YELLOW = 405;
    var VK_BLUE = 115;
    var VK_FAST_FWD = 65;
    var VK_REWIND = 70;
    var VK_STOP = 10;
    var VK_PLAY = 80;
    var VK_MUTE = 78;
    var VK_INFO = 116;
    var VK_BACK = 117;
    var VK_LGE_MAGIC_VOICE = 1015;
    var KEY_VOLUME_PLUS = 77;
    var KEY_VOLUME_MINUS = 76
}
if (uaJ == "sharp") {
    VK_PAGE_UP = 427;
    VK_PAGE_DOWN = 428
}
if (platform == "tizen") {
    VK_RED = 403;
    VK_GREEN = 404;
    VK_YELLOW = 405;
    VK_BLUE = 406;
    VK_PAGE_UP = 427;
    VK_PAGE_DOWN = 428;
    VK_BACK = 0;
    VK_MUTE = 449;
    VK_PAUSE = 19;
    VK_REWIND = 412;
    VK_STOP = 413;
    VK_PLAY = 415;
    VK_FAST_FWD = 417
}
var resolution_prefix = null,
    resolution_portal = "",
    mag_dop_top = "",
    stb;
if (uaJ == "dune") {
    var VK_RED = 193;
    var VK_GREEN = 194;
    var VK_YELLOW = 195;
    var VK_BLUE = 196;
    var VK_FAST_FWD = 205;
    var VK_REWIND = 204;
    var VK_STOP = 178;
    var VK_PAUSE = 218;
    var VK_INFO = 199;
    var VK_EXIT = 18;
    var KEY_VOLUME_PLUS = 175;
    var KEY_VOLUME_MINUS = 174;
    if (typeof document.referrer != "undefined") {
        if (document.referrer.length > 5) resolution_portal = document.referrer
    }
}
if (uaJ == "mag") {
    var VK_RED = 112;
    var VK_GREEN = 113;
    var VK_YELLOW = 114;
    var VK_BLUE = 115;
    var VK_FAST_FWD = 70;
    var VK_REWIND = 66;
    var VK_STOP = 83;
    var VK_PAUSE = 82;
    var VK_MUTE = 78;
    var VK_INFO = 89;
    var VK_EXIT = 27;
    var KEY_VOLUME_PLUS = 107;
    var KEY_VOLUME_MINUS = 109;
    try {
        stb = gSTB;
        if (window.innerWidth > 720) {
            resolution_prefix = null
        } else if (window.innerHeight < 576) {
            resolution_prefix = 576
        } else {
            resolution_prefix = 576
        }
        stb.EnableServiceButton(!0);
        stb.InitPlayer();
        if (typeof document.referrer != "undefined") {
            if (document.referrer.length > 5) resolution_portal = document.referrer;
            else resolution_portal = "file:///home/web/services.html"
        }
        var startM = 0,
            mrout, prop = {};
        var stbEvent = {
            onEvent: function (event) {
                if (event == 4) {
                    iptv_succed = !0;
                    if (startM > 0) {
                        stb.SetPosTime(startM);
                        startM = 0
                    } else videoLoad("off", -1);
                    prop.w = stb.GetVideoInfo().match(/pictureWidth:(.*?),/)[1];
                    prop.h = stb.GetVideoInfo().match(/pictureHeight:(.*?),/)[1];
                    if (prop.w > 0 && prop.h > 0) lOlI01hyFSW1QI1OlYpr(prop.w + "x" + prop.h + " _FPProporcii_: " + kjtYpr.GL.xmode);
                    return
                }
                if (event == 7) {}
                if ((event == 1 || event == 5) && lOlI1OII1UehOl1lIOIOYpr && $_("vk_audio").style.display == "block" && handler != "player" && !stopped) {
                    clearTimeout(mrout);
                    stb.Stop();
                    stopped = !0;
                    mrout = setTimeout("keyHandler({'keycode':VK_FAST_FWD});", 2000);
                    return
                }
                if (stopped || handler == "menu" || rek_url != "" || kjtYpr.GL.timeoutiptv > 55) return;
                if (event == 1 || event == 5) {
                    if ((!pstream || is_vod()) && (curTime > 1 || startM > 0)) {
                        if (totalTime - curTime < 5) return;
                        stb.Stop();
                        stopped = !0;
                        showPlayer();
                        videoLoad("on");
                        clearTimeout(mrout);
                        if (curTime > 1) startM = curTime;
                        mrout = setTimeout(function () {
                            stb.Stop();
                            lIO1IlIhslyl0OIQYpr(playUrl, !0, startM)
                        }, 3000);
                        lOlI01hyFSW1QI1OlYpr("_FPSoedineniePrervano_!" + startM + "sec " + playUrl);
                        return
                    }
                    iptv_retry++;
                    if (pstream && iptv_succed) {
                        stopped = !0;
                        setTimeout("stb.Stop();videoLoad('on');lIO1IlIhslyl0OIQYpr(playUrl,true);", 1500);
                        lOlI01hyFSW1QI1OlYpr("_FPOshibka_! _FPPodkluchenie_ " + iptv_retry + "...");
                        return
                    }
                    if (iptv_retry > 4) {
                        setTimeout("if(!stopped) lI1lI00l1gX0l0l0OYpr();", 1500)
                    } else {
                        if (!plmini_on) {
                            t = " _FPpodklucheniya_";
                            lifeN = 0;
                            lifeSec = -1;
                            stb.Stop();
                            showPlayer();
                            videoLoad("on");
                            stopped = !0;
                            setTimeout("stb.Stop();lIO1IlIhslyl0OIQYpr(playUrl,true,startM);", 1000);
                            lOlI01hyFSW1QI1OlYpr("_FPOshibka_" + t + "! _FPPodkluchenie_  " + (iptv_retry + 1) + "...")
                        }
                    }
                }
            },
            event: 0
        };
        window.moveTo(0, 0);
        stb.SetVolume(xVol)
    } catch (e) {}
}
if (document.location.href.indexOf("idemag") > 0) {
    uaJ = "mag";
    resolution_prefix = 576
}
if (document.location.href.indexOf("idemag720") > 0) {
    uaJ = "mag";
    resolution_prefix = null
}
var lIO11l11NEB100OYpr = {};
lIO11l11NEB100OYpr.en = {
    "_name": "English",
    "_powered": "by translate.yandex.ru",
    "mysets": "my settings",
    "Zakladki": "Bookmark",
    "zakladki": "bookmark",
    "Vneshnie": "External",
    "Vnutr": "EXT",
    "Istoriya": "History",
    "poiskov": "searches",
    "Raznoe": "Different",
    "Seriali": "Series",
    "Filmi": "Movies",
    "Tema": "Theme",
    "Oneaudiotrack": "One audio track",
    "OpredelenieDns": "The definition of CSN",
    "RegistraciyaVseti": "Network registration",
    "SchitivanieNastroek": "Reading settings",
    "Inicializaciya": "Initialization",
    "pleera": "player",
    "Zagruzka": "Download",
    "Interface": "interface",
    "menu": "menu",
    "Size data": "The size of the data",
    "data from server": "the data from the server",
    "Error download data, load local settings": "Error getting data loaded local configuration",
    "Menu": "Menu",
    "Store data": "To store data",
    "Save and": "Save and",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Saving data to the server every 5 minutes or by pressing the Menu button to Save and",
    "On Server": "On the server",
    "Local": "Locally",
    "ChtenieNastroekPoiska": "Reading to search settings",
    "Vozobnovlenie": "Resume",
    "Soobshestvo": "Community",
    "ObsuzhdenieProblemIpredlozhenij": "The discussion of problems and proposals",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Voluntary fundraising to pay for hosting",
    "Vash": "Your",
    "macAdres": "Mac-address",
    "SborInfo": "In the note of payment, enter your Mac address to disable the ads. In the start menu section and IPTV will also add additional resources and so on",
    "IliNazhmite": "Or click",
    "SoobshitOpodderzhke": "now, to indicate support",
    "404NotFound": "The 404 error. This file doesn't exist",
    "HotiteIskatVdrugihMestah": "Want to look for it other places",
    "Vospolzuites": "Use",
    "NaitiVglobPoiske": "Be found in global search",
    "GlobPoisk": "Global search",
    "DobroPozhalovat": "Welcome",
    "ViberiteChtoIskat": "Select what to look for",
    "ViberiteEpg": "Select your desired EPG for channel",
    "Stranica": "Page",
    "ZdesPusto": "It's empty",
    "PoiskPrervan": "Search aborted",
    "UdalenaGrupa": "Was deleted on startup",
    "StartovoeMenu": "Start menu",
    "Sync": "Sync",
    "Export": "Export",
    "SaveSetServ": "Save settings on server",
    "Import": "Import",
    "nastrdruga": "settings",
    "VvLogDr": "Enter the user login from the website",
    "PolNastrDr": "Get user settings",
    "EtoMozhUd": "It can delete the current settings of the widget",
    "Steret": "Erase",
    "NastroikiPrilozheniya": "Application settings",
    "NastrStartMenu": "Settings start menu",
    "NastrGlPoisk": "Search system",
    "DobavlenoV": "Added to",
    "DlVklPer": "To activate go to Settings / search Preferences /",
    "ZaklUzheEst": "This tab is already there",
    "vstm": "in the start menu",
    "UdMsNsM": "Remove from the start menu in the <br>Settings / Settings Start menu",
    "Udalit": "Delete",
    "Clear": "Clear",
    "Vstavit": "Insert",
    "Kopirovat": "Copy",
    "Ssilka": "Link",
    "NazhmVpravo": "Click to the right",
    "chud": "to remove",
    "Vkl": "Enabled",
    "Otkl": "Disabled",
    "Vkl.": "On",
    "Otkl.": "Off",
    "PeremV": "Move to",
    "IstOchishena": "Story cleared",
    "PrRabStogoMesta": "To continue from the same place",
    "Nastroiki": "Settings",
    "ChPoyas": "Time zone",
    "Perekl": "Switch",
    "KachVideo": "The video quality",
    "KolStrok": "The number of rows",
    "Videopleer": "Video player",
    "pleer": "player",
    "Sortirovka": "Sorting",
    "Rezhim": "Mode",
    "NachGrupa": "The initial group",
    "NazhVprVl": "Press left - right to change",
    "RodKontr": "Parental control",
    "FonRisunok": "The background image",
    "YarkFon": "The brightness of the background",
    "CvetText": "The color of the text",
    "VkKod": "VK.COM code",
    "MoiUvedoml": "My notifications",
    "PolnSbrosNastr": "Full reset",
    "Yazik": "Language",
    "VibSait": "Selection of sites to be conducting a global search",
    "VibStM": "The choice of sites displayed in the start menu",
    "PereklM": "Switching between",
    "UznFsCxz": "To learn which of them works for you, and what will generate error 404 can open on your computer",
    "DelMuvT": "Do less to enlarge the text",
    "TvpPu": "The type of video player by default",
    "TipPu": "The type of player IPTV by default",
    "Sort": "Sort",
    "KartVKart": "Picture-in-picture<br>Automatic preview videos in a small window (if PIP is disabled for the selected video, you can turn the play button on the remote)",
    "vospr": "play",
    "prilozheniya": "app",
    "RemoteInfo": "processing links without using DNS (LG, Sony, Philips) using a computer or Android. Becomes available 'Files and folders' on fs.to (1080p)<br>To enable it, download and run the program Forkplayer on Remote PC or Android connected to the same router for TV<br>download Link",
    "PrivVk": "Bind VK.COM",
    "polzovatelya": "user",
    "SsilkaVkKod": "The link where you can get the binding code",
    "VashUvNp": "Your notifications, such as password from the site",
    "ZsIsN": "Upload or download all of the widget settings",
    "zaklIist": "bookmarks and history",
    "VvKodPr": "Enter the binding code VK.COM",
    "Auto": "Auto",
    "Tolko": "Only",
    "DlyaVsV": "For all videos",
    "BistrPoisk": "Quick search",
    "Parol": "Password",
    "parol": "password",
    "DlDostVv": "To access, enter your",
    "DeistDoV": "valid until you exit the widget",
    "poumolch": "by default",
    "SmIotk": "To change or disable",
    "moV": "in",
    "RazblVkl": "Unblock tab",
    "EtaVklBzabl": "This tab was locked",
    "DlRvIn": "To unlock, highlight it and press",
    "VvedNov": "Enter the new",
    "DlUdVved": "To remove type",
    "ZablVkl": "Lock tab",
    "UstSart": "To set the starting",
    "UdIzSt": "Remove from the starting",
    "ustanovit": "set",
    "Media": "Media",
    "Vstroenniy": "Built-in",
    "OtmNeProsm": "Mark unwatched",
    "OtmProsm": "Mark viewed",
    "DobavVglob": "Add in the global search",
    "Peredvinut": "Move",
    "VijtiV": "Exit to",
    "EXIT": "EXIT",
    "listSservera": "sheet from the server",
    "DobavitV": "Add to",
    "OchistitIstoriyu": "Clear history",
    "ObnovitStranicy": "To refresh the page",
    "izZakladok": "from bookmarks",
    "OshibkaSohrDannih": "Error saving data",
    "OshibkaChDannih": "Error reading the data",
    "ustanolen": "installed",
    "VineSmP": "You have not changed the password is 0000!<br><i>Recommend that you change the password of Parental control to protect children from",
    "ParolDeistDk": "The password is valid until you exit the app! Do not forget to exit the widget at the end",
    "nePodhodit": "not suitable",
    "PrilUstSh": "Applications are installed in smarthab",
    "IzvFailovNo": "Sorry, file not found",
    "sIst": "source",
    "PerPoAdr": "Go to web address",
    "OshibkaParsPl": "Error parsing playlist",
    "OshibkaObrabotki": "Error processing",
    "Informaciya": "Information",
    "DlyaPerNsp": "To go to the next page press the right button",
    "infodns": "Use RemoteFork<br>(in the settings, you need a computer or Android) for faster navigation on this website",
    "January": "January",
    "February": "February",
    "March": "March",
    "April": "April",
    "May": "May",
    "June": "June",
    "Jule": "July",
    "August": "August",
    "September": "September",
    "October": "October",
    "November": "November",
    "December": "December",
    "Monday": "Monday",
    "Tuesday": "Tuesday",
    "Wednesday": "Wednesday",
    "Thursday": "Thursday",
    "Friday": "Friday",
    "Saturday": "Saturday",
    "Sunday": "Sunday",
    "Md": "Mon",
    "Tu": "W",
    "Wd": "MS",
    "Th": "Th",
    "Fr": "Fri",
    "St": "Sat",
    "Sn": "Sun",
    "Oshibka": "Error",
    "polVr": "get the time",
    "ProvPravKodVk": "Check the correct binding code VK.COM",
    "UspIdPolz": "Successfully!<br>user ID",
    "NeobhUstIzap": "You must install and run on your computer",
    "SbrositNastr": "Reset",
    "VsaeZaklUd": "All bookmarks, history, settings will be deleted",
    "PrevLimOzh": "Exceeded the limit of expectations",
    "opredDns": "define DNS",
    "infoVk": "Linking your Vk.COM account<br>access the audio and video recordings to your page on",
    "infoNastrPoiska": "Configuring search<br><i>You can configure which sites to search and the search order in the Settings</i>",
    "VvediteText": "Enter the text",
    "PustayaSsilka": "A null reference",
    "Obrabotka": "Processing",
    "NetOtvetaUbedRemote": "No answer! Make sure what is included RemoteFork",
    "PovtorPop": "Retry",
    "ProvSostRem": "Check the status RemoteForkplayer on the computer",
    "polSsilki": "get a reference",
    "EtoStList": "This starter playlist",
    "NeskEl": "Multiple items",
    "stMenuSkr": "the start menu is hidden<br>they can be activated in the Settings / configuration start. menu",
    "VvedAdrPl": "Enter the address",
    "SudaMozhVv": "Here you can manually enter the address of the playlist",
    "Vkontakte": "Vkontakte",
    "VashaStrVk": "Your page Vkontakte",
    "KodPolZd": "Code to get here",
    "FailKnR": "The files on your computer. (You need to run RemoteForkplayer on the computer and include",
    "ScachRemoteMozh": "Download RemoteForkplayer may",
    "PamyatTv": "Memory TV",
    "Navigaciya": "Navigation",
    "VverhVniz": "Up / Down",
    "Sohranit": "Save",
    "VPLEER": "IN PLAYER",
    "Vnesh": "External",
    "StartMenu": "Start menu",
    "SleduushayaStr": "Next page",
    "Ostanovleno": "Stopped",
    "Iskat": "Search",
    "Podkluchenie": "Connection",
    "SoedineniePrervano": "The connection has been terminated",
    "soedineniya": "connection",
    "podklucheniya": "connection",
    "SbrosVipolnenPerezpusk": "Resetting the application is made!<br>Restart the widget",
    "Prodolzhit": "Continue",
    "Otmena": "Cancel",
    "VseRavnoProdolzhit": "Continue anyway",
    "parsingaVideossilki": "parsing link",
    "NevernayaSsilka": "Wrong link",
    "Proporcii": "Proportions",
    "OpciiEkrana": "Options screen",
    "OchishPamyati": "Extra. memory",
    "min": "min",
    "Kachestvo": "Quality",
    "Nedostupno": "Unavailable",
    "SeichasNedostupno": "Currently unavailable",
    "Shirina": "Width",
    "Visota": "Height",
    "Buffer": "Buffer",
    "Mb": "MB",
    "ZvukDorozhka": "Sound. track",
    "Ekran": "Screen",
    "Gromkost": "The volume",
    "Tip": "Type",
    "Date": "Date",
    "Album": "Album",
    "Original": "The original",
    "Rastyanut": "Stretch",
    "Ruchnoi": "Manual",
    "VozobnovitNa": "Resume",
    "Posledovatelno": "Consistently",
    "Povtoryat": "Repeat",
    "odin": "one",
    "vse": "all",
    "DostupRazreshen": "Access is allowed",
    "REKLAMA": "ADVERTISING",
    "PereadresaciyaNaFail": "Redirection to the file",
    "Vneshniy": "External",
    "Npl10IIOr1dDIlIlOOYpr": "Not suitable TV program",
    "VoVremProsNazh": "While watching IPTV channel press",
    "VmEmVp": "In Menu -> EPG code you can choose a suitable",
    "dVp": "to select a suitable",
    "VmVpostBiCe": "The video is permanently white or black screen?<br><i>Try a different type",
    "HotChtVfon": "Want videos playing in the background? Click",
    "vVrPrVid": "during video playback",
    "KnInfoPerRezh": "The info button on the remote switches the display mode information when watching a video",
    "Video": "Video",
    "video": "video",
    "nePodderzhivaetsya": "not supported",
    "DrugZvDorNet": "Other audio tracks there",
    "PustayaIliUdalSsilkaVK": "Empty or delete the link VK",
    "Podtverdit": "Confirm",
    "OzhidaiteNeskSec": "Wait for a few seconds",
    "NazhmExitEsheRazDlyaVihoda": "Press EXIT again to exit",
    "ViNeSmeniliPassRodKontrRekomendSm": "You have not changed the password is 0000!<br><i>Recommend that you change the Parental control password for child lock</i>",
    "PoiskAudio": "Search audio",
    "PoiskVideo": "Searching for videozapisi",
    "PoiskFoto": "Search photo (Hon. without authorization)",
    "MoiAudio": "My music",
    "MoiVideo": "My videos",
    "Recomend": "Recommendations",
    "Popular": "Popular",
    "Druzya": "Friends",
    "Gruppi": "Group",
    "SetFon": "Set as background",
    "Audio": "Audio",
    "Zakladki": "Bookmarks",
    "PoiskPeople": "People search",
    "Authorization": "Authorization",
    "OshibkaAvtorizacii": "Authorization error",
    "VashiDruzya": "Your friends",
    "VashiGruppi": "Your Group",
    "Uchastnikov": "Participants",
    "byLogin": "by login and password",
    "byCode": "code",
    "ForAccessNeedAuthorization": "To access vk.com you must sign-up!<br>(first two paragraphs at the top of the page)",
    "IdetUstanovkaVidgeta": "Installing the widget",
    "Ustanovka": "Installation",
    "vidgeta": "widget",
    "Razmer": "Size",
    "GB": "GB",
    "MB": "MB",
    "KB": "KB",
    "Bait": "Bytes",
    "Vidget": "Widget",
    "OpenWidget": "To access the widget",
    "Open": "To access",
    "InstallWidgetInSmartHub": "If you are sure that this is a widget for the Samsung smart TV, then press enter to install",
    "recomOpenFromSmartHub": "you must start with SmartHub",
    "ForkPlayerByClosed": "ForkPlayer will be closed<br>it is Possible to work not full screen, to complete the work",
    "NoDevices": "No connected",
    "TVmemory": "Internal memory",
    "uzheEstVustanovlennih": "already have in installed",
    "uspeshnoUstanovlen": "successfully installed",
    "VnimanieSvobMesto": "Attention! Make sure that the archive is exactly the widget for the Samsung smart TV and enough free space",
    "ViklIvklTVchtobiUv": "Turn off and turn on TV to see",
    "OshibkaUstanovki": "Installation error",
    "vSmHubVidgNaidDop": "in smartha!</b><br>you will find Widget in applications in SmartHome or More applications (Series F)",
    "PustayaPapka": "An empty folder",
    "BlueKnProporcii": "<i>stretching video</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> Blue button during video playback",
    "Zakrit": "Close",
    "NachatZanovo": "To start over",
    "ZagruzhatListiMozhoS": "Download here leaves from the computer using",
    "Summa": "The amount",
    "Valuta": "Currency",
    "PlatSistema": "Payment system",
    "NaprimerVchera": "For example, yesterday in",
    "VvDatuPlatezha": "Enter the date and time of payment",
    "ThanksForYou": "Thank you for supporting the project",
    "Ozhidanie": "Waiting",
    "Prinyato": "Processing",
    "NeobhodimRemoteFork": "To do this, you need to run RemoteFork on your computer or Android<br>More info on forkplayer.tv",
    "Translate": "To translate the page into",
    "OchistIst": "Clear. East.",
    "VVOD": "ENTER",
    "BistrijPoskVverh": "Quick. search: Up",
    "Vniz": "Down",
    "Vibrat": "Choose",
    "Documenti": "Documents",
    "Photo": "Photos",
    "fromPage": "page",
    "fromWall": "from the wall",
    "photo": "photo",
    "Exit": "Out",
    "SavedPhoto": "Saved photos",
    "Slideshow": "Slideshow",
    "sec": "h",
    "Category": "CATEGORY",
    "Categorys": "Categories",
    "ForResetAppPressButton": "To reset, press the button now",
    "ALL": "ALL",
    "OpenFromProxy": "Run through a proxy",
    "PredpDor": "Site. track",
    "InFullScreen": "Full screen",
    "DearPeople": "Dear users!<br>ForkPlayer is a browser adapted to your device to view your favorite websites and created XML, M3U (IPTV) playlists.",
    "Iread": "I read(a)",
    "NotShow": "Don't show",
    "AudioMini": "Audio mini",
    "OffMiniPlayer": "Here you can disable the use of a special player to play mp3 files",
    "ConnectToServer": "The connection to the server",
    "NewDNS": "New DNS",
    "From": "The sender",
    "AutoSync": "Auto-sync",
    "Mark": "Note",
    "several": "several",
    "existOverwrite": "exist! Overwrite?",
    "OverwriteAll": "Overwrite all",
    "SkipAll": "Skip all",
    "Deselect": "Deselect",
    "Queue": "In the queue",
    "DeleteFromStartMenu": "Remove from start menu",
    "Edit": "Edit",
    "Rename": "Rename",
    "ChangeURLicon": "To change address icons",
    "EnterURLicon": "Enter the address of the icons",
    "Icon": "Icon",
    "SetIconFor": "To set the icon for",
    "EnterTitle": "Enter the name",
    "SelectIcon": "To choose the icon",
    "Timeout connection to stream IPTV": "Timeout connecting to IPTV",
    "SetDefaultStartMenu": "Reset start. menu",
    "PreviousFileWillBeOverwritten": "Previous file will be overwritten",
    "PressStopToCancel": "Press Stop to cancel",
    "WhileCopyingFilesCannotViewVideoAndAudio": "While copying files it is impossible to look video and audio",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "Need to open and close the video player, then to repeat copying",
    "Server": "Server"
};

function totranslit(text, engToRus) {
    var rus = "щ   ш  ч  ц  ю  я  ё  ж  ъ  ы  э  а б в г д е з и й к л м н о п р с т у ф х ь".split(/ +/g),
        eng = "shh sh ch cz yu ya yo zh `` y' e` a b v g d e z i j k l m n o p r s t u f x `".split(/ +/g);
    var x;
    for (x = 0; x < rus.length; x++) {
        text = text.split(engToRus ? eng[x] : rus[x]).join(engToRus ? rus[x] : eng[x]);
        text = text.split(engToRus ? eng[x].toUpperCase() : rus[x].toUpperCase()).join(engToRus ? rus[x].toUpperCase() : eng[x].toUpperCase())
    }
    return text
}
lIO11l11NEB100OYpr.uk = {
    "_name": "Українська",
    "_powered": "",
    "mysets": "моїх налаштувань",
    "Zakladki": "Закладки",
    "zakladki": "закладки",
    "Vneshnie": "Зовнішні",
    "Vnutr": "Внутр",
    "Istoriya": "Історія",
    "poiskov": "пошуків",
    "Raznoe": "Різне",
    "Seriali": "Серіали",
    "Filmi": "Фільми",
    "Tema": "Тема",
    "Open closed tab": "Відкрити закриту вкладку",
    "Animate snow": "Анімація снігу",
    "Your country": "Країна використ. прогр.",
    "Oneaudiotrack": "Одна звукова доріжка",
    "OpredelenieDns": "Визначення ДНС",
    "RegistraciyaVseti": "Реєстрація в мережі",
    "SchitivanieNastroek": "Зчитування параметрів",
    "Inicializaciya": "Ініціалізація",
    "Copied denied by author playlist": "Автор плейлиста заборонив копіювання",
    "Timeout": "Таймаут",
    "pleera": "плеєра",
    "Zagruzka": "Завантаження",
    "Interface": "інтерфейсу",
    "menu": "меню",
    "Size data": "Розмір даних",
    "data from server": "даних з сервера",
    "Error download data, load local settings": "Помилка отримання даних, завантажені локальні налаштування",
    "Menu": "Меню",
    "Store data": "Зберігати дані",
    "Save and": "Зберегти і",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Збереження даних на сервер відбувається кожні 5 хвилин або після натискання кнопки Меню Зберегти і",
    "On Server": "На сервері",
    "Local": "Локально",
    "ChtenieNastroekPoiska": "Читання налаштувань пошуку",
    "Vozobnovlenie": "Відновлення",
    "Soobshestvo": "Спільнота",
    "ObsuzhdenieProblemIpredlozhenij": "Обговорення проблем і пропозицій",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Добровільний збір коштів на оплату хостингу",
    "Vash": "Ваш",
    "macAdres": "мак-адрес",
    "SborInfo": "У примітці платежу обов'язково вкажіть свій мак адрес, щоб ми могли знати від кого пожертвування або натисніть Enter / OK зараз, щоб повідомити про пожертвування",
    "IliNazhmite": "Або натисніть",
    "SoobshitOpodderzhke": "зараз, щоб повідомити про підтримку",
    "404NotFound": "Помилка 404. Такого файлу не існує",
    "HotiteIskatVdrugihMestah": "Хочете шукати це інших місцях",
    "Vospolzuites": "Скористайтесь",
    "Third-party content": "Сторонній контент",
    "NaitiVglobPoiske": "Знайти в глобальному пошуку",
    "GlobPoisk": "Глобальний пошук",
    "DobroPozhalovat": "Нова вкладка",
    "Frequently Visited Sites": "Часто відвідувані сайти",
    "ViberiteChtoIskat": "Виберіть шукати",
    "ViberiteEpg": "Виберіть потрібний ЕПГ для каналу",
    "Stranica": "Сторінка",
    "ZdesPusto": "Тут порожньо",
    "PoiskPrervan": "Пошук зупинений",
    "Time offset": "Зміщення часу",
    "UdalenaGrupa": "Була видалена початкова група",
    "StartovoeMenu": "Стартове меню",
    "Sync": "Синхронізація",
    "Export": "Експорт",
    "SaveSetServ": "Зберегти налаштування на сервері",
    "Import": "Імпорт",
    "nastrdruga": "налаштувань",
    "VvLogDr": "Введіть логін користувача сайту",
    "PolNastrDr": "Отримати налаштування користувача",
    "EtoMozhUd": "Це може видалити поточні налаштування віджета",
    "Steret": "Стерти",
    "NastroikiPrilozheniya": "Налаштування програми",
    "NastrStartMenu": "Налаштування стартового меню",
    "Internet TV": "Інтернет телебачення",
    "NastrGlPoisk": "Пошукова система",
    "DobavlenoV": "Додано в",
    "DlVklPer": "Для включення перейдіть в Налаштування / Налаштування пошуку /",
    "ZaklUzheEst": "Така закладка вже є",
    "vstm": "в стартовому меню",
    "UdMsNsM": "Видалити з стартового меню можна в <br>Установки / Установки Стартового меню",
    "Udalit": "Видалити",
    "Clear": "Очистити",
    "Display time": "Відображати час",
    "Vstavit": "Вставити",
    "Kopirovat": "Копіювати",
    "Ssilka": "Посилання",
    "NazhmVpravo": "Натисніть вправо",
    "chud": "щоб видалити",
    "Vkl": "Включено",
    "Otkl": "Вимкнено",
    "Vkl.": "Вкл.",
    "Otkl.": "Вимк.",
    "PeremV": "Перемістити в",
    "IstOchishena": "Історія очищена",
    "PrRabStogoMesta": "Продовжувати роботу з того ж місця",
    "Nastroiki": "Налаштування",
    "Click now right to go to the category selection": "Натисніть зараз вправо для переходу до вибору категорії",
    "ChPoyas": "Часовий пояс",
    "Perekl": "Перекл.",
    "KachVideo": "Якість відео",
    "KolStrok": "Кількість рядків",
    "Videopleer": "Відеоплеєр",
    "pleer": "плеєр",
    "Subtitles": "Субтитри",
    "Sortirovka": "Сортування",
    "Rezhim": "Режим",
    "NachGrupa": "Початкова група",
    "NazhVprVl": "Натискайте вліво - вправо для зміни",
    "RodKontr": "Батьківський контроль",
    "FonRisunok": "Фоновий малюнок",
    "YarkFon": "Яскравість фону (Продукт.)",
    "CvetText": "Колір тексту",
    "VkKod": "Вконтакті код",
    "MoiUvedoml": "Мої повідомлення",
    "PolnSbrosNastr": "Повне скидання налаштувань",
    "Yazik": "Мова",
    "VibSait": "Вибір сайтів по яких буде вестися глобальний пошук",
    "VibStM": "Вибір сайтів, які відображаються в стартовому меню",
    "PereklM": "Перемикання між",
    "UznFsCxz": "Дізнатися який саме з них у вас працює, а з якого буде видавати помилку 404 можна відкривши у себе на комп'ютері",
    "DelMuvT": "Робіть менше для збільшення тексту",
    "TvpPu": "Тип відео плеєра за замовчуванням",
    "TipPu": "Тип плеєра IPTV за замовчуванням",
    "Sort": "Сортувати",
    "KartVKart": "Картинка у картинці<br>Автоматичний перегляд відео в маленькому віконці (при відключеній опції PIP для вибраного відео можна включити кнопкою плей на пульті)",
    "vospr": "відтворення",
    "prilozheniya": "додатка",
    "RemoteInfo": "обробка посилань без використання ДНС (LG, Sony, Philips) з допомогою комп'ютера або андроїда. Стає доступним пункт 'Файли і папки' fs.to (1080р)<br>Для включення необхідно завантажити та запустити програму Remote Forkplayer на комп'ютері або андроїд підключеному до того ж роутеру що і ТБ<br>Посилання на скачування",
    "PrivVk": "Прив'язати ВК",
    "polzovatelya": "користувача",
    "SsilkaVkKod": "Посилання де можна отримати код прив'язки",
    "VashUvNp": "Ваші повідомлення, наприклад, пароль від сайту",
    "ZsIsN": "Завантаження на сервер або завантаження всіх налаштувань віджету",
    "zaklIist": "закладок і історії",
    "VvKodPr": "Введіть код прив'язки ВК",
    "Auto": "Авто",
    "Tolko": "Тільки",
    "DlyaVsV": "Для всіх відео",
    "BistrPoisk": "Швидкий пошук",
    "Parol": "Пароль",
    "parol": "пароль",
    "DlDostVv": "Для доступу введіть",
    "DeistDoV": "діє до виходу в стартове меню<br>Або натисніть кнопку Назад для відміни",
    "poumolch": "за замовчуванням",
    "SmIotk": "Змінити або відключити",
    "moV": "можна в",
    "Source code": "Вихідний код",
    "RazblVkl": "Розблокувати вкладку",
    "EtaVklBzabl": "Ця вкладка була заблокована",
    "DlRvIn": "Для розблокування виділіть її та натисніть",
    "VvedNov": "Введіть новий",
    "DlUdVved": "Для видалення введіть",
    "ZablVkl": "Заблокувати вкладку",
    "UstSart": "Встановити стартовою",
    "UdIzSt": "Видалити зі стартовою",
    "ustanovit": "встановити",
    "Media": "Медіа",
    "Button": "Кнопка",
    "Vstroenniy": "Вбудований",
    "OtmNeProsm": "Відзначити не переглянутим",
    "OtmProsm": "Відзначити переглянутим",
    "DobavVglob": "Додати в глобальний пошук",
    "Peredvinut": "Пересунути",
    "VijtiV": "Вийти в",
    "EXIT": "ВИХІД",
    "listSservera": "лист з серверу",
    "DobavitV": "Додати в",
    "OchistitIstoriyu": "Очистити історію",
    "ObnovitStranicy": "Оновити сторінку",
    "izZakladok": "з закладок",
    "New inset": "Нова вкладка",
    "New private inset": "Нова приватна вкладка",
    "OshibkaSohrDannih": "Помилка збереження даних",
    "OshibkaChDannih": "Помилка читання даних",
    "ustanolen": "встановлено",
    "VineSmP": "Ви не змінили пароль 0000!<br><i>Рекомендуємо змінити пароль Батьківського контролю для захисту від дітей",
    "ParolDeistDk": "Пароль діє до виходу в стартове меню! Не забудьте вийти в стартове меню по закінченню",
    "nePodhodit": "не підходить",
    "PrilUstSh": "Програми встановлюються в смартхаб",
    "IzvFailovNo": "Вибачте, файлів не виявлено",
    "sIst": "з джерела",
    "PerPoAdr": "Перейти за адресою",
    "OshibkaParsPl": "Помилка парсингу сторінки",
    "OshibkaObrabotki": "Помилка обробки",
    "Informaciya": "Інформація",
    "DlyaPerNsp": "Для переходу на наступну сторінку, натисніть кнопку вправо",
    "infodns": "Використовуйте RemoteFork<br>(в налаштуваннях, необхідний комп'ютер або андроїд) для більш швидкої навігації по цьому сайту",
    "January": "Січня",
    "February": "Лютого",
    "March": "Березня",
    "April": "Квітня",
    "May": "Травня",
    "June": "Червня",
    "Jule": "Липня",
    "August": "Серпня",
    "September": "Вересня",
    "October": "Жовтня",
    "November": "Листопада",
    "December": "Грудня",
    "Monday": "Пн",
    "Tuesday": "Вт",
    "Wednesday": "Ср",
    "Thursday": "Чт",
    "Friday": "Пт",
    "Saturday": "Сб",
    "Sunday": "Нд",
    "Md": "Пн",
    "Tu": "Вт",
    "Wd": "Ср",
    "Th": "Чт",
    "Fr": "Пт",
    "St": "Сб",
    "Sn": "Нд",
    "Mac address": "Мак адреса",
    "Oshibka": "Помилка",
    "polVr": "отримання часу",
    "ProvPravKodVk": "Перевірте правильність коду прив'язки ВК",
    "UspIdPolz": "Успішно!<br>ID користувача",
    "NeobhUstIzap": "Необхідно встановити і запустити на комп'ютері програму",
    "SbrositNastr": "Скинути налаштування",
    "VsaeZaklUd": "Всі закладки, історія, налаштування будуть видалені",
    "PrevLimOzh": "Перевищено ліміт очікування",
    "opredDns": "визначення ДНС",
    "infoVk": "Прив'язка свого аккаунту Вконтакті<br>Отримання доступу до аудіо та відео записів зі своєї сторінки на",
    "infoNastrPoiska": "Налаштування пошуку<br><i>Ви можете налаштувати за якими сайтам робити пошук і порядок пошуку в Налаштуваннях</i>",
    "VvediteText": "Введіть текст",
    "PustayaSsilka": "Порожнє посилання",
    "Obrabotka": "Обробка",
    "NetOtvetaUbedRemote": "Немає відповіді! Переконайтеся, що включений RemoteFork",
    "PovtorPop": "Повторна спроба",
    "ProvSostRem": "Перевірте стан RemoteForkplayer на комп'ютері",
    "polSsilki": "отримання посилання",
    "EtoStList": "Це стартовий плейлист",
    "NeskEl": "Кілька елементів",
    "stMenuSkr": "стартового меню приховано<br>Включити їх можна в Налаштуваннях / Настройка старт. меню",
    "VvedAdrPl": "Введіть адресу ",
    "SudaMozhVv": "Введіть адресу M3U плейлиста, XML",
    "Vkontakte": "Вконтакті",
    "VashaStrVk": "Ваша сторінка вконтакті",
    "KodPolZd": "Код отримувати тут",
    "FailKnR": "Файли вашого комп'ютеру. (Необхідно запустити RemoteForkplayer на комп'ютері і включити",
    "ScachRemoteMozh": "Скачати RemoteForkplayer можна за адресою",
    "PamyatTv": "Пам'ять ТВ",
    "Navigaciya": "Навігація",
    "VverhVniz": "Вгору / Вниз",
    "Sohranit": "Зберегти",
    "VPLEER": "В ПЛЕЄР",
    "Vnesh": "Зовн",
    "StartMenu": "Старт меню",
    "SleduushayaStr": "Наступна стор",
    "Ostanovleno": "Зупинено",
    "Iskat": "Шукати",
    "Podkluchenie": "З'єднання",
    "SoedineniePrervano": "З'єднання перервано",
    "soedineniya": "з'єднання",
    "podklucheniya": "підключення",
    "SbrosVipolnenPerezpusk": "Скидання налаштувань програми виконано!<br>Перезапуск віджету",
    "Prodolzhit": "Продовжити",
    "Otmena": "Скасувати",
    "Live search": "Живий пошук",
    "Font": "Шрифт",
    "To cancel the search, press again": "Для скасування пошуку натисніть ще раз",
    "VseRavnoProdolzhit": "Все одно продовжити",
    "parsingaVideossilki": "парсингу відеопосилання",
    "NevernayaSsilka": "Невірне посилання",
    "Proporcii": "Пропорції",
    "Archive": "Архів",
    "OpciiEkrana": "Опції екрану",
    "OchishPamyati": "Очищ. пам'яті",
    "min": "хв",
    "Kachestvo": "Якість",
    "Nedostupno": "Недоступне",
    "SeichasNedostupno": "Зараз недоступне",
    "Shirina": "Ширина",
    "Visota": "Висота",
    "Buffer": "Буфер",
    "Mb": "Мб",
    "ZvukDorozhka": "Звук. доріжка",
    "Ekran": "Екран",
    "Gromkost": "Гучність",
    "Tip": "Тип",
    "Date": "Дата",
    "Album": "Альбом",
    "Original": "Оригінал",
    "Rastyanut": "Розтягнути",
    "Ruchnoi": "Ручний",
    "VozobnovitNa": "Відновити",
    "Posledovatelno": "Послідовно",
    "Povtoryat": "Повторювати",
    "odin": "один",
    "vse": "всі",
    "Zakladki": "Закладки",
    "Adult content": "Дорослий контент",
    "DostupRazreshen": "Доступ дозволений",
    "REKLAMA": "РЕКЛАМА",
    "PereadresaciyaNaFail": "Переадресація на файл",
    "Vneshniy": "Зовнішній",
    "Npl10IIOr1dDIlIlOOYpr": "Не підходить ТБ програма",
    "VoVremProsNazh": "Під час перегляду IPTV каналу натисніть",
    "VmEmVp": "В Меню -> ЕПГ код можна вибрати відповідну",
    "dVp": "для вибору підходящої",
    "VmVpostBiCe": "Замість відео постійно білий або чорний екран?<br><i>Спробуйте інший тип",
    "HotChtVfon": "Хочете щоб відео грало у тлі? Натисніть",
    "vVrPrVid": "під час програвання відео",
    "KnInfoPerRezh": "Кнопка інфо на пульті перемикає режим відображення інформації при перегляді відео",
    "Video": "Відео",
    "video": "відео",
    "nePodderzhivaetsya": "не підтримується",
    "DrugZvDorNet": "Інших звукових доріжок немає",
    "PustayaIliUdalSsilkaVK": "Порожнє або видалене посилання ВК",
    "Podtverdit": "Підтвердити",
    "OzhidaiteNeskSec": "Очікуйте кілька секунд",
    "NazhmExitEsheRazDlyaVihoda": "Натисніть EXIT для виходу",
    "ViNeSmeniliPassRodKontrRekomendSm": "Ви не змінили пароль 0000!<br><i>Рекомендуємо змінити пароль Батьківського контролю для захисту від дітей</i>",
    "PoiskAudio": "Пошук аудіозаписів",
    "PoiskVideo": "Пошук відеозаписів",
    "PoiskFoto": "Пошук фото (дост. без авторизації)",
    "MoiAudio": "Мої аудіозаписи",
    "MoiVideo": "Мої відеозаписи",
    "Recomend": "Рекомендації",
    "Popular": "Популярне",
    "Druzya": "Друзі",
    "Gruppi": "Групи",
    "SetFon": "Встановити як фон",
    "Audio": "Аудіозаписи",
    "PoiskPeople": "Пошук людей",
    "Authorization": "Авторизація",
    "OshibkaAvtorizacii": "Помилка авторизації",
    "VashiDruzya": "Ваші друзі",
    "VashiGruppi": "Ваші Групи",
    "Uchastnikov": "Учасників",
    "byLogin": "по логіну і паролю",
    "byCode": "за кодом",
    "ForAccessNeedAuthorization": "Для доступу до vk.com необхідно авторизуватися!<br>(перші два пункти вгорі на цій сторінці)",
    "IdetUstanovkaVidgeta": "Йде встановлення віджета",
    "Ustanovka": "Встановлення",
    "vidgeta": "віджету",
    "Razmer": "Розмір",
    "GB": "ГБ",
    "MB": "МБ",
    "KB": "КБ",
    "Bait": "Байт",
    "Vidget": "Віджет",
    "OpenWidget": "Відкрити віджет",
    "Open": "Відкрити",
    "InstallWidgetInSmartHub": "Якщо ви впевнені, що це віджет для самсунг смарт тв, то натисніть ентер для установки",
    "recomOpenFromSmartHub": "необхідно запускати з смартхабу",
    "ForkPlayerByClosed": "ForkPlayer буде закритий<br>Можлива робота не на весь екран, для повноцінної роботи",
    "NoDevices": "Немає підключених",
    "TVmemory": "Внутрішня пам'ять",
    "uzheEstVustanovlennih": "вже є у встановлених",
    "uspeshnoUstanovlen": "успішно встановлено",
    "VnimanieSvobMesto": "Увага! Переконайтеся, що в архіві знаходиться саме віджет для самсунг смарт тв достатньо вільного місця",
    "ViklIvklTVchtobiUv": "Вимкніть та увімкніть ТВ щоб побачити",
    "OshibkaUstanovki": "Помилка встановлення",
    "vSmHubVidgNaidDop": "у смартхаб!</b><br>Віджет ви знайдете в додатках в смартхабе, або в Додаткові програми (Серія F)",
    "PustayaPapka": "Пуста папка",
    "BlueKnProporcii": "<i>Зміна пропорцій відео</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> Синя кнопка під час програвання відео",
    "Zakrit": "Закрити",
    "Interface Setup": "Налаштування інтерфейсу",
    "NachatZanovo": "Почати заново",
    "ZagruzhatListiMozhoS": "Завантажувати сюди листи з комп'ютера можна за допомогою",
    "Summa": "Сума",
    "Valuta": "Валюта",
    "PlatSistema": "Платіжна система",
    "NaprimerVchera": "Наприклад, вчора в",
    "VvDatuPlatezha": "Введіть дату і час платежу",
    "ThanksForYou": "Дякуємо за підтримку проекту",
    "Ozhidanie": "Очікування",
    "Prinyato": "Обробка",
    "NeobhodimRemoteFork": "Для виконання цієї операції необхідно запустити RemoteFork на комп'ютері або андроїд<br>Докладніше forkplayer.tv",
    "Translate": "Перевести сторінку ",
    "OchistIst": "Очистити поле / історію",
    "VVOD": "ВВЕСТИ",
    "BistrijPoskVverh": "Швидкий. пошук: Вгору",
    "Vniz": "Вниз",
    "Vibrat": "Вибрати",
    "Documenti": "Документи",
    "Photo": "Фотографії",
    "fromPage": "з сторінки",
    "fromWall": "зі стіни",
    "photo": "фото",
    "Exit": "Вийти",
    "SavedPhoto": "Збережені фотографії",
    "Slideshow": "Слайдшоу",
    "sec": "с",
    "Category": "КАТЕГОРІЯ",
    "Categorys": "Категорії",
    "ForResetAppPressButton": "Для скидання налаштувань, натисніть кнопку зараз",
    "ALL": "ВСІ",
    "OpenFromProxy": "Запуск через проксі",
    "PredpDor": "Звук. доріжка",
    "InFullScreen": "На весь екран",
    "Close tab": "Закрити вкладку",
    "DearPeople": "Шановні користувачі!<br>ForkPlayer - це браузер з адаптованим під ваш пристрій переглядом ваших улюблених сайтів і створених вами XML, M3U (IPTV) плейлистів.",
    "Iread": "Я прочитав(ла)",
    "NotShow": "Більше не показувати",
    "AudioMini": "Аудіо міні",
    "OffMiniPlayer": "Тут можна відключити використання спеціального міні плеєра для програвання mp3 файлів",
    "ConnectToServer": "З'єднання з сервером",
    "NewDNS": "Доступний новий ДНС",
    "From": "Відправник",
    "AutoSync": "Автосінхронізація",
    "Mark": "Відзначити",
    "several": "кілька",
    "existOverwrite": "існує! Перезаписати?",
    "OverwriteAll": "Перезаписати всі",
    "SkipAll": "Пропустити всі",
    "Deselect": "Скасувати виділення",
    "Queue": "В черзі",
    "DeleteFromStartMenu": "Видалити з стартового меню",
    "Edit": "Редагувати",
    "Rename": "Перейменувати",
    "ChangeURLicon": "Змінити адресу іконки",
    "EnterURLicon": "Введіть адресу іконки",
    "Icon": "Іконка",
    "SetIconFor": "Встановити іконкою для",
    "EnterTitle": "Введіть назву",
    "SelectIcon": "Вибрати іконку",
    "Timeout connection to stream IPTV": "Таймаут підключення до IPTV",
    "SetDefaultStartMenu": "Скинути налаштування старт. меню",
    "PreviousFileWillBeOverwritten": "Попередній архів налаштувань буде перезаписаний",
    "PressStopToCancel": "Натисніть Стоп для скасування",
    "Show rating": "Показувати рейтинг",
    "Count": "Кількість",
    "Percent": "Відсотки",
    "Show ratings and views of resources and playlists": "Показувати рейтинг і кількість переглядів ресурсів і плейлистів",
    "WhileCopyingFilesCannotViewVideoAndAudio": "Під час копіювання файлів не можна дивитися відео і аудіо",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "Потрібно відкрити і закрити це відео в плеєрі, потім повторити копіювання",
    "Server": "Сервер",
    "Add stripes": "Добавити полоси",
    "Server not response": "Сервер не відповідає",
    "Adjust weather": "Налаштувати погоду",
    "Add all links": "Додати всі посилання",
    "Manually": "Вручну",
    "Configuring search": "Налаштування пошуку",
    "Top queries": "Топ запитів",
    "Enter search query or URL": "Введіть пошуковий запит або URL",
    "Enter search query or site URL, playlist XML / M3U": "Введіть пошуковий запит або URL-адресу сайту, плейлиста XML / M3U",
    "Enabling can slow opening iptv lists": "Ввімкнення може уповільнити відкриття списків iptv",
    "Enter": "Введіть",
    "Sign in to sync browser data across devices": "Увійдіть, щоб синхронізувати дані браузера на різних пристроях",
    "Profile": "Профіль",
    "enter": "ввійти",
    "Bookmark toolbar": "Панель закладок"
};
lIO11l11NEB100OYpr.ru = {
    "_name": "Русский",
    "_powered": "",
    "Sign in to sync browser data across devices": "Войдите, чтобы синхронизировать данные браузера на разных устройствах",
    "Enter search query or site URL, playlist XML / M3U": "Введите поисковый запрос или URL-адрес сайта, плейлиста XML / M3U",
    "Profile": "Профиль",
    "enter": "войти",
    "Display time": "Показывать часы",
    "mysets": "моих настроек",
    "Add stripes": "Добавить полосы",
    "Zakladki": "Закладки",
    "zakladki": "закладки",
    "Vneshnie": "Внешние",
    "Vnutr": "Внутренние",
    "Istoriya": "История",
    "poiskov": "поисков",
    "Raznoe": "Разное",
    "Seriali": "Сериалы",
    "Filmi": "Фильмы",
    "Tema": "Тема",
    "Adjust weather": "Настроить погоду",
    "Server not response": "Сервер не отвечает",
    "Open closed tab": "Открыть закрытую вкладку",
    "Animate snow": "Анимация снега",
    "Zakladki": "Закладки",
    "Your country": "Страна использ. прилож.",
    "Oneaudiotrack": "Одна звуковая дорожка",
    "OpredelenieDns": "Определение ДНС",
    "RegistraciyaVseti": "Регистрация в сети",
    "SchitivanieNastroek": "Считывание настроек",
    "Inicializaciya": "Инициализация",
    "Copied denied by author playlist": "Автор плейлиста запретил копирование",
    "Timeout": "Таймаут",
    "pleera": "плеера",
    "Zagruzka": "Загрузка",
    "Interface": "интерфейса",
    "menu": "меню",
    "Size data": "Размер данных",
    "data from server": "данных с сервера",
    "Error download data, load local settings": "Ошибка получения данных, загружены локальные настройки",
    "Menu": "Меню",
    "Store data": "Хранить данные",
    "Save and": "Сохранить и",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Сохранение данных на сервер происходит каждые 5 минут или по нажатию кнопки Меню Сохранить и",
    "On Server": "На сервере",
    "Local": "Локально",
    "ChtenieNastroekPoiska": "Чтение настроек поиска",
    "Vozobnovlenie": "Возобновление",
    "Soobshestvo": "Сообщество",
    "ObsuzhdenieProblemIpredlozhenij": "Обсуждение проблем и предложений",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Добровольный сбор средств на оплату хостинга",
    "Vash": "Ваш",
    "macAdres": "мак-адрес",
    "SborInfo": "Укажите в комментарии к платежу ваш мак-адрес чтобы мы знали кого благодарить за поддержку! Или нажмите Enter / OK сейчас, чтобы сообщить о поддержке",
    "404NotFound": "Ошибка 404. Такого файла не существует",
    "HotiteIskatVdrugihMestah": "Хотите искать это других местах",
    "Vospolzuites": "Воспользуйтесь",
    "NaitiVglobPoiske": "Найти в глобальном поиске",
    "GlobPoisk": "Глобальный поиск",
    "DobroPozhalovat": "Новая вкладка",
    "Frequently Visited Sites": "Часто посещаемые сайты",
    "ViberiteChtoIskat": "Выберите что искать",
    "ViberiteEpg": "Выберите нужный ЕПГ для канала",
    "Stranica": "Страница",
    "ZdesPusto": "Здесь пусто",
    "PoiskPrervan": "Поиск прерван",
    "UdalenaGrupa": "Была удалена начальная группа",
    "StartovoeMenu": "Стартовое меню",
    "Sync": "Синхронизация",
    "Export": "Экспорт",
    "SaveSetServ": "Сохранить настройки на сервере",
    "Import": "Импорт",
    "nastrdruga": "настроек",
    "VvLogDr": "Введите логин пользователя от сайта",
    "PolNastrDr": "Получить настройки пользователя",
    "Are you sure": "Вы уверены",
    "Delete": "Удалить",
    "EtoMozhUd": "Это может удалить текущие настройки виджета",
    "Steret": "Стереть",
    "Internet TV": "Интернет телевидение",
    "NastroikiPrilozheniya": "Настройки приложения",
    "NastrStartMenu": "Настройки стартового меню",
    "NastrGlPoisk": "Поисковая система",
    "DobavlenoV": "Добавлено в",
    "DlVklPer": "Для включения перейдите в Настройки / Настройки поиска /",
    "ZaklUzheEst": "Такая закладка уже есть",
    "vstm": "в стартовом меню",
    "UdMsNsM": "Удалить из стартового меню можно в <br>Настройки / Настройки Стартового меню",
    "Udalit": "Удалить",
    "Clear": "Очистить",
    "Vstavit": "Вставить",
    "Kopirovat": "Копировать",
    "Ssilka": "Ссылка",
    "NazhmVpravo": "Нажмите вправо",
    "chud": "чтобы удалить",
    "Vkl": "Включено",
    "Otkl": "Отключено",
    "Vkl.": "Вкл.",
    "Otkl.": "Откл.",
    "Button": "Кнопка",
    "PeremV": "Переместить в",
    "IstOchishena": "История очищена",
    "PrRabStogoMesta": "Продолжать работу с того же места",
    "Nastroiki": "Настройки",
    "ChPoyas": "Часовой пояс",
    "Time offset": "Смещение времени",
    "Perekl": "Перекл.",
    "KachVideo": "Качество видео",
    "KolStrok": "Количество строк",
    "Videopleer": "Видеоплеер",
    "pleer": "плеер",
    "Sortirovka": "Сортировка",
    "Rezhim": "Режим",
    "NachGrupa": "Начальная группа",
    "NazhVprVl": "Нажимайте влево - вправо для изменения",
    "RodKontr": "Родительский контроль",
    "FonRisunok": "Фоновый рисунок",
    "Mac address": "Мак адрес",
    "YarkFon": "Яркость фона (Произв.)",
    "CvetText": "Цвет текста",
    "VkKod": "Вконтакте код",
    "MoiUvedoml": "Мои уведомления",
    "PolnSbrosNastr": "Полный сброс настроек",
    "Yazik": "Язык",
    "VibSait": "Выбор сайтов по которым будет вестись глобальный поиск",
    "VibStM": "Выбор сайтов отображаемых в стартовом меню",
    "PereklM": "Переключение между",
    "UznFsCxz": "Узнать какой именно из них у вас работает, а с какого будет выдавать ошибку 404 можно открыв у себя на компьютере",
    "DelMuvT": "Делайте меньше для увеличения текста",
    "TvpPu": "Тип видео плеера по умолчанию",
    "TipPu": "Тип плеера IPTV по умолчанию",
    "Sort": "Сортировать",
    "Enabling can slow opening iptv lists": "Включение может замедлить открытие списков iptv",
    "KartVKart": "Картинка в картинке<br>Автоматический предпросмотр видео в маленьком окошке (при отключенной опции PIP для выбранного видео включить можно кнопкой плей на пульте)",
    "vospr": "воспроизведения",
    "prilozheniya": "приложения",
    "RemoteInfo": "RemoteFork это вспомогательная программа для <br>— запуск с  некоторых  ресурсов (торренты, moonwalk)<br>— загрузка плейлистов с компьютера во внешние закладки без регистрации на сайте<br>— доступ к плейлистам,файлам компьютера с ForkPlayer<br>— плагины, работа сайтов требующих ремотефорка, торрент трекеры<br>Для включения необходимо скачать и запустить программу Remote Forkplayer на компьютере или андроиде подключенному к тому же роутеру что и ТВ<br>Ссылка на скачивание",
    "PrivVk": "Привязка своего аккаунта Вконтакте",
    "Font": "Шрифт",
    "polzovatelya": "пользователя",
    "SsilkaVkKod": "Ссылка где можно получить код привязки",
    "VashUvNp": "Ваши уведомления, например пароль от сайта",
    "ZsIsN": "Загрузка на сервер или скачивание всех настроек виджета",
    "zaklIist": "закладок и истории",
    "VvKodPr": "Введите код привязки ВК",
    "Auto": "Авто",
    "Tolko": "Только",
    "DlyaVsV": "Для всех видео",
    "BistrPoisk": "Быстрый поиск",
    "Parol": "Пароль",
    "parol": "пароль",
    "to": "до",
    "mo": "мес",
    "DlDostVv": "Для доступа введите",
    "DeistDoV": "действует до выхода в стартовое меню<br>Или нажмите Назад для отмены",
    "poumolch": "по умолчанию",
    "Adult content": "Взрослый контент",
    "Third-party content": "Сторонний контент",
    "SmIotk": "Сменить или отключить",
    "moV": "можно в",
    "RazblVkl": "Разблокировать вкладку",
    "EtaVklBzabl": "Эта вкладка была заблокирована",
    "DlRvIn": "Для разблокировки выделите ее и нажмите",
    "VvedNov": "Введите новый",
    "DlUdVved": "Для удаления введите",
    "ZablVkl": "Заблокировать вкладку",
    "UstSart": "Установить стартовой",
    "UdIzSt": "Удалить из стартовой",
    "ustanovit": "установить",
    "Media": "Медиа",
    "Vstroenniy": "Встроенный",
    "OtmNeProsm": "Отметить непросмотренным",
    "OtmProsm": "Отметить просмотренным",
    "DobavVglob": "Добавить в глобальный поиск",
    "Peredvinut": "Передвинуть",
    "VijtiV": "Выйти в",
    "EXIT": "ВЫХОД",
    "listSservera": "лист с сервера",
    "DobavitV": "Добавить в",
    "OchistitIstoriyu": "Очистить историю",
    "ObnovitStranicy": "Обновить страницу",
    "izZakladok": "из закладок",
    "PeremV": "Переместить в",
    "Clear cache": "Очистить кеш",
    "OshibkaSohrDannih": "Ошибка сохранения данных",
    "OshibkaChDannih": "Ошибка чтения данных",
    "ustanolen": "установлен",
    "VineSmP": "Вы не сменили пароль 0000!<br><i>Рекомендуем сменить пароль Родительского контроля для защиты от детей",
    "ParolDeistDk": "Пароль действует до выхода в стартовое меню! Не забудьте выйти в стартовое меню по окончанию",
    "nePodhodit": "не подходит",
    "PrilUstSh": "Приложения устанавливаются в смартхаб",
    "IzvFailovNo": "Извините, файлов не обнаружено",
    "sIst": "с источника",
    "PerPoAdr": "Перейти по адресу",
    "OshibkaParsPl": "Ошибка парсинга страницы",
    "OshibkaObrabotki": "Ошибка обработки",
    "Informaciya": "Информация",
    "Click now right to go to the category selection": "Нажмите сейчас вправо для перехода к выбору категории",
    "DlyaPerNsp": "Для перехода на следующую страницу нажмите кнопку вправо",
    "infodns": "Используйте RemoteFork<br>(в настройках, необходим компьютер или андроид) для более быстрой навигации по этому сайту",
    "January": "Января",
    "February": "Февраля",
    "March": "Марта",
    "April": "Апреля",
    "May": "Мая",
    "June": "Июня",
    "Jule": "Июля",
    "August": "Августа",
    "September": "Сентября",
    "October": "Октября",
    "November": "Ноября",
    "December": "Декабря",
    "Monday": "Пн",
    "Tuesday": "Вт",
    "Wednesday": "Ср",
    "Thursday": "Чт",
    "Friday": "Пт",
    "Saturday": "Сб",
    "Sunday": "Вс",
    "Md": "Пн",
    "Tu": "Вт",
    "Wd": "Ср",
    "Th": "Чт",
    "Fr": "Пт",
    "St": "Сб",
    "Sn": "Вс",
    "Subtitles": "Субтитры",
    "Oshibka": "Ошибка",
    "polVr": "получения времени",
    "ProvPravKodVk": "Проверьте правильность кода привязки ВК",
    "UspIdPolz": "Успешно!<br>ID пользователя",
    "NeobhUstIzap": "Необходимо установить и запустить на компьютере программу",
    "SbrositNastr": "Сбросить настройки",
    "VsaeZaklUd": "Все закладки, история, настройки будут удалены",
    "PrevLimOzh": "Превышен лимит ожидания",
    "opredDns": "определения ДНС",
    "infoVk": "Привязка своего аккаунта Вконтакте<br>Получения доступа к аудио и видео записям со своей странички на",
    "Configuring search": "Настройка поиска",
    "Configuring start menu": "Настройка старт. меню",
    "Top queries": "Топ запросов",
    "Enter search query or URL": "Введите поисковый запрос или URL",
    "infoNastrPoiska": "Настройка поиска<br><i>Вы можете настроить по каким сайтам производить поиск и порядок поиска в Настройках</i>",
    "VvediteText": "Введите текст",
    "PustayaSsilka": "Пуcтая ссылка",
    "Obrabotka": "Обработка",
    "NetOtvetaUbedRemote": "Нет ответа! Убедитесь что включен RemoteFork",
    "PovtorPop": "Повторная попытка",
    "ProvSostRem": "Проверьте состояние RemoteForkplayer на компьютере",
    "polSsilki": "получения ссылки",
    "EtoStList": "Это стартовый плейлист",
    "NeskEl": "Несколько элементов",
    "Add all links": "Добавить все ссылки",
    "stMenuSkr": "стартового меню  скрыто<br>Включить их можно в Настройках / Настройка старт. меню",
    "VvedAdrPl": "Введите адрес",
    "SudaMozhVv": "Введите адрес плейлиста M3U, XML",
    "Vkontakte": "Вконтакте",
    "VashaStrVk": "Ваша страница вконтакте",
    "PrivVk": "Привязать ВК",
    "KodPolZd": "Код получать здесь",
    "FailKnR": "Файлы вашего компьютера. (Необходимо запустить RemoteForkplayer на компьютере и включить",
    "ScachRemoteMozh": "Скачать RemoteForkplayer можно по адресу",
    "PamyatTv": "Память ТВ",
    "Navigaciya": "Навигация",
    "VverhVniz": "Вверх / Вниз",
    "Sohranit": "Сохранить",
    "VPLEER": "В ПЛЕЕР",
    "Vnutr": "Внутр",
    "Vnesh": "Внешн",
    "StartMenu": "Старт меню",
    "SleduushayaStr": "Следующая стр",
    "Ostanovleno": "Остановлено",
    "Iskat": "Искать",
    "Podkluchenie": "Соединение",
    "SoedineniePrervano": "Соединение прервано",
    "Preferred server": "Предпочитаемый сервер",
    "soedineniya": "соединения",
    "podklucheniya": "подключения",
    "SbrosVipolnenPerezpusk": "Сброс настроек приложения выполнен!<br>Перезапуск виджета",
    "Prodolzhit": "Продолжить",
    "Otmena": "Отмена",
    "Live search": "Живой поиск",
    "Screensaver": "Заставка",
    "To cancel the search, press again": "Для отмены поиска нажмите еще раз",
    "VseRavnoProdolzhit": "Все равно продолжить",
    "parsingaVideossilki": "парсинга видеоссылки",
    "NevernayaSsilka": "Неверная ссылка",
    "Proporcii": "Пропорции",
    "OpciiEkrana": "Опции экрана",
    "OchishPamyati": "Очищ. памяти",
    "min": "мин",
    "Kachestvo": "Качество",
    "Nedostupno": "Недоступно",
    "New inset": "Новая вкладка",
    "New private inset": "Новая приватная вкладка",
    "SeichasNedostupno": "Сейчас недоступно",
    "Shirina": "Ширина",
    "Visota": "Высота",
    "Buffer": "Буффер",
    "Mb": "Мб",
    "ZvukDorozhka": "Звук. дорожка",
    "Ekran": "Экран",
    "Gromkost": "Громкость",
    "Tip": "Тип",
    "Date": "Дата",
    "Album": "Альбом",
    "Original": "Оригинал",
    "Rastyanut": "Растянуть",
    "Ruchnoi": "Ручной",
    "VozobnovitNa": "Возобновить",
    "Posledovatelno": "Последовательно",
    "Povtoryat": "Повторять",
    "odin": "один",
    "vse": "все",
    "DostupRazreshen": "Доступ разрешен",
    "REKLAMA": "РЕКЛАМА",
    "PereadresaciyaNaFail": "Переадресация на файл",
    "Vneshniy": "Внешний",
    "Npl10IIOr1dDIlIlOOYpr": "Не подходит ТВ программа",
    "VoVremProsNazh": "Во время просмотра IPTV канала нажмите",
    "VmEmVp": "В Меню -> ЕПГ код можно выбрать подходящую",
    "dVp": "для выбора подходящей",
    "VmVpostBiCe": "Вместо видео постоянно белый или черный экран?<br><i>Попробуйте другой тип",
    "HotChtVfon": "Хотите чтобы видео играло в фоне? Нажмите",
    "vVrPrVid": "во время проигрывания видео",
    "Close tab": "Закрыть вкладку",
    "KnInfoPerRezh": "Кнопка инфо на пульте переключает режим отображения информации при просмотре видео",
    "Video": "Видео",
    "video": "видео",
    "nePodderzhivaetsya": "не поддерживается",
    "DrugZvDorNet": "Других звуковых дорожек нет",
    "PustayaIliUdalSsilkaVK": "Пустая или удаленая ссылка ВК",
    "Podtverdit": "Подтвердить",
    "OzhidaiteNeskSec": "Ожидайте несколько секунд",
    "NazhmExitEsheRazDlyaVihoda": "Нажмите EXIT еще раз для выхода",
    "ViNeSmeniliPassRodKontrRekomendSm": "Вы не сменили пароль 0000!<br><i>Рекомендуем сменить пароль Родительского контроля для защиты от детей</i>",
    "ParolDeistDk": "Пароль действует до выхода в стартовое меню! Не забудьте выйти в стартовое меню по окончанию",
    "PoiskAudio": "Поиск аудиозаписей",
    "Source code": "Исходный код",
    "PoiskVideo": "Поиск видеозаписей",
    "PoiskFoto": "Поиск фото (дост. без авторизации)",
    "MoiAudio": "Мои аудиозаписи",
    "MoiVideo": "Мои видеозаписи",
    "Recomend": "Рекомендации",
    "Popular": "Популярное",
    "Druzya": "Друзья",
    "Gruppi": "Группы",
    "SetFon": "Установить как фон",
    "Audio": "Аудиозаписи",
    "PoiskPeople": "Поиск людей",
    "Authorization": "Авторизация",
    "OshibkaAvtorizacii": "Ошибка авторизации",
    "VashiDruzya": "Ваши друзья",
    "VashiGruppi": "Ваши Группы",
    "Uchastnikov": "Участников",
    "byLogin": " по логину и паролю",
    "byCode": " по коду",
    "ForAccessNeedAuthorization": "Для доступа к vk.com необходимо авторизироваться!<br>(первые два пункта вверху на этой странице)",
    "IdetUstanovkaVidgeta": "Идет установка виджета",
    "Ustanovka": "Установка",
    "vidgeta": "виджета",
    "Razmer": "Размер",
    "GB": "ГБ",
    "MB": "МБ",
    "KB": "КБ",
    "Bait": "Байт",
    "Vidget": "Виджет",
    "Manually": "Вручную",
    "Enter": "Введите",
    "OpenWidget": "Открыть виджет",
    "Open": "Открыть",
    "InstallWidgetInSmartHub": "Если вы уверены, что это виджет для самсунг смарт тв, то нажмите ентер для установки",
    "recomOpenFromSmartHub": "необходимо запускать с смартхаба",
    "ForkPlayerByClosed": "ForkPlayer будет закрыт<br>Возможна работа не на весь экран, для полноценной работы",
    "NoDevices": "Нет подключенных",
    "Sorting": "Сортировка",
    "Archive": "Архив",
    "Higher": "Самый верх",
    "Top": "Верх",
    "Bottom": "Низ",
    "Lower": "Самый низ",
    "TVmemory": "Внутренняя память",
    "uzheEstVustanovlennih": "уже есть в установленных",
    "uspeshnoUstanovlen": "успешно установлен",
    "VnimanieSvobMesto": "Внимание! Убедитесь что в архиве находится именно виджет для самсунг смарт тв и достаточно свободного места",
    "ViklIvklTVchtobiUv": "Выключите и включите ТВ чтоб увидеть",
    "OshibkaUstanovki": "Ошибка установки",
    "vSmHubVidgNaidDop": "в смартхаб!</b><br>Виджет вы найдете в приложениях в смартхабе, или в Дополнительные приложения (Серия F)",
    "PustayaPapka": "Пустая папка",
    "BlueKnProporcii": "<i>Изменение пропорций видео</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> Синяя кнопка во время проигрывания видео",
    "Zakrit": "Закрыть",
    "NachatZanovo": "Начать заново",
    "ZagruzhatListiMozhoS": "Загружать сюда листы с компьютера можно с помощью",
    "Summa": "Сумма",
    "Valuta": "Валюта",
    "PlatSistema": "Платежная система",
    "NaprimerVchera": "Например, вчера в",
    "VvDatuPlatezha": "Введите дату и время платежа",
    "ThanksForYou": "Спасибо за поддержку проекта",
    "Ozhidanie": "Ожидание",
    "Prinyato": "Обработка",
    "Bookmark toolbar": "Панель закладок",
    "NeobhodimRemoteFork": "Для выполнения этой операции необходимо запустить RemoteFork на компьютере или андроиде<br>Подробнее на forkplayer.tv",
    "Translate": "Перевести страницу на ",
    "Yazik": "Язык",
    "OchistIst": "Очистить поле / историю",
    "VVOD": "ВВОД",
    "BistrijPoskVverh": "Быстр. поиск: Вверх",
    "Vniz": "Вниз",
    "Vibrat": "Выбрать",
    "Documenti": "Документы",
    "Photo": "Фотографии",
    "fromPage": "со страницы",
    "fromWall": "со стены",
    "photo": "фото",
    "Exit": "Выйти",
    "SavedPhoto": "Сохраненные фотографии",
    "Slideshow": "Слайдшоу",
    "sec": "сек",
    "Category": "КАТЕГОРИЯ",
    "Categorys": "Категории",
    "ForResetAppPressButton": "Для сброса настроек, нажмите сейчас кнопку",
    "ALL": "ВСЕ",
    "OpenFromProxy": "Запуск через прокси",
    "PredpDor": "Предп. дорожка",
    "InFullScreen": "На весь экран",
    "DearPeople": "Уважаемые пользователи!<br>ForkPlayer - это браузер с адаптированным под ваше устройство просмотром ваших любимых сайтов и созданных вами XML, M3U (IPTV) плейлистов.",
    "Iread": "Я прочитал(а)",
    "NotShow": "Больше не показывать",
    "AudioMini": "Аудио мини",
    "OffMiniPlayer": "Здесь можно отключить использование специального мини плеера для проигрывания mp3 файлов",
    "ConnectToServer": "Соединение с сервером",
    "NewDNS": "Доступен новый ДНС",
    "From": "Отправитель",
    "AutoSync": "Автосинхронизация",
    "Mark": "Отметить",
    "several": "несколько",
    "existOverwrite": "существует! Перезаписать?",
    "OverwriteAll": "Перезаписать все",
    "SkipAll": "Пропустить все",
    "Deselect": "Отменить выделение",
    "Queue": "В очереди",
    "DeleteFromStartMenu": "Удалить из стартового меню",
    "Edit": "Редактировать",
    "Rename": "Переименовать",
    "Interface Setup": "Настройка интерфейса",
    "ChangeURLicon": "Сменить адрес иконки",
    "EnterURLicon": "Введите адрес иконки",
    "Icon": "Иконка",
    "SetIconFor": "Установить иконкой для",
    "EnterTitle": "Введите название",
    "SelectIcon": "Выбрать иконку",
    "Timeout connection to stream IPTV": "Таймаут подключения к IPTV",
    "SetDefaultStartMenu": "Сбросить настройки старт. меню",
    "PreviousFileWillBeOverwritten": "Предыдущий архив настроек будет перезаписан",
    "PressStopToCancel": "Нажмите Стоп для отмены",
    "Show rating": "Показывать рейтинг",
    "Count": "Количество",
    "Percent": "Проценты",
    "Server": "Сервер",
    "Show ratings and views of resources and playlists": "Показывать рейтинг и количество просмотров ресурсов и плейлистов",
    "WhileCopyingFilesCannotViewVideoAndAudio": "Во время копирования файлов нельзя смотреть видео и аудио",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "Нужно открыть и закрыть это видео в плеере, потом повторить копирование"
};
lIO11l11NEB100OYpr.de = {
    "_name": "Deutsch",
    "_powered": "by translate.yandex.ru",
    "mysets": "meine Einstellungen",
    "Zakladki": "Lesezeichen",
    "zakladki": "Lesezeichen",
    "Vneshnie": "Externe",
    "Vnutr": "Extern",
    "Istoriya": "Geschichte",
    "poiskov": "suchen",
    "Raznoe": "Verschiedene",
    "Seriali": "Serie",
    "Filmi": "Filme",
    "Tema": "Thema",
    "Oneaudiotrack": "Ein audio-track",
    "OpredelenieDns": "Die definition von CSN",
    "RegistraciyaVseti": "Netzwerk-Registrierung",
    "SchitivanieNastroek": "Lesen Einstellungen",
    "Inicializaciya": "Initialisierung",
    "pleera": "Spieler",
    "Zagruzka": "Download",
    "Interface": "Schnittstelle",
    "menu": "Menü",
    "Size data": "Die Größe der Daten",
    "data from server": "die Daten vom server",
    "Error download data, load local settings": "Fehler beim abrufen der Daten geladen lokale Konfiguration",
    "Menu": "Menü",
    "Store data": "Zum speichern von Daten",
    "Save and": "Speichern und",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Speichern von Daten auf dem server alle 5 Minuten oder durch drücken der Menu-Taste zum Speichern und",
    "On Server": "Auf dem server",
    "Local": "Lokal",
    "ChtenieNastroekPoiska": "Lesen Sucheinstellungen",
    "Vozobnovlenie": "Lebenslauf",
    "Soobshestvo": "Gemeinschaft",
    "ObsuzhdenieProblemIpredlozhenij": "Die Diskussion der Probleme und Vorschläge",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Freiwillige fundraising zahlen für das hosting",
    "Vash": "Ihre",
    "macAdres": "Mac-Adresse",
    "SborInfo": "In der Anmerkung der Zahlung, geben Sie Ihre Mac-Adresse zum deaktivieren der Werbung. Im start-Menü Abschnitt und IPTV werden auch zusätzliche Ressourcen und so weiter",
    "IliNazhmite": "Oder klicken Sie auf",
    "SoobshitOpodderzhke": "nun, zu zeigen Unterstützung",
    "404NotFound": "Die 404-Fehler. Diese Datei existiert nicht",
    "HotiteIskatVdrugihMestah": "Suchen Sie andere Orte",
    "Vospolzuites": "Verwenden",
    "NaitiVglobPoiske": "Gefunden werden in Globale Suche",
    "GlobPoisk": "Globale Suche",
    "DobroPozhalovat": "Willkommen",
    "ViberiteChtoIskat": "Wählen Sie, was Sie suchen",
    "ViberiteEpg": "Wählen Sie Ihre gewünschte EPG-Kanal",
    "Stranica": "Seite",
    "ZdesPusto": "Es ist leer",
    "PoiskPrervan": "Suche abgebrochen",
    "UdalenaGrupa": "Wurde gelöscht am Start",
    "StartovoeMenu": "Start-Menü",
    "Sync": "Sync",
    "Export": "Exportieren",
    "SaveSetServ": "Speichern Sie die Einstellungen auf dem server",
    "Import": "Importieren",
    "nastrdruga": "Einstellungen",
    "VvLogDr": "Geben Sie die Benutzer-Anmeldung über die website",
    "PolNastrDr": "Holen Sie Benutzer-Einstellungen",
    "EtoMozhUd": "Sie können löschen Sie die aktuellen Einstellungen des widgets",
    "Steret": "Löschen",
    "NastroikiPrilozheniya": "Anwendung Einstellungen",
    "NastrStartMenu": "Einstellungen start-Menü",
    "DobavlenoV": "Hinzugefügt",
    "DlVklPer": "Zu aktivieren, gehen Sie zu Einstellungen / Suche Preferences /",
    "ZaklUzheEst": "Diese Registerkarte ist schon da",
    "vstm": "im start-Menü",
    "UdMsNsM": "Entfernen Sie aus dem start-Menü in der <br>Einstellungen / Einstellungen Start-Menü",
    "Udalit": "Löschen",
    "Clear": "Klar",
    "Vstavit": "Einfügen",
    "Kopirovat": "Kopieren",
    "Ssilka": "Link",
    "NazhmVpravo": "Klicken Sie rechts",
    "chud": "entfernen",
    "Vkl": "Aktiviert",
    "Otkl": "Deaktiviert",
    "Vkl.": "Auf",
    "Otkl.": "Aus",
    "PeremV": "Bewegen",
    "IstOchishena": "Geschichte gelöscht",
    "PrRabStogoMesta": "Weiterhin von der gleichen Stelle",
    "Nastroiki": "Einstellungen",
    "ChPoyas": "Zeit-zone",
    "Perekl": "Wechseln",
    "KachVideo": "Die video-Qualität",
    "KolStrok": "Die Anzahl der Zeilen",
    "Videopleer": "Video-player",
    "pleer": "Spieler",
    "Sortirovka": "Sortieren",
    "Rezhim": "Modus",
    "NachGrupa": "Die erste Gruppe",
    "NazhVprVl": "Drücken Sie Links und rechts auf ändern",
    "RodKontr": "Kindersicherung",
    "FonRisunok": "Der hintergrund Bild",
    "YarkFon": "Die Helligkeit des Hintergrunds",
    "CvetText": "Die Farbe des Textes",
    "VkKod": "VK.COM code",
    "MoiUvedoml": "Meine Benachrichtigungen",
    "PolnSbrosNastr": "Full reset",
    "Yazik": "Sprache",
    "VibSait": "Auswahl von Websites, um die Durchführung einer globalen Suche",
    "VibStM": "Die Auswahl der Standorte im Menü start angezeigt",
    "PereklM": "Umschalten zwischen",
    "UznFsCxz": "Um zu erfahren, welche von Ihnen für Sie arbeitet, und was wird generieren Fehler 404 können auf Ihrem computer geöffnet",
    "DelMuvT": "Weniger tun, um den text vergrößern",
    "TvpPu": "Die Art der video-player standardmäßig",
    "TipPu": "Die Art von Spieler IPTV standardmäßig",
    "Sort": "Sortieren",
    "KartVKart": "Bild-in-Bild<br>Automatische Vorschau videos in einem kleinen Fenster (wenn PIP ist deaktiviert für das ausgewählte video, können Sie die play-Taste auf der Fernbedienung)",
    "vospr": "spielen",
    "prilozheniya": "app",
    "RemoteInfo": "Verarbeitung links ohne Verwendung von DNS - (LG, Sony, Philips) mit einem computer oder Android. Verfügbar 'Dateien und Ordner' auf fs.(1080p)<br>um es Zu aktivieren, downloaden Sie und führen Sie das Programm Forkplayer auf dem Remote-PC oder Android-mit dem gleichen router verbunden-für-TV - <br>download-Link",
    "PrivVk": "Binden VK.COM",
    "polzovatelya": "Benutzer",
    "SsilkaVkKod": "Der link, wo man die Bindung code",
    "VashUvNp": "Ihre Benachrichtigungen, wie das Passwort von der Website",
    "ZsIsN": "Hoch-oder herunterladen alle widget-Einstellungen",
    "zaklIist": "Lesezeichen und Geschichte",
    "VvKodPr": "Geben Sie die Bindung code VK.COM",
    "Auto": "Auto",
    "Tolko": "Nur",
    "DlyaVsV": "Für alle videos",
    "BistrPoisk": "Schnellsuche",
    "Parol": "Passwort",
    "parol": "Passwort",
    "DlDostVv": "Zugreifen, geben Sie Ihre",
    "DeistDoV": "gültig bis, verlassen Sie das widget",
    "poumolch": "standardmäßig",
    "SmIotk": "Zu ändern oder zu deaktivieren",
    "moV": "in",
    "RazblVkl": "Unblock-Registerkarte",
    "EtaVklBzabl": "Dieses Register wurde gesperrt",
    "DlRvIn": "Um die Sperre aufzuheben, markieren Sie es und drücken Sie",
    "VvedNov": "Geben Sie den neuen",
    "DlUdVved": "Zum entfernen geben",
    "ZablVkl": "Sicherungsriegel",
    "UstSart": "Um die ab",
    "UdIzSt": "Entfernen Sie aus dem Start",
    "ustanovit": "set",
    "Media": "Medien",
    "Vstroenniy": "Built-in",
    "OtmNeProsm": "Markieren Sie unbeobachtet",
    "OtmProsm": "Daneben angezeigt",
    "DobavVglob": "Fügen Sie in der globalen Suche",
    "Peredvinut": "Bewegen",
    "VijtiV": "Ausfahrt",
    "EXIT": "BEENDEN",
    "listSservera": "Blatt vom server",
    "DobavitV": "Hinzufügen",
    "OchistitIstoriyu": "Verlauf löschen",
    "ObnovitStranicy": "Um die Seite zu aktualisieren",
    "izZakladok": "von Lesezeichen",
    "OshibkaSohrDannih": "Fehler beim speichern der Daten",
    "OshibkaChDannih": "Fehler beim Lesen der Daten",
    "ustanolen": "installiert",
    "VineSmP": "Sie haben sich nicht verändert, das Passwort ist 0000!<br><i>Empfehlen, dass Sie das Kennwort für die Kindersicherung zum Schutz Ihrer Kinder vor",
    "ParolDeistDk": "Das Passwort gültig ist, bis Sie die app beenden! Vergessen Sie nicht, verlassen Sie das widget am Ende",
    "nePodhodit": "nicht geeignet",
    "PrilUstSh": "Anwendungen installiert werden, in smarthab",
    "IzvFailovNo": "Sorry, Datei nicht gefunden",
    "sIst": "Quelle",
    "PerPoAdr": "Gehen Sie zu web-Adresse",
    "OshibkaParsPl": "Fehler beim Parsen der playlist",
    "OshibkaObrabotki": "Fehler bei der Verarbeitung",
    "Informaciya": "Informationen",
    "DlyaPerNsp": "Gehen Sie auf die nächste Seite drücken Sie den rechten Knopf",
    "infodns": "Verwenden RemoteFork<br>(in den Einstellungen, benötigen Sie einen computer oder Android) für eine schnellere navigation auf dieser website",
    "January": "Januar",
    "February": "Februar",
    "March": "März",
    "April": "April",
    "May": "Kann",
    "June": "Juni",
    "Jule": "Juli",
    "August": "August",
    "September": "September",
    "October": "Oktober",
    "November": "November",
    "December": "Dezember",
    "Monday": "Montag",
    "Tuesday": "Dienstag",
    "Wednesday": "Mittwoch",
    "Thursday": "Donnerstag",
    "Friday": "Freitag",
    "Saturday": "Samstag",
    "Sunday": "Sonntag",
    "Md": "Mo",
    "Tu": "W",
    "Wd": "MS",
    "Th": "Th",
    "Fr": "FR",
    "St": "Sa",
    "Sn": "Sonne",
    "Oshibka": "Fehler",
    "polVr": "Holen Sie sich die Zeit",
    "ProvPravKodVk": "Überprüfen Sie die korrekte Bindung code VK.COM",
    "UspIdPolz": "Erfolgreich!<br>Benutzer-ID",
    "NeobhUstIzap": "Sie müssen installieren und auf Ihrem computer ausführen",
    "SbrositNastr": "Zurücksetzen",
    "VsaeZaklUd": "Alle Lesezeichen, Verlauf, Einstellungen werden gelöscht",
    "PrevLimOzh": "Überschritten die Grenze von Erwartungen",
    "opredDns": "definieren DNS",
    "infoVk": "Verknüpfen Sie Ihre Vk.COM Konto<br>Zugriff auf die audio-und video-Aufnahmen, um Ihre Seite auf",
    "infoNastrPoiska": "Konfigurieren suchen,<br><i>Sie können einstellen, welche Seiten zu suchen und die Suche, um in die Einstellungen</i>",
    "VvediteText": "Geben Sie den text ein",
    "PustayaSsilka": "Ein null-Verweis",
    "Obrabotka": "Verarbeitung",
    "NetOtvetaUbedRemote": "Keine Antwort! Stellen Sie sicher, was ist im Lieferumfang enthalten RemoteFork",
    "PovtorPop": "Wiederholen",
    "ProvSostRem": "Überprüfen Sie den status RemoteForkplayer auf dem computer",
    "polSsilki": "ein Verweis",
    "EtoStList": "Dieses starter-playlist",
    "NeskEl": "Mehrere Elemente",
    "stMenuSkr": "das start-Menü wird ausgeblendet<br>Sie können in den Einstellungen aktiviert / Konfiguration starten. Menü",
    "VvedAdrPl": "Geben Sie die Adresse",
    "SudaMozhVv": "Hier können Sie manuell geben Sie die Adresse der playlist",
    "Vkontakte": "Vkontakte",
    "VashaStrVk": "Ihre Seite Vkontakte",
    "KodPolZd": "Code hier",
    "FailKnR": "Die Dateien auf Ihrem computer. (Sie brauchen, um ausführen RemoteForkplayer auf dem computer und schließen",
    "ScachRemoteMozh": "Download RemoteForkplayer kann",
    "PamyatTv": "Speicher-TV",
    "Navigaciya": "Navigation",
    "VverhVniz": "Up / Down",
    "Sohranit": "Speichern",
    "VPLEER": "IM PLAYER",
    "Vnesh": "Externe",
    "StartMenu": "Start-Menü",
    "SleduushayaStr": "Nächste Seite",
    "Ostanovleno": "Gestoppt",
    "Iskat": "Suche",
    "Podkluchenie": "Verbindung",
    "SoedineniePrervano": "Die Verbindung wurde beendet",
    "soedineniya": "Verbindung",
    "podklucheniya": "Verbindung",
    "SbrosVipolnenPerezpusk": "Zurücksetzen der Antrag gestellt wird!<br>Starten Sie den widget",
    "Prodolzhit": "Weiter",
    "Otmena": "Abbrechen",
    "VseRavnoProdolzhit": "Trotzdem weiter",
    "parsingaVideossilki": "analysieren link",
    "NevernayaSsilka": "Falsche link",
    "Proporcii": "Proportionen",
    "OpciiEkrana": "Optionen-Bildschirm",
    "OchishPamyati": "Extra. Speicher",
    "min": "min",
    "Kachestvo": "Qualität",
    "Nedostupno": "Nicht verfügbar",
    "SeichasNedostupno": "Derzeit nicht verfügbar",
    "Shirina": "Breite",
    "Visota": "Höhe",
    "Buffer": "Puffer",
    "Mb": "MB",
    "ZvukDorozhka": "Sound. track",
    "Ekran": "Bildschirm",
    "Gromkost": "Die Lautstärke",
    "Tip": "Geben",
    "Date": "Datum",
    "Album": "Album",
    "Original": "Das original",
    "Rastyanut": "Stretch",
    "Ruchnoi": "Handbuch",
    "VozobnovitNa": "Lebenslauf",
    "Posledovatelno": "Konsequent",
    "Povtoryat": "Wiederholen",
    "odin": "ein",
    "vse": "alle",
    "DostupRazreshen": "Der Zugriff erlaubt ist",
    "REKLAMA": "WERBUNG",
    "PereadresaciyaNaFail": "Die Umleitung auf die Datei",
    "Vneshniy": "Externe",
    "Npl10IIOr1dDIlIlOOYpr": "Nicht geeignet TV-Programm",
    "VoVremProsNazh": "Während Sie IPTV-Kanal drücken",
    "VmEmVp": "Im Menü -> EPG-code können Sie wählen Sie eine geeignete",
    "dVp": "wählen Sie eine geeignete",
    "VmVpostBiCe": "Das video ist dauerhaft weißen oder schwarzen Bildschirm?<br><i>Versuchen Sie eine andere Art",
    "HotChtVfon": "Möchten Sie videos im hintergrund spielt? Klicken Sie auf",
    "vVrPrVid": "während der video-Wiedergabe",
    "KnInfoPerRezh": "Die info-Taste auf der Fernbedienung wechselt die Anzeige von Informationen, wenn Sie ein video ansehen",
    "Video": "Video",
    "video": "video",
    "nePodderzhivaetsya": "nicht unterstützt",
    "DrugZvDorNet": "Andere audio-tracks",
    "PustayaIliUdalSsilkaVK": "Leeren oder löschen Sie den link VK",
    "Podtverdit": "Bestätigen",
    "OzhidaiteNeskSec": "Warten Sie ein paar Sekunden",
    "NazhmExitEsheRazDlyaVihoda": "Drücken Sie EXIT wieder verlassen",
    "ViNeSmeniliPassRodKontrRekomendSm": "Sie haben sich nicht verändert, das Passwort ist 0000!<br><i>Empfehlen, dass Sie die Kindersicherung Kennwort für die Kindersicherung</i>",
    "PoiskAudio": "Suche audio",
    "PoiskVideo": "Suche für videozapisi",
    "PoiskFoto": "Suche Foto (Hon. ohne Genehmigung)",
    "MoiAudio": "Meine Musik",
    "MoiVideo": "Meine videos",
    "Recomend": "Empfehlungen",
    "Popular": "Beliebt",
    "Druzya": "Freunde",
    "Gruppi": "Gruppe",
    "SetFon": "Legen Sie als hintergrund",
    "Audio": "Audio",
    "PoiskPeople": "Personen Suche",
    "Authorization": "Genehmigung",
    "OshibkaAvtorizacii": "Berechtigungsfehler",
    "VashiDruzya": "Ihre Freunde",
    "VashiGruppi": "Ihre Gruppe",
    "Uchastnikov": "Teilnehmer",
    "byLogin": "durch login und Passwort",
    "byCode": "code",
    "ForAccessNeedAuthorization": "Zugriff vk.com Sie müssen sich anmelden!<br>(die ersten zwei Absätze oben auf der Seite)",
    "IdetUstanovkaVidgeta": "Widget installieren",
    "Ustanovka": "Installation",
    "vidgeta": "widget",
    "Razmer": "Größe",
    "GB": "GB",
    "MB": "MB",
    "KB": "KB",
    "Bait": "Bytes",
    "Vidget": "Widget",
    "OpenWidget": "Zugriff auf das widget",
    "Open": "Zugriff",
    "InstallWidgetInSmartHub": "Wenn Sie sicher sind, dass dies ist ein widget für den Samsung smart TV, drücken Sie dann die EINGABETASTE, um zu installieren",
    "recomOpenFromSmartHub": "Sie müssen beginnen mit SmartHub",
    "ForkPlayerByClosed": "ForkPlayer geschlossen<br>es ist Möglich, arbeiten nicht Vollbild, um das Werk zu vollenden",
    "NoDevices": "Nicht angeschlossen",
    "TVmemory": "Interner Speicher",
    "uzheEstVustanovlennih": "bereits installiert",
    "uspeshnoUstanovlen": "erfolgreich installiert",
    "VnimanieSvobMesto": "Achtung! Stellen Sie sicher, dass das Archiv ist genau das widget für den Samsung smart TV und genügend freier Speicherplatz",
    "ViklIvklTVchtobiUv": "Aus-und wieder einschalten-TV zu sehen",
    "OshibkaUstanovki": "Fehler bei der Installation",
    "vSmHubVidgNaidDop": "in smartha!</b><br>Sie finden Widget in Anwendungen, in SmartHome oder Mehr Anwendungen (F-Serie)",
    "PustayaPapka": "Einen leeren Ordner",
    "BlueKnProporcii": "<i>stretching video</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> Blaue Taste während der video-Wiedergabe",
    "Zakrit": "Schließen",
    "NachatZanovo": "Um von vorn zu beginnen",
    "ZagruzhatListiMozhoS": "Laden Sie hier die Blätter vom computer aus mit",
    "Summa": "Die Höhe",
    "Valuta": "Währung",
    "PlatSistema": "Payment-system",
    "NaprimerVchera": "Zum Beispiel gestern in",
    "VvDatuPlatezha": "Geben Sie das Datum und die Zeit der Zahlung",
    "ThanksForYou": "Vielen Dank für die Unterstützung des Projekts",
    "Ozhidanie": "Warten",
    "Prinyato": "Verarbeitung",
    "NeobhodimRemoteFork": "Um dies zu tun, müssen Sie führen RemoteFork auf Ihrem computer oder Android<br>Mehr info auf forkplayer.tv",
    "Translate": "Die Seite zu übersetzen ins",
    "OchistIst": "Klar. East.",
    "VVOD": "GEBEN Sie",
    "BistrijPoskVverh": "Schnell. Suche: Up",
    "Vniz": "Unten",
    "Vibrat": "Wählen",
    "Documenti": "Dokumente",
    "Photo": "Fotos",
    "fromPage": "Seite",
    "fromWall": "von der Wand",
    "photo": "Foto",
    "Exit": "Aus",
    "SavedPhoto": "Gespeicherte Fotos",
    "Slideshow": "Diashow",
    "sec": "h",
    "Category": "KATEGORIE",
    "Categorys": "Kategorien",
    "ForResetAppPressButton": "Zurückzusetzen, drücken Sie den button jetzt",
    "ALL": "ALLE",
    "OpenFromProxy": "Führen Sie über einen proxy",
    "PredpDor": "Website. track",
    "InFullScreen": "Vollbild",
    "DearPeople": "Liebe user!<br>ForkPlayer ist ein browser-angepasst an Ihr Gerät, um Ihre Lieblings-websites und erstellte XML, M3U (IPTV) Wiedergabelisten.",
    "Iread": "Ich lese(a)",
    "NotShow": "Nicht zeigen",
    "AudioMini": "Audio-mini",
    "OffMiniPlayer": "Hier können Sie deaktivieren Sie die Verwendung von einem speziellen player zum Abspielen von mp3-Dateien",
    "ConnectToServer": "Die Verbindung zum server",
    "NewDNS": "Neue DNS",
    "From": "Der Absender",
    "AutoSync": "Auto-sync",
    "Mark": "Hinweis",
    "several": "mehrere",
    "existOverwrite": "existieren! Überschreiben?",
    "OverwriteAll": "Überschreiben Sie alle",
    "SkipAll": "Überspringen Sie alle",
    "Deselect": "Deaktivieren",
    "Queue": "In der Warteschlange",
    "DeleteFromStartMenu": "Entfernen Sie aus dem Startmenü",
    "Edit": "Bearbeiten",
    "Rename": "Umbenennen",
    "ChangeURLicon": "Auf Adresse ändern icons",
    "EnterURLicon": "Geben Sie die Adresse des icons",
    "Icon": "Symbol",
    "SetIconFor": "Setzen Sie das Symbol für",
    "EnterTitle": "Geben Sie den Namen",
    "SelectIcon": "Wählen Sie das Symbol",
    "Timeout connection to stream IPTV": "Timeout der Verbindung zu IPTV",
    "SetDefaultStartMenu": "Reset starten. Menü",
    "PreviousFileWillBeOverwritten": "Bisherige Datei überschrieben werden",
    "PressStopToCancel": "Drücken Sie Stop, um abzubrechen",
    "WhileCopyingFilesCannotViewVideoAndAudio": "Beim kopieren von Dateien ist es unmöglich zu sehen video und audio",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "Öffnen und schließen Sie den video-player, dann wiederholen kopieren",
    "Server": "Server"
};
lIO11l11NEB100OYpr.zh = {
    "_name": "中文",
    "_powered": "by translate.yandex.ru",
    "mysets": "我的环境",
    "Zakladki": "书签",
    "zakladki": "书签",
    "Vneshnie": "外",
    "Vnutr": "电话分机：",
    "Istoriya": "历史",
    "poiskov": "搜查",
    "Raznoe": "不同的",
    "Seriali": "系列",
    "Filmi": "电影",
    "Tema": "主题",
    "Oneaudiotrack": "一个声道",
    "OpredelenieDns": "该定义有特殊需要的国家",
    "RegistraciyaVseti": "网络登记",
    "SchitivanieNastroek": "读环境",
    "Inicializaciya": "启动",
    "pleera": "球员",
    "Zagruzka": "下载",
    "Interface": "接口",
    "menu": "菜单",
    "Size data": "规模的数据",
    "data from server": "该数据服务器",
    "Error download data, load local settings": "错误获得数据，用上膛的当地组合",
    "Menu": "菜单",
    "Store data": "储存数据",
    "Save and": "拯救",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "拯救数据服务器每15分钟或紧迫的菜色按钮就可以拯救和",
    "On Server": "关于服务器",
    "Local": "在地方",
    "ChtenieNastroekPoiska": "读读搜查环境",
    "Vozobnovlenie": "恢复",
    "Soobshestvo": "社会",
    "ObsuzhdenieProblemIpredlozhenij": "讨论的问题和建议",
    "DobrovolnijSborSredstvNaOplatuHostinga": "自愿筹资支付办",
    "Vash": "你的",
    "macAdres": "麦克-地址",
    "SborInfo": "在注意到付款，进入你的麦克处理解除广告。 在开始节菜单和IPTV还将增加额外资源，以便在",
    "IliNazhmite": "或者点击",
    "SoobshitOpodderzhke": "现在，表示支持",
    "404NotFound": "第404错误。 这份文件并不存在",
    "HotiteIskatVdrugihMestah": "想找其他的地方",
    "Vospolzuites": "使用",
    "NaitiVglobPoiske": "在全球搜寻",
    "GlobPoisk": "全球搜索",
    "DobroPozhalovat": "欢迎",
    "ViberiteChtoIskat": "选择你要找什么",
    "ViberiteEpg": "选择你的期望EPG频道",
    "Stranica": "一页",
    "ZdesPusto": "它是空的",
    "PoiskPrervan": "搜查流产",
    "UdalenaGrupa": "删除关于启动",
    "StartovoeMenu": "开菜单",
    "Sync": "同步",
    "Export": "出口",
    "SaveSetServ": "拯救环境中的服务器",
    "Import": "进口",
    "nastrdruga": "环境下",
    "VvLogDr": "进入用户登录网站",
    "PolNastrDr": "让用户环境中",
    "EtoMozhUd": "它可以删除的目前环境中的应用程序",
    "Steret": "抹去",
    "NastroikiPrilozheniya": "适用的环境中",
    "NastrStartMenu": "环境中开始的菜单",
    "DobavlenoV": "增加",
    "DlVklPer": "启动走向环境/寻求的优惠/",
    "ZaklUzheEst": "这一账单已经到那里",
    "vstm": "在开始的菜单",
    "UdMsNsM": "消除从一开始菜单在<br>环境/环境中开始的菜单",
    "Udalit": "删除",
    "Clear": "清楚的",
    "Vstavit": "插入",
    "Kopirovat": "本",
    "Ssilka": "联系",
    "NazhmVpravo": "点击的权利",
    "chud": "消除",
    "Vkl": "使",
    "Otkl": "残疾人",
    "Vkl.": "关于",
    "Otkl.": "下",
    "PeremV": "搬到",
    "IstOchishena": "故事清除了",
    "PrRabStogoMesta": "继续从同一个地方",
    "Nastroiki": "环境下",
    "ChPoyas": "时区",
    "Perekl": "换",
    "KachVideo": "录像的质量",
    "KolStrok": "数排",
    "Videopleer": "录像机",
    "pleer": "球员",
    "Sortirovka": "分类",
    "Rezhim": "模式",
    "NachGrupa": "最初的小组",
    "NazhVprVl": "新闻左右改变",
    "RodKontr": "父母的管制",
    "FonRisunok": "的背景图像",
    "YarkFon": "明亮的背景",
    "CvetText": "颜色的短信",
    "VkKod": "VK.COM 法》",
    "MoiUvedoml": "我的通知",
    "PolnSbrosNastr": "全面重新设置",
    "Yazik": "的语言",
    "VibSait": "选择的地点进行的全球搜索",
    "VibStM": "在选择地点展示在开始的菜单",
    "PereklM": "它们之间互换",
    "UznFsCxz": "学习他们对你还是那么将会产生错误404能打开你的电脑",
    "DelMuvT": "做的少一扩大的案文",
    "TvpPu": "的类型录像机的违约",
    "TipPu": "那种IPTV的违约",
    "Sort": "种",
    "KartVKart": "画中画<br>自动预录在一个很小的窗户(如果皮普是残疾人的特选录像带上,你能把这玩按钮在遥远的)",
    "vospr": "玩",
    "prilozheniya": "应用程序",
    "RemoteInfo": "处理链路，而不采用简称dns(LG,Sony,菲利普公司）利用电脑机器人 握的档案和文件关于金融服务。(1080p)<br>使它能够下载和运行程序Forkplayer关于远距离PC或机关相同的路由器在电视台<br>下载的联系",
    "PrivVk": "束缚VK.COM",
    "polzovatelya": "用户",
    "SsilkaVkKod": "联系你就可以得到具有法律约束力",
    "VashUvNp": "你的通知，如有密码的网站",
    "ZsIsN": "上传或下载的所有应用程序的环境下",
    "zaklIist": "书签和历史",
    "VvKodPr": "进入具有法律约束力VK.COM",
    "Auto": "汽车",
    "Tolko": "只",
    "DlyaVsV": "所有的视频",
    "BistrPoisk": "快速搜索",
    "Parol": "密码",
    "parol": "密码",
    "DlDostVv": "获得进入你的",
    "DeistDoV": "有效，直到你离开小型应用程序",
    "poumolch": "由违约",
    "SmIotk": "改变或消除",
    "moV": "在",
    "RazblVkl": "打破僵持的账单",
    "EtaVklBzabl": "这一账户是锁着的",
    "DlRvIn": "解开，强调这和新闻",
    "VvedNov": "进入新的",
    "DlUdVved": "消除种",
    "ZablVkl": "锁的账单",
    "UstSart": "确定的开始",
    "UdIzSt": "消除从开始",
    "ustanovit": "套",
    "Media": "媒体",
    "Vstroenniy": "嵌入",
    "OtmNeProsm": "马克部无人观看",
    "OtmProsm": "马克看",
    "DobavVglob": "加上在全球搜寻",
    "Peredvinut": "搬",
    "VijtiV": "出口离开",
    "EXIT": "撤出",
    "listSservera": "表服务器",
    "DobavitV": "增加",
    "OchistitIstoriyu": "清楚的历史",
    "ObnovitStranicy": "更新的页数",
    "izZakladok": "从书签",
    "OshibkaSohrDannih": "错误，拯救数据",
    "OshibkaChDannih": "错误的读数据",
    "ustanolen": "安装了",
    "VineSmP": "你有没有改变密码是0000!<br><我们建议，你就改变了密码父母控制，以保护儿童免",
    "ParolDeistDk": "密码是有效的，直到你的退出程序了! 别忘了退出应用程序结束时",
    "nePodhodit": "不适合",
    "PrilUstSh": "应用安装在smarthab",
    "IzvFailovNo": "对不起，文档中找不到",
    "sIst": "资料来源",
    "PerPoAdr": "去网址",
    "OshibkaParsPl": "错误的讲的播放列表",
    "OshibkaObrabotki": "错误的处理",
    "Informaciya": "资料",
    "DlyaPerNsp": "去到下一页的新闻的权利按钮",
    "infodns": "使用RemoteFork<br>(在环境中，你们需要一个计算机或机器人）的更快的航行在这个网站",
    "January": "一月",
    "February": "二月",
    "March": "三月",
    "April": "四月",
    "May": "可",
    "June": "六月",
    "Jule": "七月",
    "August": "八月",
    "September": "九月",
    "October": "十月",
    "November": "十一月",
    "December": "十二月",
    "Monday": "星期一",
    "Tuesday": "星期二",
    "Wednesday": "星期三",
    "Thursday": "星期四",
    "Friday": "星期五",
    "Saturday": "星期六",
    "Sunday": "星期天",
    "Md": "我的",
    "Tu": "W",
    "Wd": "小姐",
    "Th": "...",
    "Fr": "Fri",
    "St": "坐在",
    "Sn": "太阳",
    "Oshibka": "错误",
    "polVr": "来的不是时候",
    "ProvPravKodVk": "看看正确的具有约束力的法典VK.COM",
    "UspIdPolz": "成功了!<br>的用户身份证",
    "NeobhUstIzap": "你必须安装和你的电脑",
    "SbrositNastr": "重新设置",
    "VsaeZaklUd": "所有书签、历史、背景下的部分将被删除",
    "PrevLimOzh": "超过了限制人们的期望",
    "opredDns": "确定简称dns",
    "infoVk": "联系你的Vk.COM 账户<br>进入音频和视频录音，你的网页",
    "infoNastrPoiska": "配置的搜索<br><我>你能配置的地点的搜查，并搜查，以便在环境中的</i>",
    "VvediteText": "进入该案文",
    "PustayaSsilka": "有无提及",
    "Obrabotka": "处理",
    "NetOtvetaUbedRemote": "蒙,把子弹给我我说但没有回答 确定什么是包括RemoteFork",
    "PovtorPop": "重审",
    "ProvSostRem": "检查状况RemoteForkplayer的电脑",
    "polSsilki": "去参考",
    "EtoStList": "这启动的播放列表",
    "NeskEl": "多个项目",
    "stMenuSkr": "开菜是藏<br>他们可以启动在环境/组合的开始。 菜单",
    "VvedAdrPl": "进入地址的播放列表",
    "SudaMozhVv": "在这里你可以用手工进入该地址的播放列表",
    "Vkontakte": "Vkontakte",
    "VashaStrVk": "你页Vkontakte",
    "KodPolZd": "密码在这里",
    "FailKnR": "文件在您的电脑上。 （你要跑RemoteForkplayer的电脑和包括：",
    "ScachRemoteMozh": "下载RemoteForkplayer可能",
    "PamyatTv": "电视台的记忆",
    "Navigaciya": "导航",
    "VverhVniz": "上/下",
    "Sohranit": "拯救",
    "VPLEER": "在球员",
    "Vnesh": "外",
    "StartMenu": "开菜单",
    "SleduushayaStr": "下一页",
    "Ostanovleno": "停下",
    "Iskat": "搜查",
    "Podkluchenie": "一方面",
    "SoedineniePrervano": "连接已终止",
    "soedineniya": "一方面",
    "podklucheniya": "一方面",
    "SbrosVipolnenPerezpusk": "重新提出申请的！<br>的重新启动的应用程序",
    "Prodolzhit": "继续",
    "Otmena": "取消",
    "VseRavnoProdolzhit": "继续不管怎样",
    "parsingaVideossilki": "讨论的联系",
    "NevernayaSsilka": "错误的联系",
    "Proporcii": "比例",
    "OpciiEkrana": "选择屏幕上",
    "OchishPamyati": "额外的。 的记忆",
    "min": "min",
    "Kachestvo": "质量",
    "Nedostupno": "没空",
    "SeichasNedostupno": "目前不可用的",
    "Shirina": "宽",
    "Visota": "身高",
    "Buffer": "缓冲",
    "Mb": "甲基溴",
    "ZvukDorozhka": "声音。 追踪",
    "Ekran": "屏幕上",
    "Gromkost": "该卷",
    "Tip": "类型",
    "Date": "约会",
    "Album": "专辑",
    "Original": "原始的",
    "Rastyanut": "伸展",
    "Ruchnoi": "手册",
    "VozobnovitNa": "恢",
    "Posledovatelno": "一贯",
    "Povtoryat": "重复一遍",
    "odin": "人",
    "vse": "所有",
    "DostupRazreshen": "获得允许",
    "REKLAMA": "广告",
    "PereadresaciyaNaFail": "调整方向的工作的档案",
    "Vneshniy": "外",
    "Npl10IIOr1dDIlIlOOYpr": "不适合电视节目",
    "VoVremProsNazh": "虽然看IPTV频道新闻",
    "VmEmVp": "在菜单->EPG密码你可以选择一个合适的",
    "dVp": "选择一个合适的",
    "VmVpostBiCe": "录像永远都是白人或黑屏幕上<br><我们尝试一种不同的类型",
    "HotChtVfon": "想要的录像带背后偷鸡摸狗的？ 咔",
    "vVrPrVid": "在录像回放",
    "KnInfoPerRezh": "信息按钮遥控开关的展示方式信息的时候看一段视频",
    "Video": "录像",
    "video": "录像",
    "nePodderzhivaetsya": "不支持",
    "DrugZvDorNet": "其他声音的踪迹那里",
    "PustayaIliUdalSsilkaVK": "空或删除的联系VK",
    "Podtverdit": "确认",
    "OzhidaiteNeskSec": "等几秒钟的时间",
    "NazhmExitEsheRazDlyaVihoda": "新闻出口再次出口",
    "ViNeSmeniliPassRodKontrRekomendSm": "你有没有改变密码是0000!<br><我们建议你改变父母的控制密码锁</i>",
    "PoiskAudio": "搜索音频",
    "PoiskVideo": "寻找videozapisi",
    "PoiskFoto": "搜索的照片（荣誉未经授权)",
    "MoiAudio": "我的音乐",
    "MoiVideo": "我的视频",
    "Recomend": "建议",
    "Popular": "受欢迎的",
    "Druzya": "朋友",
    "Gruppi": "小组",
    "SetFon": "作为背景",
    "Audio": "音",
    "PoiskPeople": "人们搜查",
    "Authorization": "授权",
    "OshibkaAvtorizacii": "授权的错误",
    "VashiDruzya": "你的朋友",
    "VashiGruppi": "你的小组",
    "Uchastnikov": "与会者",
    "byLogin": "通过登录名和密码",
    "byCode": "法》",
    "ForAccessNeedAuthorization": "获得vk.com 你必须要签名!<br>（前两款的顶层网页)",
    "IdetUstanovkaVidgeta": "安装应用程序",
    "Ustanovka": "安装",
    "vidgeta": "应用程序",
    "Razmer": "规模",
    "GB": "GB",
    "MB": "甲基溴",
    "KB": "KB",
    "Bait": "Bytes",
    "Vidget": "应用程序",
    "OpenWidget": "进入应用程序",
    "Open": "获得",
    "InstallWidgetInSmartHub": "如果你确定这是一个应用程序的三星聪明的电视新闻界进入安装",
    "recomOpenFromSmartHub": "你必须开始与SmartHub",
    "ForkPlayerByClosed": "ForkPlayer将关闭<br>是可能的工作不充分屏幕上完成的工作",
    "NoDevices": "不有联系",
    "TVmemory": "内部记忆",
    "uzheEstVustanovlennih": "已经安装的",
    "uspeshnoUstanovlen": "成功安装了",
    "VnimanieSvobMesto": "注意! 确保档案的完全应用程序的三星聪明的电视和足够的自由空间",
    "ViklIvklTVchtobiUv": "关掉并把在电视上看到",
    "OshibkaUstanovki": "安装错误",
    "vSmHubVidgNaidDop": "在smartha!</b><br>你会找到应用程序在应用中的SmartHome或多个应用程序(F系列)",
    "PustayaPapka": "一个空洞的文件夹",
    "BlueKnProporcii": "<i>延伸视频</i><br>&nbsp;&nbsp;&nbsp;蓝色的按钮在录像回放",
    "Zakrit": "近",
    "NachatZanovo": "重新开始",
    "ZagruzhatListiMozhoS": "下载到这里离开的计算机使用",
    "Summa": "数额",
    "Valuta": "货币",
    "PlatSistema": "付款系统",
    "NaprimerVchera": "例如，昨天在",
    "VvDatuPlatezha": "进入的日期和时间付款",
    "ThanksForYou": "谢谢你支持我的项目",
    "Ozhidanie": "在等",
    "Prinyato": "处理",
    "NeobhodimRemoteFork": "这样做，你需要跑RemoteFork在您的电脑或机器人<br>更多的信息forkplayer.tv",
    "Translate": "翻译的页面译成",
    "OchistIst": "清楚的。 东。",
    "VVOD": "进入",
    "BistrijPoskVverh": "快点 搜寻：",
    "Vniz": "下",
    "Vibrat": "选择",
    "Documenti": "文件",
    "Photo": "照片",
    "fromPage": "一页",
    "fromWall": "从墙边",
    "photo": "照片",
    "Exit": "出来",
    "SavedPhoto": "救了照片",
    "Slideshow": "影片",
    "sec": "h",
    "Category": "职类",
    "Categorys": "职类",
    "ForResetAppPressButton": "重置按钮现在",
    "ALL": "所有",
    "OpenFromProxy": "通过一个代用",
    "PredpDor": "站。 追踪",
    "InFullScreen": "全屏幕上",
    "DearPeople": "亲爱的用户!<br>ForkPlayer是浏览器适合你的这些设备看你最喜欢的网站创造了可扩展标记语言(XML语言)，以M3U(IPTV)小有名气",
    "Iread": "我读(a)",
    "NotShow": "不出现",
    "AudioMini": "声音小",
    "OffMiniPlayer": "在这里你可以解除使用特别的球员玩mp3文档",
    "ConnectToServer": "该方面的服务器",
    "NewDNS": "新的简称dns",
    "From": "发信人",
    "AutoSync": "自动同步",
    "Mark": "注意到",
    "several": "几个",
    "existOverwrite": "真的存在! 操控的吗?",
    "OverwriteAll": "操控一切",
    "SkipAll": "跳过所有的",
    "Deselect": "Deselect",
    "Queue": "在排队",
    "DeleteFromStartMenu": "把菜单从开始",
    "Edit": "编辑",
    "Rename": "重新命名",
    "ChangeURLicon": "为了改变解决的偶像",
    "EnterURLicon": "进入地址的标志",
    "Icon": "偶像",
    "SetIconFor": "确定的偶像",
    "EnterTitle": "输入的名字",
    "SelectIcon": "选择的标志",
    "Timeout connection to stream IPTV": "暂停连接IPTV",
    "SetDefaultStartMenu": "重新开始。 菜单",
    "PreviousFileWillBeOverwritten": "以前的档案将被改写",
    "PressStopToCancel": "新闻发布停止取消",
    "WhileCopyingFilesCannotViewVideoAndAudio": "虽然在复制的文件是不可能的看看视频和音频",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "需要开放和关闭录像机,然后重复复制",
    "Server": "服务器"
};
lIO11l11NEB100OYpr.lt = {
    "_name": "Lietuvių",
    "_powered": "by translate.yandex.ru",
    "mysets": "mano parametrai",
    "Zakladki": "Žymos",
    "zakladki": "žymos",
    "Vneshnie": "Išorinis",
    "Vnutr": "EXT",
    "Istoriya": "Istorija",
    "poiskov": "ieško",
    "Raznoe": "Įvairių",
    "Seriali": "Serija",
    "Filmi": "Filmai",
    "Tema": "Temos",
    "Oneaudiotrack": "Vieno garso takelio",
    "OpredelenieDns": "Apibrėžimas, CSN",
    "RegistraciyaVseti": "Tinklo registracija",
    "SchitivanieNastroek": "Skaitymo parametrai",
    "Inicializaciya": "Iniciacijos",
    "pleera": "žaidėjas",
    "Zagruzka": "Atsisiųsti",
    "Interface": "sąsaja",
    "menu": "meniu",
    "Size data": "Dydis duomenys",
    "data from server": "duomenų iš serverio",
    "Error download data, load local settings": "Klaida gauti duomenis įkeltas vietos konfigūraciją",
    "Menu": "Meniu",
    "Store data": "Duomenims saugoti",
    "Save and": "Išsaugoti ir",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Taupymo duomenis į serverį kas 5 minučių, arba paspaudus Meniu mygtuką, kad Išsaugotumėte ir",
    "On Server": "Serveryje",
    "Local": "Vietoje",
    "ChtenieNastroekPoiska": "Skaityti paieškos nustatymus",
    "Vozobnovlenie": "Atnaujinti",
    "Soobshestvo": "Bendrijos",
    "ObsuzhdenieProblemIpredlozhenij": "Aptariant problemas ir pasiūlymus",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Savanorių pritraukimo mokėti už priegloba",
    "Vash": "Jūsų",
    "macAdres": "Mac adresas",
    "SborInfo": "Pastaba) mokėjimo, įveskite savo Mac adresą, kad išjungti skelbimai. Meniu pradėti skyriuje ir IPTV taip pat pridėti papildomų išteklių ir t.t.",
    "IliNazhmite": "Arba spustelėkite",
    "SoobshitOpodderzhke": "dabar, nurodyti paramos",
    "404NotFound": "404 klaida. Šis failas neegzistuoja",
    "HotiteIskatVdrugihMestah": "Nori ieškoti kitų vietų",
    "Vospolzuites": "Naudoti",
    "NaitiVglobPoiske": "Galima rasti pasaulio paieška",
    "GlobPoisk": "Pasaulio paieška",
    "DobroPozhalovat": "Sveiki!",
    "ViberiteChtoIskat": "Pasirinkite ko ieškoti",
    "ViberiteEpg": "Pasirinkite norimą EPG channel",
    "Stranica": "Puslapis",
    "ZdesPusto": "Jis tuščias",
    "PoiskPrervan": "Paieška nutraukta",
    "UdalenaGrupa": "Buvo ištrinta dėl paleisties",
    "StartovoeMenu": "Meniu pradėti",
    "Sync": "Sync",
    "Export": "Eksporto",
    "SaveSetServ": "Išsaugoti parametrus serveryje",
    "Import": "Importo",
    "nastrdruga": "parametrai",
    "VvLogDr": "Įveskite vartotojo prisijungimo tinklalapyje",
    "PolNastrDr": "Gauti vartotojo parametrai",
    "EtoMozhUd": "Jis gali ištrinti esamus parametrus valdikliui",
    "Steret": "Ištrinti",
    "NastroikiPrilozheniya": "Programos parametrai",
    "NastrStartMenu": "Parametrai meniu pradėti",
    "DobavlenoV": "Pridėti prie",
    "DlVklPer": "Norėdami įjungti eikite į Parametrai / paieškos Preferences /",
    "ZaklUzheEst": "Šiame skirtuke yra jau ten",
    "vstm": "meniu pradėti",
    "UdMsNsM": "Pašalinti iš pradžios meniu <br>Parametrai / Nustatymai meniu Pradėti",
    "Udalit": "Ištrinti",
    "Clear": "Aišku",
    "Vstavit": "Įterpti",
    "Kopirovat": "Kopija",
    "Ssilka": "Nuoroda",
    "NazhmVpravo": "Spustelėkite į dešinę",
    "chud": "pašalinti",
    "Vkl": "Įjungtas",
    "Otkl": "Neįgaliesiems",
    "Vkl.": "Apie",
    "Otkl.": "Off",
    "PeremV": "Pereiti prie",
    "IstOchishena": "Istorija pašalinta",
    "PrRabStogoMesta": "Norėdami tęsti nuo tos pačios vietos,",
    "Nastroiki": "Parametrai",
    "ChPoyas": "Laiko juosta",
    "Perekl": "Jungiklis",
    "KachVideo": "Vaizdo įrašo kokybė",
    "KolStrok": "Eilučių skaičius",
    "Videopleer": "Vaizdo grotuvas",
    "pleer": "žaidėjas",
    "Sortirovka": "Rūšiavimas",
    "Rezhim": "Režimas",
    "NachGrupa": "Pradinis grupė",
    "NazhVprVl": "Paspauskite kairės - dešinės keisti",
    "RodKontr": "Tėvų kontrolės",
    "FonRisunok": "Fono paveikslėlį,",
    "YarkFon": "Ryškumas fone",
    "CvetText": "Spalva tekstas",
    "VkKod": "VK.COM kodas",
    "MoiUvedoml": "Mano pranešimai",
    "PolnSbrosNastr": "Visiškai iš naujo",
    "Yazik": "Kalbos",
    "VibSait": "Saugomų teritorijų atrankos bus atlikti pasaulinio masto paieškos",
    "VibStM": "Pasirinkimas svetainių, rodomų meniu pradėti",
    "PereklM": "Perjungimas",
    "UznFsCxz": "Norėdami sužinoti, kurios iš jų jums tinka, o kas bus, generuoti 404 klaida gali atidaryti jūsų kompiuteryje",
    "DelMuvT": "Daryti mažiau padidinti tekstas",
    "TvpPu": "Tipo vaizdo grotuvas, pagal nutylėjimą",
    "TipPu": "Šio tipo žaidėjas, IPTV pagal nutylėjimą",
    "Sort": "Rūšiuoti",
    "KartVKart": "Picture-in-picture<br>Automatinis peržiūrėti vaizdo įrašus, mažame lange (jei PIP išjungtas pasirinkto video, galite įjungti žaisti mygtuką, esantį ant nuotolinio valdymo)",
    "vospr": "žaisti",
    "prilozheniya": "app",
    "RemoteInfo": "apdorojimo nuorodų, nenaudojant DNS (LG, Sony, Philips), naudojant kompiuterio ar Android. Tampa prieinamas Failai ir aplankai dėl fs.(1080p)<br>įjungti, atsisiųsti ir paleisti programą Forkplayer Nuotolinio KOMPIUTERIO ar Android įrenginiams prijungti prie to paties kelvedžio TV<br>parsisiuntimo Nuorodą",
    "PrivVk": "Jungiasi VK.COM",
    "polzovatelya": "vartotojas",
    "SsilkaVkKod": "Nuoroda, kur galima gauti privalomus kodas",
    "VashUvNp": "Jūsų pranešimus, pvz., slaptažodis iš svetainės",
    "ZsIsN": "Įkelti arba atsisiųsti visi valdiklio nustatymai",
    "zaklIist": "žymos ir istorija",
    "VvKodPr": "Įvesti privalomas kodas VK.COM",
    "Auto": "Auto",
    "Tolko": "Tik",
    "DlyaVsV": "Vaizdo įrašai",
    "BistrPoisk": "Greita paieška",
    "Parol": "Slaptažodį",
    "parol": "slaptažodį",
    "DlDostVv": "Norėdami atidaryti, įveskite savo",
    "DeistDoV": "galioja tol, kol išeisite valdikliui",
    "poumolch": "pagal numatytuosius nustatymus",
    "SmIotk": "Norėdami pakeisti arba išjungti",
    "moV": "į",
    "RazblVkl": "Atblokuoti tab",
    "EtaVklBzabl": "Šį skirtuką, buvo užrakinta",
    "DlRvIn": "Norėdami atrakinti, pažymėkite jį ir paspauskite",
    "VvedNov": "Įveskite naują",
    "DlUdVved": "Pašalinti tipas",
    "ZablVkl": "Užrakto mygtuką",
    "UstSart": "Kad nustatytumėte pradžios",
    "UdIzSt": "Pašalinti iš pradžios",
    "ustanovit": "nustatyti",
    "Media": "Žiniasklaida",
    "Vstroenniy": "Built-in",
    "OtmNeProsm": "Ženklas unwatched",
    "OtmProsm": "Ženklas žiūrima",
    "DobavVglob": "Įtraukti į pasaulio paieška",
    "Peredvinut": "Perkelti",
    "VijtiV": "Exit",
    "EXIT": "UŽDARYTI",
    "listSservera": "lapas iš serverio",
    "DobavitV": "Pridėti prie",
    "OchistitIstoriyu": "Aišku, istorija",
    "ObnovitStranicy": "Atnaujinti puslapį",
    "izZakladok": "nuo žymos",
    "OshibkaSohrDannih": "Klaida įrašant duomenis",
    "OshibkaChDannih": "Klaida skaitant duomenis",
    "ustanolen": "įdiegta",
    "VineSmP": "Jūs nepasikeitė slaptažodis yra 0000!<br><i>Rekomenduojame pakeisti slaptažodį, Tėvų kontrolė, siekiant apsaugoti vaikus nuo",
    "ParolDeistDk": "Slaptažodis galioja tol, kol išeisite iš app! Nepamirškite išeiti valdikliui pabaigoje",
    "nePodhodit": "netinka",
    "PrilUstSh": "Programų yra įdiegta smarthab",
    "IzvFailovNo": "Atsiprašome, failas nerastas",
    "sIst": "šaltinis",
    "PerPoAdr": "Eikite į žiniatinklio adresą",
    "OshibkaParsPl": "Klaida apdorojant grojaraštį",
    "OshibkaObrabotki": "Klaidų apdorojimas",
    "Informaciya": "Informacija",
    "DlyaPerNsp": "Eiti į next page paspauskite dešinįjį mygtuką",
    "infodns": "Naudoti RemoteFork<br>(nustatymų, jums reikia kompiuterio ar Android), kad greičiau navigacijos šioje svetainėje",
    "January": "Sausio",
    "February": "Vasario",
    "March": "Kovo",
    "April": "Balandžio",
    "May": "Gali",
    "June": "Birželis",
    "Jule": "Liepos",
    "August": "Rugpjūtis",
    "September": "Rugsėjis",
    "October": "Spalio",
    "November": "Lapkritis",
    "December": "Gruodžio",
    "Monday": "Pirmadienis",
    "Tuesday": "Antradienis",
    "Wednesday": "Trečiadienis",
    "Thursday": "Ketvirtadienis",
    "Friday": "Penktadienis",
    "Saturday": "Šeštadienis",
    "Sunday": "Sekmadienis",
    "Md": "Mon",
    "Tu": "W",
    "Wd": "MS",
    "Th": "Th",
    "Fr": "Penktadienis",
    "St": "Šeštadienis",
    "Sn": "Saulė",
    "Oshibka": "Klaida",
    "polVr": "gauti laiko",
    "ProvPravKodVk": "Patikrinkite, ar teisingai privalomas kodas VK.COM",
    "UspIdPolz": "Sėkmingai!<br>vartotojo ID",
    "NeobhUstIzap": "Jūs turite įdiegti ir paleisti savo kompiuteryje",
    "SbrositNastr": "Reset",
    "VsaeZaklUd": "Visi, žymes, istoriją, nustatymai bus ištrinti",
    "PrevLimOzh": "Viršijo ribą lūkesčius",
    "opredDns": "nustatyti DNS",
    "infoVk": "Susieti savo Vk.COM sąskaitos<br>prieigos garso ir vaizdo įrašus į savo puslapį",
    "infoNastrPoiska": "Konfigūravimas ieškoti<br><i>Jūs galite konfigūruoti, kuriuos vietų paieškos ir paieškos užsakymą Nustatymai</i>",
    "VvediteText": "Įveskite tekstą",
    "PustayaSsilka": "Null nuoroda",
    "Obrabotka": "Apdorojimo",
    "NetOtvetaUbedRemote": "Nėra atsakymo! Įsitikinkite, kad tai, kas yra įtrauktas RemoteFork",
    "PovtorPop": "Bandykite dar kartą",
    "ProvSostRem": "Patikrinti statusą RemoteForkplayer kompiuteryje",
    "polSsilki": "gauti nuoroda",
    "EtoStList": "Šis starteris grojaraštį",
    "NeskEl": "Kelis elementus",
    "stMenuSkr": "meniu pradėti yra paslėptas<br>jie gali būti aktyvuota Parametrai / konfigūracijos pradėti. meniu",
    "VvedAdrPl": "Įveskite adresas ",
    "SudaMozhVv": "Čia jūs galite rankiniu būdu įvesti adresą grojaraštį",
    "Vkontakte": "Vkontakte",
    "VashaStrVk": "Jūsų puslapis Vkontakte",
    "KodPolZd": "Kodą gaunate čia",
    "FailKnR": "Failus į savo kompiuterį. (Jūs turite paleisti RemoteForkplayer kompiuteryje ir įtraukti",
    "ScachRemoteMozh": "Atsisiųsti RemoteForkplayer gali",
    "PamyatTv": "Atminties TV",
    "Navigaciya": "Navigacija",
    "VverhVniz": "Aukštyn / Žemyn",
    "Sohranit": "Įrašyti",
    "VPLEER": "ŽAIDĖJAS",
    "Vnesh": "Išorinis",
    "StartMenu": "Meniu pradėti",
    "SleduushayaStr": "Kitas puslapis",
    "Ostanovleno": "Sustojo",
    "Iskat": "Ieškoti",
    "Podkluchenie": "Jungtis",
    "SoedineniePrervano": "Ryšys nutrūko",
    "soedineniya": "jungtis",
    "podklucheniya": "jungtis",
    "SbrosVipolnenPerezpusk": "Nuotraukų prašymą!<br>iš Naujo valdikliui",
    "Prodolzhit": "Toliau",
    "Otmena": "Atšaukti",
    "VseRavnoProdolzhit": "Toliau vistiek",
    "parsingaVideossilki": "apdorojant saitą",
    "NevernayaSsilka": "Negerai saitą",
    "Proporcii": "Proporcijos",
    "OpciiEkrana": "Funkcijos ekranas",
    "OchishPamyati": "Extra. atmintis",
    "min": "min",
    "Kachestvo": "Kokybė",
    "Nedostupno": "Nepasiekiamas",
    "SeichasNedostupno": "Šiuo metu nepasiekiamas",
    "Shirina": "Plotis",
    "Visota": "Aukštis",
    "Buffer": "Buferio",
    "Mb": "MB",
    "ZvukDorozhka": "Garso. stebėti",
    "Ekran": "Ekranas",
    "Gromkost": "Apimtis",
    "Tip": "Tipas",
    "Date": "Data",
    "Album": "Albumas",
    "Original": "Originalus",
    "Rastyanut": "Ruožas",
    "Ruchnoi": "Vadovas",
    "VozobnovitNa": "Vėl",
    "Posledovatelno": "Nuolat",
    "Povtoryat": "Pakartotinai",
    "odin": "vienas",
    "vse": "visi",
    "DostupRazreshen": "Prieigos leidžiama",
    "REKLAMA": "REKLAMA",
    "PereadresaciyaNaFail": "Nukreipimas į failą",
    "Vneshniy": "Išorinis",
    "Npl10IIOr1dDIlIlOOYpr": "Netinka TV programa",
    "VoVremProsNazh": "O žiūrėti IPTV kanalą, paspauskite",
    "VmEmVp": "Meniu -> EPG kodą galite pasirinkti tinkamą",
    "dVp": "pasirinkite tinkamą",
    "VmVpostBiCe": "Vaizdo nuolat yra baltas arba juodas ekranas?<br><i>Išbandyti įvairias rūšis",
    "HotChtVfon": "Nori video fone? Spustelėkite",
    "vVrPrVid": "per vaizdo atkūrimą",
    "KnInfoPerRezh": "Info mygtuką, esantį ant nuotolinio valdymo jungikliai ekrano informacija, kai žiūri vaizdo",
    "Video": "Video",
    "video": "video",
    "nePodderzhivaetsya": "nepalaiko",
    "DrugZvDorNet": "Kitų garso takelius ten",
    "PustayaIliUdalSsilkaVK": "Tuščias arba ištrinti nuorodą VK",
    "Podtverdit": "Patvirtinti",
    "OzhidaiteNeskSec": "Palaukite kelias sekundes",
    "NazhmExitEsheRazDlyaVihoda": "Paspauskite EXIT mygtuką dar kartą, kad išeitumėte",
    "ViNeSmeniliPassRodKontrRekomendSm": "Jūs nepasikeitė slaptažodis yra 0000!<br><i>Rekomenduojame, kad jūs galite pakeisti Tėvų kontrolės slaptažodį užrakto nuo vaikų</i>",
    "PoiskAudio": "Paieškos garso",
    "PoiskVideo": "Ieškoti videozapisi",
    "PoiskFoto": "Paieškos nuotrauka (Hon. be leidimo)",
    "MoiAudio": "Mano muzika",
    "MoiVideo": "Mano vaizdo įrašai",
    "Recomend": "Rekomendacijos",
    "Popular": "Populiarus",
    "Druzya": "Draugai",
    "Gruppi": "Grupė",
    "SetFon": "Nustatyti kaip foną",
    "Audio": "Garso",
    "PoiskPeople": "Žmonės ieško",
    "Authorization": "Leidimas",
    "OshibkaAvtorizacii": "Leidimas klaida",
    "VashiDruzya": "Jūsų draugais",
    "VashiGruppi": "Jūsų Grupė",
    "Uchastnikov": "Dalyviai",
    "byLogin": "pagal prisijungimo vardą ir slaptažodį",
    "byCode": "kodas",
    "ForAccessNeedAuthorization": "Norėdami atidaryti vk.com jūs privalote užsiregistruoti!<br>(pirmos dvi pastraipos viršuje puslapio)",
    "IdetUstanovkaVidgeta": "Įdiegti valdikliui",
    "Ustanovka": "Įrengimas",
    "vidgeta": "valdiklis",
    "Razmer": "Dydis",
    "GB": "GB",
    "MB": "MB",
    "KB": "KB",
    "Bait": "Baitų",
    "Vidget": "Valdiklis",
    "OpenWidget": "Prieigos valdiklis",
    "Open": "Norėdami atidaryti",
    "InstallWidgetInSmartHub": "Jei esate tikri, kad tai yra valdikliui, Samsung smart TV, tada paspauskite enter, norėdami įdiegti",
    "recomOpenFromSmartHub": "jūs turite pradėti su SmartHub",
    "ForkPlayerByClosed": "ForkPlayer bus uždaryta<br>Galima dirbti ne visą ekraną, užbaigti darbą",
    "NoDevices": "Ne prisijungę",
    "TVmemory": "Vidinė atmintis",
    "uzheEstVustanovlennih": "jau turite įdiegti",
    "uspeshnoUstanovlen": "sėkmingai įdiegti",
    "VnimanieSvobMesto": "Dėmesio! Įsitikinkite, kad archyvas yra tiksliai valdikliui Samsung smart TV ir pakankamai laisvos vietos",
    "ViklIvklTVchtobiUv": "Išjungti ir įjungti TV pamatyti",
    "OshibkaUstanovki": "Diegimo klaida",
    "vSmHubVidgNaidDop": "į smartha!</b><br>jūs rasite Valdikliui paraiškų SmartHome ar Daugiau paraiškų (Serija F)",
    "PustayaPapka": "Tuščią aplanką",
    "BlueKnProporcii": "<i>tempimo video</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> Mėlyną mygtuką, per vaizdo atkūrimą",
    "Zakrit": "Uždaryti",
    "NachatZanovo": "Pradėti iš naujo",
    "ZagruzhatListiMozhoS": "Atsisiųsti iš čia išvyksta iš kompiuterio, naudojant",
    "Summa": "Suma",
    "Valuta": "Valiuta",
    "PlatSistema": "Mokėjimo sistema",
    "NaprimerVchera": "Pavyzdžiui, vakar",
    "VvDatuPlatezha": "Įveskite datą ir laiką, mokėjimo",
    "ThanksForYou": "Ačiū už paramą projekto",
    "Ozhidanie": "Laukimas",
    "Prinyato": "Apdorojimo",
    "NeobhodimRemoteFork": "Norėdami tai padaryti, jums reikia paleisti RemoteFork ant jūsų kompiuterio ar Android <br>Daugiau informacijos apie forkplayer.tv",
    "Translate": "Išversti puslapį į",
    "OchistIst": "Aišku. Rytų.",
    "VVOD": "ENTER",
    "BistrijPoskVverh": "Greitai. paieška: ",
    "Vniz": "Žemyn",
    "Vibrat": "Pasirinkti",
    "Documenti": "Dokumentai",
    "Photo": "Nuotraukos",
    "fromPage": "puslapis",
    "fromWall": "nuo sienos",
    "photo": "nuotrauka",
    "Exit": "Iš",
    "SavedPhoto": "Išsaugotas nuotraukas",
    "Slideshow": "Skaidrių peržiūra",
    "sec": "h",
    "Category": "KATEGORIJOS",
    "Categorys": "Kategorijos",
    "ForResetAppPressButton": "Norėdami nustatyti iš naujo, spauskite mygtuką dabar",
    "ALL": "VISI",
    "OpenFromProxy": "Paleisti per proxy",
    "PredpDor": "Svetainės. stebėti",
    "InFullScreen": "Visą ekraną",
    "DearPeople": "Gerbiami vartotojai!<br>ForkPlayer yra naršyklė pritaikytas į savo prietaisą ir peržiūrėti savo mėgstamų svetainių ir sukurtas XML, M3U (IPTV), grojaraščius.",
    "Iread": "Aš perskaičiau(a)",
    "NotShow": "Nerodyti",
    "AudioMini": "Audio mini",
    "OffMiniPlayer": "Čia galite neleisti naudoti specialų grotuvas norėdami klausytis mp3 failų",
    "ConnectToServer": "Ryšys su serveriu",
    "NewDNS": "Naujas DNS",
    "From": "Siuntėjas",
    "AutoSync": "Auto-sync",
    "Mark": "Pastaba",
    "several": "keliais",
    "existOverwrite": "egzistuoja! Perrašyti?",
    "OverwriteAll": "Perrašyti visus",
    "SkipAll": "Praleisti visus",
    "Deselect": "Panaikinkite",
    "Queue": "Eilėje",
    "DeleteFromStartMenu": "Pašalinti iš meniu pradėti",
    "Edit": "Redaguoti",
    "Rename": "Pervardyti",
    "ChangeURLicon": "Norėdami pakeisti piktogramos adresas",
    "EnterURLicon": "Įveskite adresas piktogramos",
    "Icon": "Piktograma",
    "SetIconFor": "Nustatyti piktogramą",
    "EnterTitle": "Įveskite pavadinimą",
    "SelectIcon": "Pasirinkti piktogramą",
    "Timeout connection to stream IPTV": "Timeout prisijungimo prie internetinės televizijos (IPTV)",
    "SetDefaultStartMenu": "Iš naujo pradėti. meniu",
    "PreviousFileWillBeOverwritten": "Ankstesnis failas bus perrašyti",
    "PressStopToCancel": "Paspauskite Stop, jei norite atšaukti",
    "WhileCopyingFilesCannotViewVideoAndAudio": "O kopijuoti failus neįmanoma žiūrėti vaizdo ir garso įrašų",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "Reikia atidaryti ir uždaryti, vaizdo grotuvas, tada pakartoti kopijavimas",
    "Server": "Serverio"
};
lIO11l11NEB100OYpr.lv = {
    "_name": "Latviešu",
    "_powered": "by translate.yandex.ru",
    "mysets": "mani uzstādījumi",
    "Zakladki": "Grāmatzīme",
    "zakladki": "grāmatzīme",
    "Vneshnie": "Ārējās",
    "Vnutr": "EXT",
    "Istoriya": "Vēsture",
    "poiskov": "meklēšana",
    "Raznoe": "Dažādi",
    "Seriali": "Sērija",
    "Filmi": "Filmas",
    "Tema": "Tēma",
    "Oneaudiotrack": "Viens audio track",
    "OpredelenieDns": "Definīcija CSN",
    "RegistraciyaVseti": "Tīkla reģistrācija",
    "SchitivanieNastroek": "Lasīšanas uzstādījumus",
    "Inicializaciya": "Inicializāciju",
    "pleera": "spēlētājs",
    "Zagruzka": "Lejupielādēt",
    "Interface": "interfeiss",
    "menu": "izvēlne",
    "Size data": "Datu izmērs",
    "data from server": "dati no servera",
    "Error download data, load local settings": "Kļūda, iegūstot datu ielādes vietējo konfigurācija",
    "Menu": "Izvēlne",
    "Store data": "Saglabāt datus",
    "Save and": "Saglabāt un",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Datu saglabāšana uz servera ik pēc 5 minūtēm vai, nospiežot Menu pogu, lai Saglabātu un",
    "On Server": "Uz servera",
    "Local": "Lokāli",
    "ChtenieNastroekPoiska": "Lasīšanas meklēšanas iestatījumi",
    "Vozobnovlenie": "Cv",
    "Soobshestvo": "Kopienas",
    "ObsuzhdenieProblemIpredlozhenij": "Diskusija par problēmām un priekšlikumiem",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Brīvprātīgo piesaistei, lai samaksātu par hostingu",
    "Vash": "Jūsu",
    "macAdres": "Mac-adrešu",
    "SborInfo": "Piezīme maksājumu, ievadiet jūsu Mac adresi, lai atspējotu reklāmas. Izvēlnes sākt sadaļā un IPTV pievienot arī papildu resursu un tā tālāk",
    "IliNazhmite": "Vai noklikšķiniet uz",
    "SoobshitOpodderzhke": "tagad, lai norādītu atbalsts",
    "404NotFound": "404 kļūda. Šis fails neeksistē",
    "HotiteIskatVdrugihMestah": "Vai vēlaties meklēt citas vietas",
    "Vospolzuites": "Izmantošana",
    "NaitiVglobPoiske": "Atrodams pasaules meklēšana",
    "GlobPoisk": "Globālā meklēšana",
    "DobroPozhalovat": "Laipni lūdzam",
    "ViberiteChtoIskat": "Izvēlieties, ko meklēt",
    "ViberiteEpg": "Izvēlieties vēlamo EPG kanālu",
    "Stranica": "Lapa",
    "ZdesPusto": "Tā ir tukša",
    "PoiskPrervan": "Meklēšanas pārtraukšana",
    "UdalenaGrupa": "Tika dzēsta uz starta",
    "StartovoeMenu": "Izvēlne sākt",
    "Sync": "Sinhronizācija",
    "Export": "Eksports",
    "SaveSetServ": "Iestatījumu saglabāšana uz servera",
    "Import": "Imports",
    "nastrdruga": "uzstādījumi",
    "VvLogDr": "Ievadiet lietotāja pieteikšanās mājas lapā",
    "PolNastrDr": "Saņemt lietotāja iestatījumi",
    "EtoMozhUd": "To var dzēst pašreizējos iestatījumus widget",
    "Steret": "Izdzēst",
    "NastroikiPrilozheniya": "Programmas uzstādījumi",
    "NastrStartMenu": "Iestatījumu izvēlne sākt",
    "DobavlenoV": "Pievienots",
    "DlVklPer": "Lai aktivizētu iet uz Settings / meklēšanas Iestatījumi /",
    "ZaklUzheEst": "Šī cilne ir jau tur",
    "vstm": "izvēlnē sākt",
    "UdMsNsM": "Noņemt no izvēlnes sākt <br>Uzstādījumi / Iestatījumi izvēlne Sākt",
    "Udalit": "Dzēst",
    "Clear": "Skaidrs",
    "Vstavit": "Ielikt",
    "Kopirovat": "Kopija",
    "Ssilka": "Saites",
    "NazhmVpravo": "Noklikšķiniet uz labi",
    "chud": "lai noņemtu",
    "Vkl": "Iespējota",
    "Otkl": "Invalīdiem",
    "Vkl.": "Par",
    "Otkl.": "Off",
    "PeremV": "Pāriet uz",
    "IstOchishena": "Stāsts noskaidroti",
    "PrRabStogoMesta": "Turpināt no tās pašas vietas",
    "Nastroiki": "Uzstādījumi",
    "ChPoyas": "Laika josla",
    "Perekl": "Slēdzis",
    "KachVideo": "Video kvalitāte",
    "KolStrok": "Skaits rindas",
    "Videopleer": "Video atskaņotājs",
    "pleer": "spēlētājs",
    "Sortirovka": "Šķirošana",
    "Rezhim": "Režīms",
    "NachGrupa": "Sākotnējais grupas",
    "NazhVprVl": "Nospiediet pa kreisi - pa labi, lai mainītu",
    "RodKontr": "Vecāku kontrole",
    "FonRisunok": "Fona attēlu",
    "YarkFon": "Fona spilgtumu",
    "CvetText": "Krāsu teksta",
    "VkKod": "VK.COM kods",
    "MoiUvedoml": "Mans paziņojumus",
    "PolnSbrosNastr": "Full reset",
    "Yazik": "Valodas",
    "VibSait": "Atlases vietām, lai būtu, kas veic globālā meklēšana",
    "VibStM": "Izvēlēties vietas parādīts, izvēlnē start (sākt)",
    "PereklM": "Pārslēgšanās starp",
    "UznFsCxz": "Lai uzzinātu, kura no tām darbojas, lai jūs, un kas radīs kļūdas 404 var atvērt datorā",
    "DelMuvT": "Darīt mazāk, lai palielinātu teksta",
    "TvpPu": "Tipa video player pēc noklusējuma",
    "TipPu": "Tipa spēlētājs IPTV pēc noklusējuma",
    "Sort": "Kārtot",
    "KartVKart": "Picture-in-picture<br>Automātiskais priekšskatījums video mazā logā (ja PIP ir atspējota izvēlētā video, varat ieslēgt play pogu uz tālvadības pults)",
    "vospr": "spēlēt",
    "prilozheniya": "app",
    "RemoteInfo": "apstrādes saites, neizmantojot DNS (LG, Sony, Philips), izmantojot datora vai Android. Kļūst pieejama Failus un mapes fs.(1080p)<br>, Lai tā, lejupielādēt un palaist programmu, Forkplayer uz Attālā DATORA vai Android pieslēgts maršrutētājam, TV<br>download Saiti",
    "PrivVk": "Saistošs VK.COM",
    "polzovatelya": "lietotājs",
    "SsilkaVkKod": "Saiti, kur jūs varat saņemt saistošu kods",
    "VashUvNp": "Jūsu paziņojumi, piemēram, paroles vietnē",
    "ZsIsN": "Augšupielādēt vai lejupielādēt visus widget uzstādījumi",
    "zaklIist": "grāmatzīmes un vēsturi",
    "VvKodPr": "Ievadiet saistošu kods VK.COM",
    "Auto": "Auto",
    "Tolko": "Tikai",
    "DlyaVsV": "Visu videoklipi",
    "BistrPoisk": "Ātrā meklēšana",
    "Parol": "Paroles",
    "parol": "paroles",
    "DlDostVv": "Lai piekļūtu, ievadiet jūsu",
    "DeistDoV": "spēkā līdz brīdim, kad aizverat widget",
    "poumolch": "pēc noklusējuma",
    "SmIotk": "Lai mainītu vai deaktivizētu",
    "moV": "jo",
    "RazblVkl": "Atbloķēt cilnes",
    "EtaVklBzabl": "Tas bija aizslēgtas cilnes",
    "DlRvIn": "Lai atbloķētu, iezīmējiet to un nospiediet",
    "VvedNov": "Ievadiet jaunu",
    "DlUdVved": "Lai noņemtu tips",
    "ZablVkl": "Bloķēšanas cilnes",
    "UstSart": "Lai iestatītu sākšanas",
    "UdIzSt": "Noņemt no sākuma",
    "ustanovit": "kopa",
    "Media": "Media",
    "Vstroenniy": "Iebūvēts",
    "OtmNeProsm": "Atzīmēt unwatched",
    "OtmProsm": "Atzīmēt skatīts",
    "DobavVglob": "Pievienot globālu meklēšanas",
    "Peredvinut": "Pārvietot",
    "VijtiV": "Iziet, lai",
    "EXIT": "IZEJAS",
    "listSservera": "lapu no servera",
    "DobavitV": "Pievienot",
    "OchistitIstoriyu": "Skaidrs, vēsture",
    "ObnovitStranicy": "Lai atsvaidzinātu lapu.",
    "izZakladok": "no grāmatzīmes",
    "OshibkaSohrDannih": "Kļūda, saglabājot datu",
    "OshibkaChDannih": "Lasīšanas kļūda datu",
    "ustanolen": "uzstādīts",
    "VineSmP": "Jūs neesat mainījis parole ir 0000!<br><i>Iesaka jums paroles maiņa Vecāku kontroli, lai aizsargātu bērnus no",
    "ParolDeistDk": "Parole ir derīga līdz brīdim, kad aizverat programmu! Neaizmirstiet, lai izietu widget beigās",
    "nePodhodit": "nav piemērota",
    "PrilUstSh": "Pieteikumi tiek uzstādītas smarthab",
    "IzvFailovNo": "Atvainojiet, fails nav atrasts",
    "sIst": "avots",
    "PerPoAdr": "Iet uz web adresi",
    "OshibkaParsPl": "Parsēšanas kļūda atskaņošanas saraksta",
    "OshibkaObrabotki": "Kļūdu apstrāde",
    "Informaciya": "Informācija",
    "DlyaPerNsp": "Lai pārietu uz nākamo lapu, nospiediet labo pogu",
    "infodns": "Izmantot RemoteFork<br>(iestatījumu, jums nepieciešams dators vai Android), lai ātrāk navigācijas šajā mājas lapā",
    "January": "Janvāris",
    "February": "Februāris",
    "March": "Marts",
    "April": "Aprīlis",
    "May": "Maijs",
    "June": "Jūnijs",
    "Jule": "Jūlijs",
    "August": "Augusts",
    "September": "Septembris",
    "October": "Oktobris",
    "November": "Novembris",
    "December": "Decembris",
    "Monday": "Pirmdiena",
    "Tuesday": "Otrdiena",
    "Wednesday": "Trešdiena",
    "Thursday": "Ceturtdiena",
    "Friday": "Piektdiena",
    "Saturday": "Sestdiena",
    "Sunday": "Svētdien",
    "Md": "Pirmdiena",
    "Tu": "W",
    "Wd": "MS",
    "Th": "Th",
    "Fr": "Piektdiena",
    "St": "Sestdiena",
    "Sn": "Saule",
    "Oshibka": "Kļūda",
    "polVr": "iegūt laiku",
    "ProvPravKodVk": "Pārbaudīt, vai ir pareizi saistošu kods VK.COM",
    "UspIdPolz": "Veiksmīgi!<br>lietotāja ID",
    "NeobhUstIzap": "Jums ir instalēt un palaist uz datora",
    "SbrositNastr": "Reset",
    "VsaeZaklUd": "Visas grāmatzīmes, vēsture, iestatījumi tiks dzēsti",
    "PrevLimOzh": "Ierobežojumu cerības",
    "opredDns": "definējiet DNS",
    "infoVk": "Savieno jūsu Vk.COM konts<br>piekļūtu audio un video ierakstu, lai jūsu lapa",
    "infoNastrPoiska": "Konfigurēšana meklēšanas<br><i>Jūs varat konfigurēt, kuras vietnes meklēšanu, un meklēšanas kārtību Iestatījumi</i>",
    "VvediteText": "Ievadiet tekstu",
    "PustayaSsilka": "Null atsauce",
    "Obrabotka": "Apstrāde",
    "NetOtvetaUbedRemote": "Nav atbildes! Pārliecinieties, vai to, kas ir iekļauts RemoteFork",
    "PovtorPop": "Mēģiniet vēlreiz",
    "ProvSostRem": "Statusa pārbaude RemoteForkplayer datorā",
    "polSsilki": "saņemt atskaites",
    "EtoStList": "Šo starter atskaņošanas saraksta",
    "NeskEl": "Vairākus objektus",
    "stMenuSkr": "izvēlne sākt ir paslēpta<br>viņi var aktivizēt Settings / konfigurācijas sākums. izvēlne",
    "VvedAdrPl": "Ievadiet adresi",
    "SudaMozhVv": "Šeit jūs varat manuāli ievadīt adresi atskaņošanas saraksta",
    "Vkontakte": "Vkontakte",
    "VashaStrVk": "Lapas Vkontakte",
    "KodPolZd": "Kods, lai saņemtu šeit",
    "FailKnR": "Failus datorā. (Jums ir nepieciešams, lai palaistu RemoteForkplayer datorā, un ietver",
    "ScachRemoteMozh": "Lejupielādēt RemoteForkplayer var",
    "PamyatTv": "Atmiņas TV",
    "Navigaciya": "Navigācijas",
    "VverhVniz": "Uz Augšu / Uz Leju",
    "Sohranit": "Saglabāt",
    "VPLEER": "SPĒLĒTĀJS",
    "Vnesh": "Ārējās",
    "StartMenu": "Izvēlne sākt",
    "SleduushayaStr": "Nākamā lapa",
    "Ostanovleno": "Apturēts",
    "Iskat": "Meklēšana",
    "Podkluchenie": "Savienojums",
    "SoedineniePrervano": "Savienojums ir izbeigta,",
    "soedineniya": "savienojums",
    "podklucheniya": "savienojums",
    "SbrosVipolnenPerezpusk": "Sākotnējo pieteikumu!<br>Restart widget",
    "Prodolzhit": "Turpināt",
    "Otmena": "Atcelt",
    "VseRavnoProdolzhit": "Turpināt anyway",
    "parsingaVideossilki": "parsēšanas saiti",
    "NevernayaSsilka": "Nepareizas saites",
    "Proporcii": "Proporcijas",
    "OpciiEkrana": "Iespējas ekrāns",
    "OchishPamyati": "Papildus. atmiņa",
    "min": "min",
    "Kachestvo": "Kvalitāte",
    "Nedostupno": "Nav pieejama",
    "SeichasNedostupno": "Šobrīd nav pieejama",
    "Shirina": "Platums",
    "Visota": "Augstums",
    "Buffer": "Rezerves",
    "Mb": "MB",
    "ZvukDorozhka": "Skaņas. trase",
    "Ekran": "Ekrāns",
    "Gromkost": "Apjoms",
    "Tip": "Veids",
    "Date": "Datums",
    "Album": "Albumu",
    "Original": "Oriģināls",
    "Rastyanut": "Stiept",
    "Ruchnoi": "Rokasgrāmata",
    "VozobnovitNa": "Cv",
    "Posledovatelno": "Pastāvīgi",
    "Povtoryat": "Atkārtot",
    "odin": "viens",
    "vse": "visas",
    "DostupRazreshen": "Piekļuve ir atļauta",
    "REKLAMA": "REKLĀMA",
    "PereadresaciyaNaFail": "Pārorientāciju uz failu",
    "Vneshniy": "Ārējās",
    "Npl10IIOr1dDIlIlOOYpr": "Nav piemērots TV programma",
    "VoVremProsNazh": "Bet, skatoties TV kanālu, nospiediet",
    "VmEmVp": "Izvēlne -> EPG kodu, jūs varat izvēlēties piemērotu",
    "dVp": "lai izvēlētos piemērotu",
    "VmVpostBiCe": "Video ir pastāvīgi balts vai melns ekrāns?<br><i>Izmēģināt dažādas tips",
    "HotChtVfon": "Vēlaties, video fonā? Noklikšķiniet uz",
    "vVrPrVid": "video atskaņošanas laikā",
    "KnInfoPerRezh": "Taustiņu info (informācija) uz tālvadības pults ieslēdzas displeja režīms informāciju, kad skatīties video",
    "Video": "Video",
    "video": "video",
    "nePodderzhivaetsya": "nav atbalstīts",
    "DrugZvDorNet": "Citas dziesmas šeit",
    "PustayaIliUdalSsilkaVK": "Tukšs vai dzēst saites VK",
    "Podtverdit": "Apstiprināt",
    "OzhidaiteNeskSec": "Pagaidiet dažas sekundes,",
    "NazhmExitEsheRazDlyaVihoda": "Nospiediet IZIET vēlreiz, lai izietu",
    "ViNeSmeniliPassRodKontrRekomendSm": "Jūs neesat mainījis parole ir 0000!<br><i>Iesaka jums mainīt Vecāku kontroles paroli bērnu lock</i>",
    "PoiskAudio": "Meklēšanas audio",
    "PoiskVideo": "Meklē videozapisi",
    "PoiskFoto": "Meklēšanas foto (Hon. bez atļaujas)",
    "MoiAudio": "Mana mūzika",
    "MoiVideo": "Mans video",
    "Recomend": "Ieteikumi",
    "Popular": "Tautas",
    "Druzya": "Draugi",
    "Gruppi": "Grupa",
    "SetFon": "Uzstādīt kā fona",
    "Audio": "Audio",
    "PoiskPeople": "Meklēšana",
    "Authorization": "Atļaujas",
    "OshibkaAvtorizacii": "Autorizācijas kļūda",
    "VashiDruzya": "Jūsu draugi",
    "VashiGruppi": "Jūsu Grupu",
    "Uchastnikov": "Dalībnieki",
    "byLogin": "ar lietotājvārdu un paroli",
    "byCode": "kods",
    "ForAccessNeedAuthorization": "Lai piekļūtu vk.com jums ir jāreģistrējas!<br>(pirmās divas daļas augšpusē lapas)",
    "IdetUstanovkaVidgeta": "Instalēšanas logrīku",
    "Ustanovka": "Uzstādīšana",
    "vidgeta": "widget",
    "Razmer": "Izmērs",
    "GB": "GB",
    "MB": "MB",
    "KB": "KB",
    "Bait": "Baiti",
    "Vidget": "Widget",
    "OpenWidget": "Lai piekļūtu widget",
    "Open": "Lai piekļūtu",
    "InstallWidgetInSmartHub": "Ja esat pārliecināts, ka šī ir logrīku Samsung smart TV, un pēc tam nospiediet taustiņu enter, lai instalētu",
    "recomOpenFromSmartHub": "jums jāsāk ar SmartHub",
    "ForkPlayerByClosed": "ForkPlayer būs slēgts<br>ir Iespējams strādāt ne pilnā ekrānā, lai pabeigtu darbu",
    "NoDevices": "Nav pievienots",
    "TVmemory": "Iekšējā atmiņa",
    "uzheEstVustanovlennih": "jau ir uzstādīti",
    "uspeshnoUstanovlen": "veiksmīgi instalēta",
    "VnimanieSvobMesto": "Uzmanību! Pārliecinieties, ka arhīvs ir tieši tas, widget Samsung smart TV un pietiekami daudz brīvas vietas,",
    "ViklIvklTVchtobiUv": "Izslēgt un ieslēgt TV, lai redzētu",
    "OshibkaUstanovki": "Montāžas kļūdas",
    "vSmHubVidgNaidDop": "jo smartha!</b><br>jūs atradīsiet Widget programmas SmartHome vai vairākos pieteikumos (F Sērija)",
    "PustayaPapka": "Tukšu mapi",
    "BlueKnProporcii": "<i>stiepjas video</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> Zilo pogu video atskaņošanas laikā",
    "Zakrit": "Aizvērt",
    "NachatZanovo": "Sākt no jauna",
    "ZagruzhatListiMozhoS": "Lejupielādē šeit lapas no datora, izmantojot",
    "Summa": "Summa",
    "Valuta": "Valūta",
    "PlatSistema": "Maksājumu sistēmas",
    "NaprimerVchera": "Piemēram, vakar",
    "VvDatuPlatezha": "Ievadiet datumu un laiku, kad maksājuma",
    "ThanksForYou": "Paldies par atbalstu projekta",
    "Ozhidanie": "Gaida",
    "Prinyato": "Apstrāde",
    "NeobhodimRemoteFork": "Lai to izdarītu, jums ir nepieciešams, lai palaistu RemoteFork uz jūsu datora vai Android<br>Vairāk info par forkplayer.tv",
    "Translate": "Tulkot lapu savā",
    "OchistIst": "Skaidrs. Austrumos.",
    "VVOD": "ENTER",
    "BistrijPoskVverh": "Ātri. meklēšana: Up",
    "Vniz": "Uz leju",
    "Vibrat": "Izvēlēties",
    "Documenti": "Dokumenti",
    "Photo": "Fotogrāfijas",
    "fromPage": "lapa",
    "fromWall": "no sienas",
    "photo": "foto",
    "Exit": "No",
    "SavedPhoto": "Saglabātus fotoattēlus",
    "Slideshow": "Slīdrāde",
    "sec": "h",
    "Category": "KATEGORIJAS",
    "Categorys": "Kategorijas",
    "ForResetAppPressButton": "Lai atiestatītu, nospiediet pogu tagad",
    "ALL": "VISAS",
    "OpenFromProxy": "Palaist caur proxy",
    "PredpDor": "Vietne. trase",
    "InFullScreen": "Pilnekrāna režīmā",
    "DearPeople": "Dārgie lietotāji!<br>ForkPlayer ir pārlūkprogrammas pielāgot, lai jūsu ierīci, lai apskatītu jūsu iecienītākās tīmekļa vietnes un izveidoto XML, M3U (IPTV) atskaņošanas sarakstus.",
    "Iread": "Es izlasīju(a)",
    "NotShow": "Nerādīt",
    "AudioMini": "Audio mini",
    "OffMiniPlayer": "Šeit jūs varat atspējot izmantot īpašu player, lai atskaņotu mp3 failus",
    "ConnectToServer": "Savienojums ar serveri",
    "NewDNS": "Jaunu DNS",
    "From": "Sūtītājs",
    "AutoSync": "Auto-sync",
    "Mark": "Piezīme",
    "several": "vairākas",
    "existOverwrite": "nepastāv! Pārrakstīt?",
    "OverwriteAll": "Pārrakstīt visus",
    "SkipAll": "Izlaist",
    "Deselect": "Noņemiet atzīmi",
    "Queue": "Rindā",
    "DeleteFromStartMenu": "Noņemt no izvēlnes sākt",
    "Edit": "Edit",
    "Rename": "Pārdēvēt",
    "ChangeURLicon": "Lai mainītu ikonas adresi",
    "EnterURLicon": "Ievadiet adresi ikonas",
    "Icon": "Ikonas",
    "SetIconFor": "Lai uzstādītu ikonas",
    "EnterTitle": "Ievadiet nosaukums",
    "SelectIcon": "Lai izvēlētos ikonu",
    "Timeout connection to stream IPTV": "Taimauts pieslēgšana IPTV",
    "SetDefaultStartMenu": "Reset sākums. izvēlne",
    "PreviousFileWillBeOverwritten": "Iepriekšējā fails tiks pārrakstīts",
    "PressStopToCancel": "Nospiediet Apturēt, lai atceltu",
    "WhileCopyingFilesCannotViewVideoAndAudio": "Kamēr failu kopēšanu, tas ir iespējams skatīties video un audio",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "Ir nepieciešams, lai atvērtu un aizvērtu video atskaņotājs, pēc tam atkārtot kopēšana",
    "Server": "Serveris"
};
lIO11l11NEB100OYpr.it = {
    "_name": "Italiano",
    "_powered": "by translate.yandex.ru",
    "mysets": "le mie impostazioni",
    "Zakladki": "Segnalibro",
    "zakladki": "segnalibro",
    "Vneshnie": "Esterni",
    "Vnutr": "EXT",
    "Istoriya": "Storia",
    "poiskov": "ricerche",
    "Raznoe": "Diversi",
    "Seriali": "Serie",
    "Filmi": "Film",
    "Tema": "Tema",
    "Oneaudiotrack": "Una traccia audio",
    "OpredelenieDns": "La definizione di CSN",
    "RegistraciyaVseti": "Di registrazione di rete",
    "SchitivanieNastroek": "Impostazioni di lettura",
    "Inicializaciya": "Inizializzazione",
    "pleera": "giocatore",
    "Zagruzka": "Download",
    "Interface": "interfaccia",
    "menu": "menu",
    "Size data": "La dimensione dei dati",
    "data from server": "i dati dal server",
    "Error download data, load local settings": "Errore durante il caricamento di dati di configurazione locale",
    "Menu": "Menu",
    "Store data": "Per memorizzare i dati",
    "Save and": "Salvare e",
    "Saving data to the server every 5 minutes or by pressing the Menu button Save and": "Il salvataggio dei dati al server ogni 5 minuti o premendo il tasto Menu per Salvare e",
    "On Server": "Sul server",
    "Local": "Locale",
    "ChtenieNastroekPoiska": "La lettura di impostazioni di ricerca",
    "Vozobnovlenie": "Riprendere",
    "Soobshestvo": "Comunità",
    "ObsuzhdenieProblemIpredlozhenij": "La discussione di problemi e proposte",
    "DobrovolnijSborSredstvNaOplatuHostinga": "Volontario di raccolta fondi per pagare per l'hosting",
    "Vash": "Il",
    "macAdres": "Mac-address",
    "SborInfo": "Nella nota di pagamento, inserire l'indirizzo Mac del computer di disattivare gli annunci. Nel menu start di sezione e IPTV sarà anche l'aggiunta di ulteriori risorse e così via",
    "IliNazhmite": "O fare clic su",
    "SoobshitOpodderzhke": "ora, per indicare che il supporto",
    "404NotFound": "L'errore 404. Questo file non esiste",
    "HotiteIskatVdrugihMestah": "Desidera cercare in altri luoghi",
    "Vospolzuites": "Utilizzare",
    "NaitiVglobPoiske": "Essere trovati in ricerca globale",
    "GlobPoisk": "Ricerca globale",
    "DobroPozhalovat": "Benvenuto",
    "ViberiteChtoIskat": "Selezionare ciò che si desidera cercare",
    "ViberiteEpg": "Selezionare l'EPG del canale",
    "Stranica": "Pagina",
    "ZdesPusto": "È vuota",
    "PoiskPrervan": "Ricerca annullata",
    "UdalenaGrupa": "È stato eliminato all'avvio",
    "StartovoeMenu": "Menu di avvio",
    "Sync": "Sync",
    "Export": "Esportazione",
    "SaveSetServ": "Salvare le impostazioni sul server",
    "Import": "Importazione",
    "nastrdruga": "impostazioni",
    "VvLogDr": "Immettere il nome utente di login dal sito",
    "PolNastrDr": "Ottenere le impostazioni utente",
    "EtoMozhUd": "È possibile eliminare le attuali impostazioni del widget",
    "Steret": "Cancella",
    "NastroikiPrilozheniya": "Le impostazioni dell'applicazione",
    "NastrStartMenu": "Impostazioni del menu di avvio",
    "DobavlenoV": "Aggiunto",
    "DlVklPer": "Per attivare vai a Impostazioni / Preferenze di ricerca /",
    "ZaklUzheEst": "Questa scheda è già lì",
    "vstm": "nel menu di avvio",
    "UdMsNsM": "Rimuovere dal menu start <br>Impostazioni / Impostazioni del menu di Avvio",
    "Udalit": "Eliminare",
    "Clear": "Chiaro",
    "Vstavit": "Inserire",
    "Kopirovat": "Copia",
    "Ssilka": "Link",
    "NazhmVpravo": "Fare clic su a destra",
    "chud": "per rimuovere",
    "Vkl": "Abilitato",
    "Otkl": "Disabili",
    "Vkl.": "Su",
    "Otkl.": "Off",
    "PeremV": "Spostare",
    "IstOchishena": "Storia cancellata",
    "PrRabStogoMesta": "Per continuare dallo stesso posto",
    "Nastroiki": "Impostazioni",
    "ChPoyas": "Fuso orario",
    "Perekl": "Interruttore",
    "KachVideo": "La qualità del video",
    "KolStrok": "Il numero di righe",
    "Videopleer": "Lettore Video",
    "pleer": "giocatore",
    "Sortirovka": "L'ordinamento",
    "Rezhim": "Modalità di",
    "NachGrupa": "Il gruppo iniziale",
    "NazhVprVl": "Premere sinistra e destra per cambiare",
    "RodKontr": "Controllo genitori",
    "FonRisunok": "L'immagine di sfondo",
    "YarkFon": "La luminosità dello sfondo",
    "CvetText": "Il colore del testo",
    "VkKod": "VK.COM codice",
    "MoiUvedoml": "Il mio notifiche",
    "PolnSbrosNastr": "Reset completo",
    "Yazik": "Lingua",
    "VibSait": "Selezione di siti per lo svolgimento di una ricerca globale",
    "VibStM": "La scelta dei siti che vengono visualizzati nel menu di avvio",
    "PereklM": "La commutazione tra",
    "UznFsCxz": "Per scoprire quali di essi funziona per voi, e che cosa genera l'errore 404 possibile aprire sul vostro computer",
    "DelMuvT": "Fare di meno per ingrandire il testo",
    "TvpPu": "Il tipo di lettore video di default",
    "TipPu": "Il tipo di giocatore IPTV per impostazione predefinita",
    "Sort": "Sorta",
    "KartVKart": "Picture-in-picture<br>anteprima Automatica dei video in una piccola finestra (se PIP è disabilitato per il video selezionato, è possibile attivare il pulsante play sul telecomando)",
    "vospr": "giocare",
    "prilozheniya": "app",
    "RemoteInfo": "l'elaborazione dei link senza l'utilizzo di DNS (LG, Sony, Philips) l'utilizzo di un computer o Android. Diventa disponibile File e cartelle su fs.(1080p)<br>Per attivarla, scaricare ed eseguire il programma Forkplayer su un PC Remoto o Android collegato al router stesso per la TV<br>Link per il download",
    "PrivVk": "Bind VK.COM",
    "polzovatelya": "utente",
    "SsilkaVkKod": "Il link dove è possibile ottenere il codice di associazione",
    "VashUvNp": "Le notifiche, ad esempio la password dal sito",
    "ZsIsN": "Caricare o scaricare tutte le impostazioni del widget",
    "zaklIist": "i segnalibri e la cronologia",
    "VvKodPr": "Immettere il codice di associazione VK.COM",
    "Auto": "Auto",
    "Tolko": "Solo",
    "DlyaVsV": "Per tutti i video",
    "BistrPoisk": "Ricerca rapida",
    "Parol": "Password",
    "parol": "password",
    "DlDostVv": "Per accedere, inserisci il tuo",
    "DeistDoV": "valida fino all'uscita widget",
    "poumolch": "per impostazione predefinita",
    "SmIotk": "Per modificare o disattivare",
    "moV": "in",
    "RazblVkl": "Sbloccare la scheda",
    "EtaVklBzabl": "Questa scheda è stata bloccata",
    "DlRvIn": "Per sbloccare, evidenziarlo e premere il tasto",
    "VvedNov": "Immettere il nuovo",
    "DlUdVved": "Per rimuovere il tipo di",
    "ZablVkl": "Linguetta di blocco",
    "UstSart": "Per impostare la partenza",
    "UdIzSt": "Rimuovere dalla partenza",
    "ustanovit": "set",
    "Media": "Media",
    "Vstroenniy": "Built-in",
    "OtmNeProsm": "Mark incustodito",
    "OtmProsm": "Mark vista",
    "DobavVglob": "Aggiungere nella ricerca globale",
    "Peredvinut": "Spostare",
    "VijtiV": "Uscita",
    "EXIT": "USCITA",
    "listSservera": "foglio dal server",
    "DobavitV": "Aggiungi a",
    "OchistitIstoriyu": "Cancella cronologia",
    "ObnovitStranicy": "Per aggiornare la pagina",
    "izZakladok": "dai segnalibri",
    "OshibkaSohrDannih": "Errore nel salvataggio dei dati",
    "OshibkaChDannih": "Errore di lettura dati",
    "ustanolen": "installato",
    "VineSmP": "Non hai cambiato la password 0000!<br><i>Consigliamo di cambiare la password di controllo Parentale per proteggere i bambini da",
    "ParolDeistDk": "La password è valida fino a quando si esce dalla app! Non dimenticate di uscita il widget alla fine",
    "nePodhodit": "non adatto",
    "PrilUstSh": "Le applicazioni sono installate in smarthab",
    "IzvFailovNo": "Ci dispiace, file non trovato",
    "sIst": "fonte",
    "PerPoAdr": "Vai a indirizzo web",
    "OshibkaParsPl": "Errore durante l'analisi di playlist",
    "OshibkaObrabotki": "Errore nell'elaborazione di",
    "Informaciya": "Informazioni",
    "DlyaPerNsp": "Per andare alla pagina successiva, premere il tasto destro",
    "infodns": "Utilizzare RemoteFork<br>(nelle impostazioni, è necessario disporre di un computer o Android) per una più veloce navigazione su questo sito",
    "January": "Gennaio",
    "February": "Febbraio",
    "March": "Marzo",
    "April": "Aprile",
    "May": "Può",
    "June": "Giugno",
    "Jule": "Luglio",
    "August": "Agosto",
    "September": "Settembre",
    "October": "Ottobre",
    "November": "Novembre",
    "December": "Dicembre",
    "Monday": "Lunedì",
    "Tuesday": "Martedì",
    "Wednesday": "Mercoledì",
    "Thursday": "Giovedì",
    "Friday": "Venerdì",
    "Saturday": "Sabato",
    "Sunday": "Domenica",
    "Md": "Mon",
    "Tu": "W",
    "Wd": "MS",
    "Th": "Th",
    "Fr": "Ven",
    "St": "Sat",
    "Sn": "Sole",
    "Oshibka": "Errore",
    "polVr": "ottenere il tempo",
    "ProvPravKodVk": "Verificare il corretto codice di associazione VK.COM",
    "UspIdPolz": "Con successo!<br>ID utente",
    "NeobhUstIzap": "È necessario installare ed eseguire sul vostro computer",
    "SbrositNastr": "Reset",
    "VsaeZaklUd": "Tutti i segnalibri, la cronologia, le impostazioni verranno eliminati",
    "PrevLimOzh": "Superato il limite delle aspettative",
    "opredDns": "definire DNS",
    "infoVk": "Il collegamento Vk.COM account<br>accesso a registrazioni audio e video per la tua pagina",
    "infoNastrPoiska": "Configurazione della ricerca<br><i>È possibile configurare i siti per la ricerca e l'ordine di ricerca nelle Impostazioni</i>",
    "VvediteText": "Immettere il testo",
    "PustayaSsilka": "Un riferimento null",
    "Obrabotka": "Elaborazione",
    "NetOtvetaUbedRemote": "Nessuna risposta! Assicurarsi che ciò che è incluso RemoteFork",
    "PovtorPop": "Riprova",
    "ProvSostRem": "Controllare lo stato RemoteForkplayer sul computer",
    "polSsilki": "ottenere un riferimento",
    "EtoStList": "Questo starter playlist",
    "NeskEl": "Più elementi",
    "stMenuSkr": "il menu start è nascosta<br>si può essere attivata nelle Impostazioni e la configurazione di avvio. menu",
    "VvedAdrPl": "Immettere l'indirizzo",
    "SudaMozhVv": "Qui è possibile immettere manualmente l'indirizzo della playlist",
    "Vkontakte": "Vkontakte",
    "VashaStrVk": "La tua pagina di Vkontakte",
    "KodPolZd": "Il codice per ottenere qui",
    "FailKnR": "Il file sul tuo computer. (È necessario eseguire RemoteForkplayer su computer e comprendono",
    "ScachRemoteMozh": "Scarica RemoteForkplayer maggio",
    "PamyatTv": "Memoria TV",
    "Navigaciya": "Navigazione",
    "VverhVniz": "Up / Down",
    "Sohranit": "Salva",
    "VPLEER": "NEL PLAYER",
    "Vnesh": "Esterni",
    "StartMenu": "Menu di avvio",
    "SleduushayaStr": "Pagina successiva",
    "Ostanovleno": "Arrestato",
    "Iskat": "Ricerca",
    "Podkluchenie": "Connessione",
    "SoedineniePrervano": "La connessione è stata terminata",
    "soedineniya": "connessione",
    "podklucheniya": "connessione",
    "SbrosVipolnenPerezpusk": "Reimpostare l'applicazione è fatta!<br>Riavviare il widget",
    "Prodolzhit": "Continua",
    "Otmena": "Annulla",
    "VseRavnoProdolzhit": "Continua",
    "parsingaVideossilki": "l'analisi di link",
    "NevernayaSsilka": "Sbagliato link",
    "Proporcii": "Proporzioni",
    "OpciiEkrana": "Schermata opzioni",
    "OchishPamyati": "Extra. memoria",
    "min": "min",
    "Kachestvo": "Qualità",
    "Nedostupno": "Non disponibile",
    "SeichasNedostupno": "Attualmente non disponibile",
    "Shirina": "Larghezza",
    "Visota": "Altezza",
    "Buffer": "Buffer",
    "Mb": "MB",
    "ZvukDorozhka": "Suono. traccia",
    "Ekran": "Schermo",
    "Gromkost": "Il volume",
    "Tip": "Tipo",
    "Date": "Data",
    "Album": "Album",
    "Original": "Originale",
    "Rastyanut": "Tratto",
    "Ruchnoi": "Manuale",
    "VozobnovitNa": "Riprendere",
    "Posledovatelno": "Costantemente",
    "Povtoryat": "Ripetere",
    "odin": "uno",
    "vse": "tutti",
    "DostupRazreshen": "L'accesso è consentito",
    "REKLAMA": "PUBBLICITÀ",
    "PereadresaciyaNaFail": "Reindirizzamento da file",
    "Vneshniy": "Esterni",
    "Npl10IIOr1dDIlIlOOYpr": "Non adatto programma TV",
    "VoVremProsNazh": "Mentre guardando IPTV canale premere",
    "VmEmVp": "In Menu -> EPG codice si può scegliere un",
    "dVp": "per selezionare un adeguato",
    "VmVpostBiCe": "Il video è permanentemente bianco o schermo nero?<br><i>Provare un diverso tipo di",
    "HotChtVfon": "Voglio i video in sottofondo? Fare clic su",
    "vVrPrVid": "durante la riproduzione del video",
    "KnInfoPerRezh": "Il tasto info sul telecomando commuta la modalità di visualizzazione delle informazioni durante la visione di un video",
    "Video": "Video",
    "video": "video",
    "nePodderzhivaetsya": "non supportato",
    "DrugZvDorNet": "Altre tracce audio c'",
    "PustayaIliUdalSsilkaVK": "Vuoto o eliminare il link VK",
    "Podtverdit": "Confermare",
    "OzhidaiteNeskSec": "Attendere per alcuni secondi",
    "NazhmExitEsheRazDlyaVihoda": "Premere EXIT per uscire",
    "ViNeSmeniliPassRodKontrRekomendSm": "Non hai cambiato la password 0000!<br><i>Consigliamo di cambiare la password di Parental control per sicurezza bambini</i>",
    "PoiskAudio": "Ricerca audio",
    "PoiskVideo": "Ricerca per videozapisi",
    "PoiskFoto": "La ricerca di foto (On. senza autorizzazione)",
    "MoiAudio": "La mia musica",
    "MoiVideo": "Il mio video",
    "Recomend": "Raccomandazioni",
    "Popular": "Popolare",
    "Druzya": "Amici",
    "Gruppi": "Gruppo",
    "SetFon": "Imposta come sfondo",
    "Audio": "Audio",
    "PoiskPeople": "Per la ricerca di persone",
    "Authorization": "Autorizzazione",
    "OshibkaAvtorizacii": "Errore di autorizzazione",
    "VashiDruzya": "I tuoi amici",
    "VashiGruppi": "Il Vostro Gruppo",
    "Uchastnikov": "I partecipanti",
    "byLogin": "tramite login e password",
    "byCode": "codice",
    "ForAccessNeedAuthorization": "Per accedere vk.com è necessario firmare-up!<br>(i primi due paragrafi in cima alla pagina)",
    "IdetUstanovkaVidgeta": "L'installazione del widget",
    "Ustanovka": "Installazione",
    "vidgeta": "widget",
    "Razmer": "Dimensioni",
    "GB": "GB",
    "MB": "MB",
    "KB": "KB",
    "Bait": "Byte",
    "Vidget": "Widget",
    "OpenWidget": "Per accedere al widget",
    "Open": "Per accedere",
    "InstallWidgetInSmartHub": "Se sei sicuro che questo è un widget per il Samsung smart TV, quindi premere invio per installare",
    "recomOpenFromSmartHub": "si deve iniziare con SmartHub",
    "ForkPlayerByClosed": "ForkPlayer sarà chiuso<br>è Possibile lavorare non a schermo intero, per completare l'opera",
    "NoDevices": "Non collegato",
    "TVmemory": "Memoria interna",
    "uzheEstVustanovlennih": "che è già installato",
    "uspeshnoUstanovlen": "installato con successo",
    "VnimanieSvobMesto": "Attenzione! Assicurarsi che l'archivio è esattamente il widget per il Samsung smart TV e abbastanza spazio libero",
    "ViklIvklTVchtobiUv": "Spegnere e accendere la TV per vedere",
    "OshibkaUstanovki": "Errore di installazione",
    "vSmHubVidgNaidDop": "in smartha!</b><br>potete trovare il Widget applicazioni in SmartHome o Più applicazioni (Serie F)",
    "PustayaPapka": "Una cartella vuota",
    "BlueKnProporcii": "<i>stretching video</i><br><span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> tasto Blu durante la riproduzione del video",
    "Zakrit": "Chiudere",
    "NachatZanovo": "Per ricominciare",
    "ZagruzhatListiMozhoS": "Scarica qui le foglie dal computer utilizzando",
    "Summa": "L'importo",
    "Valuta": "Valuta",
    "PlatSistema": "Sistema di pagamento",
    "NaprimerVchera": "Per esempio, ieri in",
    "VvDatuPlatezha": "Immettere la data e l'ora del pagamento",
    "ThanksForYou": "Grazie per il sostegno al progetto",
    "Ozhidanie": "In attesa",
    "Prinyato": "Elaborazione",
    "NeobhodimRemoteFork": "Per fare questo, è necessario eseguire RemoteFork sul tuo computer o Android<br>Maggiori informazioni su forkplayer.tv",
    "Translate": "Per tradurre la pagina in",
    "OchistIst": "Chiaro. Est.",
    "VVOD": "INSERIRE",
    "BistrijPoskVverh": "Veloce. ricerca: Up",
    "Vniz": "Giù",
    "Vibrat": "Scegliere",
    "Documenti": "Documenti",
    "Photo": "Foto",
    "fromPage": "pagina",
    "fromWall": "dal muro",
    "photo": "foto",
    "Exit": "Fuori",
    "SavedPhoto": "Le foto salvate",
    "Slideshow": "Presentazione",
    "sec": "h",
    "Category": "CATEGORIA",
    "Categorys": "Categorie",
    "ForResetAppPressButton": "Per azzerare, premere il pulsante ora",
    "ALL": "TUTTI",
    "OpenFromProxy": "Eseguire attraverso un proxy",
    "PredpDor": "Sito. traccia",
    "InFullScreen": "A schermo intero",
    "DearPeople": "Cari utenti!<br>ForkPlayer è un browser adattato per il tuo dispositivo per visualizzare i tuoi siti preferiti e creato un XML, M3U (IPTV) playlist.",
    "Iread": "Ho letto(un)",
    "NotShow": "Non mostrare",
    "AudioMini": "Audio mini",
    "OffMiniPlayer": "Qui è possibile disabilitare l'utilizzo di un particolare player per riprodurre file mp3",
    "ConnectToServer": "La connessione al server",
    "NewDNS": "Nuovi DNS",
    "From": "Il mittente",
    "AutoSync": "Auto-sync",
    "Mark": "Nota",
    "several": "diversi",
    "existOverwrite": "esiste! Sovrascrivere?",
    "OverwriteAll": "Sovrascrivere tutti",
    "SkipAll": "Salta tutti",
    "Deselect": "Deselezionare",
    "Queue": "In coda",
    "DeleteFromStartMenu": "Rimuovi dal menu di avvio",
    "Edit": "Modifica",
    "Rename": "Rinominare",
    "ChangeURLicon": "Per modificare l'indirizzo di icone",
    "EnterURLicon": "Immettere l'indirizzo di icone",
    "Icon": "Icona",
    "SetIconFor": "Per impostare l'icona per",
    "EnterTitle": "Immettere il nome",
    "SelectIcon": "Per scegliere l'icona",
    "Timeout connection to stream IPTV": "Timeout di connessione per l'IPTV",
    "SetDefaultStartMenu": "Reset start. menu",
    "PreviousFileWillBeOverwritten": "Precedente file verrà sovrascritto",
    "PressStopToCancel": "Premere Stop per annullare",
    "WhileCopyingFilesCannotViewVideoAndAudio": "Durante la copia dei file è impossibile guardare video e audio",
    "NeedToOpenAndCloseTheVideoPlayerThenRepeatCopying": "È necessario aprire e chiudere il lettore video, poi ripetere la copia",
    "Server": "Server"
};
if (typeof JSON !== "object") {
    JSON = {}
}(function () {
    "use strict";
    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        return n < 10 ? "0" + n : n
    }

    function this_value() {
        return this.valueOf()
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function () {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value
    }
    var gap;
    var indent;
    var meta;
    var rep;

    function quote(string) {
        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string) ? "\"" + string.replace(rx_escapable, function (a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + "\"" : "\"" + string + "\""
    }

    function str(key, holder) {
        var i;
        var k;
        var v;
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
            case "string":
                return quote(value);
            case "number":
                return isFinite(value) ? String(value) : "null";
            case "boolean":
            case "null":
                return String(value);
            case "object":
                if (!value) {
                    return "null"
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || "null"
                    }
                    v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                    gap = mind;
                    return v
                }
                if (rep && typeof rep === "object") {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === "string") {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                }
                v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                gap = mind;
                return v
        }
    }
    if (typeof JSON.stringify !== "function") {
        meta = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else if (typeof space === "string") {
                indent = space
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k;
                var v;
                var value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (rx_one.test(text.replace(rx_two, "@").replace(rx_three, "]").replace(rx_four, ""))) {
                j = eval("(" + text + ")");
                return (typeof reviver === "function") ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
if (typeof Object.create === 'undefined') {
    Object.create = function (o) {
        function F() {}
        F.prototype = o;
        return new F()
    }
}
if (!Object.keys) {
    Object.keys = (function () {
        'use strict';
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !({
                toString: null
            }).propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;
        return function (obj) {
            if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                throw new TypeError('Object.keys called on non-object')
            }
            var result = [],
                prop, i;
            for (prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop)
                }
            }
            if (hasDontEnumBug) {
                for (i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i])
                    }
                }
            }
            return result
        }
    }())
}
var inited = !1;

function initdiv() {
    try {
        if (inited) return;
        lO10OIOlxzlO100OIYpr("pr", '<style> ::-webkit-scrollbar-button:single-button {			  background-color: #bbbbbb;	  display: block;	  border-style: solid;	  height: 10px;	  width: 10px;	}	::-webkit-scrollbar-button:single-button:vertical:decrement {	  border-width: 5px;	  border-color: transparent transparent #555555;	}	::-webkit-scrollbar-button:single-button:vertical:increment {	  border-width: 5px;	  border-color: #555555 transparent transparent transparent;	} ::-webkit-scrollbar {  width: 10px;} ::-webkit-scrollbar-track {  background: #ddd; } ::-webkit-scrollbar-thumb {  background: #888; }::-webkit-scrollbar-thumb:hover {  background: #777; }</style>' + '<div id="top" style="color:rgb(238, 238, 238);padding:0px;top:0px;width: ' + css_w(1280) + 'px; height: 4.7%;">' + '<div id="widget_time" style="margin-right: ' + css_w(5) + 'px;width: ' + css_w(110) + 'px;overflow:hidden;padding-top: 2px;float:right;left:0px;position: static;" title="Назад" onclick="tmf();"></div> ' + '<div id="remote" style="width: ' + css_w(30) + 'px;float:right;position: static;overflow:hidden;" title="Состояние вспомогательной компьютерной программмы Remote ForkPlayer"><img id="remotesrc" width="' + css_w(24) + '" src="' + _img("_OI_1px.png") + '" /><img id="acesrc" width="0" src="" style="display:none;" /></div>' + '<div id="weather" style="padding-top: 1px;width: ' + css_w(90) + 'px; height: ' + css_wh(35) + 'px; top: 0px; overflow: hidden; float: right; display: block;position: static;"></div>' + '<div id="widget_date" style="float:right;left:0px;position: static;width: ' + css_w(205) + 'px;overflow:hidden;"></div>' + '</div>     	<div id="inset"></div> 		<div id="top2load" style="display:none;"></div> 		' + '<div id="top2" style="top: 4.8%;width: ' + css_w(1280) + 'px;margin: 0px;"></div>           <div id="leftHalf"></div>        <div id="rightHalf" style="overflow:hidden;top:11.8%;"> <div id="infoList"></div> </div>        <div id="middle">&nbsp;</div>        	<div id="bottom" style="display:block;"><div id="bstatus"></div><div id="btdiv" style="float:left;width:' + css_w(1100) + 'px;height:100%;overflow:hidden;"></div></div>');
        if ($_("other") == null) {
            $_("player").style.zIndex = "1";
            var div = document.createElement('div');
            div.id = "other";
            div.style.position = "absolute";
            div.style.height = "0px";
            div.style.top = "0px";
            div.style.left = "0px";
            div.style.display = "none";
            document.getElementsByTagName('body')[0].appendChild(div)
        }
        var kb1t = ' onclick="gotoStart();" onmouseout="" onmousemove="if(getSelect()!=-4||omni_hor!=0){setSelect(-4);omniSel(0);linkOver();}"';
        var kb2t = ' onclick="page_rs();" onmouseout="" onmousemove="if(getSelect()!=-4||omni_hor!=1){setSelect(-4);omniSel(1);linkOver();}"';
        lO10OIOlxzlO100OIYpr("top2", '<div id="kbuts"><div id="kb1"' + kb1t + ' style="border:2px solid transparent;float:left;height: 90%;width: ' + css_w(24) + 'px;margin: ' + css_wh(3) + 'px;border-radius: ' + css_w(14) + 'px;"><img id="page_home" style="padding:' + css_wh(4) + 'px;width:' + css_w(20) + 'px;height:' + css_wh(20) + 'px;" src="' + _img('_OT_page_home.png?ndate181128_') + '" /></div>' + '<div id="kb2"' + kb2t + ' style="border:2px solid transparent;float:left;height: 90%;width: ' + css_w(24) + 'px;margin: ' + css_wh(3) + 'px;border-radius: ' + css_wh(14) + 'px;"><img id="page_load" style="padding:' + css_wh(4) + 'px;float:left;width:' + css_w(20) + 'px;height:' + css_wh(20) + 'px;" src="' + _img('_OT_page_reload.png?ndate181128_') + '" /></div></div>' + '<div id="top2text" onclick="editUrl();" class="top2text" style="border-radius: 17px;border:2px solid transparent;"><div id="navigate" style="height:100%;margin-top:0px;"></div>');
        $_("top2text").style.paddingLeft = css_w(6) + "px";
        if (version_local_files < 181128) {
            $_("inset").style.top = "0px";
            $_("inset").style.padding = "0px";
            $_("inset").style.margin = "0px";
            $_("inset").style.backgroundImage = "none";
            $_("inset").style.height = css_wh(34) + "px";
            $_("inset").style.width = css_w(847) + "px";
            $_("remote").style.paddingLeft = "0px"
        }
        $_("inset").style.width = "66%";
        $_("inset").style.height = "4.7%";
        $_("bstatus").style.padding = "";
        $_("bottom").style.margin = "0px 2px";
        $_("main").style.width = "100%";
        $_("main").style.overflow = "hidden";
        $_("main").style.height = "100%";
        $_("pr").style.width = "100%";
        $_("pr").style.height = "100%";
        var meta = document.createElement('meta');
        meta.name = "referrer";
        meta.content = "never";
        document.getElementsByTagName('head')[0].appendChild(meta);
        var div = document.createElement('div');
        div.id = "statbar";
        div.style.height = css_wh(19) + "px";
        div.style.top = css_wh(innerH - 19) + "px";
        div.style.left = css_w(0) + "px";
        div.style.display = "none";
        div.style.zIndex = "1";
        div.style.padding = "0px 3px 0px 3px";
        div.style.color = "#7D7D7D";
        div.style.backgroundColor = "#FAFAFA";
        div.style.fontSize = css_wh(16) + "px";
        div.style.position = "absolute";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "ext";
        div.style.background = "none";
        div.style.height = css_wh(640) + "px";
        div.style.top = css_wh(43) + "px";
        div.style.left = css_w(0) + "px";
        div.style.overflow = "hidden";
        div.style.width = css_w(1280) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "scrsaver";
        div.style.background = "black";
        div.style.height = "0px";
        div.style.top = "0px";
        div.style.left = "0px";
        div.style.zIndex = "-1";
        div.style.width = "0px";
        div.style.display = "none";
        div.onmousemove = div.onclick = function (e) {
            screensaver_mod(0)
        };
        div.style.position = "absolute";
        document.getElementsByTagName('body')[0].appendChild(div);
        $_("main").onmousemove = function (e) {
            screensavertimer = -1
        };
        var div = document.createElement('div');
        div.id = "loads";
        div.style.height = css_wh(30) + "px";
        div.style.top = css_wh(340) + "px";
        div.style.left = css_w(640) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        $_("main").appendChild(div);
        lO10OIOlxzlO100OIYpr("loads", "<img src='" + _img("_OI_b/loading.gif") + "' width=40 />");
        var div = document.createElement('div');
        div.id = "sidebar";
        div.style.height = "2.8%";
        div.style.top = "8.6%";
        div.style.left = css_w(0) + "px";
        div.style.width = css_w(1280) + "px";
        div.style.display = "none";
        div.style.overflow = "hidden";
        div.style.padding = "0px 3px 0px 3px";
        div.style.fontSize = css_wh(17) + "px";
        div.style.position = "absolute";
        $_("main").appendChild(div);
        $_("widget_date").style.paddingTop = css_wh(2) + "px";
        $_("widget_date").style.height = css_wh(28) + "px";
        $_("widget_date").style.overflow = "hidden";
        $_("widget_date").style.width = css_w(215) + "px";
        $_("widget_date").style.fontWeight = "normal";
        $_("widget_date").style.textAlign = "right";
        var div = document.createElement('div');
        div.id = "textinfo";
        div.style.position = "absolute";
        div.style.left = "23px";
        div.style.top = "0px";
        div.style.zIndex = "0";
        div.style.backgroundColor = "black";
        $_("top").appendChild(div);
        var div = document.createElement('div');
        div.id = "quick_but";
        div.style.top = css_wh(82) + "px";
        div.style.left = css_w(1000) + "px";
        div.style.display = "none";
        div.style.padding = "2px";
        div.style.zIndex = "1";
        div.style.color = "black";
        div.style.backgroundColor = "#FAFAFA";
        div.style.fontSize = css_wh(25) + "px";
        div.style.position = "absolute";
        $_("main").appendChild(div);
        var div = document.createElement('input');
        div.id = "quick_search";
        div.style.color = "white";
        div.style.height = css_wh(31) + "px";
        div.style.width = css_w(214) + "px";
        div.style.top = css_wh(43) + "px";
        div.style.left = css_w(1000) + "px";
        div.style.display = "none";
        div.style.padding = "1px " + css_wh(4) + "px";
        div.style.border = "2px solid #12C2D4";
        div.style.backgroundColor = "#1D1433";
        div.style.fontSize = css_wh(25) + "px";
        div.style.position = "absolute";
        $_("main").appendChild(div);
        $_("QualCh").style.top = css_wh(innerH - 540) + "px";
        $_("QualCh").style.left = "20%";
        $_("QualCh").style.zIndex = "2";
        $_("main").style.cursor = "default";
        var div = document.createElement('div');
        div.id = "but_nav";
        div.style.width = css_w(10) + "px";
        div.style.height = css_wh(581) + "px";
        div.style.top = css_wh(87) + "px";
        div.style.left = css_w(4) + "px";
        div.style.padding = css_w(2) + "px";
        div.style.borderRadius = css_w(2) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        div.onclick = function (e) {
            var x = e.pageY - $(this).offset().top;
            select = Math.round((x / css_w(585)) * count, 0);
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
        };
        $_("main").appendChild(div);
        var div = document.createElement('div');
        div.id = "subtitle";
        div.style.width = css_w(1200) + "px";
        div.style.top = css_wh(innerH - 175) + "px";
        div.style.fontSize = css_wh(40) + "px";
        div.style.left = css_w(40) + "px";
        div.style.position = "absolute";
        div.style.display = "none";
        div.style.textAlign = "center";
        div.style.overflow = "";
        div.style.fontWeight = "bold";
        div.style.textShadow = "-1px 0px black, 0px 1px black, 1px 0px black, 0px -1px black";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "thvpinfo";
        div.style.width = css_w(300) + "px";
        div.style.top = css_wh(450) + "px";
        div.style.fontSize = css_wh(19) + "px";
        div.style.left = css_w(955) + "px";
        div.style.position = "absolute";
        div.style.margin = "2px";
        div.style.padding = "2px";
        div.style.display = "none";
        div.style.textAlign = "left";
        div.style.overflow = "hidden";
        div.style.fontWeight = "";
        div.style.textShadow = "-1px 0px black, 0px 1px black, 1px 0px black, 0px -1px black";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "bcg1";
        div.style.width = "100%";
        div.style.height = "63%";
        div.style.zIndex = "-1";
        div.style.top = "0px";
        div.style.left = "0px";
        div.style.display = "none";
        div.style.position = "absolute";
        div.style.backgroundRepeat = "repeat-y";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "bcg2";
        div.style.width = css_w(860) + "px";
        div.style.height = "100%";
        div.style.zIndex = "-1";
        div.style.position = "absolute";
        div.style.top = "0%";
        div.style.left = "0px";
        div.style.display = "none";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "vk_play_button";
        div.style.width = "30px";
        div.onclick = function () {
            keyHandler({
                'keycode': VK_PLAY
            })
        };
        div.style.height = css_wh(35) + "px";
        div.style.top = css_wh(688) + "px";
        div.style.left = css_w(1145) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        div.style.backgroundPosition = "0px -3px";
        div.style.backgroundImage = "url(" + _img("_OI_audio_controls.png") + ")";
        $_("main").appendChild(div);
        var div = document.createElement('div');
        div.id = "playermini";
        div.style.width = css_w(420) + "px";
        div.style.height = css_wh(267) + "px";
        div.style.top = css_wh(innerH - 267) + "px";
        div.style.left = css_w(860) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        div.style.backgroundColor = "black";
        $_("main").appendChild(div);
        $_("acesrc").onclick = $_("remotesrc").onclick = function () {
            l0I1l0lO0lsnG1I1QlYpr()
        };
        $_("remotesrc").alt = 'R';
        $_("remotesrc").title = 'Нажмите чтобы обновить состояние RemoteFork';
        if (uaJ == "mag") $_("widget_time").style.fontWeight = "normal";
        $_("MenuCh").style.overflow = "visible";
        $_("MenuCh").style.backgroundColor = "#323c42";
        $_("MenuCh").style.backgroundImage = "none";
        $_("remotesrc").style.paddingTop = css_wh(4) + "px";
        if (uaJ == "pa" || (innerW == 960 && innerH == 540)) {
            $_("pr").style.height = css_wh(720) + "px";
            $_("pr").style.width = css_w(1280) + "px"
        }
        $_("vk").style.width = css_w(1100) + "px";
        $_("vk").style.height = css_wh(245) + "px";
        $_("vk").style.overflow = "hidden";
        $_("vk").style.left = css_w(90) + "px";
        var div = document.createElement('div');
        div.id = "whitestripes1";
        div.style.width = "100%";
        div.style.height = "0px";
        div.style.backgroundColor = "black";
        div.style.zIndex = "0";
        div.style.top = "0px";
        div.style.left = "0px";
        div.style.display = "none";
        div.style.position = "absolute";
        document.getElementsByTagName('body')[0].appendChild(div);
        var div = document.createElement('div');
        div.id = "whitestripes2";
        div.style.width = "100%";
        div.style.height = "0px";
        div.style.backgroundColor = "black";
        div.style.zIndex = "0";
        div.style.top = "0px";
        div.style.left = "0px";
        div.style.display = "none";
        div.style.position = "absolute";
        document.getElementsByTagName('body')[0].appendChild(div);
        lO10OIOlxzlO100OIYpr("player", '');
        if ($_("video") == null) {
            var div = document.createElement('video');
            div.id = "video";
            div.style.width = "100%";
            div.style.height = "100%";
            div.style.backgroundColor = "black";
            div.style.zIndex = "0";
            div.style.top = "0px";
            div.style.left = "0px";
            div.style.display = "none";
            div.style.margin = "0px";
            div.style.padding = "0px";
            div.style.position = "fixed";
            document.getElementsByTagName('body')[0].insertBefore(div, $_("player"));
            var div = document.createElement('div');
            div.id = "jw";
            div.style.width = "100%";
            div.style.height = "100%";
            div.style.backgroundColor = "black";
            div.style.zIndex = "0";
            div.style.top = "0px";
            div.style.left = "0px";
            div.style.display = "none";
            div.style.margin = "0px";
            div.style.padding = "0px";
            div.style.position = "fixed";
            document.getElementsByTagName('body')[0].insertBefore(div, $_("player"))
        } else {
            $_("video").style.backgroundColor = "black";
            $_("video").style.position = "fixed";
            $_("video").style.margin = "0px";
            $_("video").style.padding = "0px"
        }
        if ($_("video") == null) {
            var dop = '<video id="video" style="width:100%;height:100%;background-color:black;margin:0px;padding:0px;position:fixed;top:0px;left:0px;display:none;"></video>';
            if ($_("jw") == null) dop += '<div style="position:absolute;top:0px;left:0px;width:100%;height:100%;display:none;" id="jw"></div>'
        } else dop = '';
        lO10OIOlxzlO100OIYpr("player", '<div id="prekinfo" style="float:left;padding:' + css_w(43) + 'px 10px;display:none; color: #c5bfbf;	text-shadow: 		-0   -1px 0   #000000,		 0   -1px 0   #000000,		-0    1px 0   #000000,		 0    1px 0   #000000,		-1px -0   0   #000000,		 1px -0   0   #000000,		-1px  0   0   #000000,		 1px  0   0   #000000,		-1px -1px 0   #000000,		 1px -1px 0   #000000,		-1px  1px 0   #000000,		 1px  1px 0   #000000,		-1px -1px 0   #000000,		 1px -1px 0   #000000,		-1px  1px 0   #000000,		 1px  1px 0   #000000;"><span id="rektitle"><b>_FPREKLAMA_</b></span></div>' + '<div id="pstream" class="pstream" style="width:85%;">	<div style="float:left;"><div id="pstr" style="float:left;"></div></div><div id="player_time" style="float:left;">' + $_("widget_time").innerHTML + ' </div><div id="infR" style="float:left;"></div><div id="infPl" style="float:left;"></div></div>' + dop + '<div id="buttonTop" class="keyHelp"><div class="backKey" id="qual_text">   	</div>    <div class="exitKey exitKeyHover" id="exit_text"></div></div>' + '<div id="loading" style="z-index:1;display:none;"><img src="' + _img("_OI_b/loading.gif") + '"/></div>' + '<div id="playerBottom" class="playerBottom">' + '<div id="arrowtime"></div>' + '<div id="arrow"></div>' + '<div class="playerButtonLayout">' + '<div id="progressBarClick" class="progressBarLayout">' + '<div id="progressBarStatus" class="progress progressBarStatus"> </div>' + '<div id="progressBall" class="progressBall"></div>' + '<div id="progressBuffer" class="progress progressBuffer" style="display:none;"> </div>' + '</div>' + '<div class="panelbox">' + '<div class="runningTime"> <span id="remainingTime"></span> <span id="totalTime"></span></div>' + '<div id="ptt" class="pttk" style="word-break: break-word;overflow: hidden;height: ' + css_wh(80) + 'px;"></div> <div id="epg_full"></div> ' + '</div>' + '<div id="buttonLayout" style="width:100%"><ul style="width:75%">' + '<li id="stop" class="stopButton"><img alt="stopBtn" src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/movie_btn_icon_stop_n.png") + '" class="center">          		</li>          		' + '<li id="play" class="playButton">' + '<img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/movie_btn_icon_play_n.png") + '" alt="playBtn" class="center">' + ' <div id="recovery" onclick="trpt();"></div>' + '</li><li id="rewind" class="rewindButton">            		<img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/movie_btn_icon_rewind_n.png") + '" alt="rewindBtn" class="center">          		</li>          		<li id="forward" class="forwardButton">            		<img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/movie_btn_icon_forward_n.png") + '" alt="forwardBtn" class="center">          		</li>          		          		<li id="option" class="optionButton">            		<img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/movie_btn_icon_option_n.png") + '" alt="optionBtn" class="center">          		</li>                     		<li id="lastview" class="prevButton"><img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/lastview.png") + '" alt="" class="center">          		</li>          		<li id="prev" class="prevButton"><img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/icon_chPrev.png") + '" alt="" class="center">          		</li>           		<li id="next" class="nextButton"><img src="' + _img("http://obovse.ru/ForkPlayer2.5/imgplayer/player_btn_icon/icon_chNext.png") + '" alt="" class="center">           		</li>         	</ul>' + '</div>' + '</div>' + '</div>');
        if (platform == "android-device") {
            $_("player").style.width = "1280px";
            document.getElementsByTagName('body')[0].style.width = "1280px";
            document.getElementsByTagName('body')[0].style.height = "100%";
            var meta = document.createElement('meta');
            meta.name = "viewport";
            meta.content = "width=1280";
            document.getElementsByTagName('head')[0].appendChild(meta)
        }
        $_("player").style.height = "100%";
        var div = document.createElement('div');
        div.id = "rek_button1";
        div.onmouseover = function (e) {
            rek_sel = 0;
            rekBox()
        }
        div.onclick = function (e) {
            rek_sel = 0;
            keyHandler({
                "keycode": VK_ENTER
            })
        }
        div.style.maxWidth = css_w(600) + "px";
        div.style.maxHeight = css_wh(80) + "px";
        div.style.overflow = "hidden";
        div.style.top = css_wh(600) + "px";
        div.style.padding = css_w(7) + "px";
        div.style.left = css_w(40) + "px";
        div.style.fontSize = css_wh(22) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        div.style.border = "2px solid #c5c3c3";
        $_("prekinfo").appendChild(div);
        var div = document.createElement('div');
        div.id = "rek_button2";
        div.onmouseover = function (e) {
            rek_sel = 1;
            rekBox()
        }
        div.onclick = function (e) {
            rek_sel = 1;
            keyHandler({
                "keycode": VK_ENTER
            })
        }
        div.style.padding = css_w(7) + "px";
        div.style.top = css_wh(innerH - 120) + "px";
        div.style.maxWidth = css_w(300) + "px";
        div.style.left = css_w(920) + "px";
        div.style.fontSize = css_wh(22) + "px";
        div.style.display = "none";
        div.style.maxHeight = css_wh(80) + "px";
        div.style.overflow = "hidden";
        div.style.position = "absolute";
        div.style.border = "2px solid #c5c3c3";
        $_("prekinfo").appendChild(div);
        var div = document.createElement('div');
        div.id = "chat";
        div.style.width = css_w(280) + "px";
        div.style.height = css_wh(720) + "px";
        div.style.top = css_wh(0) + "px";
        div.style.left = css_w(1000) + "px";
        div.style.display = "none";
        div.style.position = "absolute";
        div.style.backgroundColor = "black";
        $_("player").appendChild(div);
        var div = document.createElement('div');
        div.id = "thumb";
        div.style.top = css_wh(innerH - 186) + "px";
        div.style.left = css_w(300) + "px";
        div.style.width = css_w(128) + "px";
        div.style.height = css_wh(72) + "px";
        div.style.overflow = "hidden";
        div.style.display = "none";
        div.style.padding = "2px";
        div.style.backgroundColor = "black";
        div.style.position = "absolute";
        $_("player").appendChild(div);
        $_("qual_text").style.backgroundSize = "cover";
        $_("exit_text").style.backgroundSize = "cover";
        $_("qual_text").style.paddingTop = "0px";
        inited = !0
    } catch (e) {
        kjtYpr.popUp("Error INITED: " + e.message)
    }
}

function upstyles() {
    if (FgetSetting(1)) {
        var kb1t = "",
            kb2t = ""
    } else {
        kb1t = ' onclick="gotoStart();" onmouseout="this.style.backgroundColor=\'\';" onmousemove="this.style.backgroundColor=\'#6f6161\';"';
        kb2t = ' onmouseout="this.style.backgroundColor=\'\';" onmousemove="this.style.backgroundColor=\'#6f6161\';"'
    }
    if (!box_low2 && !FgetSetting(3)) {
        $_("top").style.backgroundColor = "rgba(167, 167, 167,0.5)";
        $_("top2text").style.backgroundColor = "rgba(95, 94, 94, 0.49)";
        $_("top2").style.backgroundColor = "rgba(8, 27, 40, 0.6)"
    } else {
        $_("top").style.backgroundColor = "rgb(167, 167, 167)";
        $_("top2text").style.backgroundColor = "rgb(95, 94, 94)";
        $_("top2").style.backgroundColor = "rgb(8, 27, 40)"
    }
    if (FgetSetting(4)) {
        $_("sidebar").style.whiteSpace = "nowrap";
        $_("widget_date").style.whiteSpace = "nowrap";
        $_("top2text").style.wordBreak = "unset"
    } else {
        $_("sidebar").style.whiteSpace = "normal";
        $_("widget_date").style.whiteSpace = "normal";
        $_("top2text").style.wordBreak = "normal"
    }
}
var ext_player = !1,
    send, ptext = "";

function initmain() {
    try {
        $_("main").focus();
        if (typeof kjtYpr.GL == "undefined") kjtYpr.setDefault(!0);
        if (typeof kjtYpr.GL.JTVRegion == "undefined") kjtYpr.setDefault(!0);
        kjtYpr.GL.buffer = 2;
        kjtYpr.GL["zakladki.xml"] = '_FPZakladki_ / _FPRaznoe_';
        kjtYpr.GL["zakladkiSerials.xml"] = '_FPZakladki_ / _FPSeriali_';
        kjtYpr.GL["zakladkiFilms.xml"] = '_FPZakladki_ / _FPFilmi_';
        kjtYpr.GL["zakladkiIPTV.xml"] = '_FPZakladki_ / IPTV';
        kjtYpr.inf("_FPSchitivanieNastroek_ OK", 500);
        kjtYpr.GL.test = !0;
        kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
        fons.push({
            "url": "jpg",
            "title": "Ваш фон в jpg"
        });
        fons.push({
            "url": "png",
            "title": "Ваш фон в png"
        });
        fonLen = fons.length + 1;
        if (kjtYpr.lIlOOIIlIEIzH1l1OIYpr("mf") != "") {
            fons.push({
                "url": kjtYpr.lIlOOIIlIEIzH1l1OIYpr("mf"),
                "title": "Web URL"
            })
        }
        if (kjtYpr.GL.player == "jw" || kjtYpr.GL.streamplayer == "jw") jwon();
        if (kjtYpr.series == "C" || kjtYpr.series == "D") box_low2 = !0;
        setfon();
        $_("startlogo").style.display = "none";
        $_("main").style.color = f_cols[kjtYpr.GL.color];
        kjtYpr.lllOlISKvIMOI11Ypr = "about:blank";
        this.l1IlIl01l0tUIl1IIYpr = kjtYpr.lllOlISKvIMOI11Ypr;
        if (uaJ == "lgw2") {
            if (kjtYpr.lIlOOIIlIEIzH1l1OIYprC("v") != "1") {
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                kjtYpr.lIllOVRj11lO10YprC("v", "1")
            }
        }
        l0O1l101l1t_Y0lll1Ypr = kjtYpr.GL.player;
        country = countries[kjtYpr.GL.country];
        kjtYpr.inf("_FPInicializaciya_ _FPpleera_");
        if (kjtYpr.lIlOOIIlIEIzH1l1OIYpr("xmodeClear") != "") kjtYpr.GL.clear = parseInt(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("xmodeClear"));
        kjtYpr.inf(uaJ);
        lOOI1lQTVIO111IYpr();
        statusbar("_FPOzhidanie_ _FPmenu_..");
        l0lOIljl10Oll0l0OYpr = Math.round(540 - ch_size * 1.6 - l00I1lOQIHVIK01O10Ypr * 1.2 - 12);
        lQQOIudsbl1111IYpr = null;
        try {
            initsnow()
        } catch (e) {}
        booting = !1;
        enteresObj = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("enteres"));
        kjtYpr.lIllOVRj11lO10Ypr("searches", "");
        userTop = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("datas"));
        if (enteresObj == null) enteresObj = [];
        if (userTop == null) userTop = {};
        ll0I1lllpOugKllQ11Ypr = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("history"));
        if (ll0I1lllpOugKllQ11Ypr == null) ll0I1lllpOugKllQ11Ypr = [];
        var k = 0,
            ln = ll0I1lllpOugKllQ11Ypr.length;
        for (var i = 0; i < ln; i++) {
            if (typeof ll0I1lllpOugKllQ11Ypr[i - k].xml_url == "undefined") {
                ll0I1lllpOugKllQ11Ypr.splice(i - k, 1);
                k++
            }
        }
        ftimes = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("times"));
        statusbar("_FPOzhidanie_ _FPmenu_...");
        if (platform != "android-device") {
            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("epg_set");
            if (s != "") epg_arr = l1l0IOIl_puQl1I1IYpr(s);
            else epg_arr = {}
        }
        lOI10QpJAilIIIYpr = 0;
        if (kjtYpr.GL.recovery == "true" || kjtYpr.GL.recovery === !0) {
            try {
                statusbar("_FPVozobnovlenie_");
                var stinset = -1;
                for (i = 0; i < lO00Oll1CKJll11Ypr; i++) {
                    s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("url" + i);
                    if (s != "") {
                        if (l1l0IOIl_puQl1I1IYpr(s) != null) {
                            inset["tab" + i] = l1l0IOIl_puQl1I1IYpr(s);
                            lOI10QpJAilIIIYpr++;
                            if (insetIn(-1, "get", "a", null, i) == "1" && kjtYpr.lIlOOIIlIEIzH1l1OIYpr("store") != "1") stinset = i
                        }
                    }
                }
                statusbar("_FPVozobnovlenie_.");
                s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("urlInset");
                if (s != "") {
                    s = parseInt(s);
                    if (isNaN(s)) s = 0
                } else s = 0;
                if (stinset > -1) insetActive = stinset;
                else insetActive = s;
                statusbar("_FPVozobnovlenie_..");
                if (inset["tab" + insetActive] != null) {
                    setTimeout("listInset();kjtYpr.lI11111bPNQ0III1Ypr(true);", 800)
                } else {
                    for (i = insetActive; i >= 0; i--) {
                        if (inset["tab" + i] != null) {
                            insetActive = i;
                            break
                        }
                    }
                    if (inset["tab" + insetActive] != null) {
                        setTimeout("listInset();kjtYpr.lI11111bPNQ0III1Ypr(true);", 800)
                    } else {
                        statusbar("Ошибка возобновления. Загрузка стартового меню...");
                        newInset(0)
                    }
                }
            } catch (e) {
                kjtYpr.popUp(e.message, 2500);
                statusbar("Ошибка возобновления. Загрузка стартового меню...");
                inset["tab" + insetActive] = [];
                prev = {};
                gotoStart()
            }
            kjtYpr.lII1O1LQIDl10IlOYpr();
            kjtYpr.lIllOVRj11lO10Ypr("store", "0")
        } else {
            statusbar("Загрузка Стартового меню");
            inset["tab" + insetActive] = [];
            prev = {};
            kjtYpr.inf("");
            gotoStart()
        }
        lIl1OAvvpIO0IYpr("autostart");
        try {
            if (loader_orig == "lg_webos_ide" || loader_orig == "lg_netcast" || loader_orig == "lg_webos_usb") {
                xhrt2 = null;
                xhrt2 = new XMLHttpRequest();
                xhrt2.onreadystatechange = function () {
                    if (xhrt2.readyState == 4) {
                        if (xhrt2.status == 200) {
                            app_cors_orig = app_cors = !0;
                            app_cors_referer = 0;
                            ptext = encodeURIComponent(xhrt2.responseText.substring(0, 1000))
                        }
                    }
                };
                xhrt2.open('GET', "http://" + ServerFromList + "/smarttv/ve.xml", !0);
                xhrt2.send()
            } else ptext = "no"
        } catch (e) {}
        setTimeout(function () {
            if (uaJ == "") uaJ = kjtYpr.hardware;
            // var u = "http://185.158.114.122/obovse.ru/forklmod/addstat.php?serial=" + kjtYpr.serial + "&mac=" + kjtYpr.mac + "&hardware=" + kjtYpr.hardware + "&box_server=" + nServer + "&plat" + "form=" + uaJ + "&loader_orig=" + loader_orig + "&box_low=" + box_low + "&country=" + ipCountry + "&td=2&hm=" + kjtYpr.hm;
            var u = "http://127.0.0.1/obovse.ru/forklmod/addstat.php?serial=" + kjtYpr.serial + "&mac=" + kjtYpr.mac + "&hardware=" + kjtYpr.hardware + "&box_server=" + nServer + "&plat" + "form=" + uaJ + "&loader_orig=" + loader_orig + "&box_low=" + box_low + "&country=" + ipCountry + "&td=2&hm=" + kjtYpr.hm;
            if (platform == "android-device") u += "&signature=" + kjtYpr.signature + "&build=" + kjtYpr.build;
            u += "&mtype=" + model + "-" + kjtYpr.virtual + "&other=" + lg_model + "-" + lg_v + "&loader_orig=" + loader_orig;
            if (lg_uid != "") u += "&lguid=" + lg_uid;
            u += "&timestamp=rek_" + rek_url;
            u += "&weather_city=" + kjtYpr.GL.weather;
            if (!is_readst) {
                is_readst = !0;
                readSt()
            }
            if (document.location.href.indexOf("operatv.obovse.ru") > 0 && uaJ == "android") {
                ll0111l1wxUIOlO1lYpr(5, "Рекомендуется использовать андроид приложение aForkPlayer.apk!<br>http://obovse.ru/aForkPlayer.apk", "Скачать|_FPOtmena_")
            }
        }, 9000);
        sidebar_show()
    } catch (e) {
        kjtYpr.popUp("Err initmain:<br>" + e.message, 5000)
    }
    if (preurl == null) PullDataFrom("http://" + ServerFromList + "/smarttv/fs.php?id=preurl", "preurl");
    llllQO1WlII1lOYpr();
    updateWeather()
}
if (!document.getElementsByClassName) {
    document.getElementsByClassName = function (cls, node, tag) {
        if (!node) node = document;
        if (!tag) tag = '*';
        var them = node.getElementsByTagName(tag),
            rez = [];
        for (var notI = 0; notI < them.length; ++notI)
            if (them[notI].className == cls) rez.push(them[notI]);
        return rez
    }
}

function pqrs() {
    try {
        if (kjtYpr.mac == undefined) {
            if (lg_uid.length > 11) {
                kjtYpr.mac = lg_uid;
                model = "lgusb"
            } else {
                kjtYpr.virtual = 1;
                var s = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("ID");
                if (s != "" && s.length >= 12) kjtYpr.mac = s;
                else {
                    s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ID");
                    if (s != "" && s.length >= 12) kjtYpr.mac = s
                }
            }
            if (kjtYpr.mac != undefined) {
                if (kjtYpr.mac == "file%20not%20found." || kjtYpr.mac == "file not found.") kjtYpr.mac = undefined
            }
            if (kjtYpr.mac == undefined) {
                try {
                    kjtYpr.popUp("_FPRegistraciyaVseti_...");
                    xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4) {
                            kjtYpr.mac = xhr.responseText;
                            kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.mac);
                            kjtYpr.lIllOVRj11lO10Ypr("ID", kjtYpr.mac);
                            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("ID");
                            if (s == "" || s.length != 12) s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ID");
                            if (s != "" && s.length == 12) {
                                kjtYpr.popUp("_FPRegistraciyaVseti_...<br>OK<br>Получен мак адрес:<br>" + s);
                                kjtYpr.kjtYpj(!0)
                            } else {
                                kjtYpr.popUp("_FPRegistraciyaVseti_...<br>ERROR! " + s, 2000);
                                kjtYpr.kjtYpj(!0)
                            }
                        }
                    };
                    var url = 'http://obovse.ru/ForkPlayer2.5/reg.php?h=' + lg_model;
                    xhr.open('GET', url, !0);
                    xhr.send()
                } catch (e) {
                    kjtYpr.popUp("_FPRegistraciyaVseti_...<br>CATCH ERR!<br>" + e.message, 2000);
                    kjtYpr.mac = "undefined"
                }
                return
            } else {
                kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.mac);
                kjtYpr.lIllOVRj11lO10Ypr("ID", kjtYpr.mac)
            }
        } else {
            kjtYpr.mac = kjtYpr.mac.replace("array()", "");
            kjtYpr.mac = kjtYpr.mac.toLowerCase();
            if (platform == "sams") return;
            kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.mac);
            kjtYpr.lIllOVRj11lO10Ypr("ID", kjtYpr.mac)
        }
        if (kjtYpr.mac.match(/(;|:)/)) kjtYpr.mac = kjtYpr.mac.substr(0, 12);
        kjtYpr.mac = kjtYpr.mac.replace("array()", "");
        kjtYpr.mac = kjtYpr.mac.toLowerCase();
        if (kjtYpr.serial == undefined) kjtYpr.serial = kjtYpr.mac;
        else if (kjtYpr.serial == "nonundefined" || kjtYpr.serial == "undefined") kjtYpr.serial = kjtYpr.mac;
        else if (kjtYpr.serial != kjtYpr.mac) {
            kjtYpr.lIllOVRj11lO10Ypr("IDS", kjtYpr.serial);
            kjtYpr.lIllOVRj11lO10YprC("IDS", kjtYpr.serial)
        }
        var idS = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("IDS");
        if (idS == "") idS = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("IDS");
        if (idS != "" && kjtYpr.serial == kjtYpr.mac) kjtYpr.serial = idS;
        if (kjtYpr.serial == "nonundefined" || kjtYpr.serial == "undefined") kjtYpr.serial = kjtYpr.mac;
        oID = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("oID");
        if (oID == "") oID = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("oID")
    } catch (e) {
        kjtYpr.popUp("Error load step 2: " + e.message)
    }
}

function getHash(m) {
    var mtc = m.match(/md5=(.*?)(&|$)/);
    if (mtc != null) md = mtc[1];
    else {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        lI1lI00l1gX0l0l0OYpr();
        return ""
    }
    var src = md5(md + 'secret');
    var magic = [5, 2, 9, 4, 7, 2, 2, 7, 8, 1, 3, 8, 7, 3, 4, 6, 1, 3, 5, 2, 7, 9, 2, 6, 5, 3, 7, 8, 2, 5, 9, 4];
    var a = [];
    for (var i = 0; i < src.length; i++) {
        a.push(parseInt('0x0' + src.charAt(i)))
    }
    src = a;
    var res = [];
    src = src.slice(0);
    src[32] = src[31];
    var sum = 0;
    var i = 32;
    while (i-- > 0)
        sum += src[i];
    for (var x = 0; x < 32; x++)
        res[x] = Math.abs(sum - src[x + 1] * src[x] * magic[x]);
    return m.replace("&okhash.mp3", "&clientHash=" + res.join('') + "&client=mob")
}

function nmlz(s) {
    s = trim11(s.replace(/<.*?>/g, " ").replace(/сезон \d+/i, "").replace(/серия \d+/i, "").replace(/[\(\):\/\-!\?,\.\|]/g, " "));
    s = s.replace(/\s+/g, " ");
    return s
}

function totrim(s) {
    return s.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '')
}

function trim11(str) {
    str = str.replace(/^\s+/, '');
    for (var i = str.length - 1; i >= 0; i--) {
        if (/\S/.test(str.charAt(i))) {
            str = str.substring(0, i + 1);
            break
        }
    }
    return str
}

function grm(min, max) {
    return Math.floor(Math.random() * (max - min)) + min
}

function ParseError(message) {
    this.message = message || "";
    this.name = "ParseError"
};
ParseError.prototype = new Error;

function shellwords(line) {
    try {
        var words = _.map(line.split(/(\".*?\")/), function (block) {
            var matches = block.match(/^\"(.*)\"$/);
            if (matches) {
                return matches[1]
            } else {
                return block.split(/ +/)
            }
        });
        words = _.flatten(words);
        words = _.compact(words);
        if (_.detect(words, function (word) {
                return word.match(/\"/)
            })) {
            throw new ParseError("Unmatched quote")
        }
        return words
    } catch (e) {
        kjtYpr.popUp(e.message, 2000)
    }
}
parseCURL = function (s) {
    if (0 != s.indexOf('curl ')) return;
    s = s.replace(/\\"/g, "--uquote-");
    var args = rewrite(shellwords(s));
    var out = {
        method: 'GET',
        header: {}
    };
    var state = '';
    args.forEach(function (arg) {
        arg = arg.replace(/--uquote-/g, "\"");
        switch (!0) {
            case isURL(arg):
                out.url = arg;
                break;
            case arg == '-A' || arg == '--user-agent':
                state = 'user-agent';
                break;
            case arg == '-H' || arg == '--header':
                state = 'header';
                break;
            case arg == '-d' || arg == '--data' || arg == '--data-ascii':
                state = 'data';
                break;
            case arg == '-u' || arg == '--user':
                state = 'user';
                break;
            case arg == '-I' || arg == '--head':
                out.method = 'HEAD';
                break;
            case arg == '-X' || arg == '--request':
                state = 'method';
                break;
            case arg == '-b' || arg == '--cookie':
                state = 'cookie';
                break;
            case arg == '--compressed':
                out.header['Accept-Encoding'] = out.header['Accept-Encoding'] || 'deflate, gzip';
                break;
            case !!arg:
                switch (state) {
                    case 'header':
                        var field = parseField(arg);
                        field[1] = field[1];
                        out.header[field[0]] = field[1];
                        state = '';
                        break;
                    case 'referer':
                        out.header.Referer = arg;
                        state = '';
                        break;
                    case 'user-agent':
                        out.header['User-Agent'] = arg;
                        state = '';
                        break;
                    case 'data':
                        if (out.method == 'GET' || out.method == 'HEAD') out.method = 'POST';
                        out.header['Content-Type'] = out.header['Content-Type'] || 'application/x-www-form-urlencoded';
                        out.body = out.body ? out.body + '&' + arg : arg;
                        state = '';
                        break;
                    case 'user':
                        out.header.Authorization = 'Basic ' + btoa(arg);
                        state = '';
                        break;
                    case 'method':
                        out.method = arg;
                        state = '';
                        break;
                    case 'cookie':
                        out.header['Set-Cookie'] = arg;
                        state = '';
                        break
                }
                break
        }
    });
    return out
};

function rewrite(args) {
    return args.reduce(function (args, a) {
        if (0 == a.indexOf('-X')) {
            args.push('-X');
            args.push(a.slice(2))
        } else {
            args.push(a)
        }
        return args
    }, [])
}

function parseField(s) {
    return s.split(": ")
}

function isURL(s) {
    var res = s.match(/(^https?:\/\/)/g);
    if (res == null)
        return !1;
    else return !0
}

function ext_focus(b) {
    pop2on = !1;
    if (b == null) {
        handler = "menu";
        kjtYpr.lIOIOIBu0mO11llO0Ypr(0)
    }
    kjtYpr.lII1O1LQIDl10IlOYpr();
    handler = "ext";
    try {
        $_("frame-id").contentWindow.postMessage({
            'cmd': 'focus',
            'text': ''
        }, "*")
    } catch (e) {}
}

function ext_close() {
    handler = "menu";
    lO10OIOlxzlO100OIYpr("ext", "");
    $_("ext").style.display = "none";
    kjtYpr.l0OlII0Ix1fI1I01Ypr()
}
var ccread = 0;
window.addEventListener('message', function (event) {
    if (l0O1l101l1t_Y0lll1Ypr == "playerjs" && (handler == "player" || handler == "qual")) {
        uplayer[l0O1l101l1t_Y0lll1Ypr].message(event);
        return
    }
    var a = ["ID", "IDS", "ts", "servC", "lastdata", "hm"].concat(allfs).concat(["times", "epg_set"]);
    if (event.data.cmd == "exit" || event.data.text == VK_RED) {
        ext_close()
    } else if (event.data.cmd == "alert") {
        if (event.data.text.indexOf("playVideo:") == 0) {
            $_("ext").style.display = "none";
            $_("frame-id").contentWindow.postMessage({
                'cmd': 'innerplay',
                'text': ''
            }, "*");
            lI1l1IOllHHCTuO0OlOYpr(event.data.text.split("playVideo: ")[1]);
            handler = "player";
            return
        }
        if (event.data.text.indexOf("OPEN_VAST") >= 0) {}
    } else if (event.data.cmd == "keyHandler") {
        if (event.data.text == VK_PAGE_UP || event.data.text == VK_PAGE_DOWN) {
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
            kjtYpr.lII1O1LQIDl10IlOYpr();
            $_("frame-id").contentWindow.postMessage({
                'cmd': 'unfocus',
                'text': ''
            }, "*")
        } else {
            handler = "ext";
            keyHandler({
                'keycode': event.data.text
            })
        }
    } else if (event.data.cmd == "innerplay") {
        handler = "player";
        keyHandler({
            'keycode': event.data.text
        })
    } else if (event.data.cmd == "Handler") {
        handler = "menu";
        keyHandler({
            'keycode': event.data.text
        })
    } else if (event.data.cmd == "toinner") {
        if (event.data.text) {
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
            kjtYpr.lII1O1LQIDl10IlOYpr()
        }
    } else if (event.data.cmd == "onload") {
        if (ifrrw) {
            for (var i in a) {
                $_("ifrrw").contentWindow.postMessage({
                    'cmd': 'read' + 'File',
                    'text': a[i]
                }, "*");
                if (i < 4) $_("ifrrw").contentWindow.postMessage({
                    'cmd': 'read' + 'FileC',
                    'text': a[i]
                }, "*")
            }
        }
    } else if (event.data.cmd.indexOf("read" + "FileCcook") == 0) {
        FileObjC[event.data.cmd.substr(13)] = event.data.text
    } else if (event.data.cmd.indexOf("read" + "File") == 0) {
        ccread++;
        FileObj[event.data.cmd.substr(8)] = event.data.text;
        if (!inited) {
            if (ccread >= a.length) {
                if (prload) kjtYpr.kjtYpj();
                else ifrreaded = !0
            }
            if (ccread == 1) loadinfo("_FPSchitivanieNastroek_ <span id='numD'> </span> ...");
            lO10OIOlxzlO100OIYpr("numD", ccread + "/" + a.length)
        }
    } else if (event.data.cmd == "display" && $_("main").style.display != event.data.text) {
        $_("main").style.display = event.data.text;
        if (event.data.text == "none") {
            $_("ext").style.top = "0px";
            $_("ext").style.height = "100%";
            $_("frame-id").style.height = "100%";
            $_("frame-id").style.overflowY = "hidden";
            $_("frame-id").style.webkitTransform = "scaleY(1.0)";
            $_("frame-id").style.transform = "scaleX(1.0)";
            $_("frame-id").style.OTransform = "scaleX(1.0)";
            $_("frame-id").style.msTransform = "scaleX(1.0)";
            $_("frame-id").style.MozTransform = "scaleX(1.0)"
        } else {
            $_("ext").style.top = "43px";
            $_("frame-id").style.height = "640px";
            $_("ext").style.height = "640px";
            $_("frame-id").style.webkitTransform = "scaleX(1.13)";
            $_("frame-id").style.transform = "scaleX(1.13)";
            $_("frame-id").style.OTransform = "scaleX(1.13)";
            $_("frame-id").style.msTransform = "scaleX(1.13)";
            $_("frame-id").style.MozTransform = "scaleX(1.13)"
        }
    }
}, !1);
var emptyCh = {
    "title": "_FPZdesPusto_",
    "description": "",
    "stream_url": "",
    "logo_30x30": "",
    "playlist_url": ""
};
this.NN = 16;
BLOCKSIZE = 8;
SBOXES = [
    [3509652390, 2564797868, 805139163, 3491422135, 3101798381, 1780907670, 3128725573, 4046225305, 614570311, 3012652279, 134345442, 2240740374, 1667834072, 1901547113, 2757295779, 4103290238, 227898511, 1921955416, 1904987480, 2182433518, 2069144605, 3260701109, 2620446009, 720527379, 3318853667, 677414384, 3393288472, 3101374703, 2390351024, 1614419982, 1822297739, 2954791486, 3608508353, 3174124327, 2024746970, 1432378464, 3864339955, 2857741204, 1464375394, 1676153920, 1439316330, 715854006, 3033291828, 289532110, 2706671279, 2087905683, 3018724369, 1668267050, 732546397, 1947742710, 3462151702, 2609353502, 2950085171, 1814351708, 2050118529, 680887927, 999245976, 1800124847, 3300911131, 1713906067, 1641548236, 4213287313, 1216130144, 1575780402, 4018429277, 3917837745, 3693486850, 3949271944, 596196993, 3549867205, 258830323, 2213823033, 772490370, 2760122372, 1774776394, 2652871518, 566650946, 4142492826, 1728879713, 2882767088, 1783734482, 3629395816, 2517608232, 2874225571, 1861159788, 326777828, 3124490320, 2130389656, 2716951837, 967770486, 1724537150, 2185432712, 2364442137, 1164943284, 2105845187, 998989502, 3765401048, 2244026483, 1075463327, 1455516326, 1322494562, 910128902, 469688178, 1117454909, 936433444, 3490320968, 3675253459, 1240580251, 122909385, 2157517691, 634681816, 4142456567, 3825094682, 3061402683, 2540495037, 79693498, 3249098678, 1084186820, 1583128258, 426386531, 1761308591, 1047286709, 322548459, 995290223, 1845252383, 2603652396, 3431023940, 2942221577, 3202600964, 3727903485, 1712269319, 422464435, 3234572375, 1170764815, 3523960633, 3117677531, 1434042557, 442511882, 3600875718, 1076654713, 1738483198, 4213154764, 2393238008, 3677496056, 1014306527, 4251020053, 793779912, 2902807211, 842905082, 4246964064, 1395751752, 1040244610, 2656851899, 3396308128, 445077038, 3742853595, 3577915638, 679411651, 2892444358, 2354009459, 1767581616, 3150600392, 3791627101, 3102740896, 284835224, 4246832056, 1258075500, 768725851, 2589189241, 3069724005, 3532540348, 1274779536, 3789419226, 2764799539, 1660621633, 3471099624, 4011903706, 913787905, 3497959166, 737222580, 2514213453, 2928710040, 3937242737, 1804850592, 3499020752, 2949064160, 2386320175, 2390070455, 2415321851, 4061277028, 2290661394, 2416832540, 1336762016, 1754252060, 3520065937, 3014181293, 791618072, 3188594551, 3933548030, 2332172193, 3852520463, 3043980520, 413987798, 3465142937, 3030929376, 4245938359, 2093235073, 3534596313, 375366246, 2157278981, 2479649556, 555357303, 3870105701, 2008414854, 3344188149, 4221384143, 3956125452, 2067696032, 3594591187, 2921233993, 2428461, 544322398, 577241275, 1471733935, 610547355, 4027169054, 1432588573, 1507829418, 2025931657, 3646575487, 545086370, 48609733, 2200306550, 1653985193, 298326376, 1316178497, 3007786442, 2064951626, 458293330, 2589141269, 3591329599, 3164325604, 727753846, 2179363840, 146436021, 1461446943, 4069977195, 705550613, 3059967265, 3887724982, 4281599278, 3313849956, 1404054877, 2845806497, 146425753, 1854211946],
    [1266315497, 3048417604, 3681880366, 3289982499, 290971e4, 1235738493, 2632868024, 2414719590, 3970600049, 1771706367, 1449415276, 3266420449, 422970021, 1963543593, 2690192192, 3826793022, 1062508698, 1531092325, 1804592342, 2583117782, 2714934279, 4024971509, 1294809318, 4028980673, 1289560198, 2221992742, 1669523910, 35572830, 157838143, 1052438473, 1016535060, 1802137761, 1753167236, 1386275462, 3080475397, 2857371447, 1040679964, 2145300060, 2390574316, 1461121720, 2956646967, 4031777805, 4028374788, 33600511, 2920084762, 1018524850, 629373528, 3691585981, 3515945977, 2091462646, 2486323059, 586499841, 988145025, 935516892, 3367335476, 2599673255, 2839830854, 265290510, 3972581182, 2759138881, 3795373465, 1005194799, 847297441, 406762289, 1314163512, 1332590856, 1866599683, 4127851711, 750260880, 613907577, 1450815602, 3165620655, 3734664991, 3650291728, 3012275730, 3704569646, 1427272223, 778793252, 1343938022, 2676280711, 2052605720, 1946737175, 3164576444, 3914038668, 3967478842, 3682934266, 1661551462, 3294938066, 4011595847, 840292616, 3712170807, 616741398, 312560963, 711312465, 1351876610, 322626781, 1910503582, 271666773, 2175563734, 1594956187, 70604529, 3617834859, 1007753275, 1495573769, 4069517037, 2549218298, 2663038764, 504708206, 2263041392, 3941167025, 2249088522, 1514023603, 1998579484, 1312622330, 694541497, 2582060303, 2151582166, 1382467621, 776784248, 2618340202, 3323268794, 2497899128, 2784771155, 503983604, 4076293799, 907881277, 423175695, 432175456, 1378068232, 4145222326, 3954048622, 3938656102, 3820766613, 2793130115, 2977904593, 26017576, 3274890735, 3194772133, 1700274565, 1756076034, 4006520079, 3677328699, 720338349, 1533947780, 354530856, 688349552, 3973924725, 1637815568, 332179504, 3949051286, 53804574, 2852348879, 3044236432, 1282449977, 3583942155, 3416972820, 4006381244, 1617046695, 2628476075, 3002303598, 1686838959, 431878346, 2686675385, 1700445008, 1080580658, 1009431731, 832498133, 3223435511, 2605976345, 2271191193, 2516031870, 1648197032, 4164389018, 2548247927, 300782431, 375919233, 238389289, 3353747414, 2531188641, 2019080857, 1475708069, 455242339, 2609103871, 448939670, 3451063019, 1395535956, 2413381860, 1841049896, 1491858159, 885456874, 4264095073, 4001119347, 1565136089, 3898914787, 1108368660, 540939232, 1173283510, 2745871338, 3681308437, 4207628240, 3343053890, 4016749493, 1699691293, 1103962373, 3625875870, 2256883143, 3830138730, 1031889488, 3479347698, 1535977030, 4236805024, 3251091107, 2132092099, 1774941330, 1199868427, 1452454533, 157007616, 2904115357, 342012276, 595725824, 1480756522, 206960106, 497939518, 591360097, 863170706, 2375253569, 3596610801, 1814182875, 2094937945, 3421402208, 1082520231, 3463918190, 2785509508, 435703966, 3908032597, 1641649973, 2842273706, 3305899714, 1510255612, 2148256476, 2655287854, 3276092548, 4258621189, 236887753, 3681803219, 274041037, 1734335097, 3815195456, 3317970021, 1899903192, 1026095262, 4050517792, 356393447, 2410691914, 3873677099, 3682840055],
    [3913112168, 2491498743, 4132185628, 2489919796, 1091903735, 1979897079, 3170134830, 3567386728, 3557303409, 857797738, 1136121015, 1342202287, 507115054, 2535736646, 337727348, 3213592640, 1301675037, 2528481711, 1895095763, 1721773893, 3216771564, 62756741, 2142006736, 835421444, 2531993523, 1442658625, 3659876326, 2882144922, 676362277, 1392781812, 170690266, 3921047035, 1759253602, 3611846912, 1745797284, 664899054, 1329594018, 3901205900, 3045908486, 2062866102, 2865634940, 3543621612, 3464012697, 1080764994, 553557557, 3656615353, 3996768171, 991055499, 499776247, 1265440854, 648242737, 3940784050, 980351604, 3713745714, 1749149687, 3396870395, 4211799374, 3640570775, 1161844396, 3125318951, 1431517754, 545492359, 4268468663, 3499529547, 1437099964, 2702547544, 3433638243, 2581715763, 2787789398, 1060185593, 1593081372, 2418618748, 4260947970, 69676912, 2159744348, 86519011, 2512459080, 3838209314, 1220612927, 3339683548, 133810670, 1090789135, 1078426020, 1569222167, 845107691, 3583754449, 4072456591, 1091646820, 628848692, 1613405280, 3757631651, 526609435, 236106946, 48312990, 2942717905, 3402727701, 1797494240, 859738849, 992217954, 4005476642, 2243076622, 3870952857, 3732016268, 765654824, 3490871365, 2511836413, 1685915746, 3888969200, 1414112111, 2273134842, 3281911079, 4080962846, 172450625, 2569994100, 980381355, 4109958455, 2819808352, 2716589560, 2568741196, 3681446669, 3329971472, 1835478071, 660984891, 3704678404, 4045999559, 3422617507, 3040415634, 1762651403, 1719377915, 3470491036, 2693910283, 3642056355, 3138596744, 1364962596, 2073328063, 1983633131, 926494387, 3423689081, 2150032023, 4096667949, 1749200295, 3328846651, 309677260, 2016342300, 1779581495, 3079819751, 111262694, 1274766160, 443224088, 298511866, 1025883608, 3806446537, 1145181785, 168956806, 3641502830, 3584813610, 1689216846, 3666258015, 3200248200, 1692713982, 2646376535, 4042768518, 1618508792, 1610833997, 3523052358, 4130873264, 2001055236, 3610705100, 2202168115, 4028541809, 2961195399, 1006657119, 2006996926, 3186142756, 1430667929, 3210227297, 1314452623, 4074634658, 4101304120, 2273951170, 1399257539, 3367210612, 3027628629, 1190975929, 2062231137, 2333990788, 2221543033, 2438960610, 1181637006, 548689776, 2362791313, 3372408396, 3104550113, 3145860560, 296247880, 1970579870, 3078560182, 3769228297, 1714227617, 3291629107, 3898220290, 166772364, 1251581989, 493813264, 448347421, 195405023, 2709975567, 677966185, 3703036547, 1463355134, 2715995803, 1338867538, 1343315457, 2802222074, 2684532164, 233230375, 2599980071, 2000651841, 3277868038, 1638401717, 4028070440, 3237316320, 6314154, 819756386, 300326615, 590932579, 1405279636, 3267499572, 3150704214, 2428286686, 3959192993, 3461946742, 1862657033, 1266418056, 963775037, 2089974820, 2263052895, 1917689273, 448879540, 3550394620, 3981727096, 150775221, 3627908307, 1303187396, 508620638, 2975983352, 2726630617, 1817252668, 1876281319, 1457606340, 908771278, 3720792119, 3617206836, 2455994898, 1729034894, 1080033504],
    [976866871, 3556439503, 2881648439, 1522871579, 1555064734, 1336096578, 3548522304, 2579274686, 3574697629, 3205460757, 3593280638, 3338716283, 3079412587, 564236357, 2993598910, 1781952180, 1464380207, 3163844217, 3332601554, 1699332808, 1393555694, 1183702653, 3581086237, 1288719814, 691649499, 2847557200, 2895455976, 3193889540, 2717570544, 1781354906, 1676643554, 2592534050, 3230253752, 1126444790, 2770207658, 2633158820, 2210423226, 2615765581, 2414155088, 3127139286, 673620729, 2805611233, 1269405062, 4015350505, 3341807571, 4149409754, 1057255273, 2012875353, 2162469141, 2276492801, 2601117357, 993977747, 3918593370, 2654263191, 753973209, 36408145, 2530585658, 25011837, 3520020182, 2088578344, 530523599, 2918365339, 1524020338, 1518925132, 3760827505, 3759777254, 1202760957, 3985898139, 3906192525, 674977740, 4174734889, 2031300136, 2019492241, 3983892565, 4153806404, 3822280332, 352677332, 2297720250, 60907813, 90501309, 3286998549, 1016092578, 2535922412, 2839152426, 457141659, 509813237, 4120667899, 652014361, 1966332200, 2975202805, 55981186, 2327461051, 676427537, 3255491064, 2882294119, 3433927263, 1307055953, 942726286, 933058658, 2468411793, 3933900994, 4215176142, 1361170020, 2001714738, 2830558078, 3274259782, 1222529897, 1679025792, 2729314320, 3714953764, 1770335741, 151462246, 3013232138, 1682292957, 1483529935, 471910574, 1539241949, 458788160, 3436315007, 1807016891, 3718408830, 978976581, 1043663428, 3165965781, 1927990952, 4200891579, 2372276910, 3208408903, 3533431907, 1412390302, 2931980059, 4132332400, 1947078029, 3881505623, 4168226417, 2941484381, 1077988104, 1320477388, 886195818, 18198404, 3786409e3, 2509781533, 112762804, 3463356488, 1866414978, 891333506, 18488651, 661792760, 1628790961, 3885187036, 3141171499, 876946877, 2693282273, 1372485963, 791857591, 2686433993, 3759982718, 3167212022, 3472953795, 2716379847, 445679433, 3561995674, 3504004811, 3574258232, 54117162, 3331405415, 2381918588, 3769707343, 4154350007, 1140177722, 4074052095, 668550556, 3214352940, 367459370, 261225585, 2610173221, 4209349473, 3468074219, 3265815641, 314222801, 3066103646, 3808782860, 282218597, 3406013506, 3773591054, 379116347, 1285071038, 846784868, 2669647154, 3771962079, 3550491691, 2305946142, 453669953, 1268987020, 3317592352, 3279303384, 3744833421, 2610507566, 3859509063, 266596637, 3847019092, 517658769, 3462560207, 3443424879, 370717030, 4247526661, 2224018117, 4143653529, 4112773975, 2788324899, 2477274417, 1456262402, 2901442914, 1517677493, 1846949527, 2295493580, 3734397586, 2176403920, 1280348187, 1908823572, 3871786941, 846861322, 1172426758, 3287448474, 3383383037, 1655181056, 3139813346, 901632758, 1897031941, 2986607138, 3066810236, 3447102507, 1393639104, 373351379, 950779232, 625454576, 3124240540, 4148612726, 2007998917, 544563296, 2244738638, 2330496472, 2058025392, 1291430526, 424198748, 50039436, 29584100, 3605783033, 2429876329, 2791104160, 1057563949, 3255363231, 3075367218, 3463963227, 1469046755, 985887462]
];
PARRAY = [608135816, 2242054355, 320440878, 57701188, 2752067618, 698298832, 137296536, 3964562569, 1160258022, 953160567, 3193202383, 887688300, 3232508343, 3380367581, 1065670069, 3041331479, 2450970073, 2306472731];
_clean = function (e) {
    if (e < 0) {
        e = (2147483647 & e) + 2147483648
    }
    return e
}
_F = function (e) {
    var t, i, s, n, a;
    return n = 255 & e, e >>>= 8, s = 255 & e, e >>>= 8, i = 255 & e, e >>>= 8, t = 255 & e, a = this.sboxes[0][t] + this.sboxes[1][i], a ^= this.sboxes[2][s], a += this.sboxes[3][n]
}
_encryptBlock = function (e) {
    var t, i = e[0],
        s = e[1];
    for (t = 0; t < this.NN; ++t) {
        i ^= this.parray[t], s = this._F(i) ^ s;
        var n = i;
        i = s, s = n
    }
    i ^= this.parray[this.NN + 0], s ^= this.parray[this.NN + 1], e[0] = this._clean(s), e[1] = this._clean(i)
}
encryptBlock = function (e) {
    var t, i = [0, 0],
        s = this.BLOCKSIZE / 2;
    for (t = 0; t < this.BLOCKSIZE / 2; ++t) i[0] = i[0] << 8 | 255 & e[t + 0], i[1] = i[1] << 8 | 255 & e[t + s];
    this._encryptBlock(i);
    var n = [];
    for (t = 0; t < this.BLOCKSIZE / 2; ++t) n[t + 0] = 255 & i[0], n[t + s] = 255 & i[1], i[0] = i[0] >>> 8, i[1] = i[1] >>> 8;
    return n
}
this.BS = 8
this.K = e = [241, 2, 50, 183, 188, 92, 122, 232, 247, 150, 193, 51, 43, 39, 161, 140];
var t, i = 0;
for (this.parray = [], t = 0; t < this.NN + 2; ++t) {
    var s, n = 0;
    for (s = 0; s < 4; ++s) n = n << 8 | 255 & e[i], ++i >= e.length && (i = 0);
    this.parray[t] = this.PARRAY[t] ^ n
}
for (this.sboxes = [], t = 0; t < 4; ++t)
    for (this.sboxes[t] = [], i = 0; i < 256; ++i) this.sboxes[t][i] = this.SBOXES[t][i];
var a = [0, 0];
for (t = 0; t < this.NN + 2; t += 2) this._encryptBlock(a), this.parray[t + 0] = a[0], this.parray[t + 1] = a[1];
for (t = 0; t < 4; ++t)
    for (i = 0; i < 256; i += 2) this._encryptBlock(a), this.sboxes[t][i + 0] = a[0], this.sboxes[t][i + 1] = a[1]
this.K1 = [233, 4, 72, 97, 23, 1, 118, 204];
this.K2 = [210, 8, 144, 194, 46, 2, 237, 131];
getSign = function (t) {
    var e, i, s, a, r, n, o = [0, 0, 0, 0, 0, 0, 0, 0];
    e = t.length % this.BS == 0 ? t.length - this.BS : t.length - t.length % this.BS;
    for (var d = 0; d < e; d += this.BS) {
        for (s = t.slice(d, d + this.BS), i = [], a = 0; a < s.length; a++) i.push(s.charCodeAt(a) ^ o[a]);
        r = encryptBlock(i), o = [r[3], r[2], r[1], r[0], r[7], r[6], r[5], r[4]]
    }
    var u = t.slice(e);
    if (u.length === this.BS) n = this.K1;
    else
        for (n = this.K2, u += "", a = 0; a < this.BS - u.length; a++) u += "\0";
    var l = [];
    for (a = 0; a < this.BS; a++) l.push(u.charCodeAt(a) ^ o[a] ^ n[a]);
    var c = encryptBlock(l);
    c = [c[3], c[2], c[1], c[0], c[7], c[6], c[5], c[4]];
    var h = "";
    for (a = 0; a < c.length; a++) {
        var d = c[a].toString(16);
        1 === d.length && (d = "0" + d), h += d
    }
    return h
}
var CryptoJS = CryptoJS || function (e, t) {
    var n = {},
        i = n.lib = {},
        r = function () {},
        o = i.Base = {
            extend: function (e) {
                r.prototype = this;
                var t = new r;
                return e && t.mixIn(e), t.hasOwnProperty("init") || (t.init = function () {
                    t.$super.init.apply(this, arguments)
                }), t.init.prototype = t, t.$super = this, t
            },
            create: function () {
                var e = this.extend();
                return e.init.apply(e, arguments), e
            },
            init: function () {},
            mixIn: function (e) {
                for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                e.hasOwnProperty("toString") && (this.toString = e.toString)
            },
            clone: function () {
                return this.init.prototype.extend(this)
            }
        },
        s = i.WordArray = o.extend({
            init: function (e, n) {
                e = this.words = e || [], this.sigBytes = n != t ? n : 4 * e.length
            },
            toString: function (e) {
                return (e || l).stringify(this)
            },
            concat: function (e) {
                var t = this.words,
                    n = e.words,
                    i = this.sigBytes;
                if (e = e.sigBytes, this.clamp(), i % 4)
                    for (var r = 0; r < e; r++) t[i + r >>> 2] |= (n[r >>> 2] >>> 24 - r % 4 * 8 & 255) << 24 - (i + r) % 4 * 8;
                else if (65535 < n.length)
                    for (r = 0; r < e; r += 4) t[i + r >>> 2] = n[r >>> 2];
                else t.push.apply(t, n);
                return this.sigBytes += e, this
            },
            clamp: function () {
                var t = this.words,
                    n = this.sigBytes;
                t[n >>> 2] &= 4294967295 << 32 - n % 4 * 8, t.length = e.ceil(n / 4)
            },
            clone: function () {
                var e = o.clone.call(this);
                return e.words = this.words.slice(0), e
            },
            random: function (t) {
                for (var n = [], i = 0; i < t; i += 4) n.push(4294967296 * e.random() | 0);
                return new s.init(n, t)
            }
        }),
        a = n.enc = {},
        l = a.Hex = {
            stringify: function (e) {
                var t = e.words;
                e = e.sigBytes;
                for (var n = [], i = 0; i < e; i++) {
                    var r = t[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                    n.push((r >>> 4).toString(16)), n.push((15 & r).toString(16))
                }
                return n.join("")
            },
            parse: function (e) {
                for (var t = e.length, n = [], i = 0; i < t; i += 2) n[i >>> 3] |= parseInt(e.substr(i, 2), 16) << 24 - i % 8 * 4;
                return new s.init(n, t / 2)
            }
        },
        c = a.Latin1 = {
            stringify: function (e) {
                var t = e.words;
                e = e.sigBytes;
                for (var n = [], i = 0; i < e; i++) n.push(String.fromCharCode(t[i >>> 2] >>> 24 - i % 4 * 8 & 255));
                return n.join("")
            },
            parse: function (e) {
                for (var t = e.length, n = [], i = 0; i < t; i++) n[i >>> 2] |= (255 & e.charCodeAt(i)) << 24 - i % 4 * 8;
                return new s.init(n, t)
            }
        },
        u = a.Utf8 = {
            stringify: function (e) {
                try {
                    return decodeURIComponent(escape(c.stringify(e)))
                } catch (e) {
                    throw Error("Malformed UTF-8 data")
                }
            },
            parse: function (e) {
                return c.parse(unescape(encodeURIComponent(e)))
            }
        },
        d = i.BufferedBlockAlgorithm = o.extend({
            reset: function () {
                this._data = new s.init, this._nDataBytes = 0
            },
            _append: function (e) {
                "string" == typeof e && (e = u.parse(e)), this._data.concat(e), this._nDataBytes += e.sigBytes
            },
            _process: function (t) {
                var n = this._data,
                    i = n.words,
                    r = n.sigBytes,
                    o = this.blockSize,
                    a = r / (4 * o),
                    a = t ? e.ceil(a) : e.max((0 | a) - this._minBufferSize, 0);
                if (t = a * o, r = e.min(4 * t, r), t) {
                    for (var l = 0; l < t; l += o) this._doProcessBlock(i, l);
                    l = i.splice(0, t), n.sigBytes -= r
                }
                return new s.init(l, r)
            },
            clone: function () {
                var e = o.clone.call(this);
                return e._data = this._data.clone(), e
            },
            _minBufferSize: 0
        });
    i.Hasher = d.extend({
        cfg: o.extend(),
        init: function (e) {
            this.cfg = this.cfg.extend(e), this.reset()
        },
        reset: function () {
            d.reset.call(this), this._doReset()
        },
        update: function (e) {
            return this._append(e), this._process(), this
        },
        finalize: function (e) {
            return e && this._append(e), this._doFinalize()
        },
        blockSize: 16,
        _createHelper: function (e) {
            return function (t, n) {
                return new e.init(n).finalize(t)
            }
        },
        _createHmacHelper: function (e) {
            return function (t, n) {
                return new p.HMAC.init(e, n).finalize(t)
            }
        }
    });
    var p = n.algo = {};
    return n
}(Math);
! function () {
    var e = CryptoJS,
        t = e.lib.WordArray;
    e.enc.Base64 = {
        stringify: function (e) {
            var t = e.words,
                n = e.sigBytes,
                i = this._map;
            e.clamp(), e = [];
            for (var r = 0; r < n; r += 3)
                for (var o = (t[r >>> 2] >>> 24 - r % 4 * 8 & 255) << 16 | (t[r + 1 >>> 2] >>> 24 - (r + 1) % 4 * 8 & 255) << 8 | t[r + 2 >>> 2] >>> 24 - (r + 2) % 4 * 8 & 255, s = 0; 4 > s && r + .75 * s < n; s++) e.push(i.charAt(o >>> 6 * (3 - s) & 63));
            if (t = i.charAt(64))
                for (; e.length % 4;) e.push(t);
            return e.join("")
        },
        parse: function (e) {
            var n = e.length,
                i = this._map,
                r = i.charAt(64);
            r && -1 != (r = e.indexOf(r)) && (n = r);
            for (var r = [], o = 0, s = 0; s < n; s++)
                if (s % 4) {
                    var a = i.indexOf(e.charAt(s - 1)) << s % 4 * 2,
                        l = i.indexOf(e.charAt(s)) >>> 6 - s % 4 * 2;
                    r[o >>> 2] |= (a | l) << 24 - o % 4 * 8, o++
                } return t.create(r, o)
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    }
}(),
function (e) {
    function t(e, t, n, i, r, o, s) {
        return ((e = e + (t & n | ~t & i) + r + s) << o | e >>> 32 - o) + t
    }

    function n(e, t, n, i, r, o, s) {
        return ((e = e + (t & i | n & ~i) + r + s) << o | e >>> 32 - o) + t
    }

    function i(e, t, n, i, r, o, s) {
        return ((e = e + (t ^ n ^ i) + r + s) << o | e >>> 32 - o) + t
    }

    function r(e, t, n, i, r, o, s) {
        return ((e = e + (n ^ (t | ~i)) + r + s) << o | e >>> 32 - o) + t
    }
    for (var o = CryptoJS, s = o.lib, a = s.WordArray, l = s.Hasher, s = o.algo, c = [], u = 0; 64 > u; u++) c[u] = 4294967296 * e.abs(e.sin(u + 1)) | 0;
    s = s.MD5 = l.extend({
        _doReset: function () {
            this._hash = new a.init([1732584193, 4023233417, 2562383102, 271733878])
        },
        _doProcessBlock: function (e, o) {
            for (var s = 0; 16 > s; s++) {
                var a = o + s,
                    l = e[a];
                e[a] = 16711935 & (l << 8 | l >>> 24) | 4278255360 & (l << 24 | l >>> 8)
            }
            var s = this._hash.words,
                a = e[o + 0],
                l = e[o + 1],
                u = e[o + 2],
                d = e[o + 3],
                p = e[o + 4],
                f = e[o + 5],
                h = e[o + 6],
                g = e[o + 7],
                m = e[o + 8],
                v = e[o + 9],
                y = e[o + 10],
                b = e[o + 11],
                _ = e[o + 12],
                x = e[o + 13],
                w = e[o + 14],
                k = e[o + 15],
                C = s[0],
                S = s[1],
                T = s[2],
                E = s[3],
                C = t(C, S, T, E, a, 7, c[0]),
                E = t(E, C, S, T, l, 12, c[1]),
                T = t(T, E, C, S, u, 17, c[2]),
                S = t(S, T, E, C, d, 22, c[3]),
                C = t(C, S, T, E, p, 7, c[4]),
                E = t(E, C, S, T, f, 12, c[5]),
                T = t(T, E, C, S, h, 17, c[6]),
                S = t(S, T, E, C, g, 22, c[7]),
                C = t(C, S, T, E, m, 7, c[8]),
                E = t(E, C, S, T, v, 12, c[9]),
                T = t(T, E, C, S, y, 17, c[10]),
                S = t(S, T, E, C, b, 22, c[11]),
                C = t(C, S, T, E, _, 7, c[12]),
                E = t(E, C, S, T, x, 12, c[13]),
                T = t(T, E, C, S, w, 17, c[14]),
                S = t(S, T, E, C, k, 22, c[15]),
                C = n(C, S, T, E, l, 5, c[16]),
                E = n(E, C, S, T, h, 9, c[17]),
                T = n(T, E, C, S, b, 14, c[18]),
                S = n(S, T, E, C, a, 20, c[19]),
                C = n(C, S, T, E, f, 5, c[20]),
                E = n(E, C, S, T, y, 9, c[21]),
                T = n(T, E, C, S, k, 14, c[22]),
                S = n(S, T, E, C, p, 20, c[23]),
                C = n(C, S, T, E, v, 5, c[24]),
                E = n(E, C, S, T, w, 9, c[25]),
                T = n(T, E, C, S, d, 14, c[26]),
                S = n(S, T, E, C, m, 20, c[27]),
                C = n(C, S, T, E, x, 5, c[28]),
                E = n(E, C, S, T, u, 9, c[29]),
                T = n(T, E, C, S, g, 14, c[30]),
                S = n(S, T, E, C, _, 20, c[31]),
                C = i(C, S, T, E, f, 4, c[32]),
                E = i(E, C, S, T, m, 11, c[33]),
                T = i(T, E, C, S, b, 16, c[34]),
                S = i(S, T, E, C, w, 23, c[35]),
                C = i(C, S, T, E, l, 4, c[36]),
                E = i(E, C, S, T, p, 11, c[37]),
                T = i(T, E, C, S, g, 16, c[38]),
                S = i(S, T, E, C, y, 23, c[39]),
                C = i(C, S, T, E, x, 4, c[40]),
                E = i(E, C, S, T, a, 11, c[41]),
                T = i(T, E, C, S, d, 16, c[42]),
                S = i(S, T, E, C, h, 23, c[43]),
                C = i(C, S, T, E, v, 4, c[44]),
                E = i(E, C, S, T, _, 11, c[45]),
                T = i(T, E, C, S, k, 16, c[46]),
                S = i(S, T, E, C, u, 23, c[47]),
                C = r(C, S, T, E, a, 6, c[48]),
                E = r(E, C, S, T, g, 10, c[49]),
                T = r(T, E, C, S, w, 15, c[50]),
                S = r(S, T, E, C, f, 21, c[51]),
                C = r(C, S, T, E, _, 6, c[52]),
                E = r(E, C, S, T, d, 10, c[53]),
                T = r(T, E, C, S, y, 15, c[54]),
                S = r(S, T, E, C, l, 21, c[55]),
                C = r(C, S, T, E, m, 6, c[56]),
                E = r(E, C, S, T, k, 10, c[57]),
                T = r(T, E, C, S, h, 15, c[58]),
                S = r(S, T, E, C, x, 21, c[59]),
                C = r(C, S, T, E, p, 6, c[60]),
                E = r(E, C, S, T, b, 10, c[61]),
                T = r(T, E, C, S, u, 15, c[62]),
                S = r(S, T, E, C, v, 21, c[63]);
            s[0] = s[0] + C | 0, s[1] = s[1] + S | 0, s[2] = s[2] + T | 0, s[3] = s[3] + E | 0
        },
        _doFinalize: function () {
            var t = this._data,
                n = t.words,
                i = 8 * this._nDataBytes,
                r = 8 * t.sigBytes;
            n[r >>> 5] |= 128 << 24 - r % 32;
            var o = e.floor(i / 4294967296);
            for (n[15 + (r + 64 >>> 9 << 4)] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8), n[14 + (r + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), t.sigBytes = 4 * (n.length + 1), this._process(), t = this._hash, n = t.words, i = 0; 4 > i; i++) r = n[i], n[i] = 16711935 & (r << 8 | r >>> 24) | 4278255360 & (r << 24 | r >>> 8);
            return t
        },
        clone: function () {
            var e = l.clone.call(this);
            return e._hash = this._hash.clone(), e
        }
    }), o.MD5 = l._createHelper(s), o.HmacMD5 = l._createHmacHelper(s)
}(Math),
function () {
    var e = CryptoJS,
        t = e.lib,
        n = t.Base,
        i = t.WordArray,
        t = e.algo,
        r = t.EvpKDF = n.extend({
            cfg: n.extend({
                keySize: 4,
                hasher: t.MD5,
                iterations: 1
            }),
            init: function (e) {
                this.cfg = this.cfg.extend(e)
            },
            compute: function (e, t) {
                for (var n = this.cfg, r = n.hasher.create(), o = i.create(), s = o.words, a = n.keySize, n = n.iterations; s.length < a;) {
                    l && r.update(l);
                    var l = r.update(e).finalize(t);
                    r.reset();
                    for (var c = 1; c < n; c++) l = r.finalize(l), r.reset();
                    o.concat(l)
                }
                return o.sigBytes = 4 * a, o
            }
        });
    e.EvpKDF = function (e, t, n) {
        return r.create(n).compute(e, t)
    }
}(), CryptoJS.lib.Cipher || function (e) {
        var t = CryptoJS,
            n = t.lib,
            i = n.Base,
            r = n.WordArray,
            o = n.BufferedBlockAlgorithm,
            s = t.enc.Base64,
            a = t.algo.EvpKDF,
            l = n.Cipher = o.extend({
                cfg: i.extend(),
                createEncryptor: function (e, t) {
                    return this.create(this._ENC_XFORM_MODE, e, t)
                },
                createDecryptor: function (e, t) {
                    return this.create(this._DEC_XFORM_MODE, e, t)
                },
                init: function (e, t, n) {
                    this.cfg = this.cfg.extend(n), this._xformMode = e, this._key = t, this.reset()
                },
                reset: function () {
                    o.reset.call(this), this._doReset()
                },
                process: function (e) {
                    return this._append(e), this._process()
                },
                finalize: function (e) {
                    return e && this._append(e), this._doFinalize()
                },
                keySize: 4,
                ivSize: 4,
                _ENC_XFORM_MODE: 1,
                _DEC_XFORM_MODE: 2,
                _createHelper: function (e) {
                    return {
                        encrypt: function (t, n, i) {
                            return ("string" == typeof n ? h : f).encrypt(e, t, n, i)
                        },
                        decrypt: function (t, n, i) {
                            return ("string" == typeof n ? h : f).decrypt(e, t, n, i)
                        }
                    }
                }
            });
        n.StreamCipher = l.extend({
            _doFinalize: function () {
                return this._process(!0)
            },
            blockSize: 1
        });
        var c = t.mode = {},
            u = function (t, n, i) {
                var r = this._iv;
                r ? this._iv = e : r = this._prevBlock;
                for (var o = 0; o < i; o++) t[n + o] ^= r[o]
            },
            d = (n.BlockCipherMode = i.extend({
                createEncryptor: function (e, t) {
                    return this.Encryptor.create(e, t)
                },
                createDecryptor: function (e, t) {
                    return this.Decryptor.create(e, t)
                },
                init: function (e, t) {
                    this._cipher = e, this._iv = t
                }
            })).extend();
        d.Encryptor = d.extend({
            processBlock: function (e, t) {
                var n = this._cipher,
                    i = n.blockSize;
                u.call(this, e, t, i), n.encryptBlock(e, t), this._prevBlock = e.slice(t, t + i)
            }
        }), d.Decryptor = d.extend({
            processBlock: function (e, t) {
                var n = this._cipher,
                    i = n.blockSize,
                    r = e.slice(t, t + i);
                n.decryptBlock(e, t), u.call(this, e, t, i), this._prevBlock = r
            }
        }), c = c.CBC = d, d = (t.pad = {}).Pkcs7 = {
            pad: function (e, t) {
                for (var n = 4 * t, n = n - e.sigBytes % n, i = n << 24 | n << 16 | n << 8 | n, o = [], s = 0; s < n; s += 4) o.push(i);
                n = r.create(o, n), e.concat(n)
            },
            unpad: function (e) {
                e.sigBytes -= 255 & e.words[e.sigBytes - 1 >>> 2]
            }
        }, n.BlockCipher = l.extend({
            cfg: l.cfg.extend({
                mode: c,
                padding: d
            }),
            reset: function () {
                l.reset.call(this);
                var e = this.cfg,
                    t = e.iv,
                    e = e.mode;
                if (this._xformMode == this._ENC_XFORM_MODE) var n = e.createEncryptor;
                else n = e.createDecryptor, this._minBufferSize = 1;
                this._mode = n.call(e, this, t && t.words)
            },
            _doProcessBlock: function (e, t) {
                this._mode.processBlock(e, t)
            },
            _doFinalize: function () {
                var e = this.cfg.padding;
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    e.pad(this._data, this.blockSize);
                    var t = this._process(!0)
                } else t = this._process(!0), e.unpad(t);
                return t
            },
            blockSize: 4
        });
        var p = n.CipherParams = i.extend({
                init: function (e) {
                    this.mixIn(e)
                },
                toString: function (e) {
                    return (e || this.formatter).stringify(this)
                }
            }),
            c = (t.format = {}).OpenSSL = {
                stringify: function (e) {
                    var t = e.ciphertext;
                    return e = e.salt, (e ? r.create([1398893684, 1701076831]).concat(e).concat(t) : t).toString(s)
                },
                parse: function (e) {
                    e = s.parse(e);
                    var t = e.words;
                    if (1398893684 == t[0] && 1701076831 == t[1]) {
                        var n = r.create(t.slice(2, 4));
                        t.splice(0, 4), e.sigBytes -= 16
                    }
                    return p.create({
                        ciphertext: e,
                        salt: n
                    })
                }
            },
            f = n.SerializableCipher = i.extend({
                cfg: i.extend({
                    format: c
                }),
                encrypt: function (e, t, n, i) {
                    i = this.cfg.extend(i);
                    var r = e.createEncryptor(n, i);
                    return t = r.finalize(t), r = r.cfg, p.create({
                        ciphertext: t,
                        key: n,
                        iv: r.iv,
                        algorithm: e,
                        mode: r.mode,
                        padding: r.padding,
                        blockSize: e.blockSize,
                        formatter: i.format
                    })
                },
                decrypt: function (e, t, n, i) {
                    return i = this.cfg.extend(i), t = this._parse(t, i.format), e.createDecryptor(n, i).finalize(t.ciphertext)
                },
                _parse: function (e, t) {
                    return "string" == typeof e ? t.parse(e, this) : e
                }
            }),
            t = (t.kdf = {}).OpenSSL = {
                execute: function (e, t, n, i) {
                    return i || (i = r.random(8)), e = a.create({
                        keySize: t + n
                    }).compute(e, i), n = r.create(e.words.slice(t), 4 * n), e.sigBytes = 4 * t, p.create({
                        key: e,
                        iv: n,
                        salt: i
                    })
                }
            },
            h = n.PasswordBasedCipher = f.extend({
                cfg: f.cfg.extend({
                    kdf: t
                }),
                encrypt: function (e, t, n, i) {
                    return i = this.cfg.extend(i), n = i.kdf.execute(n, e.keySize, e.ivSize), i.iv = n.iv, e = f.encrypt.call(this, e, t, n.key, i), e.mixIn(n), e
                },
                decrypt: function (e, t, n, i) {
                    return i = this.cfg.extend(i), t = this._parse(t, i.format), n = i.kdf.execute(n, e.keySize, e.ivSize, t.salt), i.iv = n.iv, f.decrypt.call(this, e, t, n.key, i)
                }
            })
    }(),
    function () {
        for (var e = CryptoJS, t = e.lib.BlockCipher, n = e.algo, i = [], r = [], o = [], s = [], a = [], l = [], c = [], u = [], d = [], p = [], f = [], h = 0; 256 > h; h++) f[h] = 128 > h ? h << 1 : h << 1 ^ 283;
        for (var g = 0, m = 0, h = 0; 256 > h; h++) {
            var v = m ^ m << 1 ^ m << 2 ^ m << 3 ^ m << 4,
                v = v >>> 8 ^ 255 & v ^ 99;
            i[g] = v, r[v] = g;
            var y = f[g],
                b = f[y],
                _ = f[b],
                x = 257 * f[v] ^ 16843008 * v;
            o[g] = x << 24 | x >>> 8, s[g] = x << 16 | x >>> 16, a[g] = x << 8 | x >>> 24, l[g] = x, x = 16843009 * _ ^ 65537 * b ^ 257 * y ^ 16843008 * g, c[v] = x << 24 | x >>> 8, u[v] = x << 16 | x >>> 16, d[v] = x << 8 | x >>> 24, p[v] = x, g ? (g = y ^ f[f[f[_ ^ y]]], m ^= f[f[m]]) : g = m = 1
        }
        var w = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
            n = n.AES = t.extend({
                _doReset: function () {
                    for (var e = this._key, t = e.words, n = e.sigBytes / 4, e = 4 * ((this._nRounds = n + 6) + 1), r = this._keySchedule = [], o = 0; o < e; o++)
                        if (o < n) r[o] = t[o];
                        else {
                            var s = r[o - 1];
                            o % n ? 6 < n && 4 == o % n && (s = i[s >>> 24] << 24 | i[s >>> 16 & 255] << 16 | i[s >>> 8 & 255] << 8 | i[255 & s]) : (s = s << 8 | s >>> 24, s = i[s >>> 24] << 24 | i[s >>> 16 & 255] << 16 | i[s >>> 8 & 255] << 8 | i[255 & s], s ^= w[o / n | 0] << 24), r[o] = r[o - n] ^ s
                        } for (t = this._invKeySchedule = [], n = 0; n < e; n++) o = e - n, s = n % 4 ? r[o] : r[o - 4], t[n] = 4 > n || 4 >= o ? s : c[i[s >>> 24]] ^ u[i[s >>> 16 & 255]] ^ d[i[s >>> 8 & 255]] ^ p[i[255 & s]]
                },
                encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._keySchedule, o, s, a, l, i)
                },
                decryptBlock: function (e, t) {
                    var n = e[t + 1];
                    e[t + 1] = e[t + 3], e[t + 3] = n, this._doCryptBlock(e, t, this._invKeySchedule, c, u, d, p, r), n = e[t + 1], e[t + 1] = e[t + 3], e[t + 3] = n
                },
                _doCryptBlock: function (e, t, n, i, r, o, s, a) {
                    for (var l = this._nRounds, c = e[t] ^ n[0], u = e[t + 1] ^ n[1], d = e[t + 2] ^ n[2], p = e[t + 3] ^ n[3], f = 4, h = 1; h < l; h++) var g = i[c >>> 24] ^ r[u >>> 16 & 255] ^ o[d >>> 8 & 255] ^ s[255 & p] ^ n[f++],
                        m = i[u >>> 24] ^ r[d >>> 16 & 255] ^ o[p >>> 8 & 255] ^ s[255 & c] ^ n[f++],
                        v = i[d >>> 24] ^ r[p >>> 16 & 255] ^ o[c >>> 8 & 255] ^ s[255 & u] ^ n[f++],
                        p = i[p >>> 24] ^ r[c >>> 16 & 255] ^ o[u >>> 8 & 255] ^ s[255 & d] ^ n[f++],
                        c = g,
                        u = m,
                        d = v;
                    g = (a[c >>> 24] << 24 | a[u >>> 16 & 255] << 16 | a[d >>> 8 & 255] << 8 | a[255 & p]) ^ n[f++], m = (a[u >>> 24] << 24 | a[d >>> 16 & 255] << 16 | a[p >>> 8 & 255] << 8 | a[255 & c]) ^ n[f++], v = (a[d >>> 24] << 24 | a[p >>> 16 & 255] << 16 | a[c >>> 8 & 255] << 8 | a[255 & u]) ^ n[f++], p = (a[p >>> 24] << 24 | a[c >>> 16 & 255] << 16 | a[u >>> 8 & 255] << 8 | a[255 & d]) ^ n[f++], e[t] = g, e[t + 1] = m, e[t + 2] = v, e[t + 3] = p
                },
                keySize: 8
            });
        e.AES = t._createHelper(n)
    }();

function mainProxyParse(parse, sel, mini, request_id) {
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
    statusbar(parse.split("|")[0], "link");
    if (ttmac) kjtYpr.popUp("Get remote " + u, 1500);
    var u = prxremote + "?do=xhrremote2&vp=" + timestamp + "&time=9600&direct&proxy=1&v=send&u=" + encodeURIComponent("/parserlink?" + encodeURIComponent(parse));
    xhr = null;
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(25);
            if (xhr.status == 200) {
                mwtn = 0;
                rpxtimer = setTimeout("rpx('" + u.replace("=send", "=wget").replace(encodeURIComponent("=send"), encodeURIComponent("=wget")).replace(/'/g, "\\'") + "'," + sel + "," + request_id + ")", 4000)
            } else {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                xhr = null;
                lI1lI00l1gX0l0l0OYpr(!0);
                kjtYpr.popUp("Истекло время ожидания ответа! Проверьте включен ли RemoteFork на ПК в одной локальной сети с ForkPlayer или попробуйте позже!", 2500)
            }
        }
    };
    xhr.open('GET', u, !0);
    xhr.send()
}
var rpxtimer;

function rpx(u, sel, request_id) {
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200 && xhr.responseText != "wait") {
                s = xhr.responseText;
                return mainParseStr(null, l0O1l101l1t_Y0lll1Ypr, null, s, request_id)
            }
            mwtn++;
            if (mwtn < 7) rpxtimer = setTimeout("rpx('" + u.replace(/'/g, "\\'") + "'," + sel + "," + request_id + ")", 4000);
            else {
                xhr = null;
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                lI1lI00l1gX0l0l0OYpr(!0);
                kjtYpr.popUp("Истекло время ожидания ответа! Проверьте включен ли RemoteFork на ПК в одной локальной сети с ForkPlayer или попробуйте позже!", 2500)
            }
        }
    };
    xhr.open('GET', u, !0);
    xhr.send()
}
var xhrParse, abortedParse = !1,
    assyncTimer = null,
    selfpages = {};

function mainPars(ch, mode, mini, prs, request_id) {
    if (prs == null) POST_S = "";
    if (xhrParse != null) {
        abortedParse = !0;
        xhrParse.abort()
    } else {}
    ch.stream_url_orig = "" + ch.stream_url;
    ch.playlist_url_orig = "" + ch.playlist_url;
    ch.parser_orig = "" + ch.parser;
    if (ch.mb_parser != "") {
        mb = 1;
        mp = "mb_parser"
    } else {
        mb = 0;
        mp = "parser"
    }
    var pars = ch[mp].split("|");
    parse_url = pars[0];
    if (parse_url == "") {
        kjtYpr.inf("_FPPustayaSsilka_", 1500, "yellow");
        return
    }
    var parse1 = (typeof pars[1] == 'undefined') ? "" : pars[1];
    var parse2 = (typeof pars[2] == 'undefined') ? "" : pars[2];
    if (parse1 == "selfReNewBookmark") {
        if (typeof selfpages[pars[0]] != "undefined" && selfpages[pars[0]] != null) {
            statusbar("from cache " + pars[0], "link");
            lll0I0ll0O01Ypr(selfpages[pars[0]], pars[0], "selfReNewBookmark", parse2, mini, null, request_id);
            return
        }
        statusbar(pars[0], "link")
    }
    if (is_parse_self(parse_url, kjtYpr.l1IlIl01l0tUIl1IIYpr) || parse_url.indexOf("//obovse.ru") > 0 || parse1 == "selfReNewBookmark") {
        parse_url = addident(parse_url);
        if ((app_cors || (kjtYpr.GL.remote >= 2 && kjtYpr.GL.remoteactive))) {
            var type = "";
            if (app_cors) {
                if (kjtYpr.series == "D" || kjtYpr.series == "C") type = "sams_d";
                else type = uaJ
            } else if (kjtYpr.GL.remoteip.indexOf(":8027") > 0) type = "curl_windows";
            else if (kjtYpr.GL.remoteip.indexOf(":8028") > 0) type = "curl_androind";
            parse_url += "&cors=" + type
        }
        parse_url = parse_url.replace("//obovse.ru", "//" + ServerFromList)
    }
    if (!app_cors && kjtYpr.GL.remote == 2 && !kjtYpr.GL.remoteactive) {
        l0I1l0lO0lsnG1I1QlYpr()
    }
    if (is_parse_self(parse_url, kjtYpr.l1IlIl01l0tUIl1IIYpr) || app_cors || ch[mp].indexOf("/treeview?") > 0 || ch[mp].indexOf("obovse.ru/alexkdpulg.php") > 0 || ch[mp].indexOf("obovse.ru/smarttv/") > 0 || ch.local == "2") {
        if (platform == "android-device") {
            if (parse_url.indexOf("http") == 0) var parse_url = 'curl "' + parse_url + '" -H "Pragma: no-cache" -H "DNT: 1" -H "Accept-Encoding: deflate" -H "Accept-Language: ru,en;q=0.8,uk;q=0.6,bg;q=0.4" -H "User-Agent: ' + ua_chrome + '" -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" -H "Cache-Control: no-cache" -H "Connection: keep-alive"';
            var s = andr.cmd(parse_url);
            return mainParseStr(ch, mode, mini, s, request_id)
        }
    } else if (kjtYpr.GL.remote > 0 && (kjtYpr.GL.remoteactive || kjtYpr.GL.proxy == 1)) {
        if (kjtYpr.GL.proxy == 1) {
            return mainProxyParse(ch[mp], select, mini, request_id)
        }
        parse_url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(parse_url)
    } else if (ch.local == "directly" || gV(kjtYpr.global, "all_local") == "directly") {
        if (platform == "android-device") {
            if (parse_url.indexOf("http") == 0) var parse_url = 'curl "' + parse_url + '" -H "Pragma: no-cache" -H "DNT: 1" -H "Accept-Encoding: deflate" -H "Accept-Language: ru,en;q=0.8,uk;q=0.6,bg;q=0.4" -H "User-Agent: ' + ua_chrome + '" -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" -H "Cache-Control: no-cache" -H "Connection: keep-alive"';
            var s = andr.cmd(parse_url);
            return mainParseStr(ch, mode, mini, s, request_id)
        }
    } else if (ch.local == "1") {
        // serv = ["195.88.208.101", "46.36.218.194", "217.79.190.156"];
        serv = ["player.local"];
        parse_url = "http://" + serv[rand(0, 2)] + "/xhr.php?u=" + encodeURIComponent(parse_url)
    } else if (mini) return;
    else if (ch.local == "dns") {
        statusbar(parse_url, "dns");
        try {
            xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.responseText.indexOf("parse1") > 0) {
                        xhr = null;
                        llI0llO11rsNIl0lOYpr(!0);
                        if (!1) {
                            try {
                                parse1 = parse1.replace('"', 'quo2te');
                                parse2 = parse2.replace('"', 'quo2te')
                            } catch (e) {}
                            var st = "<iframe style='display:none;position:absolute;' width='0px' height='0px' id='ifr' src='javascript:d=document;d.clear();d.open();d.write(&quot;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=Refresh content=\\\"0; URL=" + parse_url + "#" + escape(parse1) + "|" + escape(parse2) + "|" + escape(homeurl) + "\\\"&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;);d.close();'></iframe>";
                            lO10OIOlxzlO100OIYpr("infoList", st)
                        } else lO10OIOlxzlO100OIYpr("infoList", "<iframe style='display:none;position:absolute;' width='0px' height='0px' id='ifr' src='" + parse_url + "#" + escape(parse1) + "|" + escape(parse2) + "|" + escape(homeurl) + "'></iframe>")
                    } else {
                        kjtYpr.inf("_FPOshibka_ _FPopredDns_! _FPNeobhodimRemoteFork_", 2000, 'orange');
                        ll0111l1wxUIOlO1lYpr(2);
                        return
                    }
                }
            };
            if (ch.parser.indexOf("filmodom.net") > 0) xhr.open('GET', "http://adbetnet.advertserve.com/js/libcode3.js", !0);
            else xhr.open('GET', "http://counter.marketgid.com/1.js", !0);
            xhr.send()
        } catch (e) {
            kjtYpr.inf("_FPOshibka_ _FPopredDns_! _FPNeobhodimRemoteFork_", 2000, 'orange');
            ll0111l1wxUIOlO1lYpr(2);
            return
        }
        return
    } else if (uaJ == "android") return ll0111l1wxUIOlO1lYpr(2);
    else {
        ll0111l1wxUIOlO1lYpr(53, "_FPNeobhodimRemoteFork_");
        if (kjtYpr.GL.remote > 0) l0I1l0lO0lsnG1I1QlYpr();
        return
    }
    if (mini == null) {
        statusbar(parse_url, "link");
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1)
    }
    abortedParse = !1;
    xhrParse = new XMLHttpRequest();
    xhrParse.onreadystatechange = function () {
        try {
            if (xhrParse.readyState == 4) {
                clearTimeout(assyncTimer);
                if (!abortedParse || mb) {
                    var s = "";
                    if (platform == "android-device") {
                        if (xhrParse.status != 200) {
                            var lc = 'curl -L "' + parse_url + '" -H "Referer: ' + parse_url + '" -H "Pragma: no-cache" -H "DNT: 1" -H "Accept-Encoding: deflate" -H "Accept-Language: ru,en;q=0.8,uk;q=0.6,bg;q=0.4" -H "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36" -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" -H "Cache-Control: no-cache" -H "Connection: keep-alive"';
                            s = andr.cmd(lc)
                        }
                    }
                    if (s == "") s = xhrParse.responseText;
                    mainParseStr(ch, mode, mini, s, request_id)
                }
                xhrParse = null
            }
        } catch (e) {
            clearTimeout(assyncTimer);
            if (!abortedParse || mb) {
                mainParseStr(ch, mode, mini, e.message, request_id)
            }
        }
    };
    try {
        if (parse_url.indexOf("curl") == 0) {
            if (ttmac) kjtYpr.popUp("direct parse curl", 1000);
            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) {
                xhrParse.open("GET", "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(parse_url), !0);
                xhrParse.send(null)
            } else if (platform == "android-device") {
                var s = andr.cmd(parse_url);
                return mainParseStr(ch, mode, mini, s, request_id)
            } else if (app_cors || kjtYpr.channels[sel].local == "2") {
                var curl = parseCURL(parse_url);
                if (curl.method == "POST") {
                    try {
                        var stt = "";
                        xhrParse.open('POST', curl.url, !0);
                        for (var p in curl.header)
                            if (p != "Content-Type" && p != "Accept-Encoding") {
                                stt += "SET " + p + "=" + curl.header[p] + "<br>";
                                xhrParse.setRequestHeader(p, curl.header[p])
                            }
                        xhrParse.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                        xhrParse.setRequestHeader("Connection", "close");
                        if (kjtYpr.series == "D" || kjtYpr.series == "C") xhrParse.setRequestHeader("Accept-Encoding", "deflate");
                        xhrParse.send(curl.body);
                        if (ttmac) kjtYpr.popUp(stt, 3500)
                    } catch (e) {
                        kjtYpr.popUp(e.message, 2500)
                    }
                } else {
                    xhrParse.open("GET", curl.url, !0);
                    for (var p in curl.header) xhrParse.setRequestHeader(p, curl.header[p]);
                    if (kjtYpr.series == "D" || kjtYpr.series == "C") xhrParse.setRequestHeader("Accept-Encoding", "deflate");
                    xhrParse.send();
                }
            }
        } else {
            if (uaJ == "mag" && prs == null && ch.local != "2" && ch.local != "1") {
                if (ttmac) kjtYpr.popUp("parse mag iframe<br>" + parse_url, 1000);
                var st = "<iframe style='display:block;background-color:black;position:absolute;top:0px;left:0px;border:none;margin:0px;padding:0px;' width='1px' height='1px' " + "src='javascript:d=document;d.clear();d.open();" + "d.write(&quot;&lt;html&gt;&lt;head&gt;   &lt;/head&gt;&lt;body style=\\\"width:1px;height:1px;overflow:hidden;margin:0px;padding:0px;\\\"&gt;" + "&lt;script&gt;" + "var xhr2=new XMLHttpRequest();" + "var fs2;" + "xhr2.onreadystatechange = function() {" + "if(xhr2.readyState == 4){" + "var s=xhr2.responseText;" + "try{" + "if(s.indexOf(\\\"parse\\\")>0) {" + "var data=window.top.l1l0IOIl_puQl1I1IYpr(s);	" + "window.top.statusbar(data[\\\"parse\\\"],\\\"fulllink\\\");" + "}" + "}catch(e){}" + "" + "window.top.mainParseStr(null, null," + mini + ", s," + request_id + ");" + "}" + "};" + "" + "xhr2.open(\\\"GET\\\", \\\"" + parse_url + "\\\", true);xhr2.send(null);" + "&lt;/script&gt;" + "&lt;/body&gt;&lt;/html&gt;&quot;);d.close();'>";
                lO10OIOlxzlO100OIYpr("infoList", $_("infoList").innerHTML + st);
                return
            }
            if (prs != null) {
                xhrParse.open('POST', parse_url + "&rparse=" + encodeURIComponent(prs), !0);
                xhrParse.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                xhrParse.send("remoteparse=" + encodeURIComponent(POST_S))
            } else {
                xhrParse.open("GET", parse_url, !0);
                try {
                    xhrParse.setRequestHeader("Referer", parse_url)
                } catch (e) {
                    if (ttmac) kjtYpr.popUp(e.message, 1500)
                };
                try {
                    if (kjtYpr.series == "D" || kjtYpr.series == "C") xhrParse.setRequestHeader("Accept-Encoding", "deflate");
                    xhrParse.setRequestHeader("User-Agent", ua_chrome)
                } catch (e) {}
                xhrParse.send(null)
            }
        }
    } catch (e) {
        clearTimeout(assyncTimer);
        if (!abortedParse || mb) {
            mainParseStr(ch, mode, mini, e.message, request_id)
        }
    }
    if (mb) ti = 6000;
    else ti = 30000;
    assyncTimer = setTimeout(function () {
        abortedParse = 1;
        xhrParse.abort()
    }, ti)
}

function mainParseStr(ch, mode, mini, s, request_id) {
    if (request_id != kjtYpr.REQUEST_ID) {
        return
    }
    if (mini && handler != "menu") return;
    if (ch == null) ch = ChSel;
    if (ch.mb_parser != "") {
        mb = 1;
        mp = "mb_parser"
    } else {
        mb = 0;
        mp = "parser"
    }
    if (s == "") {
        kjtYpr.inf('_FPOshibka_ parse: ' + xhrParse.status, 1500);
        if (kjtYpr.GL.remote > 0) l0I1l0lO0lsnG1I1QlYpr()
    }
    try {
        var pars = ch.parser.split("|");
        var parse_url = pars[0];
        var parse1 = (typeof pars[1] == 'undefined') ? "" : pars[1];
        var parse2 = (typeof pars[2] == 'undefined') ? "" : pars[2];
        if (s == "") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0, !0);
            kjtYpr.inf("Пустая ссылка!", 1500);
            if (handler == "player") lI1lI00l1gX0l0l0OYpr();
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
            return
        }
        if (s.indexOf('{"parse":"') == 0) {
            var data = l1l0IOIl_puQl1I1IYpr(s);
            if (typeof data.parse != "undefined") {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(40);
                if (data.parse.indexOf("http") == 0 || data.parse.indexOf("curl") == 0) {} else {
                    mainPars(ch, mode, mini, "parse", request_id);
                    return
                }
                statusbar(data.parse, "fulllink");
                var aborttimer = setTimeout("RemoteXhr2.abort();", 18000);
                RemoteXhr2 = null;
                RemoteXhr2 = new XMLHttpRequest();
                RemoteXhr2.onreadystatechange = function () {
                    if (RemoteXhr2.readyState == 4) {
                        clearTimeout(aborttimer);
                        POST_S = RemoteXhr2.responseText;
                        mainPars(ch, mode, mini, data.parse, request_id)
                    }
                };
                if (app_cors || data.cors == "local") {
                    if (data.parse.indexOf("curl") == 0) {
                        var curl = parseCURL(data.parse);
                        if (curl.method == "POST") {
                            RemoteXhr2.open('POST', curl.url, !0);
                            for (var p in curl.header)
                                if (p != "Content-Type") RemoteXhr2.setRequestHeader(p, curl.header[p]);
                            RemoteXhr2.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                            RemoteXhr2.send(curl.body);
                        } else {
                            RemoteXhr2.open("GET", curl.url, !0);
                            RemoteXhr2.send()
                        }
                    } else {
                        RemoteXhr2.open("GET", data.parse, !0);
                        RemoteXhr2.send()
                    }
                } else {
                    if (data.parse.indexOf("curl") == 0) var xxurl = data.parse;
                    else xxurl = 'curl "' + data.parse + '" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"';
                    RemoteXhr2.open("GET", "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(xxurl), !0);
                    RemoteXhr2.send()
                }
                return
            }
        }
        var text = "";
        if (parse1 == "selfReNewBookmark") {
            selfpages[pars[0]] = s;
            lll0I0ll0O01Ypr(s, pars[0], "selfReNewBookmark", parse2, mini, null, request_id);
            return
        }
        if (parse1 == "" && parse2 == "") {
            text = s
        } else if (parse2 == "") {
            x1 = (parse1 == "") ? 0 : s.indexOf(parse1) + parse1.length;
            text = s.substr(x1)
        } else if (parse1.indexOf(".*?") > 0 || parse2.indexOf(".*?") > 0) {
            s = s.replace(/\n/g, "").replace(/\r/g, "");
            try {
                p = parse1 + '(.*?)' + parse2;
                regexp = new RegExp(p, "i");
                items = regexp.exec(s);
                text = items[1]
            } catch (e) {
                errlog(e)
            }
        } else {
            x1 = (parse1 == "") ? 0 : s.indexOf(parse1) + parse1.length;
            x2 = s.indexOf(parse2, x1);
            text = s.substr(x1, x2 - x1)
        }
        if (mini) {
            play_mini(ch.stream_url.replace("md5hash", text));
            return
        }
        if (ch.playlist_url != "") {
            if (ch.playlist_url.indexOf("lg.php?list=") > 0) text = encodeURIComponent(text);
            if (ChSel.playlist_url.indexOf("=postmd5") > 0 || (ch.playlist_url.indexOf("/obovse.ru/") > 0 && (text.length > 9000))) {
                ch.postmd5 = text;
                text = "postmd5"
            }
            ch.playlist_url = ch.playlist_url.replace("md5orighash", text);
            if (mb) ch.playlist_url = ch.playlist_url.replace("md5mbhash", encodeURIComponent(text));
            else ch.playlist_url = ch.playlist_url.replace("md5hash", encodeURIComponent(text))
        }
        if (ch.stream_url != "") {
            if (ch.stream_url.indexOf("=postmd5") > 0) {
                ch.postmd5 = text;
                text = "postmd5"
            }
            if (mb) ch.stream_url = ch.stream_url.replace("md5mbhash", text);
            else ch.stream_url = ch.stream_url.replace("md5hash", text)
        }
        ch[mp] = "";
        kjtYpr.l0lI10EMI1I10Ypr(mode, ch)
    } catch (e) {}
}

function getSubI(x, ch) {
    if (x.length == 1) return ch[x[0]].submenu;
    else {
        ch = ch[x.shift()].submenu;
        return getSubI(x, ch)
    }
}

function gV(v, ind1) {
    try {
        if (typeof v == "undefined") return "";
        if (v == null) return "";
        if (ind1 != null) return gV(v[ind1]);
        return v
    } catch (e) {
        return ""
    }
}

function OpenUrl(url) {
    kjtYpr.l110l1lIPuoaO0I0IOYpr(url)
}

function OpenGoBack() {
    tmf()
}

function collect(a, b) {
    var d = {};
    for (p in a) {
        d[p] = a[p]
    }
    for (p in b) {
        d[p] = b[p]
    }
    return d
}
var xmlToJSON = (function () {
    this.version = "1.3.4";
    var options = {
        mergeCDATA: !0,
        grokAttr: !0,
        grokText: !0,
        normalize: !0,
        xmlns: !0,
        namespaceKey: '_ns',
        textKey: '_text',
        valueKey: '_value',
        attrKey: '_attr',
        cdataKey: '_cdata',
        attrsAsObject: !0,
        stripAttrPrefix: !0,
        stripElemPrefix: !0,
        childrenAsArray: !1
    };
    var prefixMatch = new RegExp(/(?!xmlns)^.*:/);
    var trimMatch = new RegExp(/^\s+|\s+$/g);
    this.grokType = function (sValue) {
        if (/^\s*$/.test(sValue)) {
            return null
        }
        if (/^(?:true|false)$/i.test(sValue)) {
            return sValue.toLowerCase() === "true"
        }
        if (isFinite(sValue)) {
            return parseFloat(sValue)
        }
        return sValue
    };
    this.parseString = function (xmlString, opt) {
        return this.parseXML(this.stringToXML(xmlString), opt)
    }
    this.parseXML = function (oXMLParent, opt) {
        for (var key in opt) {
            options[key] = opt[key]
        }
        var vResult = {},
            nLength = 0,
            sCollectedTxt = "";
        if (options.xmlns && oXMLParent.namespaceURI) {
            vResult[options.namespaceKey] = oXMLParent.namespaceURI
        }
        if (oXMLParent.attributes && oXMLParent.attributes.length > 0) {
            var vAttribs = {};
            for (nLength; nLength < oXMLParent.attributes.length; nLength++) {
                var oAttrib = oXMLParent.attributes.item(nLength);
                vContent = {};
                var attribName = '';
                if (options.stripAttrPrefix) {
                    attribName = oAttrib.name.replace(prefixMatch, '')
                } else {
                    attribName = oAttrib.name
                }
                if (options.grokAttr) {
                    vContent[options.valueKey] = this.grokType(oAttrib.value.replace(trimMatch, ''))
                } else {
                    vContent[options.valueKey] = oAttrib.value.replace(trimMatch, '')
                }
                if (options.xmlns && oAttrib.namespaceURI) {
                    vContent[options.namespaceKey] = oAttrib.namespaceURI
                }
                if (options.attrsAsObject) {
                    vAttribs[attribName] = vContent
                } else {
                    vResult[options.attrKey + attribName] = vContent
                }
            }
            if (options.attrsAsObject) {
                vResult[options.attrKey] = vAttribs
            } else {}
        }
        if (oXMLParent.hasChildNodes()) {
            for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
                oNode = oXMLParent.childNodes.item(nItem);
                if (oNode.nodeType === 4) {
                    if (options.mergeCDATA) {
                        sCollectedTxt += oNode.nodeValue
                    } else {
                        if (vResult.hasOwnProperty(options.cdataKey)) {
                            if (vResult[options.cdataKey].constructor !== Array) {
                                vResult[options.cdataKey] = [vResult[options.cdataKey]]
                            }
                            vResult[options.cdataKey].push(oNode.nodeValue)
                        } else {
                            if (options.childrenAsArray) {
                                vResult[options.cdataKey] = [];
                                vResult[options.cdataKey].push(oNode.nodeValue)
                            } else {
                                vResult[options.cdataKey] = oNode.nodeValue
                            }
                        }
                    }
                } else if (oNode.nodeType === 3) {
                    sCollectedTxt += oNode.nodeValue
                } else if (oNode.nodeType === 1) {
                    if (nLength === 0) {
                        vResult = {}
                    }
                    if (options.stripElemPrefix) {
                        sProp = oNode.nodeName.replace(prefixMatch, '')
                    } else {
                        sProp = oNode.nodeName
                    }
                    vContent = xmlToJSON.parseXML(oNode);
                    if (vResult.hasOwnProperty(sProp)) {
                        if (vResult[sProp].constructor !== Array) {
                            vResult[sProp] = [vResult[sProp]]
                        }
                        vResult[sProp].push(vContent)
                    } else {
                        if (options.childrenAsArray) {
                            vResult[sProp] = [];
                            vResult[sProp].push(vContent)
                        } else {
                            vResult[sProp] = vContent
                        }
                        nLength++
                    }
                }
            }
        } else if (!sCollectedTxt) {
            if (options.childrenAsArray) {
                vResult[options.textKey] = [];
                vResult[options.textKey].push(null)
            } else {
                vResult[options.textKey] = null
            }
        }
        if (sCollectedTxt) {
            if (options.grokText) {
                var value = this.grokType(sCollectedTxt.replace(trimMatch, ''));
                if (value !== null && value !== undefined) {
                    vResult = value
                }
            } else if (options.normalize) {
                vResult = sCollectedTxt.replace(trimMatch, '').replace(/\s+/g, " ")
            } else {
                vResult = sCollectedTxt.replace(trimMatch, '')
            }
        }
        return vResult
    }
    this.xmlToString = function (xmlDoc) {
        try {
            var xmlString = xmlDoc.xml ? xmlDoc.xml : (new XMLSerializer()).serializeToString(xmlDoc);
            return xmlString
        } catch (err) {
            return null
        }
    }
    this.stringToXML = function (xmlString) {
        try {
            var xmlDoc = null;
            if (window.DOMParser) {
                var parser = new DOMParser();
                xmlDoc = parser.parseFromString(xmlString, "text/xml");
                return xmlDoc
            } else {
                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = !1;
                xmlDoc.loadXML(xmlString);
                return xmlDoc
            }
        } catch (e) {
            return null
        }
    }
    return this
}).call({});
if (typeof module != "undefined" && module !== null && module.exports) module.exports = xmlToJSON;
else if (typeof define === "function" && define.amd) define(function () {
    return xmlToJSON
});

function escapeHtml(text) {
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function (m) {
        return map[m]
    })
}

function l1110OI1u0OzlI10IIYpr() {
    var u = gV(kjtYpr.global, "url");
    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("#submenu") > 0) u = "";
    if (u == "") {
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("obovse.ru") == -1 || kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("mylist.obovse.ru") > 0) u = kjtYpr.l1IlIl01l0tUIl1IIYpr.replace(/(\?|&)?wlIO11l11NEB100OYpr=.*/, "");
        else {
            for (var i in baseurl) {
                if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf(i.replace("http://", "")) >= 0) u = "file://localparse/" + baseurl[i]
            }
        }
    }
    u = u.replace(/http:\/\/.*?\/obovse.ru\//, "file://");
    return u
}

function getInfoUrl(url) {
    if (url.indexOf("/alexkdpulg.php?list=") > 0) url = unescape(url.split("?list=")[1]);
    else if (url.indexOf("obovse.ru") == -1 || url.indexOf("mylist.obovse.ru") > 0) {} else {
        for (var i in baseurl) {
            if (url.indexOf(i.replace("http://", "")) >= 0) url = "file://localparse/" + baseurl[i]
        }
    }
    url = url.replace(/(\?|&)?wlIO11l11NEB100OYpr=.*/, "");
    url = url.replace(/http:\/\/.*?\/obovse.ru\//, "file://localparse/");
    return url
}
var userTop = {};

function lIIlO1uuOl100Ypr() {
    if (inset["tabPriv" + insetActive]) return;
    if (insetIn(-2, "get", "url") == "about:blank") {
        var se = insetIn(-2, "get", "s");
        if (se >= 0) {
            var data = getVars("about:blank");
            if (se != "" && !kjtYpr.XML_IMG.match(/1px\.png/))
                if (data.channels[se].source == "fav" && gV(data.channels[se], "logo_30x30") == "") {
                    data.fav[data.channels[se].id].logo_30x30 = kjtYpr.XML_IMG;
                    setVars("start", data)
                }
        }
    }
    if (!kjtYpr.l1IlIl01l0tUIl1IIYpr.match(/^(http|html:\/\/http|vk)/) || kjtYpr.l1IlIl01l0tUIl1IIYpr.match(/(#submenu|no_save)/) || is_ifr() || l1IOIIz1l0Ol110Ypr() || gV(kjtYpr.global, "cacheinfo") == "nocache") {
        return
    }
    xu = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    if (handler == "menu") {
        if (gV(kjtYpr.global, "player") != "inner" && !is_local(kjtYpr.ORIG_URL) && !kjtYpr.ORIG_URL.match(/(#submenu|#archive|no_save|search=)/) && !kjtYpr.XML_TITLE.match(/^Стр. (\d+) \/ (.*)$/)) {
            var nx = 1;
            var pu = insetIn(-2, "get", "url");
            if (pu == "about:blank") {
                var se = insetIn(-2, "get", "s");
                if (se >= 0) {
                    var data = getVars("about:blank");
                    if (se != "" && !kjtYpr.XML_IMG.match(/1px\.png/))
                        if (data.channels[se].source == "fav" && gV(data.channels[se], "logo_30x30") == "") {
                            data.fav[data.channels[se].id].logo_30x30 = kjtYpr.XML_IMG;
                            setVars("start", data)
                        }
                }
                nx = 6
            } else if (pu.match(/^http:\/\/spiderxml\.com\/top($|#)/)) nx = 6;
            if (typeof userTop[kjtYpr.ORIG_URL] == "undefined") userTop[kjtYpr.ORIG_URL] = {
                "c": nx,
                "title": kjtYpr.XML_TITLE,
                "logo_30x30": kjtYpr.XML_IMG,
                "tp": T.timestamp,
                "parser": insetIn(-1, "get", "p"),
                "local": insetIn(-1, "get", "l")
            };
            else {
                userTop[kjtYpr.ORIG_URL].c += 1;
                userTop[kjtYpr.ORIG_URL].tp = T.timestamp
            }
            kjtYpr.lIllOVRj11lO10Ypr("datas", l10O0I11gdZlOOIIYpr(userTop))
        } else {}
        if (gV(ll0I1lllpOugKllQ11Ypr[0], "xml_url") != xu) {
            ll0I1lllpOugKllQ11Ypr.unshift({
                "xml_url": xu,
                "infolink": l1110OI1u0OzlI10IIYpr(),
                "model": model,
                "hardware": kjtYpr.hardware,
                "time": T.timestamp,
                "title": kjtYpr.XML_TITLE,
                "icon": kjtYpr.XML_IMG
            })
        }
    } else if (handler == "player") {
        if (select >= 0) {
            if (gV(ll0I1lllpOugKllQ11Ypr[0], "xml_url") == xu && gV(ll0I1lllpOugKllQ11Ypr[0], "select") == select) {
                ll0I1lllpOugKllQ11Ypr[0].start_time = curTime
            } else ll0I1lllpOugKllQ11Ypr.unshift({
                "xml_url": xu,
                "infolink": l1110OI1u0OzlI10IIYpr(),
                "model": model,
                "hardware": kjtYpr.hardware,
                "time": T.timestamp,
                "select": select,
                "ChSel": {
                    "logo_30x30": ChSel.logo_30x30,
                    "title": ChSel.title,
                    "stream_url": ChSel.stream_url,
                    "parser": ChSel.parser,
                    "ident": ident,
                    "start_time": curTime,
                    "total_time": totalTime
                },
                "title": kjtYpr.XML_TITLE,
                "icon": kjtYpr.XML_IMG
            })
        }
    }
    if (ll0I1lllpOugKllQ11Ypr.length > 100) ll0I1lllpOugKllQ11Ypr.splice(100, 1);
    kjtYpr.lIllOVRj11lO10Ypr("history", l10O0I11gdZlOOIIYpr(ll0I1lllpOugKllQ11Ypr))
}

function incID() {
    kjtYpr.REQUEST_ID++;
    return kjtYpr.REQUEST_ID
}

function pUrl(u, m) {
    if (m == null) m = "http:";
    if (typeof u == "undefined") return "";
    else if (u.indexOf("//") == 0) return m + ":" + u;
    else if (u.indexOf("http") == 0) return u;
    return u
}
var uHelper = {
    request_id: null,
    remote: 0,
    allowproxy: 0,
    local: 0,
    retry: 0,
    postdata: "",
    atime: 15000,
    mwtn: 0,
    init: function () {
        if (this.request_id == null) this.request_id = kjtYpr.REQUEST_ID
    },
    parse: function () {},
    umwt: function (u) {
        var c = this;
        if (this.request_id != null)
            if (this.request_id != kjtYpr.REQUEST_ID) {
                return
            }
        var xhr4 = null;
        xhr4 = new XMLHttpRequest();
        xhr4.onreadystatechange = function () {
            if (xhr4.readyState == 4) {
                if (xhr4.status == 200 && xhr4.responseText != "wait") {
                    return c.parse(xhr4.responseText)
                }
                c.mwtn++;
                if (c.mwtn < 5) fastremote_timer = setTimeout(function () {
                    c.umwt(u)
                }, 4000);
                else {
                    xhr4 = null;
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                    if (!is_ifr()) {
                        lI1lI00l1gX0l0l0OYpr(!0);
                        kjtYpr.popUp("Истекло время ожидания получения ссылки! Попробуйте позже или включите RemoteFork для более быстрой обработки ссылок", 2500)
                    }
                }
            }
        };
        xhr4.open('GET', u, !0);
        xhr4.send()
    },
    fastremote: function (url, time, use_remote, use_country) {
        statusbar(url, "fulllink");
        var u = prxremote + "?do=xhrremote2&vp=" + timestamp + "&time=" + gV(time) + "&use_remote=" + gV(use_remote) + "&use_country=" + gV(use_country) + "&direct&v=send&u=" + encodeURIComponent(url);
        if (cmdReload) {
            cmdReload = !1;
            u += "&refresh=true"
        }
        var c = this;
        var xhr2 = null;
        xhr2 = new XMLHttpRequest();
        xhr2.onreadystatechange = function () {
            if (xhr2.readyState == 4) {
                if (xhr2.status == 200) {
                    c.mwtn = 0;
                    fastremote_timer = setTimeout(function () {
                        c.umwt(u.replace("=send", "=wget"))
                    }, 4000)
                } else {
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                    xhr2 = null;
                    kjtYpr.popUp("Истекло время ожидания получения ссылки! Включите RemoteFork для более быстрой обработки ссылок " + url + "!", 2500)
                }
            }
        };
        xhr2.open('GET', u, !0);
        xhr2.send()
    },
    get: function (u, ref, typecors) {
        var c = this;
        c.init();
        if (typecors == null) typecors = 0;
        if (ref == "null") ref = u;
        var url = u;
        statusbar(u, "link");
        xhr_abort = !1;
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status == 0) {
                    if (c.retry == 0 && c.allowproxy) {
                        c.retry = 1;
                        return c.get(u, ref, typecors)
                    } else kjtYpr.inf("Error stream parser network", 1200)
                }
                clearTimeout(l01IQlTho0O1lI1Ypr);
                c.parse(xhr.responseText)
            }
        };
        if (c.retry == 1) {
            url = "http://" + lI101lOIQOlTlQ10I1Ypr + "/alexkdpulg.php?list=" + encodeURIComponent(url) + "&" + l00Q0OlutuW01I0Ypr
        } else if (!c.local) {
            var lc = 'curl -L "' + u + '" -H "Referer: ' + u + '" -H "Pragma: no-cache" -H "DNT: 1" -H "Accept-Encoding: deflate" -H "Accept-Language: ru,en;q=0.8,uk;q=0.6,bg;q=0.4" -H "User-Agent: ' + ua_chrome + '" -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" -H "Cache-Control: no-cache" -H "Connection: keep-alive"';
            if (c.postdata != "") {
                lc += ' -H "Content-Type: application/x-www-form-urlencoded" --data="' + c.postdata + '"'
            }
            if (platform == "android-device") {
                var s = andr.cmd(lc);
                return c.parse(s)
            }
            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) {
                url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(lc)
            } else if (typecors == 1 && app_cors) {} else if (typecors == 2) {} else if (kjtYpr.series != "D" && kjtYpr.series != "C" && app_cors && xhr_referer == 3) {} else {
                if (remote) {
                    return c.fastremote(url)
                } else {
                    // serv = ["195.88.208.101", "46.36.218.194", "185.158.114.122"];
                    serv = ["player.local"];
                    url = "http://" + serv[rand(0, 2)] + "/xhr.php?u=" + encodeURIComponent(lc)
                }
                if (cmdReload) {
                    cmdReload = !1;
                    url += "&refresh=true"
                }
            }
        }
        if (c.postdata != "") {
            xhr.open('POST', url, !0);
            if (kjtYpr.series != "D" && kjtYpr.series != "C" && app_cors && xhr_referer == 3) {
                xhr.setRequestHeader("User-Agent", ua_chrome);
                xhr.setRequestHeader("Accept", "*/*");
                xhr.setRequestHeader("Accept-Encoding", "deflate");
                xhr.setRequestHeader("Referer", ref)
            }
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(c.postdata)
        } else {
            xhr.open('GET', url, !0);
            if (kjtYpr.series != "D" && kjtYpr.series != "C" && app_cors && xhr_referer == 3) {
                xhr.setRequestHeader("User-Agent", ua_chrome);
                xhr.setRequestHeader("Accept", "*/*");
                xhr.setRequestHeader("Accept-Encoding", "deflate");
                xhr.setRequestHeader("Referer", ref)
            }
            xhr.send()
        }
        l01IQlTho0O1lI1Ypr = setTimeout(function () {
            xhr_abort = !0;
            xhr.abort();
            kjtYpr.inf('_FPPrevLimOzh_', 1500, 'yellow');
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
        }, c.atime)
    },
    list: [],
    recurFolder: function (a, ttl, desc) {
        var ttl = gV(ttl);
        if (ttl != "") ttl += " ";
        for (var j in a) {
            if (j == "title") ttl += a[j] + " ";
            else if (j == "file" && gV(a, "file") != "") {
                if (gV(a, "poster") != "") {
                    var dop = '<img src="' + a.poster + '" style="width:180px;float:left;">'
                } else dop = "";
                if (gV(desc) != "") dop += desc + "<br>";
                this.list.push({
                    "title": ttl,
                    "logo_30x30": gV(a, "poster"),
                    "stream_url": a[j],
                    "description": dop + ttl
                })
            } else if (typeof a[j] == "object") this.recurFolder(a[j], ttl, desc)
        }
    }
};

function getSelect() {
    return select
}

function setSelect(s) {
    select = parseInt(s)
}

function curCh(m, v) {
    if (m == null) {
        return kjtYpr.channels[getSelect()]
    } else {
        if (typeof curCh() == "undefined") return "";
        else {
            if (v == null) return gV(curCh(), m);
            else {
                curCh()[m] = v;
                return !0
            }
        }
    }
}
var wdtimer = null,
    glSec = 0,
    video = null,
    lI1lI1GUbh1QOOOYpr = 0,
    dns_url = '',
    old_select = 0,
    old_p = 0,
    ll1lIOiIO0lO1IIIYpr = "",
    select = 0,
    count = 0,
    pstream = !1;
Password = "", avideo = "", margin = 0, l0O1l101l1t_Y0lll1Ypr = "", handler = "menu", prev = {}, version = "", inftimer = null, sQual = [1080, 720, 480, 360, 240], sPlayer = {
    "tizen": "Tizen _FPpleer_",
    "manual": "Other player",
    "vimu": "Vimu player",
    "ifrhtml5": "Iframe HTML5 _FPpleer_",
    "html5": "HTML5 _FPpleer_",
    "media": "_FPMedia_ _FPpleer_",
    "ext": "_FPVneshniy_ _FPpleer_",
    "exthtml5": "_FPVneshniy_ HTML5 _FPpleer_",
    "extmedia": "_FPVneshniy_ _FPMedia_ _FPpleer_",
    "jw": "JW Player 8.1.12"
};
var a = [],
    stat = b = "",
    prevlite = {},
    ServerFromList = "",
    ll1I0aX1lI1IYprtimer = null,
    sNext = ["", "_FPPosledovatelno_", "_FPPovtoryat_ _FPodin_", "_FPPovtoryat_ _FPvse_", "_FPOtkl_"];
var fons = [{
    "url": "alluminium.jpg",
    "title": "Тема от Михаила"
}, {
    "url": "andrei.jpg",
    "title": "Тема от Андрея"
}];
var col = "#EEEEEE|#FFFFCC|#FFFF99|#FFFF66|#FFFF33|#FFFF00|#CCCC00|#FFCC66|#FFCC00|#FFCC33|#CC9900|#CC9933|#996600|#FF9900|#FF9933|#CC9966|#CC6600|#996633|#663300|#FFCC99|#FF9966|#FF6600|#CC6633|#993300|#660000|#FF6633|#CC3300|#FF3300|#FF0000|#CC0000|#990000|#FFCCCC|#FF9999|#FF6666|#FF3333|#FF0033|#CC0033|#CC9999|#CC6666|#CC3333|#993333|#990033|#330000|#FF6699|#FF3366|#FF0066|#CC3366|#996666|#663333|#FF99CC|#FF3399|#FF0099|#CC0066|#993366|#660033|#FF66CC|#FF00CC|#FF33CC|#CC6699|#CC0099|#990066|#FFCCFF|#FF99FF|#FF66FF|#FF33FF|#FF00FF|#CC3399|#CC99CC|#CC66CC|#CC00CC|#CC33CC|#990099|#993399|#CC66FF|#CC33FF|#CC00FF|#9900CC|#996699|#660066|#CC99FF|#9933CC|#9933FF|#9900FF|#660099|#663366|#9966CC|#9966FF|#6600CC|#6633CC|#663399|#330033|#CCCCFF|#9999FF|#6633FF|#6600FF|#330099|#330066|#9999CC|#6666FF|#6666CC|#666699|#333399|#333366|#3333FF|#3300FF|#3300CC|#3333CC|#000099|#000066|#6699FF|#3366FF|#0000FF|#0000CC|#0033CC|#000033|#0066FF|#0066CC|#3366CC|#0033FF|#003399|#003366|#99CCFF|#3399FF|#0099FF|#6699CC|#336699|#006699|#66CCFF|#33CCFF|#00CCFF|#3399CC|#0099CC|#003333|#99CCCC|#66CCCC|#339999|#669999|#006666|#336666|#CCFFFF|#99FFFF|#66FFFF|#33FFFF|#00FFFF|#00CCCC|#99FFCC|#66FFCC|#33FFCC|#00FFCC|#33CCCC|#009999|#66CC99|#33CC99|#00CC99|#339966|#009966|#006633|#66FF99|#33FF99|#00FF99|#33CC66|#00CC66|#009933|#99FF99|#66FF66|#33FF66|#00FF66|#339933|#006600|#CCFFCC|#99CC99|#66CC66|#669966|#336633|#003300|#33FF33|#00FF33|#00FF00|#00CC00|#33CC33|#00CC33|#66FF00|#66FF33|#33FF00|#33CC00|#339900|#009900|#CCFF99|#99FF66|#66CC00|#66CC33|#669933|#336600|#99FF00|#99FF33|#99CC66|#99CC00|#99CC33|#669900|#CCFF66|#CCFF00|#CCFF33|#CCCC99|#666633|#333300|#CCCC66|#CCCC33|#999966|#999933|#999900|#666600|#FFFFFF|#CCCCCC|#999999|#666666|#333333|#000000";
var f_cols = col.split("|");
var f_font = "LG Display|Calibri|Arial|Times New Roman|Courier New|Georgia|Trebuchet MS".split("|");
var FileObj = {},
    startX = 9,
    startY = 5,
    posX = 0,
    posY = 0,
    dns1 = !1,
    minimize = !1,
    oldselect = 0;
var vk_owner, vk_cmd, vk_offset, vk_audio_pl = [],
    vk_audio_sel = 0,
    vk_pl_url = "",
    lOlI1OII1UehOl1lIOIOYpr = !1;
var iptv_retry = 0,
    is_iptv = 0,
    epg_select = -5,
    epg_channels = [],
    epg_arr = {},
    epg_src = "",
    epg_src2 = "",
    epg_last = 0,
    epg_tl = "",
    epg_tx = "",
    epg_ch = null,
    epg_region = "",
    epg_timer = null,
    title_pad = 0,
    lQIO0l010VIvIl111IYpr = 22;
var lI101lOIQOlTlQ10I1Ypr = "obovse.ru",
    info_mode = 0,
    plmini_on = !1,
    ordered = null,
    plmini_timer, plmini_canplay = !0,
    nv_reload = !0,
    remote_version = 0;
var tscreen = "main",
    tgame = "",
    payd = {};
var chGroup = [],
    chGroupSel = 0,
    cmdReload = !1,
    spider_stat = "";
var is_mark = !1,
    is_mark_array = {},
    aborted = !1,
    templic = 0;
var autoImpOk = !1,
    baseurl = {},
    rtree = !1;
var rek_num = 0,
    rek_played = 0,
    country = "",
    apijsUrl = "",
    apijsSend = 0,
    whitestripes = 0,
    device_id = "",
    device_token = "",
    client_id = "",
    vivat_start = !1;
var epg_time = 0,
    supportWebOS = !1,
    lO1lOlJvks1II11Ypr = {},
    seSt = [],
    stSend = null;
var ll0I1lllpOugKllQ11Ypr = null,
    enteresObj = null,
    maxyEvent = 0;
l00I1lOQIHVIK01O10Ypr = 37;
lI1O1IIlHxQ00IIIYpr = 4;
ch_size = 29;
if (typeof ttmac == "undefined") var ttmac = !1;
var tmac = ";lg3166589601;lg1539962599;309c23abaf66;641cb0dc4145;b8347510748e;pc1539962447;f46d04148b88;001a791e43d4;84119e2bd1bc;9e411ecc394acbbe;ph1539962159;525400123456";
lO1llO111uFIMI110OYpr = 29;
var sidB = 0,
    sidW = 35;
tpadding = 1, rek_last = 0, rek_q = 0, rek_n = 0;
rek_interval = 2 * 3600 * 1000;
var vk_repeat = !1,
    vk_visual = 0,
    backtimer;
var selIconstart = !1,
    server_load, vr = 0,
    fonLen;
var exPl = exPlV = ["html5", "media"];
var oID = "",
    yfirst = !0,
    allTimes = {};
for (var i = 2; i < 29; i++) {
    fons.push({
        "url": "fon" + (i + 1) + ".jpg",
        "title": "_FPTema_ " + (i + 1) + ""
    })
}
countries = ["Другие", "Украина", "Россия", "Казахстан", "Беларусь"];
var psize = 0;
var ll0111l1wxUIOlO1lYprmode = 0,
    ll0111l1wxUIOlO1lYprx = 1;
var iframeExit = 0,
    fullBody = !1,
    numBack = 0,
    numBack2 = -1,
    screensavertimer = -1,
    isScreensaver = !1;
var indload = 0,
    supportStorage = !0;
var blocked_ch = ",НТВ,ТНТ,Звезда,Рен ТВ,Россия,Петербург5 канал,Russia Today,Life News,Первый канал,ТВ Центр International,РТР Планета,НТВ Мир,Россия 24,РБК ТВ,История,365 дней,24 Техно,МИР 24,Страна,КХЛ,Сарафан,Совершенно секретно,Время,Музыка Первого,Ocean-TV,Телевизионный дамский клуб,24 Док,STV,Индия ТВ,Здоровое ТВ,Ля-Минор,Drive,Russian Travel Guide,Ретро,Вопросы и ответы,Footschool TV,Психология21,Mini Movie,Православная телекомпания,Look TV,Amazing Life,Ностальгия,Радость моя,ТБН,";
var blocked_epg = ",rt-doc,rt-doc-rus,rti,lifenews,rtr,vesti,ort,zvezda,zvezda2,zvezda3,zvezda4,zvezda7,tv3,tv3_2,tv3_3,tv3_4," + "tv3_7,rossiya+2,rossiya+2,rossiya+2,rossiya+4,rossiya+6," + "rossiya+8,rossiya-hd,rossiya,rentv,rentv2,rentv4,rentv7,ntv,ntv2,ntv3,ntv4,ntv7,ntv-bel,kultura,kultura+2,kultura+4,kultura+7," + "ort,ort+2,ort+4,ort+6,ort+8,ortint,ort-hd,planeta-ukr,planeta-sng,karusel,karusel+3,karusel+7,"
if (typeof curWidget != "object") {
    curWidget = {}
}
if (typeof console != "object") {
    console = {};
    if (typeof console.log == "undefined") {
        console.log = function (a) {}
    }
} else {
    if (typeof console.log == "undefined") {
        console.log = function (a) {}
    }
}
if (window.top !== window.window) {
    if (typeof loader_p != "undefined")
        if (loader_p != "msx") window.top.location = window.location.href
}
if (document.location.href.indexOf("dev") == -1) {}
var plaginAudio, plaginNavi, naviFirm, plaginTVMW;

function AddToPage(u) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = !0;
    script.src = u;
    script.onload = function () {};
    document.getElementsByTagName('head')[0].appendChild(script)
}
if (platform == "sams") {
    try {
        console.log = function (a) {
            alert(a)
        };
        var widgetAPI = new Common.API.Widget();
        var pluginAPI = new Common.API.Plugin();
        plaginAudio = $_("pluginAudio");
        PL_NNAVI_STATE_BANNER_NONE = 0;
        PL_NNAVI_STATE_BANNER_VOL = 2;
        PL_NNAVI_STATE_BANNER_VOL_CH = 2
    } catch (e) {
        loadinfo(e)
    }
} else {
    var widgetAPI = {};
    var IMEShell = function () {};
    widgetAPI.putInnerHTML = function (id, text) {
        try {
            id.innerHTML = text
        } catch (e) {}
    }
}

function fp(text) {
    s = text;
    if (text.indexOf("_FP") > -1) {
        var regexp = new RegExp("_FP(.*?)_", "g");
        while ((ch = regexp.exec(text)) != null) {
            if (typeof lIO11l11NEB100OYpr[kjtYpr.GL.lang][ch[1]] == 'undefined') lIO11l11NEB100OYpr[kjtYpr.GL.lang][ch[1]] = ch[1];
            s = s.replace("_FP" + ch[1] + "_", lIO11l11NEB100OYpr[kjtYpr.GL.lang][ch[1]])
        }
    }
    return s
}

function lO10OIOlxzlO100OIYpr(id, text, text2) {
    try {
        if ($_(id) == null) {
            return
        }
        if (typeof text == "undefined" || text == null) text = "";
        if (typeof kjtYpr.GL == "undefined") {
            var l = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("lang");
            if (l != "" & typeof lIO11l11NEB100OYpr[l] != "undefined") kjtYpr.GL = {
                "lang": l
            };
            else kjtYpr.GL = {
                "lang": "ru"
            }
        }
        if (lIO11l11NEB100OYpr[kjtYpr.GL.lang]._powered == "translate.yandex.ru") {
            var k = "",
                v = "";
            for (var i in lIO11l11NEB100OYpr.ru) {
                if (k != "") k += "\n";
                if (v != "") v += "\n";
                k += lIO11l11NEB100OYpr.ru[i];
                v += i
            }
            PullDataFromPost("http://obovse.ru/smarttv/api.php?do=translate&lang=" + kjtYpr.GL.lang, "v=" + v + "&s=" + encodeURIComponent(k), "translate");
            lIO11l11NEB100OYpr[kjtYpr.GL.lang]._powered = "Powered translate.yandex.ru";
            return
        }
        var s = fp(text);
        if (FgetSetting(12)) {
            s = s.replace(/<img.*?>/g, " ")
        }
        if (platform == "sams") widgetAPI.putInnerHTML($_(id), s);
        else $_(id).innerHTML = s;
        var scripts = $_(id).getElementsByTagName("script");
        for (var i = 0; i < scripts.length; i++) {}
    } catch (e) {}
}

function lQ1OIIIDOzl111l1lIYpr() {
    var xhr = null;
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {}
    };
    url = 'http://' + lI101lOIQOlTlQ10I1Ypr + '/block.m3u';
    xhr.open('GET', url, !0);
    xhr.send()
};

function l1IlI0I0u0F0Q1IYpr() {
    var xhr = null;
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.responseText.indexOf("ok") == -1) {
                setTimeout("l1IlI0I0u0F0Q1IYpr();", 5000)
            } else {}
        }
    };
    url = 'http://online.lnka.ru/online.php';
    xhr.open('GET', url, !0);
    xhr.send()
};
var rek_url = "rek_on",
    rek_type = "",
    rek_proto = 0;
var Point = {};

function advertisement(url, file_url, type) {
    if (type == "start") {
        if (url.indexOf("youtube") == -1) {
            rek_url = url;
            var d = box_client + "-" + kjtYpr.mac + "-" + kjtYpr.hardware;
            Point["start"] = "";
            Point["complete"] = Point["skip"] = "";
            // if (rek_url == "http://195.88.208.101/rek_ivi.mp4") {
            if (rek_url == "http://127.0.0.1/rek_ivi.mp4") {
                Point["ClickThrough"] = "html://http://opera.ivi.ru/?utm_source=ForkPlayer&utm_campaign=Ads";
                Point["linkTxt"] = "Перейти в приложение IVI";
                Point["title"] = "Где посмотреть кино?"
            }
            // if (rek_url == "http://195.88.208.101/rekmegogo.mp4") {
            if (rek_url == "http://127.0.0.1/rekmegogo.mp4") {
                Point["title"] = "Где посмотреть кино?"
            }
            Point["skipTime"] = 3;
            lI1l1IOllHHCTuO0OlOYpr(rek_url);
            return
        }
        var video_id = url.substr(url.indexOf('=') + 1);
        var url = "http://" + lI101lOIQOlTlQ10I1Ypr + "/smarttv/api.php?do=youtube2&box_client=lg&country=" + ipCountry + "&box_mac=" + kjtYpr.mac + "&v=" + video_id;
        xhr3 = null;
        xhr3 = new XMLHttpRequest();
        xhr3.onreadystatechange = function () {
            if (xhr3.readyState == 4) {
                if (xhr3.responseText.indexOf("[") == -1) {
                    rek_url = "";
                    rek_num++;
                    handler = "menu";
                    kjtYpr.l0lI10EMI1I10Ypr(rek_mode);
                    return
                }
                var data = l1l0IOIl_puQl1I1IYpr(xhr3.responseText);
                if (typeof data != "object" || data == null) {
                    rek_url = "";
                    rek_num++;
                    handler = "menu";
                    kjtYpr.l0lI10EMI1I10Ypr(rek_mode)
                }
                kjtYpr.ll0Il1IRfsIQOO0Ypr = data;
                rek_url = kjtYpr.ll0Il1IRfsIQOO0Ypr[0][1];
                var d = box_client + "-" + kjtYpr.mac + "-" + kjtYpr.hardware;
                if (rek_type == "youtube") {
                    Point["start"] = "";
                    Point["complete"] = "";
                    Point["skip"] = "";
                    Point["skipTime"] = 15
                }
                if (rek_type == "youtube2") {
                    Point["start"] = "";
                    Point["skipTime"] = 10
                }
                if (rek_type == "advert") {
                    Point["start"] = "";
                    Point["skipTime"] = 10
                }
                lI1l1IOllHHCTuO0OlOYpr(rek_url)
            }
        };
        xhr3.open('GET', url, !0);
        xhr3.send()
    } else if (file_url == "skip") {
        if (typeof url != "undefined") {
            var myImage = new Image(1, 1);
            myImage.src = url
        }
        if (platform == "android-device") lI1lI00l1gX0l0l0OYpr();
        else easystop();
        setTimeout("kjtYpr.l0lI10EMI1I10Ypr(rek_mode);", 500);
        // PullDataFrom("http://185.158.114.122/obovse.ru/forklmod/addstat.php?do=rek&cid=skip&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title"))
        PullDataFrom("http://127.0.0.1/obovse.ru/forklmod/addstat.php?do=rek&cid=skip&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title"))
    } else if (file_url == "half" && typeof url != "undefined") {
        var myImage = new Image(1, 1);
        myImage.src = url
    }
}

function l1I1lllp1Fu1O0lYpr(url, file_url, type, recurs) {
    // if (rek_type == "youtube" || rek_type == "youtube2" || rek_type == "advert") return advertisement(url, file_url, type);
    if (ttmac) {
        kjtYpr.popUp("rek num=" + rek_num + "<br>" + curTime + "/" + totalTime + "<br>" + type + "<br>" + url, 300)
    }
    if (type == "start" && typeof url != "undefined") {
        var xhr = null;
        xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (is_rek) {
                    if (xhr.status == 200) {
                        var s = xhr.responseText.replace(/\n/g, "").replace(/\r/g, "");
                        if (s.indexOf("MediaFiles") > 0 || s.indexOf("VASTAdTagURI") > 0) {
                            if (s.indexOf("VASTAdTagURI") > 0) {
                                s = s.replace(/\[CACHEBUSTING\]/g, rand(10000000, 99999999));
                                s = s.replace(/%7BENCODED_REF_URL%7D/g, encodeURIComponent(document.referrer));
                                regexp = new RegExp("VASTAdTagURI.{1,70}(http.*?)\]", "ig");
                                if ((items = regexp.exec(s)) != null) {
                                    l1I1lllp1Fu1O0lYpr(items[1], '', 'start', !0)
                                }
                            } else {
                                regexp = new RegExp("<MediaFile.*?video.*?((http|//).*?)\]", "ig");
                                if ((items = regexp.exec(xhr.responseText)) != null) {
                                    if (items[2] == "//") rek_url = "http:" + items[1];
                                    else rek_url = items[1]
                                } else {
                                    regexp = new RegExp("<MediaFile.*?type=.image\/.*?>(.*?)<\/MediaFile>", "i");
                                    if ((items = regexp.exec(xhr.responseText)) != null) {
                                        rek_url = items[1].replace("<![CDATA[", "").replace("]]>", "");
                                        if (rek_url.indexOf("//") == 0) rek_url = "http:" + rek_url;
                                        rek_url = "image/" + rek_url
                                    }
                                }
                            }
                            regexp = new RegExp("<Impression.*?>(.*?)<\/Impression", "ig");
                            if (recurs == null) Point["impression"] = null;
                            while ((items = regexp.exec(s)) != null) {
                                it = totrim(items[1].replace("<![CDATA[", "").replace("]]>", ""));
                                if (it.indexOf("//") == 0) it = "http:" + it;
                                if (Point["impression"] == null) Point["impression"] = it;
                                else if (typeof Point["impression"] == "object") Point["impression"].push(it);
                                else {
                                    var tmp = Point["impression"];
                                    Point["impression"] = [];
                                    Point["impression"].push(tmp);
                                    Point["impression"].push(it)
                                }
                            }
                            var event = ["start", "midpoint", "firstQuartile", "thirdQuartile", "complete", "close", "skip"];
                            for (var i = 0; i < event.length; i++) {
                                if (recurs == null) Point[event[i]] = null;
                                regexp = new RegExp("<Tracking[^>]*?event=\"" + event[i] + "\".*?>(.*?)<\/Tracking", "ig");
                                while ((items = regexp.exec(s)) != null) {
                                    it = totrim(items[1].replace("<![CDATA[", "").replace("]]>", ""));
                                    if (it.indexOf("//") == 0) it = "http:" + it;
                                    if (Point[event[i]] == null) Point[event[i]] = it;
                                    else if (typeof Point[event[i]] == "object") Point[event[i]].push(it);
                                    else {
                                        var tmp = Point[event[i]];
                                        Point[event[i]] = [];
                                        Point[event[i]].push(tmp);
                                        Point[event[i]].push(it)
                                    }
                                }
                                if (Point[event[i]] == null) {
                                    if (rek_type == "citrus" || rek_type == "proto" || rek_type == "user") {} else if (event[i] != "close" && event[i] != "skip") {
                                        if (rek_num == 0) {
                                            rek_url = "rek_on";
                                            rek_num++
                                        } else {
                                            rek_url = "";
                                            rek_num++
                                        }
                                        rek_url = "";
                                        rek_num++;
                                        handler = "menu";
                                        kjtYpr.l0lI10EMI1I10Ypr(rek_mode);
                                        break
                                    }
                                }
                            }
                            Point["linkTxt"] = "";
                            var mtc = s.match(/<Extension type=.linkTxt..*?>(.*?)<\/Extension>/);
                            if (mtc != null) Point["linkTxt"] = mtc[1].replace("<![CDATA[", "").replace("]]>", "");
                            Point["skipTime"] = -1;
                            var mtc = s.match(/<Extension.*?skipTime.*?00:00:(.*?)\]/);
                            if (mtc != null) {
                                Point["skipTime"] = parseInt(mtc[1])
                            } else {
                                var mtc = s.match(/skipoffset="00:00:(.*?)"/);
                                if (mtc != null) {
                                    Point["skipTime"] = parseInt(mtc[1])
                                } else {
                                    var mtc = s.match(/<Extension.*?skipTime.*?00:(.*?)\]/);
                                    if (mtc != null) {
                                        Point["skipTime"] = parseInt(mtc[1])
                                    }
                                }
                            }
                            Point["Duration"] = "";
                            var mtc = s.match(/<Duration>(.*?)<\/Duration>/);
                            if (mtc != null) {
                                var Dtime = mtc[1].replace("<![CDATA[", "").replace("]]>", "").split(":");
                                var el = parseInt(Dtime[Dtime.length - 1]);
                                if (!isNaN(el))
                                    Point["Duration"] = el;
                                el = parseInt(Dtime[Dtime.length - 2]);
                                if (!isNaN(el))
                                    Point["Duration"] += el * 60;
                                el = parseInt(Dtime[Dtime.length - 3]);
                                if (!isNaN(el))
                                    Point["Duration"] += el * 3600
                            }
                            Point["ClickThrough"] = "";
                            var mtc = s.match(/<ClickThrough>(.*?)<\/ClickThrough>/);
                            if (mtc != null) {
                                Point["ClickThrough"] = mtc[1].replace("<![CDATA[", "").replace("]]>", "")
                            }
                            Point["dstUrl"] = "";
                            var mtc = s.match(/dstUrl\".*?(.{1,100})\]/);
                            if (mtc != null) {
                                Point["dstUrl"] = mtc[1]
                            }
                            if (s.indexOf("VASTAdTagURI") == -1) {
                                lI1l1IOllHHCTuO0OlOYpr(rek_url);
                                return
                            }
                        }
                        if (s.indexOf("VASTAdTagURI") > 0) {} else if (rek_url == "" || rek_url == "rek_on") {
                            if (++rek_n > 0) {
                                is_adult = !1;
                                rek_url = "";
                                setTimeout("is_adult=true;rek_n=0;", 45000)
                            }
                            err_rek()
                        } else {
                            lI1l1IOllHHCTuO0OlOYpr(rek_url)
                        }
                    } else {
                        err_rek("errrek status " + xhr.status)
                    }
                }
            }
        };
        try {
            xhr.open('GET', url, !0);
            if (document.location.href.indexOf("/obovse.ru") > 0 || 1) {
                try {
                    xhr.withCredentials = !0
                } catch (e) {}
            }
            xhr.send()
        } catch (e) {
            err_rek("errrek" + e.message)
        }
    }
    if (file_url == "half" || file_url == "skip") {
        if (file_url == "skip") {
            is_adult = !1;
            if (Point["start"] != null) {
                if (Point["impression"] != null) {
                    l1I1lllp1Fu1O0lYpr(Point["impression"], "half")
                }
                l1I1lllp1Fu1O0lYpr(Point["start"], "half");
                if (Point["dstUrl"] != null) {
                    l1I1lllp1Fu1O0lYpr(Point["dstUrl"], "half")
                }
                Point["start"] = null
            }
        }
        if (typeof url != "undefined") {
            if (typeof url == "object") {
                for (var i = 0; i < url.length; i++) {
                    var myImage = new Image(1, 1);
                    myImage.src = url[i]
                }
            } else {
                var myImage = new Image(1, 1);
                myImage.src = url
            }
        }
        if (file_url == "skip") {
            // PullDataFrom("http://185.158.114.122/obovse.ru/forklmod/addstat.php?do=rek&cid=skip&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title"));
            PullDataFrom("http://127.0.0.1/obovse.ru/forklmod/addstat.php?do=rek&cid=skip&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title"));
            rek_url = "";
            if (platform == "android-device") lI1lI00l1gX0l0l0OYpr();
            else easystop();
            setTimeout("kjtYpr.l0lI10EMI1I10Ypr(rek_mode);", 500)
        }
        return
    }
};
var kjtYpr = {
    "lOOlOIIOlcsICI0l1QYpr": -1,
    "Password": "",
    "Password2": "",
    "no_save": !1,
    "l11l101lxO_tl1IlIYpr": "",
    "timeout": 15,
    "channels": [],
    "menu": [],
    "global": {},
    "ll0Il1IRfsIQOO0Ypr": [],
    "l1IlIl01l0tUIl1IIYpr": "",
    "extmode": !1,
    "muted": !1,
    "rlogo": !0,
    "Exittrue": 0,
    "inputId": "",
    "build": 0,
    "hm": "",
    "virtual": 0,
    "applyenter": 1,
    "typeSource": "",
    "REQUEST_XML": "",
    "REQUEST_ID": 0,
    "SUBREQUEST_ID": 0,
    "IFRAMES": [],
    "IFRAME_BACK": 0,
    "lastSearch": ""
};
kjtYpr.setDefault = function (m) {
    kjtYpr.GL = {
        "rows": 15,
        "JTVRegion": 2,
        "next": 1,
        "remoteip": "",
        "quality": 1,
        "clear": 0,
        "passwordkey": '0000',
        "password": 'On',
        "recovery": !0,
        "player": 'media',
        "streamplayer": 'media',
        "fon": 19,
        "lang": "ru",
        "country": 0,
        "pr": 50,
        "color": 0,
        "search": 3,
        "remote": 0,
        "buffer": 2,
        "ibuffer": 15,
        "third": 0,
        "xmode": 0,
        "Pw": 100,
        "Ph": 100,
        "timeoutiptv": 20,
        "vk_code": "",
        "vk_id": "",
        "vk_token": "",
        "audioplayer": "1",
        "headers": 1,
        "fs": "1",
        "rate": 0,
        "ts": 0,
        "sortiptv": 0,
        "snow": 1,
        "livesearch": 0,
        "serv": 0,
        "pip": 0,
        "sidebar": 0,
        "scrsaver": 1,
        "font": "",
        "adult": 0,
        "time": 0,
        "return": 0
    };
    var ua = navigator.userAgent.toLowerCase();
    if (ua.match(/webos/) || ua.match(/webappmanager/)) kjtYpr.GL.player = "html5";
    else if (ua.match(/philips/)) kjtYpr.GL.player = "html5";
    else if (ua.match(/sony/)) kjtYpr.GL.player = "html5";
    else if (ua.match(/chrome/)) kjtYpr.GL.player = "html5";
    else if (ua.match(/opera tv/)) kjtYpr.GL.player = "html5";
    else if (document.location.href.indexOf("operatv.obovse.ru") > 0) kjtYpr.GL.player = "html5";
    if (document.location.href.indexOf("/workspace/") > 0 || model == "sonyplaystation") kjtYpr.GL.headers = 0;
    if (box_low2) FsetSetting(12, 1);
    if (platform == "tizen") kjtYpr.GL.player = "html5";
    if (uaJ == "pa") kjtYpr.GL.player = "html5";
    if (platform == "android-device") {
        kjtYpr.GL.Pw = 1280;
        kjtYpr.GL.Ph = 720;
        kjtYpr.GL.player = "media"
    }
    kjtYpr.GL.streamplayer = kjtYpr.GL.player;
    if (uaJ == "lgw2") kjtYpr.GL.player = "ifrhtml5";
    if (box_client == "tForkPlayer2.57i") {
        kjtYpr.GL.player = "tizen";
        kjtYpr.GL.streamplayer = kjtYpr.GL.player
    }
    if (m) return;
    kjtYpr.lIllOVRj11lO10Ypr("xmodeClear", "");
    kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
    kjtYpr.lIllOVRj11lO10Ypr("glsearch", "")
};
var gs = {
    "on": !1,
    "count": 0,
    "url": [],
    "point": -1,
    "search": "",
    "href": [],
    "key": 0
};

function readGl() {
    var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("glsearch");
    if (s == "") s = "https://filmix.red/fork/search-|-_OT_filmix.png";
    if (s.indexOf("nowfilms.php") == -1 && cached.start.indexOf("nowfilms.php") > 0)
        s = "http://obovse.ru/smarttv/nowfilms.php?id=search-|-_OT_kinokong___200x200.png~" + s;
    if (s.indexOf("hdkinoteat.php") == -1 && timestamp > 2) s = "http://obovse.ru/smarttv/hdkinoteat.php?id=search-|-_OT_hdkinoteatr.com_200x200.png~" + s;
    if (s.indexOf("hdgoclub.php") == -1)
        s = "http://obovse.ru/smarttv/hdgoclub.php?id=search-|-_OT_hdgo.club.png~" + s;
    if (s.indexOf("mzona.php") == -1 && cached.start.indexOf("mzona.php") > 0)
        s = "http://obovse.ru/smarttv/mzona.php?id=search-|-_OT_zona.png~" + s;
    if (s.indexOf("bobfilms.php") == -1) s = "http://obovse.ru/smarttv/bobfilms.php?id=search-|-_OT_BobFilm_200x200.png~" + s;
    if (s.indexOf("hdrezka.php") == -1)
        s = "http://obovse.ru/smarttv/hdrezka.php?id=search-|-_OT_hdrezka.png-|-hdrezka~" + s;
    if (s.indexOf("filmix.red") == -1)
        s = "https://filmix.red/fork/search-|-_OT_filmix.png~" + s;
    if (s.indexOf("ytube.php") == -1)
        s = "http://obovse.ru/smarttv/ytube.php?id=search-|-_OT_youtube.com____200x200.png~" + s;
    if (s.indexOf("kinokrad.php") == -1)
        s = "http://obovse.ru/smarttv/kinokrad.php?id=search-|-_OT_KinoKrad__200x200_small.png~" + s;
    if (s.indexOf("rutube.php") == -1)
        s = s + "~http://obovse.ru/smarttv/rutube.php?id=search-|-_OT_rutube.png";
    if (kjtYpr.GL.remote > 0 && vr >= 1.34 || platform == "android-device" && kjtYpr.build >= 4.8) {}
    var x = s.split("~");
    gs.url = [];
    var stext = "";
    for (var i = 0; i < x.length; i++) {
        if (x[i].indexOf("allsearch.php") > 0) continue;
        var y = x[i].split("-|-");
        if (y[1] == undefined) y[1] = "";
        if (y[2] == undefined) y[2] = "";
        if (y[3] == undefined) y[3] = "1";
        if (x[i].match(/\d+\.\d+:(8027|8028)\//) && !kjtYpr.GL.remoteactive) {
            var mtc = x[i].match(/\/([^\/]+)\.php/);
            if (mtc != null) stext += mtc[1] + " ";
            continue
        }
        if (app_cors || (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive)) {} else if (x[i].match(/(acestream_nnm|acestream_rutor|acestream_rutracker|tree|kinoprostir|yourcinema|allserials|mzona)\.php/)) {
            var mtc = x[i].match(/\/([^\/]+)\.php/);
            if (mtc != null) stext += mtc[1] + " ";
            continue
        }
        gs.url.push({
            "url": y[0],
            "logo": y[1],
            "title": y[2],
            "show": y[3]
        })
    }
    if (stext != "") kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> Включите RemoteFork для дополнительного поиска по сайтам: <br>" + stext, 2000);
    gs.count = gs.url.length
}
var show_cc = !0,
    arr_nv = [],
    is_readst = !1;

function readSt(getlist) {
    is_readst = !0;
    var ch = [];
    try {
        ch = l1l0IOIl_puQl1I1IYpr(cached.start)["channels"]
    } catch (e) {
        kjtYpr.popUp(e.message);
        ch = []
    }
    if (ch == null) ch = [];
    ch.unshift({
        "source": "spider",
        "title": "_FPConfiguring search_",
        "tvg-shift": "98",
        "logo_30x30": _img("_OI_settings.png"),
        "playlist_url": "cmdSetSearch",
        "description": "cmdSetSearch"
    });
    ch.unshift({
        "source": "spider",
        "title": "_FPIstoriya_",
        "tvg-shift": "98",
        "logo_30x30": _img("_OI_history.png"),
        "playlist_url": "cmdHistory",
        "description": "cmdHistory"
    });
    ch.unshift({
        "source": "spider",
        "title": "_FPTop queries_",
        "tvg-shift": "98",
        "logo_30x30": "_OT_search.png",
        "playlist_url": "http://spiderxml.com/topsearch",
        "playlist_url2": "http://spider.forkplayer.tv/topsearch",
        "description": "http://mylist.obovse.ru/topsearch"
    });
    ch.unshift({
        "source": "spider",
        "title": "_FPEnter search query or site URL, playlist XML / M3U_ <img width='" + css_w(22) + "' src='" + _img("_OT_search_logo_folder.png") + "' style='float:right;height:" + css_wh(22) + "px;padding-top:3px;'>",
        "tvg-shift": "99",
        "value": "",
        "search_on": "_FPEnter search query or URL_:",
        "logo_30x30": _img("_OT_search_logo_folder.png"),
        "playlist_url": "cmdSpider",
        "description": "search engine",
        "presearch": "http://omnibox.spiderxml.com/?type=all"
    });
    if (kjtYpr.build >= 5.5) {
        ch.push({
            "source": "service",
            "title": "Local Files & Plugins",
            "tvg-shift": "1",
            "logo_30x30": "_OT_USB_200x200.png",
            "playlist_url": "http://remotefo.rk/treeview?host=remotefo.rk/",
            "description": "http://127.0.0.1/treeview"
        })
    } else if (kjtYpr.build >= 5.1) {
        ch.push({
            "source": "service",
            "title": "Ace stream torrent plugins",
            "logo_30x30": "_OT_ace_stream.png",
            "playlist_url": "http://remotefo.rk/treeview?pluginacetorrentplay/.xml&host=remotefo.rk/",
            "description": "forkplayer://pluginacetorrentplay/"
        })
    }
    if (kjtYpr.GL.remote > 0 || kjtYpr.GL.acestream != "") ch.push({
        "source": "service",
        "title": "Torrent сайты",
        "logo_30x30": "_OT_ace_stream.png",
        "local": 2,
        "mb_parser": "http://ACE_IP:6878/webui/api/service?method=get_version&format=jsonp&callback=mycallback",
        "menu_url": "1080|remotefork|rfs",
        "playlist_url": "http://p.lnka.ru/torrentsites/?as=md5mbhash",
        "description": "http://p.lnka.ru/torrentsites/"
    });
    if (kjtYpr.GL.remote > 0) {
        if (THVPRunned) {
            ch.push({
                "source": "service",
                "title": "Rutor (THVP)<br>torrent tracker",
                "tvg-shift": "1",
                "logo_30x30": "_OT_rutor.png",
                "playlist_url": "http://obovse.ru/smarttv/rutor.php",
                "description": "http://rutor.info"
            })
        }
        ch.push({
            "source": "service",
            "title": "RemoteFork DLNA & Plugins",
            "logo_30x30": "_OT_DLNA_200x200.png",
            "playlist_url": "forkdlna",
            "description": "forkplayer://RemoteFork/"
        });
        ch.push({
            "source": "service",
            "title": "Home media server",
            "tvg-shift": "1",
            "logo_30x30": "_OT_hms.png",
            "playlist_url": "hms",
            "description": "forkplayer://HMS/"
        })
    }
    if (is_tizen) {
        if (version_local_files > 0) ch.push({
            "source": "service",
            "title": "USB",
            "tvg-shift": "1",
            "logo_30x30": "_OT_USB_200x200.png",
            "playlist_url": "usb://",
            "description": "forkplayer://USB/"
        })
    } else if (platform == "sams") {
        ch.push({
            "source": "service",
            "title": "USB<br>_FPPamyatTv_",
            "tvg-shift": "1",
            "logo_30x30": "_OT_USB_200x200.png",
            "playlist_url": "usb://",
            "description": "forkplayer://USB/"
        });
        ch.push({
            "source": "service",
            "title": "ForkStore<br> App Market",
            "tvg-shift": "1",
            "logo_30x30": "_OT_fstore.png",
            "playlist_url": "http://obovse.ru/smarttv/wlist.php",
            "description": "http://forkplayer.tv/forkstore"
        })
    } else if (platform == "tizen") ch.push({
        "source": "service",
        "title": "ForkStore<br> App Market",
        "tvg-shift": "1",
        "logo_30x30": "_OT_fstore.png",
        "playlist_url": "http://obovse.ru/smarttv/wlist.php?id=apps",
        "description": "http://forkplayer.tv/forkstore"
    });
    if (getlist) return ch;
    for (var z = 0; z < ch.length; z++) {
        try {
            baseurl[ch[z].playlist_url] = ch[z].description
        } catch (e) {}
    }
    return ch;
    is_readst = !0
}

function oldst(s) {
    var ch = [];
    var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("glstart");
    var x = s.split("~");
    var cc = 0,
        nx = 0,
        i;
    var def = defdel.replace(/_OS_/g, "http://obovse.ru/smarttv/").split("~");
    for (i = 0; i < x.length; i++) {
        if (x[i] == "") continue;
        var y = x[i].split("-|-"),
            pon = !0;
        if (kjtYpr.GL.third == 0) {
            for (di = 0; di < def.length; di++) {
                dy = def[di].split("-|-");
                if (y[0] == dy[0]) y[1] = "0"
            }
        }
        if (y[1] == undefined) y[1] = "0";
        if (y[2] == undefined) y[2] = "";
        if (y[3] == undefined) y[3] = "";
        if (y[4] == undefined) y[4] = "";
        if (y[5] == undefined || isNaN(y[5])) y[5] = "-1";
        if (y[6] == undefined || isNaN(y[5])) y[6] = "";
        for (var z = 0; z < ch.length; z++) {
            if (kjtYpr.GL.third == 0) {
                for (di = 0; di < def.length; di++) {
                    dy = def[di].split("-|-");
                    if (ch[z].playlist_url == dy[0]) {
                        ch.splice(z, 1);
                        z--;
                        cc++;
                        continue
                    }
                }
            }
            if (typeof ch[z] != "undefined") {
                if (ch[z].playlist_url == y[0]) {
                    pon = !1;
                    if (y[1] == "0") {
                        ch.splice(z, 1);
                        z--;
                        cc++;
                        continue
                    }
                    ch[z].sort = y[6]
                }
            }
        }
        if (y[1] == "2") {
            if (y[3] == "" || y[3].indexOf("open.png") == 0) y[3] = "none";
            if (y[2].indexOf(" /q") == y[2].length - 3) ch.push({
                "source": "fav",
                "title": y[2],
                "logo_30x30": y[3],
                "playlist_url": y[0],
                "search_on": "search",
                "menu_url": "2",
                "parser": y[4]
            });
            else {
                var dsk = y[2];
                if (dsk.length > 45) {
                    dsk = dsk.substr(0, 18) + ".." + dsk.substr(dsk.length - 25)
                }
                ch.push({
                    "source": "fav",
                    "title": y[2],
                    "sort": y[6],
                    "description": dsk,
                    "logo_30x30": y[3],
                    "playlist_url": y[0],
                    "menu_url": "2",
                    "parser": y[4],
                    "jtvname": y[5]
                });
                if (y[5] > -2 && y[0].indexOf("mylist.obovse.ru") == -1 && y[0].indexOf(".m3u") == -1) {
                    arr_nv.push({
                        "a": y,
                        "s": x[i]
                    })
                }
            }
        }
    }
    var sorted = "-";
    for (i = 0; i < ch.length; i++) {
        var n = parseInt(ch[i].sort);
        if (!isNaN(n) && sorted.indexOf("-" + n + "-") == -1) {
            if (n != i) {
                if (n > ch.length - 1) n = ch.length - 1;
                else if (n < 0) n = 0;
                var tmp = ch[n];
                if (typeof tmp["tvg-shift"] != "undefined") {
                    if (tmp["tvg-shift"] == "99" || tmp["tvg-shift"] == "98") {
                        ch[i].sort = "";
                        continue
                    }
                }
                ch[n] = ch[i];
                ch[i] = tmp;
                sorted += n + "-"
            }
        }
    }
    if (cc > 0 && show_cc && startPay < 1 && !is_readst) {
        kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> _FPNeskEl_ (" + cc + ") _FPstMenuSkr_");
        show_cc = !1
    }
    return ch
}

function newvideo(i) {}

function saveGl() {
    var s = "";
    for (var i = 0; i < gs.url.length; i++) {
        if (s != "") s += "~";
        s += gs.url[i].url + "-|-" + gs.url[i].logo + "-|-" + gs.url[i].title + "-|-" + gs.url[i].show + "-|-"
    }
    gs.count = gs.url.length;
    kjtYpr.lIllOVRj11lO10Ypr("glsearch", s)
}
errlog = function (e) {
    try {
        if (typeof e.name != "undefined") {
            var text = e.name + ": " + e.message;
            for (var prop in e)
                if (prop != "name" && prop != "message" && prop != "stack") text = text + "|" + prop + "=" + e[prop]
        } else text = e
    } catch (e) {
        text = e
    }
    var tm = new Date();
    var h = tm.getHours();
    var m = tm.getMinutes();
    var s = tm.getSeconds();
    var ms = tm.getMilliseconds();
    text = "[" + h + ":" + (m > 10 ? m : ("0" + m)) + ":" + (s > 10 ? s : ("0" + s)) + "," + ms + "] " + text
};
var homeurl = document.location.href;
if (homeurl.indexOf("#") != -1) homeurl = homeurl.substr(0, homeurl.indexOf("#"));
if (homeurl.indexOf("?") != -1) var fshomeurl = homeurl.substr(0, homeurl.indexOf("?"));
else fshomeurl = homeurl;

function l1l0IOIl_puQl1I1IYpr(s) {
    try {
        if (s == "") return null;
        return JSON.parse(s)
    } catch (e) {
        return null
    }
}

function l10O0I11gdZlOOIIYpr(s) {
    try {
        return JSON.stringify(s)
    } catch (e) {
        return {}
    }
}
var startPay = 1;
if (Math.random() > 0.3) startPay = 0;
var boot = !0,
    eldTimer = 20;

function onElementFocused(e) {
    if (document.activeElement != document.body && uaJ != "lg" && uaJ != "mag" && uaJ != "dune" && platform != "tizen" && platform != "sams" && uaJ != "lgw" && uaJ != "lgw2") setTimeout("document.activeElement.blur();", 50)
}
var timestamp = -4,
    gnxu = "";
kjtYpr.kjtYpj = function (gm) {
    try {
        if (gm == null) {
            document.addEventListener("focus", onElementFocused, !0);
            initdiv();
            $_("infoList").style.display = "none";
            $_("main").focus();
            $_("popUp").style.display = "none";
            setTimeout('$_("infoList").style.display="block";', 3000);
            if (hashR) {
                numBack = numBack2;
                numBack2 = Math.random();
                document.location.hash = numBack2;
                numBack = numBack2;
                numBack2 = Math.random();
                document.location.hash = numBack2
            }
            if (uaJ == "dune") {
                stb = $_("dune-api");
                try {
                    if (!stb.init()) kjtYpr.inf("CAN'T INIT DUNE-STB-API!", 1500);
                    stb.setColorKey(1)
                } catch (e) {
                    kjtYpr.inf(e.message, 4000)
                }
            } else if (uaJ == "mag" && resolution_prefix != null) {
                document.getElementsByTagName('link')[0].href = document.getElementsByTagName('link')[0].href.replace(".css", "_" + resolution_prefix + ".css");
                document.getElementsByTagName('link')[1].href = document.getElementsByTagName('link')[1].href.replace(".css", "_" + resolution_prefix + ".css");
                document.getElementsByTagName('body')[0].style.fontFamily = "Arial";
                $_("top").style.fontSize = "17px";
                $_("remotesrc").style.width = css_w(24) + "px";
                $_("statbar").style.top = css_wh(692) + "px";
                mag_dop_top = "padding-top:3px;"
            } else if (uaJ == "pa") {}
            kjtYpr.series = "";
            if ((typeof loader_p == "undefined") && (platform == "android-device" || box_client == "tForkPlayer2.57i")) {
                document.getElementsByTagName('link')[0].href = img_dir.replace("/img", "/css") + "/main.css?v=23" + Math.random();
                document.getElementsByTagName('link')[1].href = img_dir.replace("/img", "/css") + "/player.css?v=23" + Math.random()
            }
            if (platform == "sams") {
                try {
                    var fileSystemObj = new FileSystem();
                    var bValid = fileSystemObj.isValidCommonPath(curWidget.id);
                    if (!bValid) {
                        fileSystemObj.createCommonDir(curWidget.id)
                    }
                } catch (e) {}
                try {
                    kjtYpr.hardware = document.getElementById("pluginTV").GetProductCode(1)
                } catch (e) {
                    kjtYpr.hardware = ""
                }
                kjtYpr.mac = document.getElementById("pluginNetwork").GetMAC(1);
                kjtYpr.series = (kjtYpr.hardware.replace("BD-", "").indexOf("D") != -1 || kjtYpr.hardware.indexOf("BD-E5") != -1) ? "D" : kjtYpr.series;
                model = "samsapi";
                kjtYpr.series = (kjtYpr.hardware.indexOf("C") != -1) ? "C" : kjtYpr.series;
                kjtYpr.series = (kjtYpr.hardware.indexOf("E") != -1) ? "E" : kjtYpr.series;
                try {
                    kjtYpr.serial = webapis.tv.info.getDeviceID()
                } catch (e) {
                    kjtYpr.serial = kjtYpr.mac
                }
                widgetAPI.sendReadyEvent();
                pluginAPI.unregistKey(tvKey.KEY_VOL_UP);
                pluginAPI.unregistKey(tvKey.KEY_VOL_DOWN);
                pluginAPI.unregistKey(tvKey.KEY_MUTE);
                var c = document.getElementById('pluginObjectNNavi');
                if (c) {
                    c.SetBannerState(PL_NNAVI_STATE_BANNER_VOL)
                }
                window.onShow = kjtYpr.onShowEventTVKey
            } else if (platform == "tizen") {
                try {
                    kjtYpr.mac = webapis.network.getMac();
                    kjtYpr.mac = kjtYpr.mac.toString().replace(/:/g, "").toLowerCase();
                    model = "tizenapi"
                } catch (e) {
                    kjtYpr.mac = undefined
                }
                try {
                    kjtYpr.hardware = webapis.productinfo.getModel();
                    kjtYpr.serial = webapis.productinfo.getDuid()
                } catch (e) {
                    kjtYpr.hardware = "undefined"
                }
                if (kjtYpr.mac == undefined || kjtYpr.mac == "") {
                    try {
                        model = "tizenapi2";
                        kjtYpr.mac = cpmac;
                        kjtYpr.mac = kjtYpr.mac.toString().replace(/:/g, "").toLowerCase();
                        kjtYpr.hardware = cphardware;
                        kjtYpr.serial = cpserial
                    } catch (e) {
                        kjtYpr.mac = undefined
                    }
                }
                if (kjtYpr.mac == "") kjtYpr.mac = undefined;
                supportStorage = !0;
                try {
                    tizen.tvinputdevice.registerKey("0");
                    tizen.tvinputdevice.registerKey("1");
                    tizen.tvinputdevice.registerKey("2");
                    tizen.tvinputdevice.registerKey("3");
                    tizen.tvinputdevice.registerKey("4");
                    tizen.tvinputdevice.registerKey("5");
                    tizen.tvinputdevice.registerKey("6");
                    tizen.tvinputdevice.registerKey("7");
                    tizen.tvinputdevice.registerKey("8");
                    tizen.tvinputdevice.registerKey("9");
                    tizen.tvinputdevice.registerKey("ColorF0Red");
                    tizen.tvinputdevice.registerKey("ColorF1Green");
                    tizen.tvinputdevice.registerKey("ColorF2Yellow");
                    tizen.tvinputdevice.registerKey("ColorF3Blue");
                    tizen.tvinputdevice.registerKey("MediaPlay");
                    tizen.tvinputdevice.registerKey("MediaStop");
                    tizen.tvinputdevice.registerKey("MediaPause");
                    tizen.tvinputdevice.registerKey("MediaRewind");
                    tizen.tvinputdevice.registerKey("MediaFastForward");
                    tizen.tvinputdevice.registerKey("MediaRecord");
                    tizen.tvinputdevice.registerKey("MediaPlayPause");
                    tizen.tvinputdevice.registerKey("ChannelList");
                    tizen.tvinputdevice.registerKey("ChannelUp");
                    tizen.tvinputdevice.registerKey("ChannelDown");
                    tizen.tvinputdevice.registerKey("PreviousChannel");
                    tizen.tvinputdevice.registerKey("Info")
                } catch (e) {
                    if (box_client == "tForkPlayer2.57m") kjtYpr.popUp(e.message)
                }
            } else if (uaJ == "dune") {
                try {
                    kjtYpr.mac = stb.getSerialNumber();
                    kjtYpr.mac = kjtYpr.mac.toString().replace(/-/g, "");
                    kjtYpr.mac = kjtYpr.mac.replace(/0000/g, "");
                    kjtYpr.serial = kjtYpr.mac;
                    if (kjtYpr.mac.length > 12) kjtYpr.mac = kjtYpr.mac.substr(kjtYpr.mac.length - 12);
                    kjtYpr.hardware = stb.getProductId() + "-" + stb.getApiVersion();
                    model = "duneapi"
                } catch (e) {}
                if (typeof kjtYpr.hardware == "undefined") kjtYpr.hardware = "DUNE";
                kjtYpr.lIllOVRj11lO10Ypr("test", "1");
                if (kjtYpr.lIlOOIIlIEIzH1l1OIYpr("test") == "1") supportStorage = !0;
                else supportStorage = !1
            } else if (uaJ == "mag") {
                try {
                    kjtYpr.mac = stb.GetDeviceMacAddress();
                    kjtYpr.mac = kjtYpr.mac.toString().replace(/:/g, "");
                    kjtYpr.serial = stb.GetDeviceSerialNumber();
                    kjtYpr.hardware = stb.GetDeviceModel();
                    model = "magapi"
                } catch (e) {}
                if (typeof kjtYpr.hardware == "undefined") kjtYpr.hardware = "MAG";
                kjtYpr.lIllOVRj11lO10Ypr("test", "1");
                if (kjtYpr.lIlOOIIlIEIzH1l1OIYpr("test") == "1") supportStorage = !0;
                else supportStorage = !1
            } else if (uaJ == "spark") {
                try {
                    kjtYpr.mac = __spark_stbid__;
                    kjtYpr.hardware = __model__ + "/" + __appVersion__;
                    kjtYpr.mac = kjtYpr.mac.toLowerCase();
                    model = "sparkapi"
                } catch (e) {}
                if (typeof kjtYpr.hardware == "undefined") kjtYpr.hardware = "SPARK";
                kjtYpr.lIllOVRj11lO10Ypr("test", "1");
                if (kjtYpr.lIlOOIIlIEIzH1l1OIYpr("test") == "1") supportStorage = !0;
                else supportStorage = !1
            } else if (platform == "android-device") {
                try {
                    var s = andr.cmd("initial");
                    kjtYpr.signature = s;
                    kjtYpr.mac = s.split("|")[0];
                    kjtYpr.serial = s.split("|")[1];
                    kjtYpr.hardware = s.split("|")[2];
                    kjtYpr.build = s.split("|")[4];
                    if (kjtYpr.build > 4.6) {
                        model = "androidapi";
                        kjtYpr.mac = s.split("|")[7];
                        if (kjtYpr.mac.length == 15) kjtYpr.mac = "z" + kjtYpr.mac;
                        if (kjtYpr.mac.length != 16) kjtYpr.mac = "";
                        kjtYpr.serial = kjtYpr.mac
                    } else {
                        kjtYpr.mac = "";
                        kjtYpr.serial = ""
                    }
                    if (s.split("|")[8] == "True") kjtYpr.rooted = !0;
                    else kjtYpr.rooted = !1
                } catch (e) {}
            } else {
                try {
                    if (kjtYpr.mac == undefined) {
                        kjtYpr.mac = $_("device").net_macAddress;
                        kjtYpr.mac = kjtYpr.mac.toString().replace(/:/g, "");
                        model = "lgapi"
                    }
                } catch (e) {}
                try {
                    if (model == "lgusb") {}
                    if (document.location.href.indexOf("sonynostorage") > 0) {
                        supportStorage = !1
                    } else {
                        kjtYpr.lIllOVRj11lO10Ypr("test", "1");
                        if (kjtYpr.lIlOOIIlIEIzH1l1OIYpr("test") == "1") supportStorage = !0;
                        else supportStorage = !1
                    }
                    if (tFlp == "LG") {
                        kjtYpr.hardware = "pc"
                    } else if (tFlp == "sony") {
                        var t = navigator.userAgent.match(/Model\/([\S]+)/);
                        kjtYpr.hardware = t[1]
                    } else if (tFlp == "lg") {
                        kjtYpr.hardware = $_("device").modelName;
                        if (ua.match(/webappmanager/) && (kjtYpr.hardware.indexOf("LF") > 0 || kjtYpr.hardware.indexOf("UF") > 0)) uaJ = "lgw2"
                    } else kjtYpr.hardware = tFlp;
                    kjtYpr.series = (kjtYpr.hardware.indexOf("Media") != -1 || kjtYpr.hardware.indexOf("LS") != -1 || kjtYpr.hardware.indexOf("LW") != -1 || kjtYpr.hardware.indexOf("LV") != -1 || kjtYpr.hardware.indexOf("LM") != -1 || kjtYpr.hardware.indexOf("PA") != -1 || kjtYpr.hardware.indexOf("PM") != -1) ? "LW" : kjtYpr.series;
                    kjtYpr.series = (kjtYpr.hardware.indexOf("LB") != -1) ? "LB" : kjtYpr.series;
                    if (kjtYpr.hardware.indexOf("LX") > 0) kjtYpr.series = "LW"
                } catch (e) {}
                if (lg_model != "") kjtYpr.hardware = lg_model + "_webOS";
                try {
                    if (kjtYpr.serial == undefined) {
                        kjtYpr.serial = $_("device").serialNumber;
                        kjtYpr.serial = kjtYpr.serial.toString().replace(/:/g, "")
                    }
                } catch (e) {
                    kjtYpr.serial = "nonundefined"
                }
                if (document.location.href.indexOf("obovse.ru") == -1 && kjtYpr.mac != undefined && typeof loader_p == "undefined") {
                    kjtYpr.inf("_FPOpredelenieDns_...");
                    document.location = "http://obovse.ru/ForkPlayer2.5/index.html";
                    return
                }
            }
        }
        if (platform == "android-device" && kjtYpr.build >= 5.2) {
            exPl = ["html5", "media", "vimu", "manual", "jw"];
            exPlV = ["html5", "media", "vimu", "manual", "jw"]
        } else if (platform == "tizen") {
            exPl = ["html5", "tizen", "jw"];
            exPlV = ["html5", "tizen", "jw"]
        } else {
            exPl = ["html5", "media", "ifrhtml5", "jw"];
            exPlV = ["html5", "media", "ifrhtml5", "jw"]
        }
        pqrs();
        if (tmac.indexOf(kjtYpr.mac) > 0) {
            kjtYpr.lIllOVRj11lO10Ypr("rek", "");
            kjtYpr.lIllOVRj11lO10Ypr("xr", "");
            rek_url = "rek_on";
            ttmac = !0;
            startPay = 1
        }
        if (document.location.href.indexOf("operatv.obovse.ru") > 0) model = "operatv" + model;
        if (kjtYpr.lIlOOIIlIEIzH1l1OIYprC("ts") == "2" || kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ts") == "2") {
            try {
                setTimeout('kjtYpr.popUp("Внимание! В настройках отключено хранение данных, все настройки и закладки будут сохранятся до перезапуска ForkPlayer!", 2500);', 4000)
            } catch (e) {}
        }
        try {
            kjtYpr.inf("_FPSchitivanieNastroek_..", 60500);
            kjtYpr.GL = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("settings"));
            if (typeof kjtYpr.GL == "undefined") kjtYpr.setDefault();
            if (kjtYpr.GL == null) kjtYpr.setDefault();
            if (typeof kjtYpr.GL.JTVRegion == "undefined") kjtYpr.setDefault();
            if (typeof kjtYpr.GL.audioplayer == "undefined") kjtYpr.GL.audioplayer = 1;
            if (typeof kjtYpr.GL.scrsaver == "undefined") kjtYpr.GL.scrsaver = 1;
            if (typeof kjtYpr.GL.fon == "undefined") kjtYpr.GL.fon = 1;
            if (typeof kjtYpr.GL.mylist == "undefined") kjtYpr.GL.mylist = "";
            if (typeof kjtYpr.GL.remote == "undefined") kjtYpr.GL.remote = 0;
            if (typeof kjtYpr.GL.clear == "undefined") kjtYpr.GL.clear = 0;
            if (typeof kjtYpr.GL.xmode == "undefined") kjtYpr.GL.xmode = 0;
            if (typeof kjtYpr.GL.country == "undefined") kjtYpr.GL.country = 0;
            if (typeof kjtYpr.GL.streamplayer == "undefined") kjtYpr.GL.streamplayer = kjtYpr.GL.player;
            if (typeof kjtYpr.GL.Pw == "undefined") kjtYpr.GL.Pw = 100;
            if (typeof kjtYpr.GL.Ph == "undefined") kjtYpr.GL.Ph = 100;
            if (typeof kjtYpr.GL.buffer == "undefined") kjtYpr.GL.buffer = 2;
            if (typeof kjtYpr.GL.remoteip == "undefined") kjtYpr.GL.remoteip = "";
            if (typeof kjtYpr.GL.lang == "undefined") kjtYpr.GL.lang = "ru";
            if (typeof kjtYpr.GL.ibuffer == "undefined") kjtYpr.GL.ibuffer = 15;
            if (typeof kjtYpr.GL.pr == "undefined" || kjtYpr.GL.pr == null) kjtYpr.GL.pr = 50;
            if (typeof kjtYpr.GL.vk_code == "undefined") kjtYpr.GL.vk_code = "";
            if (typeof kjtYpr.GL.vk_id == "undefined") kjtYpr.GL.vk_id = "";
            if (typeof kjtYpr.GL.sortiptv == "undefined") kjtYpr.GL.sortiptv = 1;
            if (typeof kjtYpr.GL.fs == "undefined" || kjtYpr.GL.fs == "") kjtYpr.GL.fs = "1";
            if (typeof kjtYpr.GL.ts == "undefined" || kjtYpr.GL.ts == "") kjtYpr.GL.ts = 0;
            if (typeof kjtYpr.GL.timeoutiptv == "undefined" || kjtYpr.GL.timeoutiptv == "") kjtYpr.GL.timeoutiptv = 20;
            if (typeof kjtYpr.GL.rate == "undefined") kjtYpr.GL.rate = 0;
            if (typeof kjtYpr.GL.snow == "undefined") kjtYpr.GL.snow = 1;
            if (typeof kjtYpr.GL.livesearch == "undefined") kjtYpr.GL.livesearch = 0;
            if (typeof kjtYpr.GL.serv == "undefined" || timestamp < 0) kjtYpr.GL.serv = 0;
            if (typeof kjtYpr.GL.weather == "undefined") kjtYpr.GL.weather = "";
            if (typeof kjtYpr.GL.acestream == "undefined") kjtYpr.GL.acestream = "";
            if (typeof kjtYpr.GL.sidebar == "undefined") kjtYpr.GL.sidebar = "";
            if (typeof kjtYpr.GL.font == "undefined") kjtYpr.GL.font = "";
            if (typeof kjtYpr.GL["return"] == "undefined") kjtYpr.GL["return"] = 0;
            if (typeof kjtYpr.GL.adult == "undefined") kjtYpr.GL.adult = 0;
            if (typeof kjtYpr.GL.headers == "undefined") kjtYpr.GL.headers = 1;
            if (typeof kjtYpr.GL.third == "undefined") {
                kjtYpr.GL.third = 0
            }
            if (typeof kjtYpr.GL.time == "undefined") kjtYpr.GL.time = 0;
            if (typeof kjtYpr.GL.proxy == "undefined") kjtYpr.GL.proxy = 0;
            if (typeof kjtYpr.GL.udp == "undefined") kjtYpr.GL.udp = "";
            if (kjtYpr.GL.JTVRegion == "") kjtYpr.setDefault();
            if (kjtYpr.GL.audioplayer == "") kjtYpr.GL.audioplayer = 1;
            if (kjtYpr.GL.scrsaver == "") kjtYpr.GL.scrsaver = 1;
            if (kjtYpr.GL.fon == "") kjtYpr.GL.fon = 1;
            if (kjtYpr.GL.remote == "") kjtYpr.GL.remote = 0;
            if (kjtYpr.GL.country == "") kjtYpr.GL.country = 0;
            if (kjtYpr.GL.headers == "") kjtYpr.GL.headers = 1;
            if (kjtYpr.GL.streamplayer == "") kjtYpr.GL.streamplayer = kjtYpr.GL.player;
            if (kjtYpr.GL.buffer == "") kjtYpr.GL.buffer = 2;
            if (kjtYpr.GL.lang == "") kjtYpr.GL.lang = "ru";
            if (kjtYpr.GL.pr == "" || kjtYpr.GL.pr == null) kjtYpr.GL.pr = 50;
            if (kjtYpr.GL.vk_code == "") kjtYpr.GL.vk_code = "";
            if (kjtYpr.GL.vk_id == "") kjtYpr.GL.vk_id = "";
            if (kjtYpr.GL.sortiptv == "" || isNaN(kjtYpr.GL.sortiptv)) kjtYpr.GL.sortiptv = 0;
            if (kjtYpr.GL.pip == "") kjtYpr.GL.pip = 0;
            if (kjtYpr.GL.fs == "") kjtYpr.GL.fs = "1";
            if (kjtYpr.GL.ts == "") kjtYpr.GL.ts = 0;
            if (kjtYpr.GL.rate == "") kjtYpr.GL.rate = 0;
            if (kjtYpr.GL.snow == "") kjtYpr.GL.snow = 1;
            if (kjtYpr.GL.serv == "") kjtYpr.GL.serv = 0;
            if (kjtYpr.GL.livesearch == "") kjtYpr.GL.livesearch = 0;
            if (kjtYpr.GL.timeoutiptv == "") kjtYpr.GL.timeoutiptv = 20;
            if (kjtYpr.GL.sidebar == "") kjtYpr.GL.sidebar = 0;
            if (kjtYpr.GL["return"] == "") kjtYpr.GL["return"] = 0;
            if (kjtYpr.GL.adult == "") kjtYpr.GL.adult = 0;
            if (kjtYpr.GL.third == "") {
                kjtYpr.GL.third = 0
            }
            if (kjtYpr.GL.time == "") kjtYpr.GL.time = 0;
            if (kjtYpr.GL.proxy == "") kjtYpr.GL.proxy = 0
        } catch (e) {
            kjtYpr.inf(e.message + "<br>Set Default setttings", 60500);
            kjtYpr.setDefault();
            kjtYpr.popUp(e.message + "<br>Set Default setttings", 3000)
        }
        if (kjtYpr.mac == "1c5a3e4265db") {
            kjtYpr.setDefault();
            kjtYpr.GL.third = 0
        }
        kjtYpr.GL.Pw = parseInt(kjtYpr.GL.Pw);
        kjtYpr.GL.Ph = parseInt(kjtYpr.GL.Ph);
        if (kjtYpr.GL.ts == 0 && (kjtYpr.lIlOOIIlIEIzH1l1OIYprC("ts") == "1" || kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ts") == "1")) kjtYpr.GL.ts = 1;
        if (typeof loader_orig != "undefined")
            if (loader_orig == "lg_webos_ide") kjtYpr.GL.ts = 1;
        if (kjtYpr.GL.quality > 4) kjtYpr.GL.quality = 0;
        if (kjtYpr.GL.ts == 1 && gm != "sync") {
            loadinfo("_FPZagruzka_ _FPdata from server_...");
            autoimport();
            return
        }
        upstyles();
        kjtYpr.inf("");
        lO1lOlJvks1II11Ypr = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("storage"));
        if (lO1lOlJvks1II11Ypr == null) lO1lOlJvks1II11Ypr = {};
        updateLoginData(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("lastdata"));
        updateLogin();
        if (kjtYpr.lIlOOIIlIEIzH1l1OIYprC("ts") > 1 || kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ts") > 1 || kjtYpr.GL.ts > 1) kjtYpr.GL.ts = 0;
        if (typeof kjtYpr.hardware != "undefined") {
            var t = kjtYpr.hardware.match(/\d+/);
            if (t != null) kjtYpr.diag = t[0];
            else kjtYpr.diag = ""
        }
        if (kjtYpr.diag < 22 || kjtYpr.diag > 90) kjtYpr.diag = "";
        initmain();
        if (ext_player) startPay = 0;
        if (startPay == 1) {
            kjtYpr.popUp2("<span style='font-size:" + css_wh(18) + "px'><img onclick=\"startPay=2;keyHandler({'keycode':99999});\" width='35' height='35' style='float:right;' src='" + _img("_OI_insetClose.png") + "' >" + "<img width='" + css_w(55) + "' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + " &#8226; Для перехода на сайт введите в <img width=17 alt='+' src='" + _img("_OT_plus__200x200.png") + "' /> URL адрес поддерживаемого приложением сайта или FXML/XML/M3U<br>" + " &#8226; Или введите Поисковый запрос в <img width=19 alt='+' src='" + _img("_OT_search_200x200.png") + "' />, адрес поисковика можно указать в настройках / Поисковая система.<br>" + " &#8226; Все сайты и адреса которые Вы открываете в ForkPlayer являются сторонними и отображаются и работают в виде как есть!<br>" + "");
            setTimeout("startPay=2;", 1200)
        }
        kjtYpr.lOlIOOWs1uO000lYpr();
        if (kjtYpr.GL.font != "") document.getElementsByTagName('body')[0].style.fontFamily = f_font[kjtYpr.GL.font];
        if ($_("video") != null) $_("video").style.zIndex = "0";
        if ($_("jw") != null) $_("jw").style.zIndex = "0";
        else initdiv();
        if ((kjtYpr.mac == "020000000000" || kjtYpr.mac == "112233445566" || kjtYpr.mac == "000000000000")) {
            kjtYpr.mac = ""
        }
        if (kjtYpr.build < 4.7 && (platform == "android-device")) kjtYpr.mac = "";
        if (kjtYpr.build < 5.1 && (platform == "android-device")) {
            if (Math.random() > 0.7) ll0111l1wxUIOlO1lYpr(5, "Доступна новая версия aForkPlayer v2.03!<br>Добавлены ace stream (*torrent) сайты<br>Или скачайте и установите файл http://obovse.ru/aForkPlayer.apk", "Скачать сейчас|_FPOtmena_")
        }
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("hm");
        if (s == "") s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("hm");
        if (s.indexOf(kjtYpr.mac) == -1) {
            s += kjtYpr.mac + ";";
            kjtYpr.lIllOVRj11lO10YprC("hm", s);
            kjtYpr.lIllOVRj11lO10Ypr("hm", s)
        }
        kjtYpr.hm = s;
        loadxmltv()
    } catch (e) {
        kjtYpr.popUp("Error load: " + e.message)
    }
};
var uWt;

function updateWeather() {
    clearTimeout(uWt);
    uWt = setTimeout("updateWeather();", 2000000);
    if (kjtYpr.GL.weather == -1) {
        $_("weather").style.display = "none";
        return
    }
    var xhrb = new XMLHttpRequest();
    xhrb.onreadystatechange = function () {
        if (xhrb.readyState == 4) {
            l0I1l0lO0lsnG1I1QlYpr();
            xmlDoc = xhrb.responseText;
            if (xmlDoc == null) xmlDoc = "";
            $_("weather").style.display = "block";
            lO10OIOlxzlO100OIYpr("weather", xmlDoc);
            xhrb = null
        }
    };
    // xhrb.open('GET', "http://" + ServerFromList + "/smarttv/api.php?do=weather&resolution_prefix=" + resolution_prefix + "&box_low2=" + box_low2 + "&id=" + kjtYpr.GL.weather, !0);
    // xhrb.send()
}
var np_timer, np_timer_start = 0,
    chfon = 0;

function np_d(code) {
    np_timer_start++;
    keyHandler({
        'keycode': code
    });
    var tm = 500 - np_timer_start * 80;
    if (tm < 50) tm = 50;
    np_timer = setTimeout("np_d(" + code + ");", tm)
}

function np_u(code) {
    clearTimeout(np_timer)
}

function setfon(m, mini) {
    if (showfon && kjtYpr.GL.pr > 0 && !FgetSetting(12)) {
        if (kjtYpr.series != "D" && kjtYpr.series != "C" && kjtYpr.series != "LW" && uaJ != "dune")
            var bim = "url(" + _img("_OI_pr_" + kjtYpr.GL.pr + ".png") + ")";
        else bim = "";
        if (gV(kjtYpr.global, "background-image") != "") {
            if (mini) {
                $_("pr").style.background = bim;
                $_("bcg1").style.display = "block";
                $_("bcg1").style.backgroundImage = "url(" + kjtYpr.global["background-image"] + ")";
                $_("bcg2").style.display = "block";
                $_("bcg2").style.backgroundImage = "url(" + kjtYpr.global["background-image"] + ")"
            } else $_("pr").style.background = bim + ",url(" + kjtYpr.global["background-image"] + ") 0px " + css_wh(83) + "px repeat-x"
        } else {
            $_("pr").style.background = bim
        }
        if (m) return;
        if (typeof fons[kjtYpr.GL.fon] == "undefined") kjtYpr.GL.fon = 19;
        if (!box_low) {
            var u = fons[kjtYpr.GL.fon].url;
            if (u == "jpg" || u == "png") {
                u = addident("http://forkplayer.tv/xml/account.php?do=fon&ext=" + u)
            }
            if (u.indexOf("http") == -1) u = "_OI_" + u;
            if (mini) {
                $_("main").style.background = "none";
                if (gV(kjtYpr.global, "background-image") == "") {
                    $_("bcg1").style.display = "block";
                    $_("bcg1").style.backgroundImage = "url(" + _img(u) + ")";
                    $_("bcg2").style.display = "block";
                    $_("bcg2").style.backgroundImage = "url(" + _img(u) + ")"
                }
            } else {
                $_("main").style.backgroundImage = "url(" + _img(u) + ")";
                $_("main").style.backgroundSize = "cover"
            }
        }
    } else if (platform == "sams") {
        $_("main").style.background = "none";
        $_("pr").style.background = "none"
    } else {
        $_("main").style.background = "none black";
        $_("pr").style.background = "none"
    }
}

function onShowEvent() {
    var nnaviPlugin = document.getElementById('pluginObjectNNavi');
    nnaviPlugin.SetBannerState(1);
    pluginAPI.unregistKey(tvKey.KEY_VOL_UP);
    pluginAPI.unregistKey(tvKey.KEY_VOL_DOWN);
    pluginAPI.unregistKey(tvKey.KEY_MUTE)
};
kjtYpr.onShowEventTVKey = function () {
    pluginAPI.setOffScreenSaver();
    pluginAPI.setOffIdleEvent();
    pluginAPI.unregistKey(tvKey.KEY_VOL_UP);
    pluginAPI.unregistKey(tvKey.KEY_VOL_DOWN);
    pluginAPI.unregistKey(tvKey.KEY_MUTE);
    pluginAPI.registKey(tvKey.KEY_GUIDE);
    pluginAPI.registKey(tvKey.KEY_SOURCE);
    pluginAPI.unregistKey(203);
    pluginAPI.unregistKey(204);
    pluginAPI.registKey(613);
    pluginAPI.registKey(105);
    pluginAPI.registKey(106);
    pluginAPI.registKey(309);
    pluginAPI.registKey(612);
    pluginAPI.registKey(1118);
    pluginAPI.registKey(1219);
    pluginAPI.registKey(84);
    pluginAPI.registKey(655);
    pluginAPI.registKey(1089);
    pluginAPI.registKey(1057);
    pluginAPI.registKey(1083);
    pluginAPI.registKey(1078);
    pluginAPI.registKey(1080);
    pluginAPI.registKey(1086);
    pluginAPI.registKey(78);
    pluginAPI.registKey(1249)
};
curWidget.onWidgetEvent = function () {
    kjtYpr.onShowEventTVKey()
};
var inset = {};
var lO00Oll1CKJll11Ypr = 12;
for (var i = 0; i < lO00Oll1CKJll11Ypr; i++) inset["tab" + i] = null;
var insetActive = 0;
var lastInset = 0;
var l1OIOvnWuZI0lO0Ypr = 0;
var lOI10QpJAilIIIYpr = 0;

function listInset() {
    try {
        if (l1OIOvnWuZI0lO0Ypr < 0) l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr + 3;
        else if (l1OIOvnWuZI0lO0Ypr > lOI10QpJAilIIIYpr + 3) l1OIOvnWuZI0lO0Ypr = 0;
        for (var i = 0; i < lOI10QpJAilIIIYpr + 4; i++) {
            if ($_("inset" + i) != null) {
                if (i == insetActive) {
                    var iB = "#b0b0b0";
                    var iC = "#000000"
                } else {
                    iB = "#547183";
                    var iC = "#eeeeee"
                }
                if (getSelect() == -1 && l1OIOvnWuZI0lO0Ypr == i) {
                    var iB = "#ffffff";
                    var iC = "#000000"
                }
                if (i >= lOI10QpJAilIIIYpr) {
                    if (i == l1OIOvnWuZI0lO0Ypr) iB = "#f3f3f3";
                    else iB = "#b0b0b0"
                }
                $_("inset" + i).style.backgroundColor = iB;
                $_("inset" + i).style.color = iC
            }
        }
    } catch (e) {
        kjtYpr.popUp("Inset err: " + e.message, 1800)
    }
}
kjtYpr.lII1O1LQIDl10IlOYpr = function () {
    try {
        if (FgetSetting(6)) {
            lO10OIOlxzlO100OIYpr("inset", "");
            return
        }
        var html = "",
            insetPlus = "",
            insetRet = "";
        if (lOI10QpJAilIIIYpr < 1) lOI10QpJAilIIIYpr = 1;
        insetW = css_w(Math.ceil((765 - 49) / lOI10QpJAilIIIYpr)) - 1;
        var lastInsetW = css_w(765 - 49) - (insetW * lOI10QpJAilIIIYpr + lOI10QpJAilIIIYpr);
        if (lOI10QpJAilIIIYpr < 3) {
            lastInsetW = 0;
            insetW = css_w(300)
        }
        insetActive = parseInt(insetActive);
        if (l1OIOvnWuZI0lO0Ypr < 0) l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr + 3;
        if (l1OIOvnWuZI0lO0Ypr > lOI10QpJAilIIIYpr + 3) l1OIOvnWuZI0lO0Ypr = 0;
        for (var i = 0; i < lOI10QpJAilIIIYpr; i++) {
            if (inset["tab" + i] != null && inset["tab" + i].length > 0) {
                var ttl = inset["tab" + i][inset["tab" + i].length - 1];
                var title = ttl.title.replace(/<.*?>/g, "");
                var image = gV(ttl, "img");
                if (l1IOIIz1l0Ol110Ypr(ttl.url)) {
                    image = "none";
                    title = "_FPDobroPozhalovat_"
                } else if (image == "") {
                    for (var j = inset["tab" + i].length - 2; j >= 0; j--) {
                        if (l1IOIIz1l0Ol110Ypr(inset["tab" + i][j].url)) break;
                        if (inset["tab" + i][j].img != "") {
                            image = gV(inset["tab" + i][j], "img");
                            break
                        }
                    }
                }
                if (image.indexOf("img/1px.png") >= 0 || image == "") image = "none";
                else if (image == "open.png") image = "_OI_open.png";
                if (typeof ttl_img != "undefined") {
                    ttl_img = _img(ttl_img)
                }
                title = title.replace(/'/g, "").replace(/\[\d+=/g, "[");
                if (insetIn(-1, "get", "b", null, i) == "1") title = "*" + title;
                if (i == lOI10QpJAilIIIYpr - 1) insetW += lastInsetW;
                if (i == insetActive) {
                    kjtYpr.XML_TITLE = title;
                    kjtYpr.XML_IMG = _img(image);
                    var closetext = "onmousemove=\"$_('closeimg').style.backgroundColor='#b7b2b2';if(getSelect()!=-1&&handler=='menu') {setSelect(-1);linkOver();}\" onmouseout=\"$_('closeimg').style.backgroundColor='';\" ";
                    var dopsel = "<img id='closeimg' src='" + _img("_OT_page_close.png?ndate181128_") + "' style='padding:2px;border-radius:" + css_wh(14) + "px;width:" + css_w(24) + "px;height:" + css_wh(24) + "px;float:right;";
                    if (getSelect() == -1) dopsel += "background-color:#b7b2b2;";
                    dopsel += "'>"
                } else {
                    closetext = "";
                    dopsel = ""
                }
                if (FgetSetting(12) || FgetSetting(5)) {
                    html += "<div id='inset" + i + "' title='" + title + "' style='overflow: hidden;float:left;padding:2px 0px 0px 2px;margin:0px;border-right: 1px solid #1f1f1f;" + "width:" + insetW + "px;'>" + title + "</div>"
                } else {
                    if (FgetSetting(1)) closetext = "";
                    else closetext += "onmousedown='setSelect(-1);l1OIOvnWuZI0lO0Ypr=" + i + ";p_d();' " + "onmouseup='setSelect(-1);l1OIOvnWuZI0lO0Ypr=" + i + ";p_u();' " + "onclick=\"if(!kjtYpr.long_left) {l1OIOvnWuZI0lO0Ypr=" + i + ";kjtYpr.PlayInset();} kjtYpr.long_left=false;\" ";
                    html += "<div id='inset" + i + "' title='" + title + "' " + closetext + "style='" + FgetSetting(3, ["opacity:0.7;", ""]) + "float:left;padding-top:2px;margin:0px;border-right: 1px solid #1f1f1f;height:100%;" + "width:" + insetW + "px;'>";
                    var wt = insetW - css_w(7);
                    if (image != "none" && !FgetSetting(11)) {
                        html += "<img id='imginset" + i + "' width='" + css_w(30) + "' height='" + css_wh(28) + "' style='padding-left:4px;padding-left:" + css_w(4) + "px;' " + "onerror=\"this.onerror=null;this.style.display='none';\" src='" + _img(image) + "' />";
                        wt -= css_w(34)
                    }
                    if (!FgetSetting(11)) html += dopsel;
                    if (i == insetActive && !FgetSetting(11)) wt -= css_w(25);
                    html += "<div style='overflow: hidden;width:" + wt + "px;background-color:transparent;margin-left:" + css_w(3) + "px;margin-right:2px;    word-break: break-all;'>" + title + "</div>" + "</div>"
                }
            }
        }
        var numins = lOI10QpJAilIIIYpr,
            insetPlus = "";
        var ns = ["page_plus.png", "page_fav_off.png", "page_return.png", "page_menu.png"];
        if (lOI10QpJAilIIIYpr >= lO00Oll1CKJll11Ypr) ns[0] = "page_plus_off.png";
        if (!FgetSetting(12)) {
            if (llII11IIxmIfhlOllOOYpr(insetIn(-1, "get", "url"))) ns[1] = "page_fav_on.png"
        }
        for (var k = 0; k < ns.length; k++) {
            var impl = _img("_OT_" + ns[k] + "?ndate181128_");
            if (FgetSetting(1)) var tdop = "";
            else tdop = ' onmouseout="this.style.backgroundColor=\'#b0b0b0\';" onmousemove="if(getSelect()!=-1&&handler==\'menu\') {setSelect(-1);linkOver();}this.style.backgroundColor=\'#f3f3f3\';" onclick="l1OIOvnWuZI0lO0Ypr=' + numins + ';kjtYpr.PlayInset();"';
            var t = '<div id="inset' + (lOI10QpJAilIIIYpr + k) + '"' + tdop + ' style="border-radius:' + css_wh(4) + 'px;margin-left: 2px;text-align:center;';
            if (k == 0) t += 'float:left;';
            else t += 'float:right;';
            t += 'height: ' + css_wh(26) + 'px; width: ' + css_w(27) + 'px; margin-top: ' + css_wh(3) + 'px;">';
            if (k == 3) {
                if (user != null) {
                    if (gV(timestamp) < 1)
                        t += '<div id="butacc" style="position:absolute;border-left: ' + css_w(9) + 'px solid transparent;    border-right: ' + css_w(9) + 'px solid transparent;    border-bottom: ' + css_w(13) + 'px solid orange;margin: ' + css_w(11) + 'px 0px 0px ' + css_w(7) + 'px; overflow: hidden;text-align: center;"></div><span style="position: absolute; font-size: ' + css_wh(11) + 'px;   padding-top: ' + css_w(13) + 'px; padding-left: 1px;}">i</span>';
                    else t += '<div id="butacc" style="position:absolute;position: absolute; width: ' + css_w(14) + 'px; height: ' + css_wh(14) + 'px; margin: ' + css_wh(12) + 'px 0px 0px ' + css_w(13) + 'px; background-color: #e8543c; font-size: ' + css_wh(11) + 'px;overflow: hidden;text-align: center;border-radius: ' + css_w(7) + 'px;">' + user.login.substr(0, 1) + '</div>'
                } else {
                    t += '<div id="butacc" style="position:absolute;position: absolute; width: ' + css_w(14) + 'px; height: ' + css_wh(14) + 'px; margin: ' + css_wh(12) + 'px 0px 0px ' + css_w(13) + 'px; background-color: #b5bdc3; font-size: ' + css_wh(11) + 'px;overflow: hidden;text-align: center;border-radius: ' + css_w(7) + 'px;">x</div>'
                }
            }
            if (FgetSetting(5)) {
                t += '<span style="color:gray;">';
                if (k == 0) t += "+";
                if (k == 1) t += "&#9734;";
                if (k == 2) t += "&larr;";
                if (k == 3) t += "<b>|</b>";
                t += '</span>'
            } else t += '<img src="' + impl + '" height="' + css_wh(22) + '" width="' + css_w(22) + '" style="padding:2px;" />';
            t += '</div>';
            if (k == 0) insetPlus += t;
            else insetPlus = t + insetPlus;
            numins++
        }
        lO10OIOlxzlO100OIYpr("inset", html + insetPlus);
        if (getSelect() == -1) sidebar_sel()
    } catch (e) {}
};
var oldinset = null;
var insetSets = {};

function newInset(m) {
    if (lOI10QpJAilIIIYpr == lO00Oll1CKJll11Ypr) {
        kjtYpr.popUp("Уже открыто максимальное количество вкладок!", 2000);
        return
    }
    loadStep();
    breakScreen("about:blank");
    l1OIOvnWuZI0lO0Ypr = insetActive = lOI10QpJAilIIIYpr;
    lOI10QpJAilIIIYpr++;
    inset["tab" + insetActive] = [];
    inset["tabPriv" + insetActive] = m;
    ll1lIOiIO0lO1IIIYpr = Math.random();
    setTimeout("kjtYpr.l110l1lIPuoaO0I0IOYpr(kjtYpr.lllOlISKvIMOI11Ypr);", 300)
}
kjtYpr.PlayInset = function () {
    if (is_loadpage()) stopLoadPage();
    if (l1OIOvnWuZI0lO0Ypr == lOI10QpJAilIIIYpr + 1) {
        setSelect(-1);
        kjtYpr.l1l0l1OvIo1ll001lYpr("favmenu");
        return
    }
    if (l1OIOvnWuZI0lO0Ypr == lOI10QpJAilIIIYpr + 2) {
        tmf();
        return
    }
    if (l1OIOvnWuZI0lO0Ypr == lOI10QpJAilIIIYpr + 3) {
        setSelect(-1);
        kjtYpr.l1l0l1OvIo1ll001lYpr("topmenu");
        return
    }
    if ($_("ext").style.display == "block") $_("ext").style.display = "none";
    if (is_ifr()) return;
    if ($_("vk").style.display != "none") {
        $_("vk").style.display = "none";
        handler = "menu"
    }
    chGroupSel = 0;
    if (l1OIOvnWuZI0lO0Ypr == lOI10QpJAilIIIYpr) {
        newInset(0)
    } else if (l1OIOvnWuZI0lO0Ypr != insetActive) {
        insetActive = l1OIOvnWuZI0lO0Ypr;
        kjtYpr.lII1O1LQIDl10IlOYpr();
        breakScreen();
        kjtYpr.channels = [];
        listInset();
        setTimeout("kjtYpr.lI11111bPNQ0III1Ypr(true);", 300)
    } else if (l1OIOvnWuZI0lO0Ypr == insetActive && lOI10QpJAilIIIYpr > 1) {
        if (insetIn(-1, "get", "b") == "1") {
            kjtYpr.popUp("_FPEtaVklBzabl_!<br>_FPDlRvIn_ _FPMenu_ / _FPRazblVkl_", 1500);
            return
        }
        ll0111l1wxUIOlO1lYpr(17, "_FPClose tab_?<br>" + kjtYpr.XML_TITLE)
    }
};

function loadStep(m) {
    if (m == null) {
        if (!xml_live || handler != "vk") $_("page_load").src = _img('_OT_page_stop.png?ndate181128_')
    }
}
var l10011l1zql0lI1OI0OYpr = null,
    toploading = 0,
    shn = 0;
kjtYpr.l1l1IOO0lvWaDIll1lIYpr = function (n, sendstat, xml_url) {
    if (sendstat && (n == -1 || n == 0)) sendStat(0, xml_url);
    toploading = n;
    clearTimeout(l10011l1zql0lI1OI0OYpr);
    if (n == null) {
        n = 1;
        shn = 1;
        if (!xml_live || handler != "vk") $_("page_load").src = _img('_OT_page_stop.png?ndate181128_')
    } else if (n == 0) {
        shn = 0;
        if (handler != "player") statusbar("off");
        $_('page_load').src = _img('_OT_page_reload.png?ndate181128_');
        return
    } else if (n == -1) {
        statusbar("off");
        if (kjtYpr.l11l101lxO_tl1IlIYpr != "") {
            kjtYpr.l11l101lxO_tl1IlIYpr = "";
            if (!xml_live) lO10OIOlxzlO100OIYpr("infoList", curCh("description"))
        }
        if (is_ifr()) {
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            return
        } else {
            if (typeof curCh() != "undefined" && !ttmac)
                if (curCh("stream_url") != "") kjtYpr.popUp("_FPHotiteIskatVdrugihMestah_?<br><i>_FPVospolzuites_ <span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPMenu_ -> _FPNaitiVglobPoiske_</i>", 1500)
        }
        if (!xml_live || handler != "vk") $_("page_load").src = _img('_OT_page_stop_red.png?ndate181128_');
        ll1lIOiIO0lO1IIIYpr = Math.random();
        kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
        setTimeout("kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);", 200);
        return
    }
    if (n == 0) kx = 0;
    else if (n == 1) kx = 6;
    else kx = Math.ceil(n * (css_w(1280) / 100));
    if (n == 100) l10011l1zql0lI1OI0OYpr = setTimeout("kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);", 200);
    if (shn) $_("page_load").src = _img('_OT_page_stop.png?ndate181128_')
};

function setNAvUrl() {}
kjtYpr.lOIOIIujlv11O1OYpr = function (nk) {
    var link = l1110OI1u0OzlI10IIYpr();
    if (l1IOIIz1l0Ol110Ypr()) link = "about:blank";
    var html = "",
        navtitle = "",
        dopimg = "";
    if (kjtYpr.global.setcache != "") {
        dopimg += "<img align='left' title='Страница взята с кеша от " + dt(kjtYpr.global.setcache, !0, !1, !0) + "' style='padding-top: " + css_wh(4) + "px;' width='" + css_w(20) + "' src='" + _img("_OT_fcache.png") + "' />"
    } else if (typeof kjtYpr.global.cacheinfo != "undefined" && kjtYpr.global.cacheinfo != null) {
        if (kjtYpr.global.cacheinfo.indexOf("FROMCACHE") > 0) {
            dopimg += "<img align='left' title='Кеш парсера от " + dt(kjtYpr.global.cachetime, !0, !1, !0) + "' style='padding-top: " + css_wh(4) + "px;' width='" + css_w(20) + "' src='" + _img("_OI_cache.png") + "' />"
        }
    }
    for (var i = 0; i < kjtYpr.channels.length; i++) {
        if (gV(kjtYpr.channels[i], "stream_url").indexOf("http://mylist.obovse.ru/hls/") == 0 || gV(kjtYpr.channels[i], "stream_url").indexOf("/hls/userencrypt/") > 0) {
            dopimg += "<img align='left' title='Ссылки на видеофайлы на этой странице зашифрованы и не могут быть сохранены или скопированы!' style='padding-top: " + css_wh(4) + "px;' width='" + css_w(20) + "' src='" + _img("_OI_ssl.png") + "' />";
            break
        }
    }
    if (kjtYpr.IFRAMES.length) {
        var xc = 0,
            xa = 0;
        for (var i in kjtYpr.IFRAMES) {
            xa++;
            if (kjtYpr.IFRAMES[i].src) {
                xc++
            }
        }
        dopimg = "Iframe:";
        kjtYpr.typeSource = xc + "/" + xa
    }
    if (inset["tabPriv" + insetActive]) kjtYpr.typeSource += " Инкогнито";
    html += "<span id='navinfo' style='float:left;color:gray;'>" + dopimg + "<svg xmlns='http://www.w3.org/2000/svg' style='float: left;padding: " + css_w(4) + "px;' height='" + css_wh(20) + "' width='" + css_w(20) + "' viewBox='0 0 48 48'><path d='M0 0h48v48h-48z' fill='none'></path><path d='M22 34h4v-12h-4v12zm2-30c-11.05 0-20 8.95-20 20s8.95 20 20 20 20-8.95 20-20-8.95-20-20-20zm0 36c-8.82 0-16-7.18-16-16s7.18-16 16-16 16 7.18 16 16-7.18 16-16 16zm-2-22h4v-4h-4v4z' fill='#808080' class='color000 svgShape'></svg>	 " + kjtYpr.typeSource + " | </span><span id='navurl' style='padding-left: 5px;float:left;overflow:hidden;max-width:" + css_w(800) + "px;'>" + getNavU(link) + "</span>";
    for (var i = inset["tab" + insetActive].length - 1; i > -1; i--) {
        var ins = inset["tab" + insetActive][i];
        if (navtitle != "") navtitle += " / ";
        if (l1IOIIz1l0Ol110Ypr(ins.url)) {
            navtitle += fp("_FPStartovoeMenu_")
        } else if (gV(ins, "title") != "") {
            navtitle += ins.title.replace(/<.*?>/g, "")
        }
        if (gV(kjtYpr.global, "navigate") != "") navtitle = "<span style='color:white;'>" + kjtYpr.global.navigate + "</span>";
        lO10OIOlxzlO100OIYpr("navigate", html + "<span id='navtitle' style='padding-left:5px;width: " + css_w(200) + "px;float:left;color:gray;'> - " + navtitle + "</span>");
        if ($_("navigate").offsetWidth > css_w(1280) || l1IOIIz1l0Ol110Ypr(ins.url)) break
    }
    sidebar_show()
};

function page_rs(t) {
    if (t == null) t = $_("page_load");
    if (t.src.indexOf("stop") > 0) {
        stopLoadPage()
    } else if (t.src.indexOf("reload") > 0) {
        oldselect = select;
        insetIn(-1, "s", select);
        kjtYpr.lI11111bPNQ0III1Ypr(!0, !0)
    }
}

function is_loadpage() {
    if ($_("page_load") != null)
        if ($_("page_load").src.indexOf("stop") > 0) return 1;
        else return 0
}

function stopLoadPage() {
    incID();
    clearTimeout(l01IQlTho0O1lI1Ypr);
    clearTimeout(xml_live_gstimer);
    clearTimeout(xml_livetimer);
    clearTimeout(fastremote_timer);
    if (waitc.start) {
        waitcurl("abort")
    }
    if (is_ifr()) {
        kjtYpr.IFRAMES = [];
        for (var i in kjtYpr.channels) {
            kjtYpr.channels[i].iframe = "";
            kjtYpr.channels[i].iframeid = ""
        }
    }
    xhr2 = null;
    xhr = null;
    xhr4 = null;
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
    kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
}
var sdbar = null,
    sdbarSel = 0;

function sidebar_play() {
    kjtYpr.l0lI10EMI1I10Ypr(null, sdbar[sdbarSel])
}

function sidebar_show(n) {
    if (n != null) sdbarSel = n;
    $_("top2text").style.top = "4.6%";
    $_("top2text").style.marginTop = css_wh(2) + "px";
    $_("top2text").style.fontSize = css_wh(24) + "px";
    if (kjtYpr.GL.sidebar == "1") {
        $_("sidebar").style.display = "block";
        $_("top2").style.paddingTop = css_wh(0) + "px";
        $_("top2").style.top = "4%";
        $_("top2text").style.height = "57%";
        $_("top2text").style.paddingTop = css_wh(0) + "px";
        $_("kb1").style.margin = css_w(1) + "px";
        $_("kb2").style.margin = css_w(1) + "px";
        $_("top2").style.height = "7%";
        if (sdbar == null) {
            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("bookmarks");
            if (s != "") {
                var sd = l1l0IOIl_puQl1I1IYpr(s);
                if (sd == null) sd = [];
                if (typeof sd.push == "undefined") sd = [];
                for (var i = 0; i < sd.length; i++) {
                    if (sd[i].playlist_url == "bookmarks/toolbar") {
                        sdbar = sd[i].channels;
                        break
                    }
                }
            }
            var html = "";
            if (sdbar != null) {
                var nk = 0;
                while (++nk < 3) {
                    html = "";
                    if (nk == 1) {
                        var dop = ""
                    } else {
                        dop = "max-width:" + Math.ceil(css_w((1274 - sdbar.length * 8) / sdbar.length)) + "px;"
                    }
                    for (var i = 0; i < sdbar.length; i++) {
                        if (typeof sdbar[i].logo_30x30 == "undefined") sdbar[i].logo_30x30 = "http://" + ServerFromList + "/smarttv/img/emptydoc.png";
                        if (sdbar[i].logo_30x30.indexOf("http") != 0) sdbar[i].logo_30x30 = "http://" + ServerFromList + "/smarttv/img/emptydoc.png";
                        html += "<div id='sdbar" + i + "' title='" + gV(sdbar[i], "title").replace(/<.*?>/g, "") + FgetSetting(1, ["' onmousemove=\"if(handler=='menu'&&(getSelect()!=-2||sdbarSel!=" + i + ")) {setSelect(-2);sdbarSel=" + i + ";linkOver();}\" onclick=\"sdbarSel=" + i + ";sidebar_play();\" ", ""]) + "style='height:" + css_wh(16) + "px;overflow:hidden;border: 2px solid transparent;float:left;padding:0px " + css_w(3) + "px 0px 1px; margin:0px;" + dop + "'>" + "<img onerror=\"this.onerror=null;this.src='" + _img("_OT_emptydoc.png") + "';\" width='" + css_w(20) + "' height='" + css_wh(16) + "' style='float: left; padding: 0px 3px 0px 0px;' src='" + _img(sdbar[i].logo_30x30) + "' /><div style='margin-top:" + css_wh(-2) + "px;margin-left:" + css_w(23) + "px;'>" + gV(sdbar[i], "title").replace(/<.*?>/g, "") + "</div></div>"
                    }
                    var b = document.getElementsByTagName('body')[0];
                    var div = document.createElement('div');
                    div.id = "textwidth";
                    div.style.position = "absolute";
                    div.style.top = css_wh(67) + "px";
                    div.style.left = "0px";
                    div.style.fontSize = css_wh(24) + "px";
                    if (FgetSetting(4)) div.style.whiteSpace = "nowrap";
                    div.style.fontSize = css_wh(18) + "px";
                    b.appendChild(div);
                    lO10OIOlxzlO100OIYpr(div.id, html);
                    navW = $_("textwidth").offsetWidth;
                    b.removeChild(div);
                    if (navW < css_w(1270)) break
                }
                lO10OIOlxzlO100OIYpr("sidebar", html)
            }
            if (html == "") {
                kjtYpr.GL.sidebar = 0;
                if (getSelect() == -2) {
                    setSelect(-1);
                    listInset()
                }
                kjtYpr.inf("_FPBookmark toolbar_ _FPOtkl_! _FPPustayaPapka_", 2000)
            }
        }
        sidebar_sel()
    } else {
        $_("sidebar").style.display = "none";
        $_("top2").style.paddingTop = css_wh(6) + "px";
        $_("top2").style.height = "5.6%";
        $_("kb1").style.margin = css_w(3) + "px";
        $_("kb2").style.margin = css_w(3) + "px";
        $_("top2").style.top = "4.8%";
        $_("top2text").style.height = "78%";
        $_("top2text").style.paddingTop = css_wh(3) + "px"
    }
}

function menu_play() {
    if (typeof kjtYpr.menu[menuSel] == "undefined") return;
    if (menuSubSel >= 0) kjtYpr.l0lI10EMI1I10Ypr(null, kjtYpr.menusub[menuSubSel]);
    else if (kjtYpr.menu[menuSel].playlist_url == "submenu") {
        $_("menu" + menuSel + "sub").style.display = "block";
        setStyles("menu" + menuSel + "sub", "cssid|menu");
        kjtYpr.menusub = kjtYpr.menu[menuSel].submenu;
        menuSubSel = -1
    } else kjtYpr.l0lI10EMI1I10Ypr(null, kjtYpr.menu[menuSel])
}

function menu_hideSub(n) {
    if (kjtYpr.menu.length < 1) return;
    if (n == null) {
        for (var i = 0; i < kjtYpr.menu.length; i++)
            if ($_("menu" + i + "sub") != null) $_("menu" + i + "sub").style.display = "none"
    } else if ($_("menu" + n + "sub") != null) $_("menu" + n + "sub").style.display = "none";
    menuSubSel = -2
}

function menu_sel() {
    try {
        if (kjtYpr.menu.length < 1 || $_("menu0") == null) return
        if (menuSubSel > -2) {
            if (menuSubSel > kjtYpr.menusub.length - 1) {
                menuSubSel = -2;
                kjtYpr.lIOIOIBu0mO11llO0Ypr(0);
                return
            } else {
                for (var i = 0; i < kjtYpr.menusub.length; i++) {
                    if (i == menuSubSel && getSelect() == -3) {
                        $_("menu" + menuSel + "sub" + i).style.border = "2px solid red";
                        setStyles("menu" + menuSel + "sub" + i, "menu|parent|selected")
                    } else {
                        $_("menu" + menuSel + "sub" + i).style.border = "2px solid transparent";
                        setStyles("menu" + menuSel + "sub" + i, "menu|parent|default")
                    }
                }
            }
        }
        if (menuSel > kjtYpr.menu.length - 1) menuSel = 0;
        else if (menuSel < 0) menuSel = kjtYpr.menu.length - 1;
        for (var i = 0; i < kjtYpr.menu.length; i++) {
            if (i == menuSel && getSelect() == -3 && menuSubSel < 0) {
                $_("menu" + i).style.border = "2px solid red";
                setStyles("menu" + i, "menu|parent|selected")
            } else {
                $_("menu" + i).style.border = "2px solid transparent";
                setStyles("menu" + i, "menu|parent|default")
            }
        }
    } catch (e) {}
}

function sidebar_sel() {
    if (kjtYpr.GL.sidebar != "1") return
    if (sdbarSel > sdbar.length - 1) sdbarSel = 0;
    else if (sdbarSel < 0) sdbarSel = sdbar.length - 1;
    for (var i = 0; i < sdbar.length; i++) {
        if ($_("sdbar" + i) != null) {
            if (i == sdbarSel && getSelect() == -2) $_("sdbar" + i).style.border = "2px solid red";
            else $_("sdbar" + i).style.border = "2px solid transparent"
        }
    }
}
var hideRight = !1;
kjtYpr.lO1OIIIqa1O1IlYpr = function () {
    hideRight = !1;
    $_("infoList").style.color = $_("main").style.color;
    $_("leftHalf").style.left = css_w(0) + "px";
    $_("leftHalf").style.height = "88.8%";
    $_("leftHalf").style.top = "11.8%";
    $_("leftHalf").style.width = "100%";
    $_("rightHalf").style.top = "11.8%";
    $_("rightHalf").style.maxHeight = "83.3%";
    $_("rightHalf").style.height = "auto";
    $_("rightHalf").style.overflowX = "hidden";
    $_("rightHalf").style.overflowY = "auto";
    if (is_iptv > 2) {
        $_("rightHalf").style.left = css_w(820) + "px";
        $_("rightHalf").style.width = "35%";
        $_("infoList").style.fontSize = (1 + lQIO0l010VIvIl111IYpr) + "px";
        $_("infoList").style.color = "rgb(208, 198, 201)"
    } else {
        $_("rightHalf").style.left = css_w(640) + "px";
        $_("rightHalf").style.width = css_w(615) + "px"
    }
    if (!box_low2 && !FgetSetting(12)) $_("infoList").style.wordBreak = "break-word";
    try {
        if ((gV(kjtYpr.global, "options").indexOf("hidedescription") >= 0 || kjtYpr.channels[0].description == "<hide></hide>") && kjtYpr.ORIG_URL.indexOf("allsearch.php") == -1 && !gs.on) {
            $_("rightHalf").style.left = css_w(1280) + "px";
            $_("rightHalf").style.width = css_w(10) + "px";
            $_("infoList").style.width = css_w(8) + "px";
            hideRight = !0
        }
    } catch (e) {}
};

function sPosMaxY() {
    var y = 0;
    for (var i in sPos)
        if (sPos[i][1] > y) y = sPos[i][1];
    return y
}

function sPosGetMaxXbyRow(r) {
    var y = 0;
    for (var i in sPos)
        if (sPos[i][0] > y && sPos[i][1] == r) y = sPos[i][0];
    return y
}

function sPosGetXbyRow(px, py) {
    var max = sPosGetMaxXbyRow(py);
    if (px > max) px = Math.ceil((px / startX) * max);
    for (var i in sPos)
        if (sPos[i][0] == px && sPos[i][1] == py) return i;
    return px + 1
}
var omni_hor = 2;

function omniSel(n) {
    if (n != null) {
        if (n == "+") omni_hor++;
        else if (n == "-") omni_hor--;
        else omni_hor = n
    }
    var kids = ["kb1", "kb2", "top2text"];
    if (omni_hor >= kids.length) omni_hor = 0;
    else if (omni_hor < 0) omni_hor = kids.length - 1;
    for (var i = 0; i < kids.length; i++) {
        if (getSelect() == -4 && omni_hor == i) $_(kids[i]).style.border = "2px solid #5590e7";
        else $_(kids[i]).style.border = "2px solid transparent"
    }
}

function editUrl() {
    var v = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    if (v.indexOf("cmdSpider") == 0) v = v.split("|")[1];
    if (v == "about:blank") v = "";
    lO10OIOlxzlO100OIYpr("navigate", '<span id="navinfo" style="float:left;color:gray;">' + gV($_("navinfo"), "innerHTML") + '</span>' + '<input id="editurl" type="text" style="border-radius:8px;margin-top:-3px;width: 80%; border: 1px solid rgb(101, 208, 228);" value="' + v + '">');
    $_("rightHalf").style.left = ($_("editurl").offsetLeft) + "px";
    $_("rightHalf").style.width = ($_("editurl").offsetWidth) + "px";
    lO10OIOlxzlO100OIYpr("infoList", '<div id="presearch" style="background-color: #291c45;"></div>');
    ChSel = {
        "title": "_FPEnter search query or URL_",
        "playlist_url": "cmdSpider",
        "type": "omnibox",
        "presearch": "http://omnibox.spiderxml.com/?type=all",
        "value": v
    };
    VK.Show("editurl", 0);
    kjtYpr.l0OlII0Ix1fI1I01Ypr("VK");
    kjtYpr.inputId = 'editurl';
    llIIl0IO0vMB0I0010Ypr("")
}
var lastResel = "";

function reselAll(n) {
    if (n != null) setSelect(n);
    var hsh = getSelect() + " " + menuSel + " " + menuSubSel + " " + sdbarSel;
    if (lastResel != hsh) {
        listInset();
        menu_sel();
        sidebar_sel();
        omniSel()
    }
    lastResel = hsh
}

function osetPos(x, y) {
    if (lastsel == -4 && select != -4) reselAll();
    if (x == 0) {
        margin = 0;
        if (y == -1) {
            if (getSelect() == -4) setSelect(-1);
            else if (getSelect() == -3) {
                if (menuSubSel < 0) {
                    if (kjtYpr.GL.sidebar == "1") setSelect(-2);
                    else setSelect(-4)
                } else {
                    return menu_sel(--menuSubSel)
                }
            } else if (getSelect() == -2) setSelect(-4);
            else {
                var row = -1;
                if (getSelect() >= 0) {
                    if (typeof sPos[getSelect()] == "undefined") row = 0;
                    else row = sPos[getSelect()][1];
                    if (row == 0) {
                        if (kjtYpr.menu.length) setSelect(-3);
                        else if (kjtYpr.GL.sidebar == "1") setSelect(-2);
                        else setSelect(-4)
                    }
                }
                if (row != 0) posStart(0, -1)
            }
            if (plmini_on) {
                clearTimeout(plmini_timer);
                videoLoad("off");
                plmini_timer = setTimeout("play_mini();", 1300)
            }
        }
        if (y == 1) {
            if (getSelect() == -1) setSelect(-4);
            else if (getSelect() == -4) {
                if (kjtYpr.GL.sidebar == "1") setSelect(-2);
                else if (kjtYpr.menu.length) setSelect(-3);
                else kjtYpr.lIOIOIBu0mO11llO0Ypr(0)
            } else if (getSelect() == -3) {
                if (menuSubSel == -2) kjtYpr.lIOIOIBu0mO11llO0Ypr(0);
                else {
                    return menu_sel(++menuSubSel)
                }
            } else if (getSelect() == -2 && kjtYpr.menu.length) setSelect(-3);
            else if (getSelect() == -2) kjtYpr.lIOIOIBu0mO11llO0Ypr(0);
            else {
                posStart(0, 1)
            }
            if (plmini_on) {
                clearTimeout(plmini_timer);
                videoLoad("off");
                plmini_timer = setTimeout("play_mini();", 1300)
            }
        }
        linkOver()
    }
    if (y == 0) {
        if (x == 1) {
            if (getSelect() == -4) {
                return omniSel("+")
            } else if (getSelect() == -3) {
                menu_hideSub();
                return menu_sel(++menuSel)
            } else if (getSelect() == -2) return sidebar_show(++sdbarSel);
            else if (getSelect() == -1) {
                l1OIOvnWuZI0lO0Ypr++;
                listInset();
                return
            }
            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("tosettings") == 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr == "cmdSetSearch" || kjtYpr.l1IlIl01l0tUIl1IIYpr == "cmdSetStart") {
                kjtYpr.ll0IlI01bONa1111OlYpr(curCh()["playlist_url"], key)
            } else {
                posStart(1, 0)
            }
        }
        if (x == -1) {
            if (getSelect() == -4) {
                return omniSel("-")
            } else if (getSelect() == -3) {
                menu_hideSub();
                return menu_sel(--menuSel)
            } else if (getSelect() == -2) return sidebar_show(--sdbarSel);
            else if (getSelect() == -1) {
                l1OIOvnWuZI0lO0Ypr--;
                listInset();
                return
            }
            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("tosettings") == 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr == "cmdSetSearch" || kjtYpr.l1IlIl01l0tUIl1IIYpr == "cmdSetStart") {
                kjtYpr.ll0IlI01bONa1111OlYpr(curCh()["playlist_url"], key)
            } else {
                posStart(-1, 0)
            }
        }
    }
}
var oldtvg = 0,
    oldselpos98 = -2,
    oldselpos = -2;

function posStart(x, y) {
    var ols = getSelect();
    oldselect = getSelect();
    if (kjtYpr.channels.length == 0 && select > -1) {
        setSelect(-1);
        return kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
    }
    if (getSelect() >= 0) {
        posX = sPos[getSelect()][0];
        posY = sPos[getSelect()][1]
    }
    if (x != 0) {
        if (getSelect() >= 0 && getTypePos(curCh(), getSelect()) == "list") {
            if ((getSelect() + x * 10) < 0) setSelect(0);
            else if ((getSelect() + x * 10) >= count) {
                if (kjtYpr.global.next_page_url != "" && getSelect() == count - 1) {
                    var ttl = kjtYpr.XML_TITLE.match(/^Стр. (\d+) \/ (.*)$/);
                    if (ttl != null) var title = "Стр. " + (ttl[1] * 1 + 1) + " / " + ttl[2];
                    else title = "Стр. 2 / " + kjtYpr.XML_TITLE;
                    kjtYpr.l0lI10EMI1I10Ypr(null, {
                        "title": title,
                        "icon": "" + kjtYpr.XML_IMG,
                        "playlist_url": kjtYpr.global.next_page_url
                    })
                } else setSelect(count - 1)
            } else setSelect(getSelect() + x * 10)
        } else setSelect(getSelect() + x)
    } else if (y != 0) {
        if (y == 1) {
            if (getSelect() == -1) {
                setSelect(sPosGetXbyRow(posX, 0));
                maxyEvent = 0
            } else if (posY == sPosMaxY()) {
                if (maxyEvent > 3) setSelect(sPosGetXbyRow(posX, 0));
                else maxyEvent++
            } else {
                setSelect(sPosGetXbyRow(posX, ++posY));
                maxyEvent = 0
            }
        } else {
            if (getSelect() == -1) setSelect(sPosGetXbyRow(posX, sPosMaxY()));
            else if (posY == 0) setSelect(-1);
            else setSelect(sPosGetXbyRow(posX, --posY))
        }
    }
    return kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
}

function _img(s) {
    if (typeof s == "undefined") s = "_OI_1px.png";
    else if (s.match(/^.{0,3}(none|hidden|undefined)/)) s = "_OI_1px.png";
    s = s.replace("_OI_", "http://obovse.ru/ForkPlayer2.5/img/").replace("_OT_", "http://obovse.ru/smarttv/img/").replace("_ST_", "http://static.tempdata.forkplayer.tv/staticfiles/fimg/");
    if (box_low2 || FgetSetting(12)) {
        if (s.indexOf("obovse.ru/smarttv/img/page_") > 0) {
            s = s.replace(".png", "_low.jpg")
        }
    }
    if (s.indexOf("ndate") > 0) {
        var mtc = s.match(/ndate(.*?)_/);
        if (mtc != null) n = mtc[1];
        else n = 999999
    } else if (s.indexOf("backgr_")) var n = 181028;
    else if (s.indexOf("bookmno.png") > 0 || s.indexOf("bookmyes.png") > 0) var n = 181011;
    else n = 180929;
    if (version_local_files >= n) {
        if (version_local_files >= 190606) {
            if (s.indexOf("http://obovse.ru") == 0 && s.indexOf(".php") == -1) {
                s = "fimg/" + s.replace(/^http:\/\/.*?obovse\.ru\/[^\/]+\/(img\/)?/, "").replace(/\//g, "_")
            }
        } else if (s.indexOf("obovse.ru/smarttv/img/") > 0) {
            s = s.replace(/^http:\/\/.*?obovse.ru\/smarttv\/img\//, "smarttvimg/")
        }
    }
    if (ServerFromList != "" && kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("tv/wlist.php") == -1) s = s.replace("//obovse.ru", "//" + ServerFromList);
    return s
}

function showLiveSearch() {
    var html = ""
}

function l1I1II1llR1vqOl00Ypr() {
    indload++;
    if (indload > kjtYpr.channels.length - 3) {}
}
var rates = {};

function get_rates() {
    if (kjtYpr.GL.rate < 1 && kjtYpr.l1IlIl01l0tUIl1IIYpr != "http://mylist.obovse.ru/forkplayer") return;
    if (typeof rates[kjtYpr.l1IlIl01l0tUIl1IIYpr] != "undefined") {
        set_rates(rates[kjtYpr.l1IlIl01l0tUIl1IIYpr]);
        return
    }
    var s = "";
    for (var i = 0; i < kjtYpr.channels.length; i++) {
        if (gV(kjtYpr.channels[i], "playlist_url").indexOf("http") == 0) {
            var k = md5(kjtYpr.channels[i].playlist_url.replace(/http.*?\/treeview\?plugin/, "http://remotefork/treeview?plugin"));
            if (s.indexOf(k) == -1) {
                if (s != "") s += "-";
                s += k
            }
        }
    }
    if (s != "") {
        // var url = "http://185.158.114.122/obovse.ru/forklmod/sendstat.php?do=get&u=" + s + "&initial=" + uaJ + "|" + kjtYpr.mac + "|" + kjtYpr.hardware;
        var url = "http://127.0.0.1/obovse.ru/forklmod/sendstat.php?do=get&u=" + s + "&initial=" + uaJ + "|" + kjtYpr.mac + "|" + kjtYpr.hardware;
        r2 = new XMLHttpRequest();
        r2.onreadystatechange = function () {
            if (r2.readyState == 4) {
                clearTimeout(r2t);
                var m = l1l0IOIl_puQl1I1IYpr(r2.responseText);
                if (m != null) {
                    rates[kjtYpr.l1IlIl01l0tUIl1IIYpr] = m;
                    set_rates(m)
                }
            }
        };
        r2.open('GET', url, !0);
        r2.send();
        r2t = setTimeout(function () {
            r2.abort()
        }, 14000)
    }
}

function set_rates(m) {
    var x1 = 0,
        x2 = 9999;
    if (!FgetSetting(12) && kjtYpr.GL.pr > 0) var backgrOp = "background:none #123313;";
    else backgrOp = "";
    for (var i = 0; i < kjtYpr.channels.length; i++) {
        try {
            if (kjtYpr.channels[i].playlist_url.indexOf("http") == 0 && $_("rat" + i) != null) {
                var x = md5(kjtYpr.channels[i].playlist_url.replace(/http.*?\/treeview\?plugin/, "http://remotefork/treeview?plugin"));
                if (typeof m[x] != "undefined") {
                    kjtYpr.channels[i].rates = m[x];
                    if (l1IOIIz1l0Ol110Ypr() || !0) {
                        if (m[x][0] > 0 || m[x][1] > 0) {
                            $_("rat" + i).style.display = "block";
                            if (kjtYpr.GL.rate > 0) {
                                var proc = Math.ceil(100 * (m[x][1] / (m[x][0] + m[x][1])));
                                lO10OIOlxzlO100OIYpr("rat" + i, "<span style='color:#54d659;padding:1px 2px;font-size:" + css_wh(12) + "px;" + backgrOp + "'>" + proc + "%</span><br><span style='color:#c7c1c1;padding:1px 2px;font-size:" + css_wh(10) + "px;" + backgrOp + "'>" + (m[x][0] + m[x][1]) + "</span>")
                            }
                        }
                    }
                }
            }
        } catch (e) {}
    }
}
kjtYpr.lOlIOOWs1uO000lYpr = function () {
    kjtYpr.GL.rows = parseInt(kjtYpr.GL.rows);
    if (kjtYpr.GL.rows == 10) {
        l00I1lOQIHVIK01O10Ypr = css_w(55);
        ch_size = css_w(35);
        $_("main").style.fontSize = css_wh(29) + "px";
        $_("infoList").style.fontSize = css_wh(38) + "px";
        $_("bottom").style.fontSize = css_wh(28) + "px";
        l0lOIljl10Oll0l0OYpr = css_w(510);
        lQIO0l010VIvIl111IYpr = css_wh(24);
        title_pad = css_wh(8)
    } else if (kjtYpr.GL.rows == 12) {
        l00I1lOQIHVIK01O10Ypr = css_wh(45);
        ch_size = css_wh(30);
        $_("main").style.fontSize = css_wh(27) + "px";
        $_("infoList").style.fontSize = css_wh(28) + "px";
        $_("bottom").style.fontSize = css_wh(28) + "px";
        l0lOIljl10Oll0l0OYpr = css_w(510);
        lQIO0l010VIvIl111IYpr = css_wh(23);
        title_pad = css_wh(5)
    } else if (kjtYpr.GL.rows == 15 || kjtYpr.GL.rows == 14) {
        l00I1lOQIHVIK01O10Ypr = css_wh(35);
        ch_size = css_wh(27);
        $_("main").style.fontSize = css_wh(25) + "px";
        $_("infoList").style.fontSize = css_wh(26) + "px";
        $_("bottom").style.fontSize = css_wh(26) + "px";
        l0lOIljl10Oll0l0OYpr = css_w(510);
        lQIO0l010VIvIl111IYpr = css_wh(21);
        title_pad = css_wh(2)
    } else if (kjtYpr.GL.rows == 20) {
        l00I1lOQIHVIK01O10Ypr = css_wh(26);
        ch_size = css_wh(23);
        $_("main").style.fontSize = css_wh(23) + "px";
        $_("infoList").style.fontSize = css_wh(24) + "px";
        $_("bottom").style.fontSize = css_wh(24) + "px";
        l0lOIljl10Oll0l0OYpr = css_w(510);
        lQIO0l010VIvIl111IYpr = css_wh(17);
        title_pad = css_wh(0)
    }
    ll1lIOiIO0lO1IIIYpr = Math.random();
    if (kjtYpr.GL.weather == -1) {
        $_("widget_date").style.width = css_w(205 + 80) + "px"
    } else $_("widget_date").style.width = css_w(205) + "px";
    if (kjtYpr.GL.pr == 0 || FgetSetting(12)) $_("top2").style.backgroundColor = "rgb(8, 27, 40)";
    else $_("top2").style.backgroundColor = "rgba(8, 27, 40, 0.6)";
    sidB = 0
};

function devSel(m) {
    var s = 0;
    if (m == null) {
        s = select
    } else if (m == 1) {}
    return s
}
var lastsel = 0,
    hmenu = "",
    cVc = 0;
kjtYpr.lIOIOIBu0mO11llO0Ypr = function (sel, load) {
    prloadi = !0;
    $_('infoList').style.top = "0px";
    margin = 0;
    count = kjtYpr.channels.length;
    if (count < 1) {
        if (xml_live) kjtYpr.channels = [emptyCh];
        lO10OIOlxzlO100OIYpr("leftHalf", "<div style='width: " + (css_w(633) - sidB) + "px;height:640px;position:absolute;left:15px; top:48px;overflow:hidden;'>_FPZdesPusto_!</div>");
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100);
        old_select = select;
        old_p = 0;
        ll1lIOiIO0lO1IIIYpr = kjtYpr.l1IlIl01l0tUIl1IIYpr;
        return
    }
    select = (sel == null) ? 0 : parseInt(sel);
    select = (select >= count) ? 0 : select;
    if (kjtYpr.channels.length == 0 && select > -1) setSelect(-1);
    lastsel = select;
    if (select != old_select) {
        plmini_canplay = !0
    }
    if (menuSubSel > -2) {
        menu_hideSub()
    }
    if (is_ifr() && getSelect() < 0) setSelect(0);
    if (getSelect() < 0) {
        plmini_canplay = !1;
        try {
            if (getSelect() == -1) listInset();
            else if (getSelect() == -2) sidebar_show();
            if (getSelect() == -3) menu_sel();
            linkOver();
            if (ll1lIOiIO0lO1IIIYpr == kjtYpr.l1IlIl01l0tUIl1IIYpr) return
        } catch (e) {
            setSelect(0)
        }
    } else {
        l1OIOvnWuZI0lO0Ypr = insetActive;
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("extensions://") == 0) {
            ext_focus(1)
        }
    }
    if (l1IOIIz1l0Ol110Ypr() || kjtYpr.global.typeList == "start") {
        kjtYpr.typeList = "start";
        lO10OIOlxzlO100OIYpr("infoList", "");
        $_("rightHalf").style.display = "none"
    } else {
        $_("rightHalf").style.display = "block";
        kjtYpr.typeList = "list"
    }
    var html = "";
    var last = count;
    kjtYpr.lO1OIIIqa1O1IlYpr();
    hmenu = "";
    if (box_low2 || FgetSetting(12)) wordBreak = "";
    else wordBreak = "word-break:break-all;";
    if (kjtYpr.menu.length) {
        try {
            var wi = Math.ceil((1270 - kjtYpr.menu.length * 9) / kjtYpr.menu.length);
            var dop = "background-color:#596367;";
            hmenu += "<div id='menu' style='" + wordBreak + "margin: 3px 0px 4px 0px;width:100%;overflow-x:hidden;overflow-y:visible;height:" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.80 + 3) + "px;" + dop + "'>";
            for (var i = 0; i < kjtYpr.menu.length; i++) {
                var li = "";
                if (kjtYpr.menu[i].playlist_url == "submenu" && typeof kjtYpr.menu[i].submenu != "undefined" && kjtYpr.menu[i].submenu.length) {
                    li = "<ul id='menu" + i + "sub' style='position:absolute;display:none;list-style:none;padding:5px;margin:2px 0px;z-index:2;background: inherit;'>";
                    for (var j = 0; j < kjtYpr.menu[i].submenu.length; j++) {
                        var el = kjtYpr.menu[i].submenu[j];
                        li += "<li id='menu" + i + "sub" + j + "'" + FgetSetting(1, [" onmousemove=\"if(handler=='menu'&&menuSubSel!=" + j + ") {setSelect(-3);menuSel=" + i + ";menuSubSel=" + j + ";menu_sel();}\" onclick=\"menuSel=" + i + ";menuSubSel=" + j + ";menu_play();\"", ""]) + " style='border:2px solid transparent;margin:2px 0px;width:100%;overflow:hidden;background: inherit;'><img onerror=\"this.onerror=null;this.style.display='none';\" width='" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.85) + "' height='" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.7) + "' style='float: left; padding: 2px 4px 0px 0px;' src='" + _img(el.logo_30x30) + "' /> " + el.title + "</li>"
                    }
                    li += "</ul>"
                }
                var ci = gV(kjtYpr.menu[i], "logo_30x30");
                if (ci == "hidden" || ci == "none" || ci == "" || box_low2 || FgetSetting(12)) var logo = "";
                else logo = "<img onerror=\"this.onerror=null;this.style.display='none';\" width='" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.85) + "' height='" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.7) + "' style='float: left; padding: 2px 4px 0px 0px;' src='" + _img(kjtYpr.menu[i].logo_30x30) + "' /> ";
                hmenu += gV(kjtYpr.menu[i], "before") + "<div id='menu" + i + "'" + FgetSetting(1, [" onmousemove=\"if(handler=='menu'&&(getSelect()!=-3||menuSel!=" + i + ")) {menuSubSel=-2;setSelect(-3);menuSel=" + i + ";linkOver();}\" onclick=\"if(menuSubSel!=-2) menu_hideSub();else{menuSel=" + i + ";menu_play();}\"", ""]) + " style='height:" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.80 - 1) + "px;border:2px solid transparent;margin:0px 5px;float:left;font-size:85%;background: inherit;'><div style='overflow:hidden;max-width:" + wi + "px;height:" + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.80 - 1) + "px;'>" + logo + kjtYpr.menu[i].title + "</div>" + li + "</div>";
                hmenu += gV(kjtYpr.menu[i], "after")
            }
            hmenu += "</div>"
        } catch (e) {
            kjtYpr.popUp("Error menu on this site<br>" + e.message, 2000)
        }
        $_("rightHalf").style.top = "14%";
        $_("rightHalf").style.maxHeight = "81.1%"
    }
    listInset();
    if (ll1lIOiIO0lO1IIIYpr == kjtYpr.l1IlIl01l0tUIl1IIYpr) {
        cVc = 1;
        linkOver();
        return
    }
    cVc = 0;
    kjtYpr.lOIOIIujlv11O1OYpr();
    kjtYpr.lII1O1LQIDl10IlOYpr();
    ll1lIOiIO0lO1IIIYpr = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    ncc = 0;
    sPos = {}, sPosX = 0, sPosY = 0;
    kjtYpr.inf("/" + kjtYpr.channels.length);
    var x1 = getSelect() - kjtYpr.GL.rows;
    var x2 = getSelect() + 1 * kjtYpr.GL.rows;
    if (x1 < 0) x1 = 0;
    if (x2 > kjtYpr.channels.length) x2 = kjtYpr.channels.length;
    CAS = [];
    for (var i = 0; i < kjtYpr.channels.length; i++) {
        try {
            var Ch = kjtYpr.channels[i];
            Ch.imgsrc = Ch.logo_30x30;
            var dop = "";
            if (i < x1 || i > x2) dop = "display:none";
            else CAS.push(i);
            html += renderCh(Ch, i, dop)
        } catch (e) {}
    }
    if (!is_ifr()) {
        if (kjtYpr.global.before != "") html = kjtYpr.global.before + html;
        if (kjtYpr.global.footer != "") html = html + kjtYpr.global.footer
    }
    // lO10OIOlxzlO100OIYpr("leftHalf", '<div id="site" style="overflow:hidden;height: 100%;width: ' + css_wh(1275) + 'px;"><div id="scrollsite" class="leftContent" style="height: 93%;width: 100%;overflow-y: auto;font-size:' + ch_size + 'px;" onscroll="scrollSite();">' + hmenu + '<div id="content" style="margin-left:' + 0 + 'px;text-align:' + ((gV(kjtYpr.global, "align") == "") ? "center" : gV(kjtYpr.global, "align")) + ';padding-bottom: 50px;">' + html + '</div></div></div>');
    lO10OIOlxzlO100OIYpr("leftHalf", '<div id="site" style="overflow:hidden;height: 100%;width: ' + css_wh(100) + '%;"><div id="scrollsite" class="leftContent" style="height: 93%;width: 100%;overflow-y: auto;font-size:' + ch_size + 'px;" onscroll="scrollSite();">' + hmenu + '<div id="content" style="margin-left:' + 0 + 'px;text-align:' + ((gV(kjtYpr.global, "align") == "") ? "center" : gV(kjtYpr.global, "align")) + ';padding-bottom: 50px;">' + html + '</div></div></div>');
    set_times();
    if (handler != "group") {
        kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
        lO10OIOlxzlO100OIYpr("rightHalf", '<div id="infoList" style="padding:0px;position:static;background: none;width:100%;	height:98%; max-height:98%; overflow: hidden;"></div>')
    }
    if (is_ifr()) linkShowDesc();
    else {
        if (typeof kjtYpr.global.style != "undefined") {
            if (typeof kjtYpr.global.style.cssid != "undefined") {
                for (var i in kjtYpr.global.style.cssid) setStyles(i, "cssid|" + i);
            }
        }
    }
    var olu = "";
    if (kjtYpr.IFRAMES.length) {
        for (var i in kjtYpr.IFRAMES) {
            if (typeof kjtYpr.IFRAMES[i].src == "undefined") {
                if (olu.indexOf("--" + kjtYpr.IFRAMES[i].playlist_url + "--") >= 0) continue;
                linkOver();
                kjtYpr.IFRAMES[i].src = 1;
                if (i == 0) lIIlO1uuOl100Ypr();
                for (var j in kjtYpr.channels) {
                    if (kjtYpr.channels[j].iframeid == kjtYpr.IFRAMES[i].iframeid) {
                        if ($_("img" + j) != null) $_("img" + j).src = "http://" + ServerFromList + "/ForkPlayer2.5/img/b/loading.gif";
                        break
                    }
                }
                if (timestamp > 0) kjtYpr.l0lI10EMI1I10Ypr(null, kjtYpr.IFRAMES[i]);
                else setTimeout(function () {
                    kjtYpr.l0lI10EMI1I10Ypr(null, kjtYpr.IFRAMES[i])
                }, 600);
                return
            }
            olu += "--" + kjtYpr.IFRAMES[i].playlist_url + "--"
        }
        kjtYpr.IFRAMES = [];
        for (var i in kjtYpr.channels) {
            kjtYpr.channels[i].iframe = "";
            kjtYpr.channels[i].iframeid = ""
        }
    }
    if (!is_ifr()) {
        get_rates();
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
    }
    linkOver();
    lIII1Ql10v1lQ00lYpr();
    lIIlO1uuOl100Ypr();
    listInset()
    logtime(1)
};

function getTypePos(Ch, index) {
    if (index == null) index = 1;
    if (index >= 0) {
        var P = gV(Ch, "position");
        if (P == "") {
            if (gV(Ch, "tvg-shift") == "99") P = "fulleditline";
            else if (gV(Ch, "tvg-shift") == "98") P = "hlink"
        }
        if (P == "") P = kjtYpr.typeList
    } else P = "";
    return P
}

function cssvar(s) {
    var res = gV(s);
    if (res.indexOf("var(--") >= 0) {
        res = res.replace(/var\(--l00I1lOQIHVIK01O10Ypr\)/g, l00I1lOQIHVIK01O10Ypr)
    }
    return res
}
var adop = "",
    ncc = 0,
    sPos = {},
    sPosX = 0,
    sPosY = 0;

function renderCh(Ch, index, dop) {
    var html = "";
    if (hideRight) var widthCh = css_w(1195);
    else if (is_iptv > 2) widthCh = css_w(790);
    else widthCh = css_w(610);
    if (!FgetSetting(12)) var backgrOp = "background: rgba(0,0,0,0.65);";
    else backgrOp = "background: rgba(0,0,0);";
    if (l1IOIIz1l0Ol110Ypr()) backgrOp += "color:white;";
    if (Ch.imgsrc == "") {
        if (Ch.playlist_url != "") Ch.imgsrc = _img("_OI_open.png");
        else Ch.imgsrc = _img("_OI_file.png")
    }
    if (FgetSetting(8))
        if (Ch.imgsrc.match(/https/i)) Ch.imgsrc = "none";
    if (gV(Ch, "display_title") != "") var title = Ch.display_title;
    else title = Ch.title;
    if (title == "" || title == " ") title = gV(Ch, "playlist_url").replace(/^https?:\/\//, "");
    if (gV(Ch, "before") != "") Ch.before = cssvar(Ch.before);
    if (gV(Ch, "after") != "") Ch.after = cssvar(Ch.after);
    if (index > 0) {
        var lastP = getTypePos(kjtYpr.channels[index - 1], index)
    } else lastP = "";
    tekP = getTypePos(Ch, index);
    if (tekP == "list") {
        if (index) sPosY++;
        sPosX = 0;
        sPos[index] = [sPosX, sPosY]
    } else {
        title = title.replace(/<img.*?>/g, "");
        if (Ch.side_icon == "dns" && !app_cors)
            Ch.side_icon = '_OT_on_dns.png';
        if (Ch.side_icon == "1080")
            Ch.side_icon = '_OT_on_1080.png';
        if ((Ch.side_icon == "remotefork" && !app_cors) || (Ch.side_icon == "rfs" && platform != "android-device"))
            Ch.side_icon = '_OT_on_remotefork.png';
        if (tekP == "bigtile") {
            st_h = css_wh(194);
            st_w = css_w(128)
        } else {
            st_h = css_wh(80);
            st_w = css_w(128)
        }
        el_mini = !1;
        el_margin = css_w(1);
        if (tekP == "label") {
            sPosX = 0;
            if (index) sPosY++;
            sPos[index] = [sPosX, sPosY];
            return gV(Ch, "before") + html + '<div id="ch' + index + '" sel="0"' + FgetSetting(1, [' onmousemove="if(!this.sel) linkOver(' + index + ',this);" onmousedown="p_d();" onmouseup="p_u();" onclick="p_c(' + index + ');"', ""]) + ' style="position:relative;text-align: left;border-radius: ' + css_wh(4) + 'px;margin:' + css_wh(-2) + 'px;font-size:80%;width:92%;display:inline-block;overflow:hidden;height:' + css_wh(26) + 'px;">' + '<img id="img' + index + '" src="' + _img("_OI_1px.png") + '" data-src="' + _img(Ch.imgsrc) + '" style="float:left;height:' + css_wh(20) + 'px;">' + '<div id="titleid' + index + '" style="">' + title + '</div>' + '' + '</div>' + gV(Ch, "after")
        } else if (lastP == "label" || (lastP == "list" && tekP != "list")) {
            if (index) sPosY++;
            sPosX = 0
        } else if (lastP == "hlink" && tekP != "hlink" || lastP != "hlink" && tekP == "hlink" || lastP == "fulleditline") {
            if (index) {
                sPosY++;
                html += '<br clear="both">'
            }
            sPosX = 0
        }
        if (tekP == "fulleditline") {
            sPosX = 0;
            sPos[index] = [sPosX, sPosY];
            html = '<div id="ch' + index + '" sel="0"' + FgetSetting(1, [' onmousemove="if(!this.sel) linkOver(' + index + ',this);" onmousedown="p_d();" onmouseup="p_u();" onclick="p_c(' + index + ');"', ""]) + ' style="border:1px solid transparent;width:80%;margin:1px 9%;border-radius: ' + css_wh(4) + 'px;display:inline-block;overflow:hidden;">' + '<div id="titleid' + index + '" style="overflow: hidden;font-size:' + css_wh(24) + 'px;height:' + css_wh(24) + 'px;margin:' + css_wh(3) + 'px;color:#2b2525; background-color: #eee;border: 1px solid #e8e8e8;padding:4px;">' + title + '</div>' + '' + '</div>';
            return gV(Ch, "before") + html + gV(Ch, "after")
        } else if (tekP == "hlink") {
            sPos[index] = [sPosX++, sPosY];
            html += '<div id="ch' + index + '" sel="0"' + FgetSetting(1, [' onmousemove="if(!this.sel) linkOver(' + index + ',this);" onmousedown="p_d();" onmouseup="p_u();" onclick="p_c(' + index + ');"', ""]) + ' style="position:relative;border:0px solid transparent;margin:' + css_w(0) + 'px ' + css_wh(4) + 'px;border-radius: ' + css_wh(4) + 'px;display:inline-block;overflow:hidden;">';
            if (Ch.imgsrc != "") html += '<img id="img' + index + '" src="' + _img("_OI_1px.png") + '" data-src="' + _img(Ch.imgsrc) + '" style="float:left;height:' + css_wh(22) + 'px;padding-top:' + css_wh(5) + 'px;">';
            html += '<div id="titleid' + index + '" style="overflow: hidden;max-width: ' + css_w(310) + 'px;font-size:90%;padding:0px 4px;float:left;height:' + css_wh(28) + 'px; text-decoration: underline;">' + title + '</div>' + '' + '</div>';
            return gV(Ch, "before") + html + gV(Ch, "after")
        }
        if (sPosX >= startX) {
            sPosY++;
            sPosX = 0
        }
        sPos[index] = [sPosX++, sPosY];
        if (typeof (Ch.coordination) == "object") sPos[index] = Ch.coordination;
        if (tekP == "html") {
            html += adop + '<div id="ch' + index + '" sel="0"' + FgetSetting(1, [' onmousemove="if(!this.sel) linkOver(' + index + ',this);" onmousedown="p_d();" onmouseup="p_u();" onclick="p_c(' + index + ');"', ""]) + ' ' + 'style="position: relative;display: inline-block;vertical-align: top;">';
            html += gV(Ch, "template").replace("$title", "<span id='titleid" + index + "'>" + gV(Ch, "title") + "</span>").replace(/\$logo_30x30(.*?["'])/, _img("_OI_1px.png") + "$1 data-src='" + Ch.imgsrc + "' id='img" + index + "'").replace("$description", "")
        } else {
            html += adop + '<div id="ch' + index + '" sel="0"' + FgetSetting(1, [' onmousemove="if(!this.sel) linkOver(' + index + ',this);" onmousedown="p_d();" onmouseup="p_u();" onclick="p_c(' + index + ');"', ""]) + ' style="position: relative;border:0px;text-align:center;height:' + css_wh(st_h + 21) + 'px;width:' + css_w(st_w + 2) + 'px;margin-top:' + css_wh(el_margin) + 'px; margin-left:' + css_w(4) + 'px;display: inline-block;overflow:hidden;text-align:center;">';
            html += "<div id='rat" + index + "' style='position:absolute;display:none;text-align:left;height:" + css_wh(23) + "px;width:" + css_w(28) + "px;padding-top: " + css_wh(5) + "px;padding-left: " + css_w(5) + "px;font-size:" + css_wh(11) + "px;'></div>";
            if (Ch.imgsrc != "") html += '<img id="img' + index + '" src="' + _img("_OI_1px.png") + '" data-src="' + _img(Ch.imgsrc) + '" style="height:' + css_wh(st_h - 4) + 'px;padding:2px 2px 0px 2px;">';
            html += '<div style="position: absolute;top: ' + css_wh(st_h - 28) + 'px;font-size:68%;line-height:0.9;" id="titleid' + index + '">' + '<div style="width:' + css_wh(st_w) + 'px;height: 2.6em; overflow:hidden;vertical-align: bottom;display: table-cell;"><div style="' + backgrOp + 'border-radius:3px;width: min-content;margin: auto;padding:2px;">' + title + '</div></div> </div>';
            if (!FgetSetting(12) && typeof Ch.side_icon != "undefined")
                if (Ch.side_icon != "") html += '<img align="left" src="' + _img(Ch.side_icon) + '" style="top:-' + st_h + 'px;position:relative;height:' + (st_h - 4) + 'px;width:' + (st_w) + 'px;padding:2px;">'
        }
        html += '</div>';
        return gV(Ch, "before") + html + gV(Ch, "after")
    }
    var num = (index + 1);
    if (typeof Ch.orig_num != "undefined") num = (1 + Ch.orig_num);
    if (is_mark && is_mark_array[index] == "1") {
        num = "<img width='" + Math.round(l00I1lOQIHVIK01O10Ypr) + "' src='" + _img("_OI_ok.png") + "' />"
    }
    var img = '';
    if (typeof Ch.logo_search != "undefined") {
        Ch.imgsrc = Ch.logo_search
    }
    var dspnum = '';
    if (FgetSetting(10)) Ch.imgsrc = "none";
    else if (FgetSetting(9)) {
        if (Ch.imgsrc.match(/^http/) && !Ch.imgsrc.match(/^(obovse\.ru|forkplayer\.tv)/)) Ch.imgsrc = "none"
    }
    if (Ch.imgsrc == "hidden") {
        img = '';
        dspnum = 'display:none;'
    } else if (Ch.imgsrc == "none" || typeof Ch.imgsrc == "undefined") {
        img = '<div style="float:left;width:' + Math.round(l00I1lOQIHVIK01O10Ypr * 1.2 * (css_w(100) / css_wh(100))) + 'px;margin: ' + css_wh(2) + 'px;padding-right: ' + css_w(2) + 'px;">&nbsp;</div>'
    } else if (Ch.imgsrc.match(/^http:\/\/check(true|false)/)) {
        img = '<div style="float:left;"><input type="checkbox" style="width: ' + Math.round(l00I1lOQIHVIK01O10Ypr * 1.1 * (css_w(100) / css_wh(100))) + 'px;height: ' + (l00I1lOQIHVIK01O10Ypr - css_wh(6)) + 'px;" ' + (Ch.imgsrc == "http://checktrue" ? "checked" : "") + ' readonly /></div>'
    } else if (!FgetSetting(12)) img = '<img style="margin: ' + css_wh(2) + 'px;padding-right: ' + css_w(2) + 'px;" align="left" id="img' + index + '" src="' + _img("_OI_1px.png") + '" data-src="' + _img(Ch.imgsrc) + '" width="' + Math.round(l00I1lOQIHVIK01O10Ypr * 1.2 * (css_w(100) / css_wh(100))) + '" height="' + (l00I1lOQIHVIK01O10Ypr - css_wh(4)) + '">';
    else if (Ch.imgsrc.indexOf("open.png") > 0 || Ch.imgsrc.indexOf("1px.png") > 0 || Ch.imgsrc.indexOf("file.png") > 0 || Ch.imgsrc.indexOf("search.png") > 0) img = '';
    var html = '<div id="ch' + index + '" sel="0"' + FgetSetting(1, [' onmousemove="if(!this.sel) linkOver(' + index + ',this);" onmousedown="p_d();" onmouseup="p_u();" onclick="p_c(' + index + ');"', ""]) + ' style="text-align:left;float:left;border-radius:' + css_w(4) + 'px;cursor: default;margin: 2px 0px;width: ' + widthCh + 'px;overflow:hidden;text-overflow: ellipsis;height:' + l00I1lOQIHVIK01O10Ypr + 'px;' + dop + '">' + '<div id="numch' + index + '" style="float:left;padding-top:0px;min-width:' + css_w(38) + 'px;text-align:center;' + dspnum + '">' + num + '</div>' + img + '';
    if (gV(Ch, "infolink") != "" && Ch.infolink != " " && gV(Ch, "search_on") == "") {
        var ttl = '<div style="height:' + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.75) + 'px;font-size:' + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.62) + 'px;margin-top:' + css_wh(-2) + 'px;overflow: hidden;">' + title + '</div>' + '<div style="margin-top:' + css_wh(Math.ceil(l00I1lOQIHVIK01O10Ypr * -0.1)) + 'px;padding-left:3px;height:' + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.38 - 1) + 'px;font-size:' + Math.ceil(l00I1lOQIHVIK01O10Ypr * 0.35 - 1) + 'px;">' + Ch.infolink + '</div>'
    } else ttl = title;
    if (!FgetSetting(12)) html += "<div id='contmenu" + index + "' style='border-radius:" + css_w(4) + "px;height:" + l00I1lOQIHVIK01O10Ypr + "px;width:" + (l00I1lOQIHVIK01O10Ypr - 10) + "px; float: right;display:none;'><img" + FgetSetting(1, [" onclick=\"lQQOIOO01HvItO11QYpr('menu',VK_RED);\"", ""]) + " src='" + _img("_OT_menu2.png?ndate190223_") + "' style='height:" + l00I1lOQIHVIK01O10Ypr + "px;width:" + (l00I1lOQIHVIK01O10Ypr - 10) + "px;' /></div>";
    if (Ch.stream_url == "") html += "<div id='rat" + index + "' style='float:right;display:none;padding-top:1px;font-size:" + (ch_size * (css_wh(100) / css_w(100)) - css_wh(13)) + "px;width:" + css_w(31) + "px;'></div>";
    if (gV(Ch, "search_on") != "") var titlSt = "background-color:#ddd;color:#333;overflow: hidden;border-radius:" + css_w(4) + "px;padding:3px;margin-top:" + css_wh(2) + "px;font-size:85%;width:90%;height:" + (l00I1lOQIHVIK01O10Ypr - 10) + "px;";
    else titlSt = "width:100%;";
    html += '<div style="overflow:hidden;padding:' + css_wh(0) + 'px 2px 0px ' + css_wh(0) + 'px;" id="title' + index + '"><div id="titleid' + index + '" style="float:left;' + titlSt + FgetSetting(4, ["white-space:nowrap;", ""]) + '">' + ttl + '</div>';
    html += '</div></div><div style="width:0px;height:' + (l00I1lOQIHVIK01O10Ypr + 4) + 'px;margin:0px 0px;"></div>';
    if (gV(Ch, "after") != "") html += Ch.after;
    if (gV(Ch, "before") != "") html = Ch.before + html;
    return html
}

function stf() {
    kjtYpr.l1l0l1OvIo1ll001lYprPlay('VivatBookmarks');
    event.stopPropagation();
    event.preventDefault();
    event.stopImmediatePropagation();
    return !1
}

function p_d() {
    kjtYpr.long_left = !1;
    kjtYpr.long_timer = setTimeout('kjtYpr.long_left=true;kjtYpr.l1l0l1OvIo1ll001lYpr();', 700)
}

function p_u() {
    clearTimeout(kjtYpr.long_timer)
}

function p_c(ind) {
    if (handler == "context") return;
    if (gs.on) {
        if (gs.key == 1) {
            if (handler == "vk") returnVK();
            kjtYpr.lI11111bPNQ0III1Ypr()
        } else {
            kjtYpr.inf("_FPTo cancel the search, press again_", 2000, "yellow", !0);
            gs.key = 1
        }
        return !1
    }
    if (!kjtYpr.long_left) {
        setSelect(ind);
        kjtYpr.l0lI10EMI1I10Ypr()
    }
    kjtYpr.long_left = !1
}

function lIII1Ql10v1lQ00lYpr() {
    return
}

function set_times(mode) {
    if (l1IOIIz1l0Ol110Ypr() || xml_live || ftimes == null) return;
    try {
        for (var i = 0; i < kjtYpr.channels.length; i++) {
            if (kjtYpr.channels[i].stream_url == "") continue;
            if (typeof ftimes[getIdent(i)] != "undefined") {
                $_("titleid" + i).style.textDecoration = "line-through"
            } else if (mode) $_("titleid" + i).style.textDecoration = "";
            if (typeof allTimes[getIdent(i)] != "undefined") {
                if (allTimes[getIdent(i)].d != kjtYpr.hardware + " (" + kjtYpr.mac + ")") {
                    $_("numch" + i).style.textDecoration = "underline"
                } else $_("numch" + i).style.textDecoration = ""
            }
        }
    } catch (e) {}
}
rollTitle = function (w) {
    if (getSelect() < 0 || FgetSetting(12) || (gV(curCh(), "position") != "list" && (kjtYpr.typeList == "start" || kjtYpr.global.typeList == "start"))) return;
    if (w == null) {
        var b = document.getElementsByTagName('body')[0];
        var div = document.createElement('div');
        div.id = "textwidth";
        div.style.position = "absolute";
        div.style.top = css_wh(innerH - 50) + "px";
        div.style.left = "0px";
        div.style.fontSize = ch_size + "px";
        div.innerHTML = curCh("title");
        b.appendChild(div);
        kjtYpr.rollW = $_("textwidth").offsetWidth;
        b.removeChild(div)
    } else kjtYpr.rollW = w;
    if (kjtYpr.rollW > 524) {
        kjtYpr.rollX = kjtYpr.rollX - 7;
        if (hideRight) var ptx = 1130;
        else ptx = 524;
        if (kjtYpr.rollX < css_w(ptx) - 30 - kjtYpr.rollW) {
            kjtYpr.rollX = 0;
            $_('titleid' + getSelect()).style.marginLeft = "0px";
            $_('titleid' + getSelect()).style.width = css_w(ptx) + "px";
            timerScroll = setTimeout("rollTitle(" + kjtYpr.rollW + ")", 1650)
        } else {
            try {
                $_('titleid' + getSelect()).style.marginLeft = kjtYpr.rollX + "px";
            } catch(err) {
                // console.log("Style error")
                //pass
            }
            try {
                $_('titleid' + getSelect()).style.width = css_w(ptx) + (-1 * kjtYpr.rollX) + "px";
            } catch(err) {
                // console.log("Style error")
                //pass
            }
            
            if (kjtYpr.rollX < css_w(ptx) - 25 - kjtYpr.rollW) timerScroll = setTimeout("rollTitle(" + kjtYpr.rollW + ")", 450);
            else timerScroll = setTimeout("rollTitle(" + kjtYpr.rollW + ")", 100)
        }
    }
};

function epgAppend(b1, b2) {
    var top_t = $("#site").offset().top - 720;
    var top_b = top_t + $("#site").height() + 1440;
    if (!l1IOIIz1l0Ol110Ypr() && is_iptv > 2) {
        if (kjtYpr.typeList == "start") var n1 = 45;
        else n1 = 3 + Math.ceil(kjtYpr.GL.rows);
        var x1 = getSelect() - n1;
        var x2 = getSelect() + n1;
        if (b1 != null) x1 = b1;
        if (b2 != null) x2 = b2;
        if (x1 < 0) x1 = 0;
        if (x2 > kjtYpr.channels.length) x2 = kjtYpr.channels.length;
        for (var i = x1; i < x2; i++) {
            if (getTypePos(kjtYpr.channels[i], i) == "list" && $_("ch" + i) != null) {
                if (typeof kjtYpr.channels[i].epgnow != "undefined") {
                    var ch_pos = $("#ch" + i).offset().top;
                    if (ch_pos > top_t && ch_pos < top_b) {
                        if (gV(kjtYpr.channels[i], "display_title") != "") var title = kjtYpr.channels[i].display_title;
                        else title = kjtYpr.channels[i].title;
                        if (title == "" || title == " ") title = gV(kjtYpr.channels[i], "playlist_url").replace(/^https?:\/\//, "");
                        lO10OIOlxzlO100OIYpr("titleid" + i, "<div style='width: 40%;  float: left;  text-align: left;  height: " + css_wh(35) + "px;    overflow: hidden;  '>" + "" + title + "</div>" + "<div style='float:right;width:59%;text-align:left;font-size:" + lQIO0l010VIvIl111IYpr + "px;'><div style='float:left;width:86%;height:" + css_wh(23) + "px; overflow: hidden;'>" + kjtYpr.channels[i].epgnow.title + "</div><div style='float:right;font-size: 90%;'>" + kjtYpr.channels[i].epgnow.time + "</div><br>" + "<div style='width:" + css_w(410) + "px;height:" + css_wh(5) + "px;background-color:gray;'>" + "<div style='width:" + kjtYpr.channels[i].epgnow.cur + "px;height:5px;background-color:rgb(132, 29, 29);'></div>" + "</div>" + "</div>")
                    } else if (ch_pos > top_b) break
                }
            }
        }
    }
}
var oldStepSelect = 0;

function stepImg(b1, b2) {
    if (handler == "menu") {
        var xt = $_("scrollsite").scrollTop;
        var top_t = $("#site").offset().top - 720;
        var top_b = top_t + $("#site").height() + 1440;
        if (getSelect() < 0 && oldStepSelect >= 0) {
            oldStepSelect = getSelect();
            return
        }
        oldStepSelect = getSelect();
        var nWidth = kjtYpr.channels.length / (sPosMaxY() + 1);
        var nHeight = kjtYpr.channels.length / nWidth;
        var chHeight = $("#content").height() / nHeight;
        var elOnScr = Math.ceil(($("#site").height() / chHeight) * nWidth);
        n1 = elOnScr * 2;
        var x1 = getSelect() - n1;
        var x2 = getSelect() + n1;
        if (b1 != null) x1 = b1;
        if (b2 != null) x2 = b2;
        if (x1 < 0) x1 = 0;
        if (x2 > kjtYpr.channels.length) x2 = kjtYpr.channels.length;
        for (var i = x1; i < x2; i++) {
            if (handler == "menu" && $_("ch" + i) != null) {
                if ($_("img" + i) != null) {
                    var ch_pos = $("#ch" + i).offset().top;
                    if (ch_pos > top_t && ch_pos < top_b) {
                        var ds = $_("img" + i).getAttribute('data-src');
                        if (ds) {
                            $_("img" + i).setAttribute('src', ds);
                            $_("img" + i).setAttribute('data-src', "")
                        }
                    } else if (ch_pos > top_b) break
                }
            }
        }
        if (getSelect() >= 0) oldselect = getSelect();
        if (oldStepSelect == -1) setSelect(-1)
    }
    epgAppend(b1, b2)
}

function addHandler(object, event, handler, useCapture) {
    if (object.addEventListener) {
        object.addEventListener(event, handler, useCapture ? useCapture : !1)
    } else if (object.attachEvent) {
        object.attachEvent('on' + event, handler)
    } else {}
}
addHandler(window, 'DOMMouseScroll', wheel);
addHandler(window, 'mousewheel', wheel, {
    passive: !1
});

function wheel(event) {
    var delta;
    event = event || window.event;
    if (event.wheelDelta) {
        delta = event.wheelDelta / 120;
        if (window.opera) delta = -delta
    } else if (event.detail) {
        delta = -event.detail / 3
    }
    if (handler == 'menu') {
        var s = getSelect() - 3 * delta;
        if (s < 0) kjtYpr.lIOIOIBu0mO11llO0Ypr(0);
        else if (s >= kjtYpr.channels.length) kjtYpr.lIOIOIBu0mO11llO0Ypr(kjtYpr.channels.length - 1);
        else {
            if (getSelect() >= 0 && getTypePos(curCh(), getSelect()) == "list") kjtYpr.lIOIOIBu0mO11llO0Ypr(s);
            else if (delta < 0) keyHandler({
                "keycode": VK_DOWN,
                "isTrusted": !0
            });
            else keyHandler({
                "keycode": VK_UP,
                "isTrusted": !0
            })
        }
        if (event.preventDefault) event.preventDefault();
        event.returnValue = !1
    }
}
var lastScroll = 0,
    progScroll = 0,
    tmpsel = 0;

function scrollSite() {
    if (!progScroll) {
        var xt = $_("scrollsite").scrollTop;
        var nWidth = kjtYpr.channels.length / (sPosMaxY() + 1);
        var nHeight = kjtYpr.channels.length / nWidth;
        var chHeight = $("#content").height() / nHeight;
        var elOnScr = Math.ceil(($("#site").height() / chHeight) * nWidth);
        var selOfSroll = Math.ceil((xt / $("#content").height()) * kjtYpr.channels.length + elOnScr / 2);
        n1 = elOnScr * 2;
        var x1 = selOfSroll - n1;
        var x2 = selOfSroll + n1;
        if (x1 < 0) x1 = 0;
        if (x2 > kjtYpr.channels.length) x2 = kjtYpr.channels.length;
        CAS = [];
        for (var i = 0; i < kjtYpr.channels.length; i++) {
            if (handler == "menu" && $_("ch" + i) != null) {
                if (i >= x1 && i <= x2) {
                    if ($_("ch" + i).style.display == "none") {
                        $_("ch" + i).style.display = "block"
                    }
                    CAS.push(i)
                } else if ($_("ch" + i).style.display == "block" || $_("ch" + i).style.display == "") $_("ch" + i).style.display = "none"
            }
        }
        if (getSelect() < x1 || getSelect() > x2) setSelect(selOfSroll);
        clearTimeout(stpeI);
        stpeI = setTimeout(function () {
            stepImg(x1, x2)
        }, 800)
    } else progScroll = 0
}
var stpeI, mcanc = 10,
    CAS = [];

function linkOver(s, el, cb) {
    if (el != null && mcanc < 10) {
        mcanc++;
        return
    }
    if (handler == 'context' || handler == 'vk' || handler == 'move' || handler == 'confirm' || handler == 'group') return;
    if (s != null) setSelect(s);
    reselAll();
    if (kjtYpr.channels.length == 0) return;
    if (getSelect() < 0) return;
    var nWidth = kjtYpr.channels.length / (sPosMaxY() + 1);
    var nHeight = kjtYpr.channels.length / nWidth;
    var chHeight = $("#content").height() / nHeight;
    var elOnScr = Math.ceil(($("#site").height() / chHeight) * nWidth);
    n1 = elOnScr * 2;
    var x1 = getSelect() - n1;
    var x2 = getSelect() + n1;
    if (x1 < 0) x1 = 0;
    if (x2 > kjtYpr.channels.length) x2 = kjtYpr.channels.length - 1;
    var start11 = new Date().getTime();
    if (handler == "menu") {
        for (var i in CAS) {
            if ((CAS[i] < x1 || CAS[i] > x2) && $_("ch" + CAS[i]) != null) {
                if ($_("ch" + CAS[i]).style.display == "block" || $_("ch" + i).style.display == "") $_("ch" + CAS[i]).style.display = "none"
            }
        }
        CAS = [];
        for (var i = x1; i <= x2; i++) {
            if ($_("ch" + i) != null) {
                if ($_("ch" + i).style.display == "none") {
                    $_("ch" + i).style.display = "block"
                }
                CAS.push(i);
                if (i == getSelect()) {
                    markselect(i, 1, el);
                    linkShowDesc();
                    clearTimeout(prog_timer);
                    if (is_iptv > 2) {
                        ll1lO1OuWT0100Ypr_last = 0;
                        ll1lO1OuWT0100Ypr()
                    }
                    if (getSelect() >= 0 && (plmini_canplay || el != null) && (kjtYpr.GL.pip == 2 || (kjtYpr.GL.pip == 1 && is_iptv > 2))) {
                        Player.cur_time = 0;
                        clearTimeout(plmini_timer);
                        if (curCh("stream_url") != "") {
                            videoLoad("off");
                            plmini_timer = setTimeout("play_mini();", 2500)
                        }
                    }
                    clearTimeout(timerScroll);
                    kjtYpr.rollX = 0;
                    if (typeof kjtYpr.channels[i].epgnow == "undefined") {
                        timerScroll = setTimeout("rollTitle();", 1650)
                    }
                    if (typeof curCh()["green"] == "object") {
                        lO10OIOlxzlO100OIYpr("bt2", curCh()["green"].title)
                    } else lO10OIOlxzlO100OIYpr("bt2", "_FPZakladki_");
                    if (typeof curCh()["yellow"] == "object") {
                        lO10OIOlxzlO100OIYpr("bt3", curCh()["yellow"].title)
                    } else if (typeof curCh()["yellow_url"] != "undefined")
                        if (curCh()["yellow_url"] != "") {
                            if (curCh()["yellow_title"] == "") curCh()["yellow_title"] = curCh()["yellow_url"];
                            lO10OIOlxzlO100OIYpr("bt3", curCh()["yellow_title"])
                        } else lO10OIOlxzlO100OIYpr("bt3", "_FPVnesh_. _FPzakladki_")
                } else {
                    markselect(i, 0)
                }
            }
        }
    }
    var xx1 = new Date().getTime() - start11;
    if (el == null) {
        mcanc = 0;
        var s = getSelect();
        if (s >= kjtYpr.channels.length) s = kjtYpr.channels.length - 1;
        if (s < 0) s = 0;
        if ($_("ch" + s) != null) {
            var ch_pos = $_("ch" + s).offsetTop - $_("scrollsite").scrollTop;
            var site_bot = $_("site").offsetHeight;
            var y_t = Math.ceil($_("ch" + s).offsetTop - site_bot * 0.08);
            var y_b = Math.ceil($_("ch" + s).offsetTop + $_("ch" + s).offsetHeight - site_bot * 0.87);
            progScroll = 1;
            if (oldselect >= 0 && oldselect < kjtYpr.channels.length && (getSelect() - oldselect == -10 || getSelect() - oldselect == 10)) {
                var ch_lastpos = $_("ch" + oldselect).offsetTop - $_("scrollsite").scrollTop;
                $_("scrollsite").scrollTop += (ch_pos - ch_lastpos)
            } else if (y_t < $_("scrollsite").scrollTop) {
                $_("scrollsite").scrollTop = y_t
            } else if (y_b > $_("scrollsite").scrollTop) $_("scrollsite").scrollTop = y_b
        }
    }
    if (i < 15 || l1IOIIz1l0Ol110Ypr() || cVc == 0) {
        stepImg()
    } else {
        stpeI = setTimeout("stepImg();", 800)
    }
}

function linkShowDesc() {
    if (box_low2 || FgetSetting(12)) clearTimeout(lapsetimer);
    if (getSelect() < 0) return;
    kjtYpr.inf((1 + parseInt(getSelect())) + "/" + count);
    var desc = (curCh("description") == "") ? "<center>" + curCh("title") + "</center>" : curCh("description");
    if (modeGroup) modeGroup = !1;
    if (getTypePos(curCh(), select) == "list") {
        try {
            var i = select;
            while (getTypePos(kjtYpr.channels[i], i) == "list") {
                i--
            }
            i++;
            var ch_pos = $("#ch" + i).offset().top;
            var top_l = $("#site").offset().top;
            $_("rightHalf").style.display = "block";
            if (ch_pos < top_l) ch_pos = top_l;
            ch_pos = Math.ceil(ch_pos);
            $_("rightHalf").style.top = (ch_pos) + "px";
            $_("rightHalf").style.maxHeight = (690 - ch_pos) + "px";
            if ($_("bottomMenu") != null) lO10OIOlxzlO100OIYpr("bottomMenu", "");
            lO10OIOlxzlO100OIYpr("infoList", desc)
        } catch (e) {}
    } else {
        $_("rightHalf").style.display = "none";
        lO10OIOlxzlO100OIYpr("infoList", "");
        if ($_("bottomMenu") != null) lO10OIOlxzlO100OIYpr("bottomMenu", desc)
    }
    if ($("#rightHalf").height() < 300) {
        $_("rightHalf").style.border = "none"
    } else {
        $_("rightHalf").style.border = "1px solid gray";
        $_("rightHalf").style.borderRadius = "4px"
    }
    setStyles("infoList", "infoList");
    setStyles("rightHalf", "rightHalf");
    if (getTypePos(curCh(), select) == "html") {
        if (curCh("description") != "") $_("middle").style.display = "block";
        lO10OIOlxzlO100OIYpr("middle", curCh("description"))
    } else $_("middle").style.display = "none";
    if (ttmac) {
        var x = new Date().getTime() - start1
    }
}

function setStyles(id, styles, arraySt) {
    if (typeof kjtYpr.global.style != "undefined" && $_(id) != null) {
        if (arraySt == null) arraySt = kjtYpr.global.style;
        var st = styles.split("|");
        if (arraySt != null) {
            if (typeof arraySt[st[0]] != "undefined" && arraySt[st[0]] != null) {
                if (st.length > 1) {
                    var el = st.shift();
                    return setStyles(id, st.join("|"), arraySt[el])
                } else {
                    for (var i in arraySt[st[0]]) {
                        if (i == "before") {
                            var c = $_(id).innerHTML;
                            if (c.indexOf("<chbefore>") >= 0) {
                                var expr = new RegExp('<chbefore>.*?</chbefore>');
                                c = c.replace(/\r/g, "").replace(/\n/g, "").replace(expr, "")
                            }
                            c = "<chbefore>" + arraySt[st[0]][i] + "</chbefore>" + c;
                            lO10OIOlxzlO100OIYpr(id, c)
                        } else if (i == "after") {
                            var c = $_(id).innerHTML;
                            if (c.indexOf("<chafter>") >= 0) {
                                var expr = new RegExp('<chafter>.*?</chafter>');
                                c = c.replace(/\r/g, "").replace(/\n/g, "").replace(expr, "")
                            }
                            c += "<chafter>" + arraySt[st[0]][i] + "</chafter>";
                            lO10OIOlxzlO100OIYpr(id, c)
                        } else $_(id).style[i] = arraySt[st[0]][i]
                    }
                }
            }
        }
    }
}(function ($) {
    $.scrollToElement = function ($element, speed) {
        speed = speed || 750;
        $("html, body").animate({
            scrollTop: $element.offset().top,
            scrollLeft: $element.offset().left
        }, speed);
        return $element
    };
    $.fn.scrollTo = function (speed) {
        speed = speed || "normal";
        return $.scrollToElement(this, speed)
    }
})(jQuery);

function markselect(id, m, el) {
    $_("ch" + id).sel = m;
    if (m) {
        if (!FgetSetting(12) && !FgetSetting(2)) $_("ch" + id).style.background = "none rgba(180, 180, 180, 0.7)";
        else $_("ch" + id).style.background = "none rgb(180, 180, 180)";
        if (getTypePos(curCh(), select) == "list") $_("ch" + id).style.color = "black";
        if (el != null && !FgetSetting(12)) {
            if ($_('contmenu' + id) != null) {
                $_('contmenu' + id).style.display = 'block';
                $_('contmenu' + id).style.background = $_('ch' + id).style.background
            }
        }
    } else {
        $_("ch" + id).style.color = $_("leftHalf").style.color;
        if (!FgetSetting(12))
            if ($_('contmenu' + id) != null) $_('contmenu' + id).style.display = 'none';
        $_("ch" + id).style.background = "none"
    }
    if ($_('titleid' + id) != null && kjtYpr.typeList != "start") $_('titleid' + id).style.marginLeft = "0px";
    if (m) {
        setStyles("ch" + id, "channels|parent|selected");
        if (typeof kjtYpr.channels[id].style == "object") setStyles("ch" + id, "selected", kjtYpr.channels[id].style);
        setStyles("numch" + id, "channels|chnumber|selected");
        setStyles("contmenu" + id, "channels|contmenu|selected")
    } else {
        setStyles("ch" + id, "channels|parent|default");
        if (typeof kjtYpr.channels[id].style == "object") setStyles("ch" + id, "default", kjtYpr.channels[id].style);
        setStyles("numch" + id, "channels|chnumber|default")
    }
    if (m && gV(kjtYpr.channels[id], "position") == "fulleditline") {
        if (!FgetSetting(12) && !FgetSetting(2)) $_("ch" + id).style.background = "none rgba(180, 180, 180, 0.7)";
        else $_("ch" + id).style.background = "none rgb(180, 180, 180)"
    }
}
var lapsetimer, timerScroll;
var chOrig, chLast = 0,
    modeGroup = !1;

function listGroup(sel) {
    var t = kjtYpr.l1IlIl01l0tUIl1IIYpr.split("#CAT=");
    if (sel == null) {
        var submenu = [];
        for (var i = 0; i < chGroup.length; i++) {
            if (i == 1) kjtYpr.menu.push({
                "title": "<span style='color:white;'>_FPCategory_</span>",
                "playlist_url": t[0] + "#CAT=LISTCATS"
            });
            var el = {
                "title": "<span style='color:white;'>" + chGroup[i] + "</span>",
                "playlist_url": t[0] + "#CAT=" + i
            };
            if (kjtYpr.menu.length < 9) kjtYpr.menu.push(el);
            else submenu.push(el)
        }
        if (t.length > 1) listGroup(t[1])
    } else {
        if (gV(t, 1) == "LISTCATS") {
            try {
                if (!goBack) {}
            } catch (e) {
                kjtYpr.popUp("insetActive=" + insetActive + "<br>" + e.message)
            }
        } else {
            if (sel < 0) sel = chGroup.length - 1;
            else if (sel > chGroup.length - 1) sel = 0
        }
        chGroupSel = sel;
        for (var i = 0; i < kjtYpr.menu.length; i++) {
            if (kjtYpr.menu[i].playlist_url.indexOf(t[0] + "#CAT=") == 0) {
                if (kjtYpr.menu[i].playlist_url.split("#CAT=")[1] == sel) kjtYpr.menu[i].title = kjtYpr.menu[i].title.replace(/color:.*?;/, "color:black;");
                else kjtYpr.menu[i].title = kjtYpr.menu[i].title.replace(/color:.*?;/, "color:white;")
            }
        }
        if (chGroupSel == "LISTCATS") {
            kjtYpr.channels = [];
            for (var i = 0; i < chGroup.length; i++) {
                var el = {
                    "title": chGroup[i],
                    "playlist_url": t[0] + "#CAT=" + i
                };
                kjtYpr.channels.push(el)
            }
        } else if (chGroupSel == 0) {
            kjtYpr.channels = chOrig
        } else {
            kjtYpr.channels = [];
            for (var i = 0; i < chOrig.length; i++) {
                var z = chOrig[i].group.split(";");
                for (var j = 0; j < z.length; j++) {
                    if (z[j] == chGroup[chGroupSel]) {
                        kjtYpr.channels.push(chOrig[i]);
                        break
                    }
                }
            }
        }
        ll1lIOiIO0lO1IIIYpr = Math.random();
        kjtYpr.lIOIOIBu0mO11llO0Ypr()
    }
}
RegExp.escape = function (text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")
};

function closeMenu() {
    $_("MenuCh").style.display = "none";
    closeSubMenu()
}
var subMenu = [],
    sublllIOl1r11OIl1Ypr, submenuParent, submenuSelIcon = {},
    selfbookm = !1;

function closeSubMenu() {
    if ($_("submenu") != null) $_("submenu").parentNode.removeChild($_("submenu"));
    subMenu = []
}

function showSubMenu(m) {
    if ($_("submenu") != null) $_("submenu").parentNode.removeChild($_("submenu"));
    selfbookm = !1;
    $_("MenuCh").style.display = "block";
    $_("l1100I1QvJubu0lIOOYpr" + lllIOl1r11OIl1Ypr).style.backgroundColor = "rgb(70, 77, 90)";
    handler = "context";
    var div = document.createElement('div');
    div.id = "submenu";
    div.style.top = css_wh(lllIOl1r11OIl1Ypr * 25) + "px";
    div.style.left = ($_("MenuCh").offsetLeft + $_("MenuCh").offsetWidth + 1) + "px";
    div.style.color = "#EEEEEE";
    div.style.overflow = "visible";
    div.style.textAlign = "left";
    div.style.border = "1px solid gray";
    div.style.fontSize = css_wh(23) + "px";
    div.style.backgroundColor = "#323c42";
    sublllIOl1r11OIl1Ypr = 0;
    submenuParent = lllIOl1r11OIl1Ypr;
    div.style.position = "absolute";
    $_("main").appendChild(div);
    subMenu = [];
    if (m != null) {
        if (m == "cmdSorting") {
            var logo = "<img src='" + _img("_OI_ok.png") + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> ";
            subMenu.push({
                "title": "_FPTop_ (+1)",
                "cmd": "cmdSetSorting",
                "opt": "1"
            });
            subMenu.push({
                "title": "_FPpoumolch_ (0)",
                "cmd": "cmdSetSorting",
                "opt": "0"
            });
            subMenu.push({
                "title": "_FPBottom_ (-1)",
                "cmd": "cmdSetSorting",
                "opt": "-1"
            })
        } else if (m == "cmdAudio") {
            if (vk_repeat) var logo = "<img src='" + _img("_OI_ok.png") + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> Повтор";
            else logo = "Повтор";
            subMenu.push({
                "title": logo,
                "cmd": "cmdAudioRepeat"
            });
            subMenu.push({
                "title": "Перемешать",
                "cmd": "cmdAudioShuffle"
            });
            subMenu.push({
                "title": "Визуализация 1 ",
                "cmd": "cmdAudioV",
                "opt": "3"
            })
        } else if (m == "Bookmarks" || m == "cmdMoveBookmarks") {
            if (m == "Bookmarks") {
                var s1 = "_FPDobavitV_";
                var s2 = ""
            } else {
                s1 = "_FPPeremV_";
                s2 = "cmdMove"
            }
            if (is_iptv > 2 && select >= 0 && curCh("stream_url") != "" && curCh()["parser"] == "") {
                logo = "<img src='" + _img("_OI_1px.png") + "' id='selfbookmarkimg' width=" + css_w(21) + " height=" + css_wh(16) + " /> ";
                subMenu.push({
                    "title": logo + "Самообновляемая закладка",
                    "cmd": "selfbookmark"
                })
            }
            subMenu.push({
                "title": s1 + " _FPzakladki_ / _FPRaznoe_",
                "cmd": s2,
                "opt": "zakladki.xml"
            });
            subMenu.push({
                "title": s1 + " _FPzakladki_ / _FPSeriali_",
                "cmd": s2,
                "opt": "zakladkiSerials.xml"
            });
            subMenu.push({
                "title": s1 + " _FPzakladki_ / _FPFilmi_",
                "cmd": s2,
                "opt": "zakladkiFilms.xml"
            });
            subMenu.push({
                "title": s1 + " _FPzakladki_ / IPTV",
                "cmd": s2,
                "opt": "zakladkiIPTV.xml"
            });
            s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("bookmarks");
            var dopch = [];
            if (s != "") {
                var sd = l1l0IOIl_puQl1I1IYpr(s);
                if (sd != null) {
                    dopch = sd
                }
            }
            for (var i = 0; i < dopch.length; i++) {
                if (typeof dopch[i].logo_30x30 != "undefined") var logo = "<img src='" + _img(dopch[i].logo_30x30) + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> " + s1 + " " + dopch[i].title;
                else logo = s1 + " " + dopch[i].title;
                if (dopch[i].playlist_url != "bookmarks/toolbar")
                    subMenu.push({
                        "title": logo,
                        "cmd": s2,
                        "opt": dopch[i].playlist_url
                    })
            }
            subMenu.push({
                "title": s1 + " _FPBookmark toolbar_",
                "cmd": s2,
                "opt": "bookmarks/toolbar"
            });
            logo = "<img src='" + _img("_OI_b/c.png") + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> " + s1 + " _FPVneshnie_ _FPzakladki_";
            subMenu.push({
                "title": logo,
                "cmd": s2,
                "opt": "bookmarks/addext"
            });
            logo = "<img src='" + _img("_OI_b/c.png") + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> " + s1 + " _FPVneshnie_ _FPzakladki_ 2";
            subMenu.push({
                "title": logo,
                "cmd": s2,
                "opt": "bookmarks/addext2"
            });
            logo = "<img src='" + _img("_OI_b/c.png") + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> " + s1 + " _FPVneshnie_ _FPzakladki_ 3";
            subMenu.push({
                "title": logo,
                "cmd": s2,
                "opt": "bookmarks/addext3"
            });
            logo = "<img src='" + _img("_OI_plus.png") + "' width=" + css_w(21) + " height=" + css_wh(16) + " /> " + s1 + " Новую папку";
            subMenu.push({
                "title": logo,
                "cmd": s2,
                "opt": "bookmarks/addnew"
            })
        }
    } else {
        subMenu.push({
            "title": "_FPRename_",
            "cmd": "cmdRename"
        });
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") != 0 && kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("zakladki") != 0) {
            subMenu.push({
                "title": "_FPChangeURLicon_",
                "cmd": "cmdUrlIcon"
            });
            subMenu.push({
                "title": "_FPSelectIcon_",
                "cmd": "cmdSelIcon"
            });
            subMenu.push({
                "title": "_FPEdit URL_",
                "cmd": "cmdEditUrl"
            })
        }
    }
    if (select >= 0)
        if (curCh()["playlist_url"].indexOf("bookmarks/") == 0) subMenu.push({
            "title": "_FPDelete_",
            "cmd": "cmdDelBookm"
        });
    var html = "";
    for (var i = 0; i < subMenu.length; i++) {
        if (subMenu[i].title.indexOf("img src") == -1) subMenu[i].title = "<span style='padding-left:" + css_w(28) + "px;height:" + css_wh(25) + "px;padding-top:2px;'></span>" + subMenu[i].title;
        html += "<div" + FgetSetting(1, [" onmousemove=\"sublllIOl1r11OIl1Ypr=" + i + ";kjtYpr.l1l0l1OvIo1ll001lYprPos(sublllIOl1r11OIl1Ypr,true);\" onclick=\"sublllIOl1r11OIl1Ypr=" + i + ";subMenuEnter();\"", ""]) + " id='subl1100I1QvJubu0lIOOYpr" + i + "' class='menuchannel' style='width:auto;height:" + css_wh(25) + "px;'>" + subMenu[i].title + "</div>"
    }
    lO10OIOlxzlO100OIYpr("submenu", html);
    kjtYpr.l1l0l1OvIo1ll001lYprPos(sublllIOl1r11OIl1Ypr, !0)
}

function subMenuEnter() {
    if (subMenu.length > 0) {
        if (subMenu[sublllIOl1r11OIl1Ypr].cmd == "cmdSetSorting" || subMenu[sublllIOl1r11OIl1Ypr].cmd == "" || subMenu[sublllIOl1r11OIl1Ypr].cmd == "cmdAudioV" || subMenu[sublllIOl1r11OIl1Ypr].cmd == "cmdMove") {
            Menu[lllIOl1r11OIl1Ypr][3] = subMenu[sublllIOl1r11OIl1Ypr].opt;
            kjtYpr.l1l0l1OvIo1ll001lYprPlay(subMenu[sublllIOl1r11OIl1Ypr].cmd)
        } else kjtYpr.l1l0l1OvIo1ll001lYprPlay(subMenu[sublllIOl1r11OIl1Ypr].cmd)
    } else kjtYpr.l1l0l1OvIo1ll001lYprPlay(Menu[lllIOl1r11OIl1Ypr][2])
}
var autoexl0O1l101l1t_Y0lll1Ypr, expChanged = 1;

function autouserexport() {
    if (user != null && expChanged) {
        statusbar("сохранение ваших данных в аккаунте /api/export/" + user.login + ".....", "link");
        var g = "";
        var k = ["glstart", "bookmarks", "history", "zakladki.xml", "zakladkiFilms.xml", "zakladkiIPTV.xml", "zakladkiSerials.xml", "storage", "times", "", "", "", "", ""];
        for (var i in k) {
            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(k[i]);
            g += s + "[-..-]"
        }
        for (var i = 0; i < lOI10QpJAilIIIYpr; i++) {
            if (inset["tab" + i] != null && inset["tab" + i].length > 0) {
                g += l10O0I11gdZlOOIIYpr(inset["tab" + i]) + "[-..-]"
            }
        }
        PullDataFromPost(addident("http://forkplayer.tv/xml/account.php?do=fexport&rev=2&v=user"), 's=' + encodeURIComponent(g), "user");
        expChanged = 0
    }
}

function autoexport(m, m2) {
    statusbar("сохранения данных на сервере  /api/export/" + kjtYpr.hardware + ".....", "link");
    var g = "";
    for (var i in allfs) {
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(allfs[i]);
        g += s + "[-..-]"
    }
    if (m2) {
        autoexl0O1l101l1t_Y0lll1Ypr = "timer";
        var tmp = kjtYpr.hardware;
        kjtYpr.hardware += "_syncdseries";
        PullDataFromPost(addident("http://forkplayer.tv/xml/account.php?do=fexport"), 's=' + encodeURIComponent(g), "cmdSetSyncExpExit");
        kjtYpr.hardware = tmp;
        return
    }
    autoexl0O1l101l1t_Y0lll1Ypr = m;
    var tmp = kjtYpr.hardware;
    kjtYpr.hardware += "_syncauto";
    PullDataFromPost(addident("http://forkplayer.tv/xml/account.php?do=fexport"), 's=' + encodeURIComponent(g), "cmdSetSyncExpExit");
    kjtYpr.hardware = tmp
}
var autoimpok = !1;

function autoimport(m) {
    var tmp = kjtYpr.hardware;
    kjtYpr.hardware += "_syncauto";
    PullDataFrom(addident("http://forkplayer.tv/xml/account.php?do=fimport&v=auto"), "cmdSetSyncImpAuto");
    kjtYpr.hardware = tmp;
    setTimeout(function () {
        if (!autoimpok) {
            autoimpok = !0;
            kjtYpr.kjtYpj("sync");
            xhrt.abort()
        }
    }, 15000)
}
var wlistRewrite = !1;
var allfs = ["glsearch", "glstart", "history", "settings", "epg_set", "url0", "url1", "url2", "url3", "url4", "url5", "url6", "url7", "urlInset", "searches", "enteres", "zakladki.xml", "zakladkiSerials.xml", "zakladkiFilms.xml", "zakladkiIPTV.xml", "times", "vk_audio_pl", "vk_audio_sel", "vk_pl_url", "bookmarks", "lic", "mlang", "ordered", "xr", "url8", "url9", "storage", "lastdata", "datas", "mf", "url10", "url11"];
kjtYpr.l1l0l1OvIo1ll001lYprPlay = function (cmd, opt) {
    if (cmd == "selfbookmark") {
        if ($_("selfbookmarkimg").src == _img("_OI_select_all.png")) {
            selfbookm = !1;
            $_("selfbookmarkimg").src = "" + _img("_OI_1px.png") + ""
        } else {
            selfbookm = !0;
            $_("selfbookmarkimg").src = _img("_OI_select_all.png");
            kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> Может значительно увеличиться время запуска закладки! Адрес закладки будет всегда самообновляться с этого плейлиста! ", 3500)
        }
        return
    }
    if ($_("vk").style.display != "none") {
        $_("vk").style.display = "none";
        kjtYpr.inputId = "";
        $_("main").style.display = "block";
        handler = "menu"
    }
    closeMenu();
    var ch = curCh();
    wlistRewrite = !1;
    if (cmd.match(/(cmdToStart|cmdDelFromStart||cmdDel|cmdEdit|cmdUp)/)) expChanged = 1;
    switch (cmd) {
        case "cmdGoURL":
            handler = "menu";
            kjtYpr.l110l1lIPuoaO0I0IOYpr(Menu[lllIOl1r11OIl1Ypr][3]);
            break;
        case "cmdHelp":
            handler = "menu";
            break;
        case "cmdInfo":
            if (kjtYpr.sourceid != kjtYpr.REQUEST_ID) kjtYpr.source = l10O0I11gdZlOOIIYpr(kjtYpr.sourcedata);
            var u = kjtYpr.REQUEST_XML;
            if (u.indexOf("no_save") > 0) u = u.substring(0, Math.ceil(u.length - u.length / 2.5));
            var r = /\\u([\d\w]{4})/gi;
            ll0111l1wxUIOlO1lYpr(19, "Исходный код страницы<div style='height:24px;overflow:hidden;'>" + u + "</div><textarea id='sourcecode' style='overflow-y:scroll;width:100%;background-color:#eeeeee;color:black;height:590px;'>" + kjtYpr.source.replace(/no_save/g, "").replace(r, function (match, grp) {
                return String.fromCharCode(parseInt(grp, 16))
            }) + "</textarea>");
            return;

            function timeConverter(UNIX_timestamp) {
                var a = new Date(UNIX_timestamp * 1000);
                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                var year = a.getFullYear();
                var month = months[a.getMonth()];
                var date = a.getDate();
                var hour = a.getHours();
                var min = a.getMinutes();
                var sec = a.getSeconds();
                var time = date + ' ' + month + ' ' + year + ' ' + (hour > 10 ? hour : ("0" + hour)) + ':' + (min > 10 ? min : ("0" + min)) + ':' + (sec > 10 ? sec : ("0" + sec));
                return time
            }
            var u = l1110OI1u0OzlI10IIYpr();
            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("no_save") > 0 || kjtYpr.global.player == "inner")
                u = u.substring(0, Math.ceil(u.length - u.length / 2.5)) + "#no_save...<br>Автор листа запретил копирование";
            if (kjtYpr.global.cachetime > 1000000) u += "<br>Версия от: " + timeConverter(kjtYpr.global.cachetime);
            if (kjtYpr.global.setcache > 1000000) u += "<br>Страница загружена с кеша от: " + timeConverter(kjtYpr.global.setcache);
            u += "<br>Размер: " + kjtYpr.channels.length;
            if (kjtYpr.global.pageinfo != "") u += "<br>" + kjtYpr.global.pageinfo;
            ll0111l1wxUIOlO1lYpr(53, "Свойства страницы<br>URL-адрес: " + u);
            break;
        case "cmdMail":
            handler = "menu";
            setSelect(0);
            kjtYpr.l110l1lIPuoaO0I0IOYpr("cmdmail");
            break;
        case "cmdUserMenu":
            handler = "menu";
            if (is_mark) {
                is_mark = !1;
                for (var i = 0; i < kjtYpr.channels.length; i++) {
                    if (is_mark_array[i] == "1") {
                        kjtYpr.l0lI10EMI1I10Ypr(null, kjtYpr.channels[i].menu[Menu[lllIOl1r11OIl1Ypr][3]])
                    }
                }
            } else {
                kjtYpr.l0lI10EMI1I10Ypr(null, curCh()["menu"][Menu[lllIOl1r11OIl1Ypr][3]])
            }
            break;
        case "cmdMyAccount":
            handler = "menu";
            setSelect(0);
            kjtYpr.l110l1lIPuoaO0I0IOYpr("http://forkplayer.tv/xml/account.php");
            break;
        case "cmdMenuSettings":
            kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
            l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr + 3;
            kjtYpr.lII1O1LQIDl10IlOYpr();
            kjtYpr.PlayInset();
            break;
        case "cmdOpros":
            handler = "menu";
            setSelect(0);
            break;
        case "cmdSettingsIptv":
            handler = "menu";
            setSelect(0);
            kjtYpr.l110l1lIPuoaO0I0IOYpr("http://obovse.ru/smarttv/forkiptv.php?id=list");
            break;
        case "cmdOpenStart":
            handler = "menu";
            setSelect(0);
            gotoStart();
            break;
        case "cmdAbout":
            handler = "menu";
            setSelect(0);
            var data = {
                "navigate": "Контакты и Условия использования"
            };
            data["chan" + "nels"] = [{
                "title": "Контакты и Условия использования",
                "playlist_url": "",
                "logo_30x30": "",
                "description": "" + "ForkPlayer — это прикладное программное обеспечение для просмотра fxml(Fork eXtensible Markup Language)-страниц в глобальной сети. ForkPlayer используют для запроса, обработки, манипулирования и отображения содержания fxml-сайтов а также для непосредственного просмотра содержания файлов плейлистов (m3u,xml,xspf), изображений (gif, jpeg, png), аудио-видео форматов (mp3, mpeg, mkv), потокового видео (udp, hls).<br>" + "Ссылки которые Вы открываете используются вами на свой страх и риск и работают в виде \"Как есть\"<br>" + "ForkPlayer не несет ответственности за Контент созданный сторонними разработчиками и сторонние сайты и не выступает в их поддержку.<br>" + "<span style='color:yellow;'>Контакты: </span><br>Форма для связи: http://forkplayer.tv/contact/<br>Email: support@mail.forkplayer.tv<br>Telegram: https://t.me/forkplayertv<br>" + "VK: https://vk.com/smarttv_ru<br>" + "<br>Благодарим вас за использование ForkPlayer!"
            }];
            this.l1IlIl01l0tUIl1IIYpr = cmd;
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdDonate":
            handler = "menu";
            break;
        case "cmdRewrite":
            wlistRewrite = !0;
            kjtYpr.l0lI10EMI1I10Ypr();
            break;
        case "VivatRod":
            if (kjtYpr.Password2 != kjtYpr.GL.passwordkey) {
                showParrent(cmd);
                return
            }
            if (ch.is_parent_lock == "0") {
                ch.is_parent_lock = "1";
                kjtYpr.inf("Родительский контроль установлен!", 1500)
            } else {
                ch.is_parent_lock = "0";
                kjtYpr.inf("Родительский контроль снят!", 1500)
            }
            if (api_vivat.indexOf("/ajax") > 0) PullDataFrom(api_vivat + "/changeSrvFavoritList.php?chID=" + ch.channel_id + "&ParentLock=" + ch.is_parent_lock + "&STBId=" + device_id + "&sn=" + ssx + "&mac=" + sm);
            else PullDataFrom(api_vivat + "/set_fav_lock.php?device_id=" + device_id + "&device_token=" + device_token + "&channel_id=" + ch.channel_id + "&is_parent_lock=" + ch.is_parent_lock);
            ll1lIOiIO0lO1IIIYpr = Math.random();
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            handler = "menu";
            break;
        case "cmdOpenInsetClose":
            lOI10QpJAilIIIYpr++;
            l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr - 1;
            inset["tab" + l1OIOvnWuZI0lO0Ypr] = oldinset;
            kjtYpr.PlayInset();
            handler = "menu";
            break;
        case "cmdClearprov":
            kjtYpr.lIllOVRj11lO10Ypr(Menu[lllIOl1r11OIl1Ypr][3], "");
            payd = {};
            handler = "menu";
            tmf();
            break;
        case "cmdRunWidget":
            ll0111l1wxUIOlO1lYpr(57, "Запуск виджета производится в 1280х720, если запускаемый виджет имеет разрешение 960х540 он будет отображаться не на весь экран!");
            break;
        case "cmdSetIcon":
            if (Menu[lllIOl1r11OIl1Ypr][3] != "cancel") {
                if (submenuSelIcon.playlist_url.indexOf("bookmarks/") == 0 && !selIconstart) {
                    xhr_bookmark(submenuSelIcon.playlist_url, cmd, Menu[lllIOl1r11OIl1Ypr][3])
                } else {
                    var t = getVars("start");
                    t.fav[submenuSelIcon.id].logo_30x30 = Menu[lllIOl1r11OIl1Ypr][3];
                    setVars("start", t);
                    $_("vk").style.display = "none";
                    kjtYpr.inputId = "";
                    handler = "menu";
                    if (l1IOIIz1l0Ol110Ypr()) page_rs({
                        "src": "_reload"
                    })
                }
            }
            submenuSelIcon = {};
            handler = "menu";
            kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
            break;
        case "cmdDelBookm":
            var x = xhr_bookmark(ch.playlist_url, "count");
            ll0111l1wxUIOlO1lYpr(56, "_FPAre you sure_?<br>(" + x + " закладок)");
            break;
        case "cmdSelIcon":
            if (l1IOIIz1l0Ol110Ypr()) selIconstart = !0;
            else selIconstart = !1;
            submenuSelIcon = ch;
            submenuSelIcon.selicon = !0;
            handler = "menu";
            kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
            subMenu = [];
            break;
        case "cmdUrlIcon":
            l0111O0tihuOIIlOYpr("_FPEnterURLicon_", ch.logo_30x30);
            VK.Show("search");
            kjtYpr.inputId = cmd;
            kjtYpr.l0OlII0Ix1fI1I01Ypr("VK");
            break;
        case "cmdEditUrl":
            l0111O0tihuOIIlOYpr("_FPEnter URL_", ch.playlist_url);
            VK.Show("search");
            kjtYpr.inputId = cmd;
            kjtYpr.l0OlII0Ix1fI1I01Ypr("VK");
            break;
        case "cmdRename":
            if (l1IOIIz1l0Ol110Ypr()) selIconstart = !0;
            else selIconstart = !1;
            if (ch.title.indexOf("--") > 0) var title = ch.title.split("--")[1];
            else title = ch.title;
            if (title.indexOf("<div") == 0) {
                title = title.match(/.*nowrap;'>(.*?)</)[1]
            }
            l0111O0tihuOIIlOYpr("_FPEnterTitle_", title);
            VK.Show("search");
            kjtYpr.inputId = cmd;
            kjtYpr.l0OlII0Ix1fI1I01Ypr("VK");
            break;
        case "cmdAudioV":
            try {
                vk_visual = 1;
                vk_Visualaudio(Menu[lllIOl1r11OIl1Ypr][3]);
                handler = "menu"
            } catch (e) {}
            break;
        case "cmdAudioRepeat":
            vk_audioRepeat(!0);
            handler = "menu";
            break;
        case "cmdAudioShuffle":
            vk_audioShuffle();
            handler = "menu";
            break;
        case "cmdAudio":
            handler = "menu";
            showSubMenu("cmdAudio");
            break;
        case "cmdEdit":
            if (l1IOIIz1l0Ol110Ypr() && ch.jtvname == "-1") {}
            handler = "menu";
            showSubMenu();
            break;
        case "Bookmarks":
            handler = "menu";
            showSubMenu("Bookmarks");
            break;
        case "cmdSorting":
            handler = "menu";
            showSubMenu("cmdSorting");
            break;
        case "cmdMoveBookmarks":
            handler = "menu";
            showSubMenu(cmd);
            break;
        case "cmdRemoteUpdate":
            test_thvp = !1;
            handler = "menu";
            l0I1l0lO0lsnG1I1QlYpr();
            break;
        case "cmdFon":
            kjtYpr.lIllOVRj11lO10Ypr("mf", ch.stream_url);
            if (fons.length == fonLen) fons[fonLen - 1] = {
                "url": kjtYpr.lIlOOIIlIEIzH1l1OIYpr("mf"),
                "title": "Web URL"
            };
            else fons.push({
                "url": kjtYpr.lIlOOIIlIEIzH1l1OIYpr("mf"),
                "title": "Web URL"
            });
            kjtYpr.GL.fon = fonLen - 1;
            setfon();
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            handler = "menu";
            kjtYpr.popUp("Фоном установлена ссылка:<br>" + ch.stream_url + "<br>Поменять фон можно в Настройках");
            break;
        case "cmdSelectAll":
            for (var i = 0; i < kjtYpr.channels.length; i++) is_mark_array[i] = "1";
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdSelect":
            is_mark = !is_mark;
            is_mark_array = {};
            if (is_mark) is_mark_array[select] = "1";
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdProxy":
            l0O1l101l1t_Y0lll1Ypr = kjtYpr.GL.player;
            l0llQlOl1LaOlQ1Ypr();
            lI1l1IOllHHCTuO0OlOYpr(ch.stream_url.replace(/^https?:\/\//, Menu[lllIOl1r11OIl1Ypr][3]) + "?tm=" + gnxu);
            break;
        case "cmdTranslate":
            handler = "menu";
            kjtYpr.GL.lang;
            var k = insetIn(-1, "get", "title") + "[-|-]";
            for (var i = 0; i < kjtYpr.channels.length; i++) {
                k += kjtYpr.channels[i].title + "[-|-]";
                k += kjtYpr.channels[i].description + "[-|-]"
            }
            statusbar("translate page to " + kjtYpr.GL.lang + "      ", "translate");
            PullDataFromPost("http://" + ServerFromList + "/smarttv/api.php?do=translatepage&format=html&lang=" + kjtYpr.GL.lang, "k=" + encodeURIComponent(k), "translatepage");
            break;
        case "cmdInsetBlock":
            if (insetIn(-1, "get", "b") == "") {
                insetIn(-1, "put", "b", "1")
            } else {
                insetIn(-1, "put", "b", "");
                insetIn(-1, "put", "a", "")
            }
            handler = "menu";
            kjtYpr.lII1O1LQIDl10IlOYpr();
            break;
        case "cmdInsetStart":
            if (insetIn(-1, "get", "a") == "") {
                for (var i = 0; i < lOI10QpJAilIIIYpr; i++) {
                    if (insetIn(-1, "get", "a", null, i) == "1") insetIn(-1, "put", "a", "", i)
                }
                insetIn(-1, "put", "a", "1");
                insetIn(-1, "put", "b", "1");
                if (kjtYpr.GL.recovery == "false") {
                    kjtYpr.popUp("_FPUdalenaGrupa_: _FPStartovoeMenu_");
                    kjtYpr.GL.recovery = !0;
                    kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
                }
            } else insetIn(-1, "put", "a", "");
            handler = "menu";
            kjtYpr.lII1O1LQIDl10IlOYpr();
            break;
        case "cmdReset":
            kjtYpr.l110l1lIPuoaO0I0IOYpr("cmdreset");
            break;
        case "cmdTimes":
            if (ftimes == null) ftimes = {};
            if (typeof ftimes[getIdent(select)] != "undefined") delete ftimes[getIdent(select)];
            else ftimes[getIdent(select)] = [1, 1];
            kjtYpr.lIllOVRj11lO10Ypr("times", l10O0I11gdZlOOIIYpr(ftimes));
            set_times(!0);
            handler = "menu";
            break;
        case "cmdPasteUsb":
            s = kjtYpr.l1IlIl01l0tUIl1IIYpr.replace("usb://", "").replace("xml://", "");
            copyUsbMode = 0;
            numret = 0;
            if (s.length > 0) {
                kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> _FPWhileCopyingFilesCannotViewVideoAndAudio_");
                pasteFile(copyUsb, s, copyUsbNames)
            }
            copyUsb = "";
            handler = "menu";
            setTimeout("ll1lIOiIO0lO1IIIYpr=Math.random();kjtYpr.l110l1lIPuoaO0I0IOYpr(kjtYpr.l1IlIl01l0tUIl1IIYpr);", 850);
            break;
        case "cmdCopyUsb":
            if (!is_mark) {
                is_mark_array = {};
                is_mark_array[select] = "1"
            }
            var ss = "",
                ssn = "";
            for (var i = 0; i < kjtYpr.channels.length; i++) {
                if (is_mark_array[i] == "1") {
                    ch = kjtYpr.channels[i];
                    if (ch.playlist_url == "") var s = ch.stream_url;
                    else s = ch.playlist_url;
                    s = s.replace("usb://", "").replace("xml://", "");
                    if (s.indexOf("md5hash") != -1) {
                        kjtYpr.inf("_FPNeedToOpenAndCloseTheVideoPlayerThenRepeatCopying_!", 1500);
                        handler = "menu";
                        return
                    }
                    if (ss != "") ss += "-|-";
                    ss += s;
                    if (ssn != "") ssn += "-|-";
                    ssn += ch.title
                }
            }
            is_mark = !1;
            copyUsb = ss;
            copyUsbNames = ssn;
            handler = "menu";
            break;
        case "cmdDelUsb":
            ll0111l1wxUIOlO1lYpr(10, "_FPUdalit_?");
            break;
        case "cmdSetSyncImp":
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
            statusbar("/api/import/" + kjtYpr.hardware + ".....", "link");
            PullDataFrom(addident("http://forkplayer.tv/xml/account.php?do=fimport&v=" + ch.menu_url), cmd);
            break;
        case "cmdSetSyncExp":
            ll0111l1wxUIOlO1lYpr(51, "_FPPreviousFileWillBeOverwritten_");
            break;
        case "cmdGroup":
            handler = "menu";
            kjtYpr.l0lI10EMI1I10Ypr(null, {
                "title": "_FPCategorys_",
                "playlist_url": kjtYpr.l1IlIl01l0tUIl1IIYpr.split("#CAT=")[0] + "#CAT=LISTCATS"
            });
            break;
        case "cmdSetSync":
            var data = {
                "playlist_name": "_FPSync_"
            };
            data["chan" + "nels"] = [{
                "logo_30x30": "",
                "title": "_FPExport_",
                "playlist_url": "cmdSetSyncExp",
                "description": "_FPSaveSetServ_"
            }, {
                "logo_30x30": "",
                "title": "_FPImport_ _FPmysets_",
                "playlist_url": "http://forkplayer.tv/xml/account.php?do=fimport&search=my",
                "description": "_FPPolNastrDr_<br>_FPEtoMozhUd_!"
            }, ];
            if (0) data.channels.push({
                "logo_30x30": "",
                "title": "_FPImport_ _FPnastrdruga_",
                "playlist_url": "http://forkplayer.tv/xml/account.php?do=fimport&box_mac=" + kjtYpr.mac + "&box_client=lg&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial + "|" + gnxu + "&vr=" + vr + "&box_server=" + nServer + "&hw=" + countHw + "&" + Math.random(),
                "search_on": "_FPVvLogDr_ obovse.ru",
                "description": "_FPPolNastrDr_<br>_FPEtoMozhUd_!"
            });
            this.l1IlIl01l0tUIl1IIYpr = cmd;
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdFavopen":
            kjtYpr.l1IOllIQV1ul00IlYpr("favorites");
            break;
        case "cmdExtopen":
            handler = "menu";
            keyHandler({
                "keycode": VK_YELLOW
            });
            break;
        case "cmdSetSorting":
            if (kjtYpr.GL.sortiptv != 3) {
                ll0111l1wxUIOlO1lYpr(29, "_FPSortirovka_ IPTV: " + shint(10 + parseInt(kjtYpr.GL.sortiptv)) + "<br>_FPEnabling can slow opening iptv lists_");
                return
            }
            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ordered");
            if (s == "") ordered = {};
            else ordered = l1l0IOIl_puQl1I1IYpr(s);
            if (ordered == null) ordered = {};
            var nm = ord_id();
            if (typeof ch.origsel != undefined && ch.origsel != undefined) origsel = ch.origsel;
            else origsel = select;
            if (typeof ordered[nm] == "undefined") ordered[nm] = {};
            if (typeof ordered[nm][origsel] == "undefined") ordered[nm][origsel] = 0;
            opt = parseInt(Menu[lllIOl1r11OIl1Ypr][3]);
            if (opt == 0) ordered[nm][origsel] = 0;
            else ordered[nm][origsel] += opt;
            if (ordered[nm][origsel] == 0) delete ordered[nm][origsel];
            kjtYpr.lIllOVRj11lO10Ypr("ordered", l10O0I11gdZlOOIIYpr(ordered));
            handler = "menu";
            kjtYpr.channels = reordered(l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(kjtYpr.ordchannels)));
            ll1lIOiIO0lO1IIIYpr = Math.random();
            old_s = select;
            kjtYpr.lIOIOIBu0mO11llO0Ypr(old_s);
            break;
        case "cmdEpg":
            var data = {
                "playlist_name": "_FPNastrStartMenu_"
            };
            if (ch.title.indexOf("<div") == 0 && ch.description != null) var tl = ch.description.substr(0, ch.description.indexOf("<br"));
            else tl = ch.title;
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("?list=") > 0) {
                tx = unescape(this.l1IlIl01l0tUIl1IIYpr.split("?list=")[1])
            } else tx = this.l1IlIl01l0tUIl1IIYpr;
            data["chan" + "nels"] = [{
                "logo_30x30": "",
                "title": "_FPSteret_",
                "stream_url": "setEpg|-" + tl + "|-" + tx + "|-"
            }];
            if (epg_region == "") {
                epg_tl = tl;
                epg_tx = tx;
                data["chan" + "nels"].push({
                    "logo_30x30": "",
                    "playlist_url": "cmdEpgRegionmain",
                    "title": "UA, RU, BY"
                });
                for (j in JtvEF) {
                    data["chan" + "nels"].push({
                        "logo_30x30": "",
                        "playlist_url": "cmdEpgRegion" + j,
                        "title": j.toUpperCase()
                    })
                }
            } else {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
                if (epg_region == "main") JtvArr = JtvE;
                else JtvArr = JtvEF[epg_region];
                for (var i in JtvArr) {
                    data["chan" + "nels"].push({
                        "logo_30x30": "http://" + getJserv() + "/common/img/" + i + ".png",
                        "description": "EPG CODE: " + i,
                        "jtvname": i,
                        "title": (i.indexOf(".") > 0) ? JtvArr[i] + "." + i.split(".")[1] : JtvArr[i],
                        "stream_url": "setEpg|-" + epg_tl + "|-" + epg_tx + "|-" + i + "|-" + epg_region
                    })
                }
            }
            ll1lIOiIO0lO1IIIYpr = Math.random();
            this.l1IlIl01l0tUIl1IIYpr = cmd;
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(90);
            handler = "menu";
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdGlUp":
            kjtYpr.ll0IlI01bONa1111OlYpr(ch.playlist_url, VK_UP);
            break;
        case "cmdGlDown":
            kjtYpr.ll0IlI01bONa1111OlYpr(ch.playlist_url, VK_DOWN);
            break;
        case "cmdGlAdd":
            try {
                var x = inset["tab" + insetActive][inset["tab" + insetActive].length - 1]
            } catch (e) {
                x = {
                    "title": "",
                    "img": ch.logo_30x30
                }
            }
            var ttl = x.title + " " + ch.title;
            lOIO0ljlJOI0l1Ypr(ttl, x.img, ch.playlist_url);
            break;
        case "cmdGlDel":
            kjtYpr.ll0IlI01bONa1111OlYpr(ch.playlist_url, VK_GREEN);
            break;
        case "cmdGlDef":
            kjtYpr.lIllOVRj11lO10Ypr("glsearch", "");
            kjtYpr.inf("Set default OK", 1200);
            readGl();
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdReload");
            handler = "menu";
            break;
        case "cmdStartDef":
            kjtYpr.lIllOVRj11lO10Ypr("glstart", "");
            kjtYpr.inf("_FPSetDefaultStartMenu_ OK", 1200);
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdReload");
            handler = "menu";
            break;
        case "cmdToStart":
            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("glstart");
            if (s.indexOf("{") !== 0) {
                var favlist = [];
                var fch = readSt();
                for (var i in fch) {
                    if (gV(fch[i], "source") == "fav") favlist.push(gV(fch[i]))
                }
            }
            if (favarray != null) ch = favarray;
            else if (getSelect() == -1) {
                ch = {};
                ch.playlist_url = insetIn(-1, "get", "url");
                ch.title = insetIn(-1, "get", "title");
                ch.logo_30x30 = insetIn(-1, "get", "img");
                ch.parser = insetIn(-1, "get", "p")
            }
            if (ch.playlist_url.indexOf("no_save") > 0 && kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("about:") != 0) {
                kjtYpr.inf("_FPCopied denied by author playlist_!", 2500);
                handler = "menu";
                return
            }
            var ch = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(ch));
            for (i in ch)
                if (ch[i] == "" || i == "rates" || i == "display_title" || i == "position") delete ch[i];
            var t = getVars("start");
            t.fav.push(ch)
            setVars("start", t);
            kjtYpr.inf("_FPDobavlenoV_ _FPStartovoeMenu_", 1200);
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            favarray = null;
            break;
        case "cmdDelFromStart":
            if (ch.playlist_url == "cmdSpider") {
                kjtYpr.inf("Этот пункт нельзя удалить!", 1200);
                handler = "menu";
                return
            }
            t = getVars("start");
            if (gV(ch, "source") == "fav") {
                t.fav.splice(ch.id, 1);
                setVars("start", t);
                kjtYpr.inf("Удалено из Избранное (" + ch.title + ")", 1500)
            } else if (gV(ch, "source").match(/(usertop)/)) {
                delete userTop[ch.playlist_url];
                kjtYpr.inf("Удалено из истории Лучшие адрес сайта (" + ch.title + ")", 1500)
            } else if (gV(ch, "source").match(/(top|third|service)/)) {
                if (typeof t.hidetop == "undefined") t.hidetop = {};
                t.hidetop[ch.playlist_url + ch.stream_url] = 1;
                setVars("start", t);
                kjtYpr.inf("Скрыто из Лучшие адрес сайта (" + ch.title + ")", 1500)
            }
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            kjtYpr.lIOIOIBu0mO11llO0Ypr(oldselect);
            break;
        case "cmdNewInset":
            setSelect(0);
            newInset(0);
            handler = "menu";
            break;
        case "cmdNewInsetPriv":
            setSelect(0);
            newInset(1);
            kjtYpr.popUp("Ваши действия в режиме инкогнито будут недоступны другим пользователям этого устройства. Однако закладки сохранятся.<br>В ForkPlayer не будет сохраняться следующая информация:<br>история просмотров; файлы cookie и данные сайтов;сведения, которые вы указываете в формах.", 2500);
            handler = "menu";
            break;
        case "cmdSetStart":
            setSelect(0);
            handler = "menu";
            kjtYpr.l1IOllIQV1ul00IlYpr("cmdSetStart");
            break;
        case "cmdSetSearch":
            setSelect(0);
            handler = "menu";
            kjtYpr.l1IOllIQV1ul00IlYpr("about:configSearch");
            break;
        case "cmdSetWeather":
            this.l1IlIl01l0tUIl1IIYpr = cmd;
            var data = {
                "playlist_name": ""
            };
            data["chan" + "nels"] = [];
            for (var i = 0; i < gs.count; i++) {
                if (gs.url[i].title == "") {
                    var ttl = gs.url[i].url.split("/");
                    gs.url[i].title = ttl[ttl.length - 1].split(".")[0]
                }
                var x = (gs.url[i].show == "1") ? "<font color=green>_FPVkl_</font>" : "<font color=red>_FPOtkl_</font>";
                data["chan" + "nels"].push({
                    "logo_30x30": gs.url[i].logo,
                    "title": gs.url[i].title + " " + x,
                    "playlist_url": "setGlSearch"
                })
            }
            handler = "menu";
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdSearchKinopoisk":
            this.l1IlIl01l0tUIl1IIYpr = "cmdSearchKinopoisk";
            var data = {
                "playlist_name": "Поиск фильмографии и рецензий на кинопоиске: "
            };
            data["chan" + "nels"] = [];
            if (inset["tab" + insetActive].length > 1) {
                var ttl = inset["tab" + insetActive][inset["tab" + insetActive].length - 1].title.split(" ");
                var s = "";
                for (var i = 0; i < ttl.length; i++) {
                    s += ttl[i];
                    if (i < ttl.length - 1) s += " ";
                    data["chan" + "nels"].unshift({
                        "logo_30x30": "http://st.kp.yandex.net/images/logoWhite.png",
                        "title": s,
                        // "playlist_url": "http://195.88.208.101/obovse.ru/smarttv/kinopoisk.php?id=search&search=" + encodeURIComponent(s)
                        "playlist_url": "http://127.0.0.1/obovse.ru/smarttv/kinopoisk.php?id=search&search=" + encodeURIComponent(s)
                    })
                }
            }
            ttl = ch.title.replace(/\s+/g, " ").split(" ");
            if (ttl.indexOf("<div") == 0) {
                ttl = ch.title.match(/nowrap;'>(.*?)</)[1].replace(/("|'|т\/c|х\/ф|,|Т\/с)/ig, " ").replace(/\s+/g, " ").split(" ")
            }
            var s = "";
            for (var i = 0; i < ttl.length; i++) {
                s += ttl[i];
                if (i < ttl.length - 1) s += " ";
                data["chan" + "nels"].unshift({
                    "logo_30x30": "http://st.kp.yandex.net/images/logoWhite.png",
                    "title": s,
                    // "playlist_url": "http://195.88.208.101/obovse.ru/smarttv/kinopoisk.php?id=search&search=" + encodeURIComponent(s)
                    "playlist_url": "http://127.0.0.1/obovse.ru/smarttv/kinopoisk.php?id=search&search=" + encodeURIComponent(s)
                })
            }
            handler = "menu";
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdSearch":
            this.l1IlIl01l0tUIl1IIYpr += "#glsearch";
            var data = {
                "playlist_name": "_FPNaitiVglobPoiske_"
            };
            data["chan" + "nels"] = [];
            if (inset["tab" + insetActive].length > 1) {
                var ttl = nmlz(inset["tab" + insetActive][inset["tab" + insetActive].length - 1].title).split(" ");
                var s = "";
                for (var i = 0; i < ttl.length; i++) {
                    s += ttl[i];
                    if (i < ttl.length - 1) s += " ";
                    data["chan" + "nels"].unshift({
                        "logo_30x30": "http://obovse.ru/smarttv/search.png",
                        "title": s,
                        "playlist_url": "http://spiderxml.com/search?search=" + encodeURIComponent(s)
                    })
                }
            }
            ttl = nmlz(ch.title.replace(/\s+/g, " ")).split(" ");
            if (ch.title.indexOf("<div") == 0) {
                ttl = ch.title.match(/nowrap;'>(.*?)</)[1].replace(/("|'|т\/c|х\/ф|,|Т\/с|Х\/ф)/ig, " ").replace(/\s+/g, " ").split(" ")
            }
            var s = "";
            for (var i = 0; i < ttl.length; i++) {
                if (ttl[i] == " " || ttl[i] == "") continue;
                s += ttl[i];
                if (i < ttl.length - 1) s += " ";
                data["chan" + "nels"].unshift({
                    "logo_30x30": "http://obovse.ru/smarttv/search.png",
                    "title": s,
                    "playlist_url": "http://spiderxml.com/search?search=" + encodeURIComponent(s)
                })
            }
            var ort = ttl.join(" ");
            if (ort.indexOf("Сезон") >= 0) {
                var mtc = ort.match(/сезон.*?- (.*)/i);
                if (mtc != null) {
                    s = mtc[1];
                    data["chan" + "nels"].unshift({
                        "logo_30x30": "http://obovse.ru/smarttv/search.png",
                        "title": s,
                        "playlist_url": "http://spiderxml.com/search?search=" + encodeURIComponent(s)
                    })
                }
            }
            handler = "menu";
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdDelHardware":
            ll0111l1wxUIOlO1lYpr(7, "Удалить устройство с сайта http://forkplayer.tv?");
            break;
        case "cmdDelMylist":
            if (!is_mark) {
                is_mark_array = {};
                is_mark_array[select] = "1"
            }
            for (var i = 0; i < kjtYpr.channels.length; i++) {
                if (is_mark_array[i] == "1") {
                    var ch = kjtYpr.channels[i];
                    // PullDataFrom(ch.playlist_url.replace("http://obovse.ru", "http://185.158.114.122/obovse.ru").replace("alexkdpulg.php", "smarttv/api.php") + "&do=dellist&box_mac=" + kjtYpr.mac + "&box_client=lg&box_hardware=" + kjtYpr.hardware + "&vr=" + vr + "&hw=" + countHw + "&box_server=" + nServer + "&" + Math.random())
                    PullDataFrom(ch.playlist_url.replace("http://obovse.ru", "http://127.0.0.1/obovse.ru").replace("alexkdpulg.php", "smarttv/api.php") + "&do=dellist&box_mac=" + kjtYpr.mac + "&box_client=lg&box_hardware=" + kjtYpr.hardware + "&vr=" + vr + "&hw=" + countHw + "&box_server=" + nServer + "&" + Math.random())
                }
            }
            is_mark = !1;
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.l110l1lIPuoaO0I0IOYpr(kjtYpr.l1IlIl01l0tUIl1IIYpr);
            break;
        case "cmdReload":
            is_mark = !1;
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            break;
        case "cmdFlash":
            kjtYpr.l0lI10EMI1I10Ypr(Menu[lllIOl1r11OIl1Ypr][3]);
            break;
        case "cmdUp":
            handler = "move";
            kjtYpr.l0OlII0Ix1fI1I01Ypr("move");
            return;
            break;
        case "":
            if (getSelect() == -1) {
                if (insetIn(-1, "get", "url").indexOf("no_save") > 0) {
                    kjtYpr.inf("_FPCopied denied by author playlist_!", 2500);
                    handler = "menu";
                    return
                }
            }
            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("no_save") > 0) {
                kjtYpr.inf("_FPCopied denied by author playlist_!", 2500);
                handler = "menu";
                return
            }
            try {
                if (opt != null) var n = opt
                else n = Menu[lllIOl1r11OIl1Ypr][3];
                if (n != "bookmarks/toolbar") {
                    lastBookm.url = n;
                    lastBookm.title = kjtYpr.GL[n];
                    lastBookm.logo_30x30 = ""
                }
                var pl_title = kjtYpr.GL[n];
                pl_title = kjtYpr.GL[n];
                if (n.indexOf("bookmarks/") == 0) {
                    var s = ""
                } else {
                    s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(n)
                }
                var data = l1l0IOIl_puQl1I1IYpr(s);
                if (data == null) {
                    data = {};
                    data["cha" + "nnels"] = []
                }
                if (!is_mark) {
                    is_mark_array = {};
                    is_mark_array[select] = "1"
                }
                var count = 0;
                for (var i = kjtYpr.channels.length - 1; i >= 0; i--) {
                    if (is_mark_array[i] == "1" || getSelect() == -1) {
                        if (favarray != null) var ch = favarray;
                        else if (getSelect() == -1) {
                            ch = {};
                            ch.stream_url = "";
                            ch.playlist_url = insetIn(-1, "get", "url");
                            ch.title = insetIn(-1, "get", "title");
                            ch.logo_30x30 = insetIn(-1, "get", "img");
                            ch.parser = ch.parser_orig = insetIn(-1, "get", "p")
                        } else ch = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(kjtYpr.channels[i]));
                        if (gV(ch.playlist_url.indexOf("#POST") > 0)) ch.playlist_url = ch.playlist_url.split("#POST")[0];
                        if (gV(ch, "parser_orig") != "") {
                            ch.parser = ch.parser_orig;
                            ch.playlist_url = ch.playlist_url_orig;
                            ch.stream_url = ch.stream_url_orig;
                            ch.parser_orig = "";
                            ch.playlist_url_orig = ""
                        }
                        if (selfbookm) {
                            ch.stream_url = "md5hash";
                            var title = ch.title;
                            if (title.indexOf("<div") == 0) {
                                title = title.match(/.*nowrap;'>(.*?)</)[1]
                            }
                            ch.parser = kjtYpr.l1IlIl01l0tUIl1IIYpr + "|selfReNewBookmark|" + title
                        }
                        if ((ch.playlist_url + ch.stream_url).indexOf("no_save") >= 0) kjtYpr.inf("_FPCopied denied by author playlist_!", 2500);
                        else if (s.indexOf(ch.playlist_url + ch.stream_url) != -1 && ch.parser == "") {
                            kjtYpr.inf(ch.title.substr(0, 15) + " - _FPZaklUzheEst_ " + pl_title, 1000)
                        } else {
                            var obj = {};
                            for (var key in ch) {
                                if (ch[key] != null && key != "rates" && key != "display_title" && key != "position") {
                                    if (ch[key] != "") {
                                        obj.search_on = "";
                                        obj[key] = ch[key]
                                    }
                                }
                            }
                            if (n.indexOf("bookmarks/") == 0) {
                                xhr_bookmark(n, "add", obj, count++);
                                if (n == "bookmarks/addnew") break
                            } else {
                                data["cha" + "nnels"].unshift(obj);
                                kjtYpr.lIllOVRj11lO10Ypr(n, l10O0I11gdZlOOIIYpr(data));
                                lIII1Ql10v1lQ00lYpr();
                                kjtYpr.inf("_FPDobavlenoV_ " + pl_title, 1000)
                            }
                        }
                        if (getSelect() == -1) break
                    }
                }
            } catch (e) {}
            favarray = null;
            is_mark = !1;
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdMove":
            try {
                var n = Menu[lllIOl1r11OIl1Ypr][3];
                var pl_title = kjtYpr.GL[n];
                if (n == "zakladki.xml") pl_title = kjtYpr.GL[n];
                var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(n);
                if (!is_mark) {
                    is_mark = !0;
                    is_mark_array = {};
                    is_mark_array[select] = "1"
                }
                if (is_mark) {
                    if (n.indexOf("bookmarks/") != 0) {
                        var dataTo = l1l0IOIl_puQl1I1IYpr(s);
                        if (dataTo == null) {
                            dataTo = {};
                            dataTo["cha" + "nnels"] = []
                        }
                    }
                    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") != 0) var data = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr(kjtYpr.l1IlIl01l0tUIl1IIYpr));
                    for (var i = 0; i < kjtYpr.channels.length; i++) {
                        if (is_mark_array[i] == "1") {
                            if (n.indexOf("bookmarks/") == 0) {
                                xhr_bookmark(n, "add", kjtYpr.channels[i])
                            } else dataTo["cha" + "nnels"].unshift(kjtYpr.channels[i])
                        }
                    }
                    var k = 0;
                    var ln = kjtYpr.channels.length;
                    for (var i = 0; i < ln; i++) {
                        if (is_mark_array[i] == "1") {
                            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") == 0) {
                                xhr_bookmark(kjtYpr.l1IlIl01l0tUIl1IIYpr, "cmdDel", (i - k))
                            } else data["chan" + "nels"].splice(i - k, 1);
                            k++
                        }
                    }
                    if (n.indexOf("bookmarks/") != 0) kjtYpr.lIllOVRj11lO10Ypr(n, l10O0I11gdZlOOIIYpr(dataTo));
                    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") != 0) kjtYpr.lIllOVRj11lO10Ypr(kjtYpr.l1IlIl01l0tUIl1IIYpr, l10O0I11gdZlOOIIYpr(data));
                    if (n.indexOf("bookmarks/") != 0) kjtYpr.inf("_FPPeremV_ " + pl_title, 1000);
                    is_mark = !1
                }
            } catch (e) {}
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdReload");
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdDel":
            var n = kjtYpr.l1IlIl01l0tUIl1IIYpr;
            if (getSelect() == -2) n = "bookmarks/toolbar";
            var data = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr(n));
            if (is_mark) {
                var k = 0;
                var ln = kjtYpr.channels.length;
                var count = 0;
                kjtYpr.origchannels = kjtYpr.channels;
                for (var i = 0; i < ln; i++) {
                    if (is_mark_array[i] == "1") {
                        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") == 0) {
                            if (n == "bookmarks/extbookm") {
                                setTimeout('xhr_bookmark("bookmarks/extbookm","cmdDel",' + i + ');', ++count * 100)
                            } else xhr_bookmark(n, "cmdDel", i - k, count++)
                        } else data["chan" + "nels"].splice(i - k, 1);
                        k++
                    }
                }
                is_mark = !1
            } else {
                if (n.indexOf("bookmarks/") == 0) {
                    xhr_bookmark(n, cmd, select)
                } else data["chan" + "nels"].splice(select, 1)
            }
            handler = "menu";
            if (n.indexOf("bookmarks/") == 0) return;
            kjtYpr.lIllOVRj11lO10Ypr(n, l10O0I11gdZlOOIIYpr(data));
            kjtYpr.l1IOllIQV1ul00IlYpr(n);
            kjtYpr.inf("Удалено!", 1000);
            break;
        case "cmdSaveCache":
            if (lO1l0OILItCt1l11IYpr(kjtYpr.ORIG_URL, !0)) kjtYpr.inf("OK!", 1200);
            else kjtYpr.inf("Error!", 1200);
            handler = "menu";
            break;
        case "cmdClearHistory":
            kjtYpr.lIllOVRj11lO10Ypr("history", "");
            ll0I1lllpOugKllQ11Ypr = [];
            kjtYpr.inf("_FPIstOchishena_!", 1000);
            kjtYpr.channels = [];
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdClearhistsearch":
            kjtYpr.lIllOVRj11lO10Ypr("searches", "");
            kjtYpr.inf("_FPIstOchishena_!", 1000);
            kjtYpr.channels = [];
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdClearhisturl":
            kjtYpr.lIllOVRj11lO10Ypr("enteres", "");
            kjtYpr.inf("_FPIstOchishena_!", 1000);
            kjtYpr.channels = [];
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdClearCache":
            kjtYpr.lIllOVRj11lO10Ypr("prev_cache", "");
            kjtYpr.inf("OK!", 1000);
            kjtYpr.channels = [];
            ll1lIOiIO0lO1IIIYpr = Math.random();
            handler = "menu";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            break;
        case "cmdHistory":
            data = {};
            data["cha" + "nnels"] = [];
            data.channels.push({
                "logo_30x30": _img("_OI_history.png"),
                "title": "История поисков",
                "playlist_url": "histsearch",
                "description": ""
            });
            data.channels.push({
                "logo_30x30": _img("_OI_history.png"),
                "title": "История вводов URL",
                "playlist_url": "histurl",
                "description": ""
            });
            data.channels.push({
                "logo_30x30": _img("_OI_history.png"),
                "title": "История моих последних посещений",
                "playlist_url": "history",
                "description": "История последних просмотров и посещений на этом устройстве"
            });
            data.channels.push({
                "logo_30x30": _img("_OI_history.png"),
                "onclick": "autouserexport()",
                "title": "Вся история посещений " + (user == null ? "(Необходимо войти в аккаунт)" : "(" + user.login) + ")",
                "playlist_url": "http://forkplayer.tv/xml/account.php?do=history"
            });
            data.channels.push({
                "logo_30x30": _img("_OT_fcache.png"),
                "title": "Кеш страниц",
                "playlist_url": "cache",
                "description": "Сохраненные страницы в кеше на вашем устройстве<br>"
            });
            this.l1IlIl01l0tUIl1IIYpr = cmd;
            handler = "menu";
            kjtYpr.l00100lIKlBWw1lllIlYpr(data);
            break;
        case "cmdForkStore":
            if (user != null) {
                autouserexport();
                setTimeout("if(is_tizen) document.location='http://smart.obovse.ru/?do=forktizen';else document.location='http://smart.obovse.ru/?do=fork';", 1000)
            } else if (kjtYpr.GL.ts == 1) {
                autoexport("store")
            } else {
                if (is_tizen) document.location = "http://smart.obovse.ru/?do=forktizen";
                else document.location = "http://smart.obovse.ru/?do=fork"
            }
            break;
        case "cmdlaunchFullScreen":
            launchFullScreen(document.getElementsByTagName('body')[0]);
            break;
        case "cmdExit":
            handler = "menu";
            if (kjtYpr.GL.ts == 1) {
                autouserexport();
                autoexport()
            } else if (user != null) {
                autouserexport();
                setTimeout("closeapp();", 1000)
            } else closeapp();
            break;
        default:
            kjtYpr.l00100lIKlBWw1lllIlYpr({
                "channels": []
            });
            break
    }
};

function stmot(s) {
    if (s == 60) return "60s (_FPOtkl_)";
    else return s + "s"
}

function shint(s, s2) {
    if (s2 != null) {
        if (s2 == "a") {
            if (s == 0) return "_FPOtkl._";
            if (s == 1) return "_FPVkl._ (auto)";
            if (s == 2) return "_FPVkl._ (Audio _FPpleer_)";
            if (s == 3) return "_FPVkl._ (Html5 _FPpleer_)";
            if (s == 4) return "_FPVkl._ (Media _FPpleer_)"
        }
        if (s2 == 7) {
            if (s == 0) return "_FPOtkl._";
            else return "#" + s
        }
        if (s2 == "1") return "FS";
        else return "CXZ"
    }
    if (s == 12) return "_FPVkl._ (Rus - Eng)";
    else if (s == 11) return "_FPVkl._ (Eng - Rus)";
    else if (s == 13) return "_FPVkl._ (_FPManually_)";
    else if (s == 3) {
        if (kjtYpr.GL.remoteip == "") var ds = "_FPEnter_ IP:PORT";
        else ds = kjtYpr.GL.remoteip;
        return "_FPManually_ " + ds
    } else if (s == 2) return "_FPAuto_";
    else if (s == 1) return "_FPVkl._";
    else if (s == 0 || s == 10 || s == 20 || s == 40 || s == "") return "_FPOtkl._";
    else if (s == 21) return "_FPTolko_ IPTV";
    else if (s == 22) return "_FPDlyaVsV_";
    else if (s == 30) return "_FPLocal_";
    else if (s == 31) return "_FPOn Server_";
    else if (s == 32) return "_FPOtkl_";
    else if (s == 41) return "_FPPercent_";
    else if (s == 50) return "_FPAuto_";
    else if (s > 50 && s < 70) return "_FPServer_ " + (s - 50);
    else if (s == 70) return "_FPpoumolch_";
    else if (s == 71) return "V" + "K_RED";
    else if (s == 72) return "V" + "K_GREEN";
    else if (s == 73) return "V" + "K_YELLOW";
    else if (s == 74) return "V" + "K_BLUE";
    else if (s == 75) return "V" + "K_LEFT (только в списках)";
    else return s
}
kjtYpr.Edit = function (n, cmd) {
    ll1lIOiIO0lO1IIIYpr = "";
    select = parseInt(select);
    if (l1IOIIz1l0Ol110Ypr(n)) {
        var ch = curCh();
        var oldselect = select;
        if (cmd == "up") posStart(0, -1);
        else if (cmd == "down") posStart(0, 1);
        else if (cmd == "left") posStart(-1, 0);
        else if (cmd == "right") posStart(1, 0);
        if (kjtYpr.channels[oldselect].source != "fav" || curCh()["source"] != "fav") {
            select = oldselect;
            kjtYpr.popUp("Можно перемещать только между Избранным!", 1000);
            return
        }
        if (select < 0) setSelect(0);
        if (oldselect != select) {
            var t = getVars("start");
            var tmp = t.fav[kjtYpr.channels[oldselect].id];
            t.fav[kjtYpr.channels[oldselect].id] = t.fav[curCh()["id"]];
            t.fav[curCh()["id"]] = tmp;
            setVars("start", t);
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            handler = "move";
            return
        }
    }
    if (n.indexOf("bookmarks/") == 0) {
        var sd = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("bookmarks"));
        for (var i = 0; i < sd.length; i++) {
            if (sd[i].playlist_url == n) {
                data = sd[i];
                break
            }
        }
    } else data = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr(n)), sel = null;
    if (cmd == "up" && select > 0) {
        var x = data.channels[select];
        data.channels[select] = data.channels[select - 1];
        data.channels[select - 1] = x;
        sel = select - 1
    } else if (cmd == "down" && select < count - 1) {
        x = data.channels[select];
        data.channels[select] = data.channels[1 + select];
        data.channels[1 + select] = x;
        sel = 1 + select
    }
    if (sel != null) {
        if (n.indexOf("bookmarks/") == 0) {
            kjtYpr.lIllOVRj11lO10Ypr("bookmarks", l10O0I11gdZlOOIIYpr(sd));
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdReload");
            kjtYpr.lIOIOIBu0mO11llO0Ypr(sel);
            return
        }
        kjtYpr.lIllOVRj11lO10Ypr(n, l10O0I11gdZlOOIIYpr(data));
        kjtYpr.l1IOllIQV1ul00IlYpr(n);
        kjtYpr.lIOIOIBu0mO11llO0Ypr(sel)
    }
};
kjtYpr.l1IOllIQV1ul00IlYpr = function (n) {
    try {
        handler = "menu";
        kjtYpr.l1IlIl01l0tUIl1IIYpr = n;
        ll1lIOiIO0lO1IIIYpr = "";
        if (n.indexOf("cmdSetStart") == 0) {
            this.l1IlIl01l0tUIl1IIYpr = "cmdSetStart";
            var se = getVars("start");
            console.log(se)
            var data = {
                "navigate": "_FPNastrStartMenu_"
            };
            data["chan" + "nels"] = [];
            data["chan" + "nels"].push({
                "logo_30x30": "http://check" + (se.config.search ? "true" : "false"),
                "title": "Поиск",
                "description": "Отображать Поисковую строку",
                "playlist_url": "setGlStart",
                "menu_url": "search"
            });
            data["chan" + "nels"].push({
                "logo_30x30": "http://check" + (se.config.setsearch ? "true" : "false"),
                "title": "Настройки поиска",
                "description": "Отображать настройки поиска",
                "playlist_url": "setGlStart",
                "menu_url": "setsearch"
            });
            data["chan" + "nels"].push({
                "logo_30x30": "none",
                "title": "_FPNastrGlPoisk_",
                "description": "Управление поисковыми системами / История использования поисковых систем",
                "playlist_url": "about:configSearch"
            });
            data["chan" + "nels"].push({
                "logo_30x30": "none",
                "title": "Вкладка лучшие: <select style='font-size:" + (ch_size * 0.8) + "px'><option>" + se.config.best + " строки </option></select>",
                "description": "Вкладка Лучшие в Стартовом меню отображает наиболее посещаемые вами сайты и рекомендации.<br>Выберите количество строк, 0 - не будет отображаться",
                "playlist_url": "setGlStart",
                "menu_url": "best"
            });
            data["chan" + "nels"].push({
                "logo_30x30": "none",
                "title": "Отображать сверху: <select style='font-size:" + (ch_size * 0.8) + "px'><option>" + (se.config.besttop ? "Лучшие" : "Избранное") + " </option></select>",
                "description": "Вкладка Лучшие в Стартовом меню будет в самом верху (если включена)",
                "playlist_url": "setGlStart",
                "menu_url": "besttop"
            });
            if (typeof se.hidetop == "object") {
                var dop = "";
                for (var i in se.hidetop) dop += i + "<br>";
                data["chan" + "nels"].push({
                    "logo_30x30": "none",
                    "title": "Очистить список скрытых ссылок в Лучшие",
                    "description": "Скрытые URL: <br>" + dop,
                    "playlist_url": "setGlStart",
                    "menu_url": "setclearhidetop"
                })
            }
            data["chan" + "nels"].push({
                "logo_30x30": "none",
                "title": "Очистить список рекомендаций в Лучшие",
                "description": "Размер файла рекомендаций: " + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("datas").length + "bytes",
                "playlist_url": "setGlStart",
                "menu_url": "setcleartop"
            });
            data["chan" + "nels"].push({
                "logo_30x30": "none",
                "title": "_FPSetDefaultStartMenu_",
                "description": "",
                "playlist_url": "setGlStart",
                "menu_url": "setdefault"
            })
        } else if (n.indexOf("tosettings") == 0) {
            var data = {
                "title": "Settings"
            };
            handler = "menu";
            setSelect(0);
            if (kjtYpr.virtual) var vtt = "<img height=" + css_wh(21) + " src='" + _img("_OI_untrust.png") + "' title='Информация об идентификаторе берется с памяти и может меняться, например при сбросе тв к заводским или обновлении ПО' >";
            else vtt = "<img height=" + css_wh(21) + " src='" + _img("_OI_trust.png") + "' title='Информация об идентификаторе берется с характеристик ТВ (мак адрес или androidid), менятся может при смене типа подключения' >";
            data.navigate = "box_mac:" + vtt + " " + kjtYpr.mac;
            if (user != null) data.navigate += ' box_user:' + user.email;
            else data.navigate += ' box_user: (Войдите в аккаунт!)';
            if (platform == "tizen") data.navigate += " " + platform;
            try {
                if (platform == "sams" || platform == "tizen") data.navigate += " " + box_client;
                if (platform == "android-device") {
                    data.navigate += ' Build: ' + kjtYpr.build
                }
            } catch (e) {}
            if (box_low) data.navigate += " low ";
            if (box_low2) data.navigate += " low2 ";
            data.navigate += ' Server:' + nServer + ' (' + ipCountry.substr(0, 2) + ') ';
            if (timestamp >= 3) data.navigate += " Вы уже поддерживаете проект!";
            if (lIO11l11NEB100OYpr[kjtYpr.GL.lang] == undefined) kjtYpr.GL.lang = "ru";
            sRecov = {
                "true": "_FPPrRabStogoMesta_",
                "false": "_FPStartovoeMenu_"
            };
            var setsPr = {
                "title": "_FPInterface Setup_",
                "logo_30x30": "http://" + ServerFromList + "/smarttv/img/setup_interface.png",
                "playlist_url": "submenu",
                "submenu": [{
                    "title": "_FPKolStrok_: " + kjtYpr.GL.rows,
                    "playlist_url": "setRows",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPKolStrok_: " + kjtYpr.GL.rows + "<br>_FPNazhVprVl_<br>_FPDelMuvT_"
                }, {
                    "title": "Прозрачность списка " + FgetSetting(2, 1),
                    "playlist_url": "setSetting(2);",
                    "logo_30x30": "none"
                }, {
                    "title": "Прозрачность вкладок и панели " + FgetSetting(3, 1),
                    "playlist_url": "setSetting(3);",
                    "logo_30x30": "none"
                }, {
                    "title": "Word wrap (улучш.текст) " + FgetSetting(4, 1),
                    "playlist_url": "setSetting(4);",
                    "logo_30x30": "none"
                }, {
                    "title": "Улучш. отобр. вкладок и кнопок " + FgetSetting(5, 1),
                    "playlist_url": "setSetting(5);",
                    "logo_30x30": "none"
                }, {
                    "title": "Отображать вкладки " + FgetSetting(6, 1),
                    "playlist_url": "setSetting(6);",
                    "logo_30x30": "none"
                }, {
                    "title": "Иконки вкладок " + FgetSetting(11, 1),
                    "playlist_url": "setSetting(11);",
                    "logo_30x30": "none"
                }, {
                    "title": "_FPBookmark toolbar_: " + shint(parseInt(kjtYpr.GL.sidebar)),
                    "playlist_url": "setSidebar",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPBookmark toolbar_: " + shint(parseInt(kjtYpr.GL.sidebar)) + "<br><br>_FPNazhVprVl_"
                }, {
                    "title": "_FPShow rating_: " + shint(40 + parseInt(kjtYpr.GL.rate)),
                    "playlist_url": "setRate",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPShow ratings and views of resources and playlists_: " + shint(40 + parseInt(kjtYpr.GL.rate)) + "<br><br>_FPNazhVprVl_"
                }, {
                    "title": "_FPFont_: " + ((kjtYpr.GL.font == "") ? "LG Display" : f_font[kjtYpr.GL.font]),
                    "playlist_url": "setFont",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPFont_: " + f_font[kjtYpr.GL.font] + "<br>_FPNazhVprVl_<br>_FPDelMuvT_"
                }, {
                    "title": "_FPCvetText_: Color " + (kjtYpr.GL.color + 1),
                    "playlist_url": "setColor",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPCvetText_ _FPprilozheniya_: " + f_cols[kjtYpr.GL.color] + "<br>_FPNazhVprVl_"
                }, {
                    "title": "_FPFonRisunok_: " + fons[kjtYpr.GL.fon].title,
                    "playlist_url": "setFon",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPFonRisunok_ _FPprilozheniya_<br>_FPNazhVprVl_"
                }, {
                    "title": "_FPScreensaver_: " + shint(kjtYpr.GL.scrsaver, 7),
                    "playlist_url": "setScreensaver",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPScreensaver_ 3min <br>" + shint(kjtYpr.GL.scrsaver, 7) + "<br>_FPNazhVprVl_"
                }, {
                    "title": "Прозрачность фона: " + kjtYpr.GL.pr + "%",
                    "playlist_url": "setPr",
                    "logo_30x30": "none",
                    "description": "_FPYarkFon_: " + kjtYpr.GL.pr + "%<br>Поставьте 0%(убирает прозрачность и фоновую картинку) или 100% (убирает только прозрачность) для увеличения быстродействия и отклика интерфейса!<br>_FPNazhVprVl_"
                }, {
                    "title": "Отображать иконки в списках " + FgetSetting(10, 1),
                    "playlist_url": "setSetting(10);",
                    "logo_30x30": "none"
                }, {
                    "title": "Отображать иконки от сторонних сайтов " + FgetSetting(9, 1),
                    "playlist_url": "setSetting(9);",
                    "logo_30x30": "none"
                }, {
                    "title": "Упрощенный(текстовый) дизайн " + FgetSetting(12, 0),
                    "playlist_url": "setSetting(12);",
                    "logo_30x30": "none"
                }, {
                    "title": "Отображать иконки по https(SSL) " + FgetSetting(8, 1),
                    "playlist_url": "setSetting(8);",
                    "logo_30x30": "none"
                }]
            };
            data["chan" + "nels"] = [{
                "title": "Language: " + kjtYpr.GL.lang + " " + lIO11l11NEB100OYpr[kjtYpr.GL.lang]._name,
                "playlist_url": "setLang",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPYazik_: " + kjtYpr.GL.lang + "<br>" + lIO11l11NEB100OYpr[kjtYpr.GL.lang]._powered + "<br>_FPNazhVprVl_<br>"
            }, {
                "title": "_FPTime offset_: " + ((kjtYpr.GL.JTVRegion > 0) ? "+" + kjtYpr.GL.JTVRegion : kjtYpr.GL.JTVRegion),
                "playlist_url": "setJTVRegion",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPNazhVprVl_"
            }, {
                "title": "_FPLive search_: " + shint(parseInt(kjtYpr.GL.livesearch)),
                "playlist_url": "setLivesearch",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPLive search_: " + shint(parseInt(kjtYpr.GL.livesearch)) + "<br><br>_FPNazhVprVl_"
            }, {
                "title": "_FPAdult content_: " + shint(kjtYpr.GL.adult),
                "playlist_url": "setAdult",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPAdult content_: " + shint(kjtYpr.GL.adult) + "<br>_FPNazhVprVl_"
            }, {
                "title": "_FPKachVideo_: " + sQual[kjtYpr.GL.quality] + "p",
                "playlist_url": "setQual",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "<center>_FPKachVideo_ Moonwalk.cc, YouTube, Hdgo, HDКинотеатр</font></center>"
            }, {
                "title": "_FPButton_ Return: " + shint(70 + parseInt(kjtYpr.GL['return'])),
                "playlist_url": "setReturn",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPButton_ Return: " + shint(70 + parseInt(kjtYpr.GL['return'])) + "<br>_FPNazhVprVl_<br>Назначение кнопки возврата \ return на другую кнопку на пульте"
            }, {
                "title": "_FPAdjust weather_ ",
                "playlist_url": "http://" + ServerFromList + "/smarttv/api.php?do=weather&id=set",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "ID City: " + kjtYpr.GL.weather + "<br><br><br>"
            }, {
                "title": "_FPAudioMini_ _FPpleer_: " + shint(kjtYpr.GL.audioplayer, "a"),
                "playlist_url": "setAudioplayer",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPOffMiniPlayer_<br>" + shint(kjtYpr.GL.audioplayer, "a") + "<br>_FPNazhVprVl_"
            }, {
                "title": "_FPSortirovka_ IPTV: " + shint(10 + parseInt(kjtYpr.GL.sortiptv)),
                "playlist_url": "setSortiptv",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPSort_ iptv<br>" + shint(10 + parseInt(kjtYpr.GL.sortiptv)) + "<br>Может замедлить открытие списка каналов!<br>_FPNazhVprVl_"
            }, {
                "title": "_FPUDP-to-HTTP Proxy_: " + kjtYpr.GL.udp,
                "playlist_url": "setUdp",
                "value": kjtYpr.GL.udp,
                "search_on": "IP:PORT UDP-to-HTTP Proxy",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "IP udp proxy <br>" + kjtYpr.GL.udp + "<br>Если устройство не поддерживает мультикаст (ссылки на потоки вида udp://) включите udp proxy на роутере и введите сюда его ip адрес"
            }, {
                "title": "_FPRezhim_: " + sNext[kjtYpr.GL.next],
                "playlist_url": "setNext",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPRezhim_ _FPvospr_: " + sNext[kjtYpr.GL.next] + "<br>_FPNazhVprVl_<br>"
            }, {
                "title": "_FPNachGrupa_: " + sRecov[kjtYpr.GL.recovery.toString()],
                "playlist_url": "setRecovery",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPNachGrupa_: " + sRecov[kjtYpr.GL.recovery.toString()] + "<br><br>_FPNazhVprVl_"
            }, {
                "title": "_FPRodKontr_: " + kjtYpr.GL.password,
                "playlist_url": "setPass",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPRodKontr_<br>_FPNazhVprVl_"
            }, {
                "title": "_FPTimeout_ _FPpleera_: " + stmot(kjtYpr.GL.timeoutiptv) + "",
                "playlist_url": "setTimeoutIptv",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPTimeout connection to stream IPTV_ и видео<br>" + kjtYpr.GL.timeoutiptv + "<br>При установке 60сек контроль за соединением отключен (ошибка соединения)<br>_FPNazhVprVl_"
            }, {
                "title": "_FPSend_ _FPheaders_: " + shint(kjtYpr.GL.headers) + "",
                "playlist_url": "setHeaders",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "Отправлять заголовки (аналог реферер) при переходе по страницам. <br> <br>Включите при отсутствии доступа к некоторым страницам.<br><br>Отключите если к заведомо рабочей странице возникает сетевая ошибка доступа<br>" + shint(kjtYpr.GL.headers) + "<br><br>_FPNazhVprVl_"
            }, {
                "title": "LOCAL_IP Remote Fork: " + shint(kjtYpr.GL.remote),
                "playlist_url": "setRemote",
                "value": kjtYpr.GL.remoteip,
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": shint(kjtYpr.GL.remote) + "<br><font color=orange>Remote Forkplayer</font> - _FPRemoteInfo_:<br><font color=orange>http://forkplayer.tv/smart-tv/remotefork/</font><br>_FPNazhVprVl_"
            }, {
                "title": "TORRSERVE_IP Torrserve IP: " + shint(kjtYpr.GL.torrserve),
                "playlist_url": "tosetTorrserve",
                "search_on": "IP:PORT (PORT по умолчанию 8090)",
                "value": (uaJ == "android-device" && kjtYpr.GL.acestream == "") ? "127" : kjtYpr.GL.acestream,
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "Не нужно включать опцию если адрес Torrserve совпадает с RemoteFork<br>Для просмотра торрент файлов установите Torrserve на это устройство, удаленный компьютер или VPS и пропишите его адрес (IP:PORT)<br>" + kjtYpr.GL.torrserve + "<br>Enter - установить"
            }, {
                "title": "ACE_IP Ace Stream direct: " + shint(kjtYpr.GL.acestream),
                "playlist_url": "tosetAS",
                "search_on": "IP:PORT (PORT по умолчанию 6878)",
                "value": (uaJ == "android-device" && kjtYpr.GL.acestream == "") ? "127" : kjtYpr.GL.acestream,
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "Не нужно включать опцию если адрес Ace Stream совпадает с RemoteFork<br>Для просмотра торрент файлов установите Ace Stream на это устройство, удаленный компьютер или VPS и пропишите его адрес (IP:PORT)<br>" + kjtYpr.GL.acestream + "<br>Enter - установить"
            }, {
                "title": "_FPVkKod_: " + kjtYpr.GL.vk_code,
                "playlist_url": "tosetVk",
                "search_on": "_FPVvKodPr_",
                "value": kjtYpr.GL.vk_code,
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "<font color=orange>_FPPrivVk_</font><br>ID _FPpolzovatelya_:" + kjtYpr.GL.vk_id + "<br> _FPSsilkaVkKod_:<br><font color=orange>http://forkplayer.tv/vkforkstore/</font>"
            }, {
                "title": "_FPPolnSbrosNastr_",
                "playlist_url": "cmdreset",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPPolnSbrosNastr_, _FPzaklIist_ _FPprilozheniya_!"
            }];
            data["chan" + "nels"].splice(7, 0, {
                "title": "PIP: " + shint(20 + parseInt(kjtYpr.GL.pip)),
                "playlist_url": "setPip",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "_FPKartVKart_<br>" + shint(20 + parseInt(kjtYpr.GL.pip)) + "<br>_FPNazhVprVl_"
            });
            data["chan" + "nels"].splice(2, 0, setsPr);
            if (platform == "tizen") {
                data["chan" + "nels"].splice(7, 0, {
                    "title": "_FPVideopleer_: " + sPlayer[kjtYpr.GL.player],
                    "playlist_url": "setPlayer",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPTvpPu_<br>_FPNazhVprVl_"
                }, {
                    "title": "IPTV+HLS _FPpleer_: " + sPlayer[kjtYpr.GL.streamplayer],
                    "playlist_url": "setStreamplayer",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPTipPu_<br>" + sPlayer[kjtYpr.GL.player] + "<br>_FPNazhVprVl_"
                })
            }
            if (uaJ == "mag" || uaJ == "dune") {} else if (platform == "sams" || platform == "tizen") {} else {
                data["chan" + "nels"].splice(7, 0, {
                    "title": "_FPVideopleer_: " + sPlayer[kjtYpr.GL.player],
                    "playlist_url": "setPlayer",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPTvpPu_<br>_FPNazhVprVl_"
                }, {
                    "title": "IPTV+HLS _FPpleer_: " + sPlayer[kjtYpr.GL.streamplayer],
                    "playlist_url": "setStreamplayer",
                    "logo_30x30": _img("_ST_settings.jpg"),
                    "description": "_FPTipPu_<br>" + sPlayer[kjtYpr.GL.player] + "<br>_FPNazhVprVl_"
                })
            }
            data["chan" + "nels"].splice(21, 0, {
                "title": "_FPPreferred server_: " + shint(50 + parseInt(kjtYpr.GL.serv)),
                "playlist_url": "setServ",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "Здесь можно выбрать номер сервера с которого предпочитать загрузку и работу приложения<br>_FPPreferred server_: " + shint(50 + parseInt(kjtYpr.GL.serv)) + "<br>_FPNazhVprVl_"
            });
            data["chan" + "nels"].splice(21, 0, {
                "title": "_FPStore data_: " + shint(30 + parseInt(kjtYpr.GL.ts)),
                "playlist_url": "setTS",
                "logo_30x30": _img("_ST_settings.jpg"),
                "description": "Для более быстрого запуска приложения рекомендовано выбрать _FPLocal_<br>" + shint(30 + parseInt(kjtYpr.GL.ts)) + "<br>_FPNazhVprVl_"
            });
            data.playlist_name = data.navigate
        } else if (n.indexOf("about:configSearch") == 0) {
            readGl();
            setSelect(0);
            ll1lIOiIO0lO1IIIYpr = "";
            var x = n.split("#");
            kjtYpr.l1IlIl01l0tUIl1IIYpr = x[0];
            var data = {
                "navigate": "_FPNastrGlPoisk_",
                "before": "<div style='text-align:left;'>Поисковая система по умолчанию <small>ваша история только мультипоисковиков с iframe</small></div>",
                "style": {
                    "channels": {
                        "chnumber": {
                            "default": {
                                "display": "none"
                            },
                            "selected": {
                                "display": "none"
                            }
                        }
                    }
                }
            };
            if (x.length == 2) {
                var se = getVars("start");
                x = x[1].split(":");
                if (x[0] == "setDefault") {
                    se.search.ds = x[1]
                } else if (x[0] == "setSite") {
                    se.search.ds = -1;
                    se.search.ss = x[1]
                } else if (x[0] == "move") {
                    if (se.search[x[1]].length > 1) {
                        var x1 = x[3];
                        if (x[2] == "up") {
                            if (x[3] == 0) var x2 = se.search[x[1]].length - 1;
                            else x2 = x1 - 1
                        } else if (x[2] == "down") {
                            if (x[3] == se.search[x[1]].length - 1) var x2 = 0;
                            else x2 = x1 + 1
                        }
                        var tmp = se.search[x[1]][x1];
                        se.search[x[1]][x1] = se.search[x[1]][x2];
                        se.search[x[1]][x2] = tmp
                    } else kjtYpr.inf("Ошибка перемещения! Только один элемент в списке", 1500)
                } else if (x[0] == "setDop") {
                    if (x[1] == "system") var p = "system";
                    else if (x[1] == "sites") p = "sites";
                    if (se.search[p][x[2]].dop) se.search[p][x[2]].dop = 0;
                    else se.search[p][x[2]].dop = 1
                } else if (x[0] == "delDefault") {
                    se.search.system.splice(parseInt(x[1]), 1)
                } else if (x[0] == "delSite") {
                    se.search.sites.splice(parseInt(x[1]), 1)
                } else if (x[0] == "save") {
                    var wr = 0;
                    if (x[1] == "system") var p = "system";
                    else if (x[1] == "sites") p = "sites";
                    if (gV(payd, "egsurl") == "") kjtYpr.inf("Ссылка не может быть пустой!", 1800);
                    else if (!gV(payd, "egsurl").match(/%s/)) kjtYpr.inf("Ссылка должна содержать параметр запроса %s!", 1800);
                    else if (!gV(payd, "egsurl").match(/^(https?|html):\/\//)) kjtYpr.inf("Ссылка должна начинаться с http://, html:// или https:// !", 1800);
                    else {
                        if (x[2] == "new") {
                            x[2] = se.search[p].length;
                            se.search[p].push({})
                        }
                        se.search[p][x[2]].url = payd.egsurl;
                        se.search[p][x[2]].title = payd.egstitle;
                        se.search[p][x[2]].logo = payd.egslogo;
                        kjtYpr.inf("Установлен URL " + payd.egsurl, 1500);
                        wr = 1
                    }
                    if (!wr) return
                } else if (x[0] == "edit") {
                    kjtYpr.l1IlIl01l0tUIl1IIYpr = n;
                    if (gV(x, 2) == "new") {
                        t = {
                            "title": "New search",
                            "logo": "",
                            "url": ""
                        }
                    } else if (x[1] == "system") var t = se.search.system[x[2]];
                    else if (x[1] == "sites") t = se.search.sites[x[2]];
                    var data = {
                        "title": t.title,
                        "navigate": "Редатирование " + t.title,
                        "channels": [{
                            "title": "Название: " + t.title,
                            "playlist_url": "payd_egstitle",
                            "value": t.title,
                            "search_on": "Название"
                        }, {
                            "title": "Иконка(необ.): " + t.logo,
                            "logo_30x30": t.logo,
                            "playlist_url": "payd_egslogo",
                            "value": t.logo,
                            "search_on": "Иконка (необязательно)"
                        }, {
                            "title": "URL: " + t.url,
                            "playlist_url": "payd_egsurl",
                            "value": t.url,
                            "search_on": "URL c параметром %s вместо запроса",
                            "description": t.url + "<br>URL c параметром %s вместо запроса"
                        }, {
                            "title": "Сохранить",
                            "playlist_url": "about:configSearch#save:" + x[1] + ":" + x[2],
                            "logo_30x30": ""
                        }]
                    };
                    return kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, incID())
                } else if (x[0] == "setdefault") {
                    delete se.search;
                    setVars("start", se);
                    se = getVars("start")
                }
                setVars("start", se);
                data.defaultSelect = oldselect;
                se = se.search
            } else se = getVars("start").search;
            data["chan" + "nels"] = [];
            try {
                for (var i = 0; i < se.system.length; i++) {
                    var mn = [{
                        "title": "Использовать по умолчанию",
                        "playlist_url": "about:configSearch#setDefault:" + i
                    }, {
                        "title": (se.system[i].dop ? "НЕ " : "") + "Использовать дополнительно",
                        "playlist_url": "about:configSearch#setDop:system:" + i
                    }, {
                        "title": "Изменить",
                        "playlist_url": "about:configSearch#edit:system:" + i
                    }, {
                        "title": "Передвинуть вверх",
                        "playlist_url": "about:configSearch#move:system:up:" + i
                    }, {
                        "title": "Передвинуть вниз",
                        "playlist_url": "about:configSearch#move:system:down:" + i
                    }];
                    if (se.ds == i) var dop = "<b>(по умолчанию)</b> ";
                    else if (se.system[i].dop) dop = "<b>(дополнительно)</b> ";
                    else {
                        mn.push({
                            "title": "Удалить",
                            "playlist_url": "about:configSearch#delDefault:" + i
                        });
                        dop = ""
                    }
                    data["chan" + "nels"].push({
                        "logo_30x30": se.system[i].logo,
                        "title": dop + se.system[i].title,
                        "playlist_url": "cmdmenu",
                        "menu": mn,
                        "description": "url: " + se.system[i].url + "<br>" + dop
                    })
                }
                data["chan" + "nels"].push({
                    "logo_30x30": "none",
                    "title": "Добавить",
                    "playlist_url": "about:configSearch#edit:system:new",
                    "description": "Нажмите, чтобы добавить вручную поисковую систему."
                });
                data["chan" + "nels"].push({
                    "logo_30x30": "none",
                    "title": "Сбросить настройки поиска",
                    "playlist_url": "confirm",
                    "confirm": ["about:configSearch#setdefault"],
                    "description": "Нажмите, чтобы удалить все поисковые системы и сайты и установить их по умолчанию"
                });
                if (data["chan" + "nels"].length) data["chan" + "nels"][data["chan" + "nels"].length - 1].after = "<div style='text-align:left;'>Поиск по сайту <small>остальная ваша история</small></div>";
                for (var i = 0; i < se.sites.length; i++) {
                    var mn = [{
                        "title": "Использовать по умолчанию",
                        "playlist_url": "about:configSearch#setSite:" + i
                    }, {
                        "title": (se.sites[i].dop ? "НЕ " : "") + "Использовать дополнительно",
                        "playlist_url": "about:configSearch#setDop:sites:" + i
                    }, {
                        "title": "Изменить",
                        "playlist_url": "about:configSearch#edit:sites:" + i
                    }, {
                        "title": "Передвинуть вверх",
                        "playlist_url": "about:configSearch#move:sites:up:" + i
                    }, {
                        "title": "Передвинуть вниз",
                        "playlist_url": "about:configSearch#move:sites:down:" + i
                    }];
                    if (se.ds == -1 && se.ss == i) var dop = "<b>(по умолчанию)</b> ";
                    else if (se.sites[i].dop) dop = "<b>(дополнительно)</b> ";
                    else {
                        mn.push({
                            "title": "Удалить",
                            "playlist_url": "about:configSearch#delSite:" + i
                        });
                        dop = ""
                    }
                    data["chan" + "nels"].push({
                        "logo_30x30": se.sites[i].logo,
                        "title": dop + se.sites[i].title,
                        "playlist_url": "cmdmenu",
                        "menu": mn,
                        "description": "url: " + se.sites[i].url + "<br>" + dop
                    })
                }
            } catch (e) {
                kjtYpr.popUp("Err listed searches:<br>" + e.message, 2000)
            }
        } else if (n == "about:blank") {
            var data = getVars(n)
        } else if (n.indexOf("about:addstartlink") == 0) {
            if (n == "about:addstartlinkok") {
                if (gV(payd, "sturl") == "") kjtYpr.inf("Ссылка не может быть пустой!", 1800);
                else if (!gV(payd, "sturl").match(/^(https?|html):\/\//)) kjtYpr.inf("Ссылка должна начинаться с http://, html:// или https:// !", 1800);
                else {
                    if (gV(payd, "sttitle") == "") var title = gV(payd, "sturl").match(/(.*\/\/)?(.{0,20})(\?)?/)[2];
                    else title = gV(payd, "sttitle");
                    favarray = {
                        "title": title,
                        "playlist_url": payd.sturl
                    };
                    kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdToStart");
                    return gotoStart()
                }
            }
            var data = {
                "title": "Добавить ссылку",
                "channels": []
            };
            data.channels.push({
                "title": "Заголовок(не обязательно)" + (gV(payd, "sttitle") != "" ? ":" + gV(payd, "sttitle") : ""),
                "value": gV(payd, "sttitle"),
                "playlist_url": "payd_sttitle",
                "search_on": "Введите заголовок",
                "logo_30x30": ""
            });
            data.channels.push({
                "title": "URL ссылки" + (gV(payd, "sturl") != "" ? ":" + gV(payd, "sturl") : ""),
                "value": gV(payd, "sturl"),
                "playlist_url": "payd_sturl",
                "search_on": "Введите URL ссылки",
                "logo_30x30": "",
                "presearch": "http://omnibox.spiderxml.com/?type=all"
            });
            data.channels.push({
                "title": "Добавить",
                "playlist_url": "about:addstartlinkok",
                "logo_30x30": ""
            });
            data.icon = "none";
            data.typeList = "list";
            data.navigate = "Добавить новый сайт в Стартовое меню"
        } else if (n == "favorites") {
            s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("bookmarks");
            var dopch = [];
            if (s != "") {
                var sd = l1l0IOIl_puQl1I1IYpr(s);
                if (sd != null) {
                    dopch = sd
                }
            }
            var data = {
                "playlist_name": "_FPZakladki_",
                "channels": []
            };
            for (var i = 0; i < dopch.length; i++) {
                if (typeof dopch[i].logo_30x30 != "undefined") var logo = dopch[i].logo_30x30;
                else logo = "http://static.tempdata.forkplayer.tv/staticfiles/fimg/zakl.png";
                data.channels.push({
                    "title": dopch[i].title,
                    "playlist_url": dopch[i].playlist_url,
                    "logo_30x30": _img(logo)
                })
            }
            data.channels.push({
                "title": "Добавить папку",
                "playlist_url": "bookmarksadd",
                "logo_30x30": "" + _img("_OI_plus.png")
            });
            data.channels.push({
                "title": kjtYpr.GL["zakladki.xml"],
                "playlist_url": "zakladki.xml",
                "logo_30x30": "" + _img("http://static.tempdata.forkplayer.tv/staticfiles/fimg/zakl.png")
            });
            data.channels.push({
                "title": kjtYpr.GL["zakladkiSerials.xml"],
                "playlist_url": "zakladkiSerials.xml",
                "logo_30x30": "" + _img("http://static.tempdata.forkplayer.tv/staticfiles/fimg/zakl.png")
            });
            data.channels.push({
                "title": kjtYpr.GL["zakladkiFilms.xml"],
                "playlist_url": "zakladkiFilms.xml",
                "logo_30x30": "" + _img("http://static.tempdata.forkplayer.tv/staticfiles/fimg/zakl.png")
            });
            data.channels.push({
                "title": kjtYpr.GL["zakladkiIPTV.xml"],
                "playlist_url": "zakladkiIPTV.xml",
                "logo_30x30": "" + _img("http://static.tempdata.forkplayer.tv/staticfiles/fimg/zakl.png")
            });
            data.channels.push({
                "title": "_FPIstoriya_ (" + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("history").length + "bytes)",
                "playlist_url": "history",
                "logo_30x30": _img("_OI_history.png")
            });
            data.channels.push({
                "title": "Кеш (" + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("prev_cache").length + "bytes)",
                "playlist_url": "cache",
                "logo_30x30": _img("_OT_fcache.png"),
                "description": "В кеш сохраняются страницы открытые со стартового меню или внутренних/внешних закладок. Эти страницы хранятся локально на вашем устройстве"
            })
        } else if (n.indexOf("histsearch") == 0) {
            data = {
                "playlist_name": "История поисков",
                "channels": []
            };
            for (var a in enteresObj) {
                var el = enteresObj[a];
                if (!el.n.match(/[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi))
                    data.channels.push({
                        "title": el.n,
                        "playlist_url": "http://spiderxml.com/search?search=" + el.n,
                        "logo_30x30": _img("_OI_history.png"),
                        "description": "Нажмите для поиска в Spider"
                    })
            }
        } else if (n.indexOf("histurl") == 0) {
            data = {
                "playlist_name": "История ввода адресов",
                "channels": []
            };
            var x = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("enteres").split("|");
            for (var a in enteresObj) {
                var el = enteresObj[a];
                if (el.n.match(/[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi))
                    data.channels.push({
                        "title": el.n,
                        "playlist_url": el.n,
                        "logo_30x30": _img("_OI_history.png"),
                        "description": "Нажмите для перехода по адресу<br>" + el.n
                    })
            }
        } else if (n.indexOf("cache") == 0) {
            data = {
                "playlist_name": "Кеш",
                "channels": []
            };
            var x = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("prev_cache"));
            if (n == "cache") {
                for (var a in x) {
                    var el = x[a];
                    data.channels.push({
                        "title": el.settitle,
                        "playlist_url": "cache://" + a,
                        "logo_30x30": el.setimg,
                        "description": "Дата помещения в кеш: " + dt(el.setcache, !0) + "<br>Размер: " + l10O0I11gdZlOOIIYpr(el).length + "bytes"
                    })
                }
            } else {
                data = x[n.substr(8)]
            }
        } else {
            s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(n);
            data = l1l0IOIl_puQl1I1IYpr(s)
        }
        if (n == "history") {
            if (data == null) {
                kjtYpr.inf("_FPZdesPusto_!", 1000);
                return
            }
            var d = [];
            for (var i = 0; i < data.length; i++) {
                var dpu = null;
                if (typeof data[i].ChSel == "object") {
                    var ch = data[i].ChSel;
                    ch.menu = [{
                        "title": "Страница " + data[i].title,
                        "playlist_url": data[i].xml_url,
                        "logo_30x30": data[i].icon
                    }];
                    var mtc = data[i].ChSel.stream_url.match(/\/\/(.*?)\//);
                    if (mtc != null) dpu = mtc[1];
                    ch.display_title = ch.title + " / " + data[i].title
                } else {
                    ch = {
                        "display_title": data[i].title,
                        "playlist_url": data[i].xml_url,
                        "logo_30x30": data[i].icon
                    }
                }
                if (dpu == null) {
                    var mtc = data[i].infolink.match(/\/\/(.*?)\//);
                    if (mtc != null) dpu = mtc[1]
                }
                if (dpu != null) dpu = "<div style='float:right;margin-right: " + css_w(27) + "px;'>" + dpu + "</div>";
                else dpu = "";
                ch.display_title = dt(data[i].time + (parseInt(kjtYpr.GL.JTVRegion) + T.offset / 60) * 3600, 1, 0, 1, 1) + dpu + " <span style='white-space:normal;'>" + ch.display_title + "</span>";
                ch.title = data[i].title;
                ch.description = "";
                d.push(ch)
            }
            data = {
                "options": "hidedescription",
                "cacheinfo": "nocache",
                "style": {
                    "channels": {
                        "chnumber": {
                            "default": {
                                "display": "none"
                            },
                            "selected": {
                                "display": "none"
                            }
                        }
                    }
                },
                "playlist_name": "_FPIstoriya_",
                "channels": d
            }
        }
        if (data == null || data.channels.length == 0) {
            kjtYpr.inf("_FPZdesPusto_!", 1000);
            return
        }
        kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, incID())
    } catch (e) {
        kjtYpr.popUp("Error l1IOllIQV1ul00IlYpr: " + e.message, 2000)
    }
};

function FgetSetting(n, y) {
    var res = 0;
    var s = kjtYpr.GL.fs;
    if (s == null) s = "";
    if (s.length > 8) res = Number(s.substr(n, 1));
    if (isNaN(res)) res = 0;
    if (n == 1) res = 0;
    if (s.substr(12, 1) == "1") {
        if (n != 12 && n != 6) res = 1
    }
    if (y == null) return res;
    else if (y == 1) return ["Да", "Нет"][res];
    else if (y == 0) return ["Нет", "Да"][res];
    else return y[res]
}

function FsetSetting(n, v) {
    var d = FgetSetting(n);
    if (v == null) {
        if (++d > 1) d = 0
    } else d = v;
    var s = "";
    for (var i = 0; i < 15; i++) {
        if (i == n) s += String(d);
        else s += String(FgetSetting(i))
    }
    kjtYpr.GL.fs = s;
    kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
}
kjtYpr.ll0IlI01bONa1111OlYpr = function (cmd, key) {
    select = parseInt(select);
    oldselect = select;
    if (cmd.indexOf("setSetting(") == 0) {
        var m = cmd.match(/setSetting\((.*?)\)/);
        if (m[1] == 12 && FgetSetting(12)) {
            FsetSetting(m[1]);
            for (var i = 1; i < 15; i++) FsetSetting(i, 0);
        } else FsetSetting(m[1]);
        sdbar = null;
        upstyles();
        setfon();
        page_rs({
            "src": "_reload"
        });
        return
    }
    switch (cmd) {
        case "setTimeoutIptv":
            kjtYpr.GL.timeoutiptv = parseInt(kjtYpr.GL.timeoutiptv);
            if (key == VK_RIGHT) kjtYpr.GL.timeoutiptv += 5;
            if (key == VK_LEFT) kjtYpr.GL.timeoutiptv -= 5;
            if (kjtYpr.GL.timeoutiptv < 10) kjtYpr.GL.timeoutiptv = 10;
            if (kjtYpr.GL.timeoutiptv > 60) kjtYpr.GL.timeoutiptv = 60;
            break;
        case "setGlStart":
            if (key == VK_GREEN) {}
            if (key == VK_UP) {} else if (key == VK_DOWN) {} else {
                var m = ChSel.menu_url;
                var se = getVars("start");
                if (m == "search") se.config.search = !se.config.search;
                else if (m == "setsearch") se.config.setsearch = !se.config.setsearch;
                else if (m == "besttop") se.config.besttop = !se.config.besttop;
                else if (m == "setclearhidetop") delete se.hidetop;
                else if (m == "setcleartop") {
                    kjtYpr.lIllOVRj11lO10Ypr("datas", "");
                    userTop = {}
                } else if (m == "third") {
                    if (kjtYpr.GL.third) {
                        kjtYpr.GL.third = 0;
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
                    } else {
                        ll0111l1wxUIOlO1lYpr(8, "Нажимая _FPProdolzhit_, вы подтверждаете что несёте ответственность за принятие решений о переходе по непроверенным и сторонним ссылкам с раздела Лучшие в стартовом меню ForkPlayer");
                        return
                    }
                } else if (m == "third1") kjtYpr.GL.third = 1;
                else if (m == "setdefault") {
                    ll0111l1wxUIOlO1lYpr(14, "Нажимая _FPProdolzhit_, вы сбросите настройки Стартового меню и Поисковых систем к значениям по умолчанию! Ссылки которые вы добавляли вручную в Стартовое меню и Поисковые системы будут удалены!");
                    return
                } else if (m == "best") {
                    var num = parseInt(se.config.best);
                    if (isNaN(num)) num = 0;
                    if (key == VK_LEFT) num--;
                    else num++;
                    if (num < 0) num = 5;
                    else if (num > 5) num = 0;
                    se.config.best = num
                }
            }
            setVars("start", se);
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdSetStart");
            ll1lIOiIO0lO1IIIYpr = "";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(oldselect);
            select = oldselect;
            if (m != "third" && m != "third1") return;
            break;
        case "setGlSearch":
            if (key == VK_GREEN) {
                gs.url.splice(select, 1);
                if (select > gs.url.length - 1) select--
            } else if (key == VK_UP) {
                var n_sel = select - 1;
                if (n_sel < 0) n_sel = gs.count - 1;
                var o_row = gs.url[select];
                var n_row = gs.url[n_sel];
                gs.url[n_sel] = o_row;
                gs.url[select] = n_row
            } else if (key == VK_DOWN) {
                var n_sel = parseInt(select) + 1;
                if (n_sel > gs.count - 1) n_sel = 0;
                var o_row = gs.url[select];
                var n_row = gs.url[n_sel];
                gs.url[n_sel] = o_row;
                gs.url[select] = n_row
            } else {
                if (gs.url[select].show == "1") gs.url[select].show = "0";
                else gs.url[select].show = "1"
            }
            saveGl();
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdSetSearch");
            ll1lIOiIO0lO1IIIYpr = "";
            kjtYpr.lIOIOIBu0mO11llO0Ypr(oldselect);
            return;
            break;
        case "setLang":
            var x1 = 0,
                c = 0;
            for (i in lIO11l11NEB100OYpr) {
                if (i == kjtYpr.GL.lang) x1 = c;
                c++
            }
            if (key == VK_RIGHT) x1++;
            else x1--;
            if (x1 < 0) x1 = c - 1;
            else if (x1 > c - 1) x1 = 0;
            c = 0;
            for (i in lIO11l11NEB100OYpr) {
                if (x1 == c) kjtYpr.GL.lang = i;
                c++
            }
            kjtYpr.lIllOVRj11lO10YprC("lang", kjtYpr.GL.lang);
            break;
        case "setRows":
            var r = kjtYpr.GL.rows;
            if (key == VK_RIGHT) {
                if (r == 10) r = 12;
                else if (r == 12) r = 15;
                else if (r == 15) r = 20;
                else if (r == 20) r = 10;
                else r = 15
            } else if (key == VK_LEFT) {
                if (r == 10) r = 20;
                else if (r == 12) r = 10;
                else if (r == 15) r = 12;
                else if (r == 20) r = 15;
                else r = 15
            }
            kjtYpr.GL.rows = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            break;
        case "setRows":
            var r = kjtYpr.GL.rows;
            if (key == VK_RIGHT) {
                if (r == 10) r = 12;
                else if (r == 12) r = 15;
                else if (r == 15) r = 20;
                else if (r == 20) r = 10;
                else r = 15
            } else if (key == VK_LEFT) {
                if (r == 10) r = 20;
                else if (r == 12) r = 10;
                else if (r == 15) r = 12;
                else if (r == 20) r = 15;
                else r = 15
            }
            kjtYpr.GL.rows = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            break;
        case "setServ":
            var r = kjtYpr.GL.serv;
            if (timestamp > 0) {
                if (isNaN(r)) r = 0;
                if (key == VK_RIGHT) {
                    r++
                } else if (key == VK_LEFT) {
                    r--
                }
                if (r < 0) r = serverLoad.length - 1;
                else if (r > (serverLoad.length - 1)) r = 0;
                while (serverLoad[r].pr < 0 && r > 0) {
                    if (r == (serverLoad.length - 1) && key != VK_LEFT) r = 0;
                    else if (key == VK_LEFT) r--;
                    else r++
                }
            } else r = 0;
            kjtYpr.GL.serv = r;
            kjtYpr.lIllOVRj11lO10YprC("serv", r);
            kjtYpr.lIllOVRj11lO10Ypr("serv", r);
            break;
        case "setReturn":
            var r = kjtYpr.GL['return'];
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 5) r = 0;
            else if (r < 0) r = 5;
            kjtYpr.GL['return'] = r;
            break;
        case "setTS":
            var r = kjtYpr.GL.ts;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            if (r == 1 || r == 3) {
                setautoimp();
                var st = "_FPSaving data to the server every 5 minutes or by pressing the Menu button Save and_ ...";
                if (r == 3) st += "Автосинхронизация закладок и стартового меню всех ваших устройств в http://forkplayer.tv/mylist/<br>";
                ll0111l1wxUIOlO1lYpr(53, st)
            }
            if (r == 2) {
                var st = "Внимание! Это приведет к удалению всех ваших настроек и внутренних закладок после перезапуска ForkPlayer!<br>";
                ll0111l1wxUIOlO1lYpr(53, st)
            }
            kjtYpr.GL.ts = 0;
            kjtYpr.lIllOVRj11lO10YprC("ts", r);
            kjtYpr.lIllOVRj11lO10Ypr("ts", r);
            kjtYpr.GL.ts = r;
            break;
        case "setAdult":
            var r = kjtYpr.GL.adult;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            kjtYpr.GL.adult = r;
            break;
        case "setHeaders":
            var r = kjtYpr.GL.headers;
            if (isNaN(r)) r = 1;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            kjtYpr.GL.headers = r;
            break;
        case "setSidebar":
            var r = kjtYpr.GL.sidebar;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            kjtYpr.GL.sidebar = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            sidebar_show();
            break;
        case "setLivesearch":
            var r = kjtYpr.GL.livesearch;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            kjtYpr.GL.livesearch = r;
            break;
        case "setSnow":
            var r = kjtYpr.GL.snow;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            kjtYpr.GL.snow = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            break;
        case "setRate":
            var r = kjtYpr.GL.rate;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 1) r = 0;
            else if (r < 0) r = 1;
            kjtYpr.GL.rate = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            break;
        case "setPip":
            var r = kjtYpr.GL.pip;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 2) r = 0;
            else if (r < 0) r = 2;
            kjtYpr.GL.pip = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            break;
        case "setSortiptv":
            var r = kjtYpr.GL.sortiptv;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++
            } else if (key == VK_LEFT) {
                r--
            }
            if (r > 3) r = 0;
            else if (r < 0) r = 3;
            kjtYpr.GL.sortiptv = r;
            kjtYpr.lOlIOOWs1uO000lYpr();
            break;
        case "setAudioplayer":
            var r = kjtYpr.GL.audioplayer;
            if (platform == "sams" || uaJ == "mag" || uaJ == "dune") var maxr = 1;
            else if (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") maxr = 4;
            else maxr = 3;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) r++;
            else if (key == VK_LEFT) r--;
            if (r < 0) r = maxr;
            else if (r > maxr) r = 0;
            kjtYpr.GL.audioplayer = r;
            break;
        case "setAS":
            var r = kjtYpr.GL.remote;
            if (uaJ == "android-device" && r == "") {
                r = "127.0.0.1:6878"
            }
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++;
                if (r == 1) r = 2
            } else if (key == VK_LEFT) {
                r--;
                if (r == 1) r = 0
            }
            if (r > 3) r = 0;
            else if (r < 0) r = 3;
            kjtYpr.GL.remote = r;
            l0I1l0lO0lsnG1I1QlYpr();
            break;
        case "setRemote":
            var r = kjtYpr.GL.remote;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) {
                r++;
                if (r == 1) r = 2
            } else if (key == VK_LEFT) {
                r--;
                if (r == 1) r = 0
            }
            if (r > 3) r = 0;
            else if (r < 0) r = 3;
            kjtYpr.GL.remote = r;
            l0I1l0lO0lsnG1I1QlYpr();
            break;
        case "setRecovery":
            if (key == VK_RIGHT || key == VK_LEFT) {
                if (kjtYpr.GL.recovery == !1) kjtYpr.GL.recovery = !0;
                else kjtYpr.GL.recovery = !1
            }
            break;
        case "setStreamplayer":
            var start = 0;
            for (var i in exPl) {
                if (exPl[i] == kjtYpr.GL.streamplayer) start = i
            }
            if (key == VK_RIGHT) start++;
            else if (key == VK_LEFT) start--;
            if (start < 0) start = exPl.length - 1;
            else if (start >= exPl.length) start = 0;
            kjtYpr.GL.streamplayer = exPl[start];
            break;
        case "setPlayer":
            var start = 0;
            for (var i in exPlV) {
                if (exPlV[i] == kjtYpr.GL.player) start = i
            }
            if (key == VK_RIGHT) start++;
            else if (key == VK_LEFT) start--;
            if (start < 0) start = exPlV.length - 1;
            else if (start >= exPlV.length) start = 0;
            kjtYpr.GL.player = exPlV[start];
            break;
        case "setNext":
            kjtYpr.GL.next = parseInt(kjtYpr.GL.next);
            if (isNaN(kjtYpr.GL.next)) kjtYpr.GL.next = 0;
            if (key == VK_RIGHT) kjtYpr.GL.next++;
            if (key == VK_LEFT) kjtYpr.GL.next--;
            if (kjtYpr.GL.next < 1) kjtYpr.GL.next = 4;
            else if (kjtYpr.GL.next > 4) kjtYpr.GL.next = 1;
            break;
        case "setPass":
            if (key == VK_RIGHT || key == VK_LEFT) {
                if (kjtYpr.GL.password == 'Off') {
                    if (kjtYpr.GL.passwordkey == "") {
                        l0111O0tihuOIIlOYpr("_FPVvedNov_ _FPparol_:");
                        VK.Show("search", 1);
                        kjtYpr.inputId = 'setpass'
                    }
                } else {
                    l0111O0tihuOIIlOYpr("_FPDlUdVved_ _FPparol_:");
                    VK.Show("search", 1);
                    kjtYpr.inputId = 'delpass'
                }
                return
            }
            break;
        case "setFon":
            if (key == VK_RIGHT) kjtYpr.GL.fon++;
            if (key == VK_LEFT) kjtYpr.GL.fon--;
            if (kjtYpr.GL.fon > fons.length - 1) kjtYpr.GL.fon = 0;
            else if (kjtYpr.GL.fon < 0) kjtYpr.GL.fon = fons.length - 1;
            setfon();
            break;
        case "setCountry":
            if (key == VK_RIGHT) kjtYpr.GL.country++;
            if (key == VK_LEFT) kjtYpr.GL.country--;
            if (kjtYpr.GL.country > countries.length - 1) kjtYpr.GL.country = 0;
            else if (kjtYpr.GL.country < 0) kjtYpr.GL.country = countries.length - 1;
            country = countries[kjtYpr.GL.country];
            break;
        case "setColor":
            var r = kjtYpr.GL.color;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) r++;
            if (key == VK_LEFT) r--;
            if (r > f_cols.length - 1) r = 0;
            else if (r < 0) r = f_cols.length - 1;
            $_("main").style.color = f_cols[r];
            kjtYpr.GL.color = r;
            break;
        case "setFont":
            var r = kjtYpr.GL.font;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) r++;
            if (key == VK_LEFT) r--;
            if (r > f_font.length - 1) r = 0;
            else if (r < 0) r = f_font.length - 1;
            document.getElementsByTagName('body')[0].style.fontFamily = f_font[r];
            kjtYpr.GL.font = r;
            break;
        case "setScreensaver":
            kjtYpr.GL.scrsaver = parseInt(kjtYpr.GL.scrsaver);
            if (key == VK_RIGHT) kjtYpr.GL.scrsaver += 1;
            if (key == VK_LEFT) kjtYpr.GL.scrsaver -= 1;
            if (kjtYpr.GL.scrsaver < 0) kjtYpr.GL.scrsaver = 1;
            else if (kjtYpr.GL.scrsaver > 2) kjtYpr.GL.scrsaver = 0;
            screensaver(!0);
            break;
        case "setPr":
            kjtYpr.GL.pr = parseInt(kjtYpr.GL.pr);
            if (key == VK_RIGHT) kjtYpr.GL.pr += 10;
            if (key == VK_LEFT) kjtYpr.GL.pr -= 10;
            if (kjtYpr.GL.pr > 100) kjtYpr.GL.pr = 0;
            else if (kjtYpr.GL.pr < 0) kjtYpr.GL.pr = 100;
            setfon();
            break;
        case "setJTVRegion":
            r = kjtYpr.GL.JTVRegion;
            if (isNaN(r)) r = 0;
            if (key == VK_RIGHT) r++;
            if (key == VK_LEFT) r--;
            if (r > 12) r = -12;
            kjtYpr.GL.JTVRegion = r;
            break;
        case "setStart":
            if (key == VK_RIGHT || key == VK_LEFT) {
                if (kjtYpr.GL.start != "zakladki.xml") kjtYpr.GL.start = "zakladki.xml";
                else kjtYpr.GL.start = "LG alexkdpu"
            }
            break;
        case "setQual":
            if (key == VK_LEFT) {
                if (++kjtYpr.GL.quality > sQual.length - 1) kjtYpr.GL.quality = 0
            }
            if (key == VK_RIGHT) {
                if (--kjtYpr.GL.quality < 0) kjtYpr.GL.quality = sQual.length - 1
            }
            break
    }
    kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
    page_rs({
        "src": "_reload"
    })
};
var copyUsb = "",
    copyUsbNames = "",
    copyUsbMode = 0;
kjtYpr.l1l0l1OvIo1ll001lYpr = function (m) {
    lllIOl1r11OIl1Ypr = 0;
    if (m == null) m = "";
    Menu = Array();
    if (getSelect() == -2) {
        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPUdalit_ _FPizZakladok_", "cmdDel"))
    } else if (getSelect() == -1) {
        if (oldinset != null && m != "favmenu") {
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOpen closed tab_", "cmdOpenInsetClose"))
        }
        if (l1OIOvnWuZI0lO0Ypr == insetActive && !l1IOIIz1l0Ol110Ypr()) {
            if (insetIn(-1, "get", "b") == "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPZablVkl_", "cmdInsetBlock"));
            else Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPRazblVkl_", "cmdInsetBlock"));
            if (insetIn(-1, "get", "a") == "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPUstSart_", "cmdInsetStart"));
            else Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPUdIzSt_", "cmdInsetStart"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPObnovitStranicy_", "cmdReload"))
        } else if (m == "topmenu") {
            if (user == null) Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPProfile_<br><span style='font-size:70%;color:#d1d1d1;padding-left: 29px;'>_FPSign in to sync browser data across devices_</span>", "cmdMyAccount"));
            else {
                var dop = "_FPProfile_ " + user.login;
                try {
                    if (timestamp < 3) dop = "" + dop + " - есть ограничения! <br><span style='font-size:70%;padding-left: 29px;color: #ff9800; padding-left: 29px; font-weight: bold;'>_FPОбъем и время хранения данных синхронизации лимитировано!_</span>";
                    else dop = "" + dop + ""
                } catch (e) {}
                Menu.push(Array(lllIOl1r11OIl1Ypr++, dop, "cmdMyAccount"))
            }
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNew inset_", "cmdNewInset"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNew private inset_", "cmdNewInsetPriv"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNastrStartMenu_", "cmdSetStart"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNastrGlPoisk_", "cmdSetSearch"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNastroiki_ _FPprilozheniya_", "cmdGoURL", "tosettings"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPMoiUvedoml_", "cmdMail"));
            var dop = "";
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "Контакты и Условия использования", "cmdAbout"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPIstoriya_ / Кеш", "cmdHistory"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPZakladki_", "cmdFavopen"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPVneshnie_ _FPzakladki_", "cmdExtopen"));
            if (kjtYpr.GL.ts > 0) var tts = "_FPSave and_ ";
            else tts = "";
            Menu.push(Array(lllIOl1r11OIl1Ypr++, tts + "_FPEXIT_", "cmdExit"))
        } else if (m == "favmenu") {
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ _FPStartovoeMenu_", "cmdToStart"));
            if (is_vivat() == 3 || is_vivat() == 4 || kjtYpr.global.player == "inner" || this.l1IlIl01l0tUIl1IIYpr.indexOf("zakladki") == 0 || this.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") == 0) {} else {
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ _FPBookmark toolbar_", "", "bookmarks/toolbar"));
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ _FPzakladki_", "Bookmarks"));
                if (lastBookm.url != "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ " + lastBookm.title, "", lastBookm.url))
            }
        } else if (oldinset == null) return
    } else if (submenuSelIcon.selicon) {
        if (submenuSelIcon.title.indexOf("--") > 0) var title = submenuSelIcon.title.split("--")[1];
        else title = submenuSelIcon.title;
        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPSetIconFor_ \"" + title.substr(0, 8) + "\"", "cmdSetIcon", curCh()["logo_30x30"]));
        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOtmena_", "cmdSetIcon", "cancel"))
    } else {
        if (getSelect() == -3) var ch = curCh();
        else if (getSelect() >= 0) ch = curCh();
        else kjtYpr.popUp("Dont have menu!", 1500);
        if (typeof curCh()["menu"] == "object") {
            if (m == "onlymenu") {
                Menu = []
            }
            for (var i in curCh()["menu"]) {
                Menu.push(Array(lllIOl1r11OIl1Ypr++, curCh()["menu"][i].title, "cmdUserMenu", i, curCh()["menu"][i].logo_30x30))
            }
        }
        if (m != "onlymenu") {
            if (insetIn(-1, "get", "b") != "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPRazblVkl_", "cmdInsetBlock"));
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("cmdSetSearch") == 0) {
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPPeredvinut_ вверх", "cmdGlUp"));
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPPeredvinut_ вниз", "cmdGlDown"));
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPUdalit_", "cmdGlDel"));
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPSet default glob. search_", "cmdGlDef"))
            }
            if (lOlI1OII1UehOl1lIOIOYpr) {
                if ($_("vk_audio").style.display == "block") {
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "Управление аудио", "cmdAudio"))
                }
            }
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("wlist.php?id") > 0) {
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPRun widget_", "cmdRunWidget"));
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "Установить с заменой", "cmdRewrite"))
            }
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("cmdSetStart") == 0) Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPSetDefaultStartMenu_", "cmdStartDef"));
            if (kjtYpr.channels.length > 0) {
                if (l1IOIIz1l0Ol110Ypr()) {
                    if (gV(curCh(), "source") == "fav") {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPPeredvinut_", "cmdUp"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDeleteFromStartMenu_", "cmdDelFromStart"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPEdit_", "cmdEdit"))
                    } else if (gV(curCh(), "source").match(/(service)/)) {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "Скрыть", "cmdDelFromStart"))
                    } else if (gV(curCh(), "source").match(/(usertop)/)) {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "Перенести в Избранные ", "cmdToStart"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "Удалить из истории", "cmdDelFromStart"))
                    } else if (gV(curCh(), "source").match(/(top|third)/)) {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "Перенести в Избранные ", "cmdToStart"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "Скрыть", "cmdDelFromStart"))
                    }
                }
                if (chGroup.length > 0) {
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPCategorys_", "cmdGroup"))
                }
                if (!l1IOIIz1l0Ol110Ypr() && (curCh()["playlist_url"].indexOf("bookmarks/") == 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("zakladki") == 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") == 0)) {
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPEdit_", "cmdEdit"))
                }
                if (is_iptv > 2) {
                    if (typeof curCh()["epg"] != "undefined") var t = " (" + curCh()["epg"] + ")";
                    else t = " (_FPustanovit_)";
                    epg_region = "";
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "ЕПГ код" + t, "cmdEpg"))
                }
                if (apijsUrl != "")
                    if (payd.user != "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "Выйти с аккаунта " + payd.user, "cmdClearprov", "provUser"));
                if (curCh("stream_url") != "" && !is_mark) {
                    for (var i in exPl) {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, sPlayer[exPl[i]], "cmdFlash", exPl[i]))
                    }
                    if (platform == "lg" && uaJ != "mag" && uaJ != "dune") {
                        if (kjtYpr.series == "LW") {
                            Menu.push(Array(lllIOl1r11OIl1Ypr++, "Внешний MEDIA _FPpleer_", "cmdFlash", "extmedia"));
                            Menu.push(Array(lllIOl1r11OIl1Ypr++, "Внешний HTML5 _FPpleer_", "cmdFlash", "exthtml5"))
                        }
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "Iframe HTML5 _FPpleer_", "cmdFlash", "ifrhtml5"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPVstroenniy_ _FPpleer_", "cmdFlash", "download"))
                    }
                    if (curCh("stream_url").indexOf("fex.net") > 0 && timestamp > 0) {
                        if (Math.random() > 0) {
                            // Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOpenFromProxy_ 1", "cmdProxy", "http://185.158.114.122/pex/"))
                            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOpenFromProxy_ 1", "cmdProxy", "http://127.0.0.1/pex/"))
                        } else {}
                    }
                    if ($_("titleid" + select).style.textDecoration == "line-through") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOtmNeProsm_", "cmdTimes"));
                    else Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOtmProsm_", "cmdTimes"));
                    if (is_img(curCh("stream_url"))) Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPSetFon_", "cmdFon"))
                } else {}
                if (curCh()["search_on"] != "" && curCh()["playlist_url"].indexOf("otziv") == -1 && !l1IOIIz1l0Ol110Ypr()) {
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavVglob_", "cmdGlAdd"))
                }
                if (!l1IOIIz1l0Ol110Ypr() && (this.l1IlIl01l0tUIl1IIYpr.indexOf("zakladki") == 0 || this.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") == 0)) {
                    if (is_mark) {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPMark_ _FPvse_", "cmdSelectAll"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDese" + "lect_", "cmdSelect"))
                    } else {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPPeredvinut_", "cmdUp"));
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPMark_ _FPseveral_", "cmdSelect"))
                    }
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPUdalit_ _FPizZakladok_", "cmdDel"));
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPPeremV_ ", "cmdMoveBookmarks"))
                } else if (this.l1IlIl01l0tUIl1IIYpr.indexOf("settings") != 0) {
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPObnovitStranicy_", "cmdReload"));
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPSource code_", "cmdInfo"));
                    if (kjtYpr.global.player == "inner") {} else {
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ _FPzakladki_", "Bookmarks"));
                        if (lastBookm.url != "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ " + lastBookm.title, "", lastBookm.url))
                    }
                    if (!l1IOIIz1l0Ol110Ypr()) {
                        if (is_mark) {
                            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPMark_ _FPvse_", "cmdSelectAll"));
                            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDesel" + "ect_", "cmdSelect"))
                        } else {
                            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPMark_ _FPseveral_", "cmdSelect"))
                        }
                    }
                    if (is_iptv > 2) {
                        if (curCh()["order"] != undefined) var st = " (Major: " + curCh()["order"] + ")";
                        else st = "";
                        Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPSorting_" + st, "cmdSorting"))
                    }
                }
                if (curCh("stream_url") == "" && !is_mark && kjtYpr.global.player != "inner") {
                    if (!l1IOIIz1l0Ol110Ypr() && gV(curCh(), "playlist_url").match(/^(html|http|vk:|bookmar|zakladki|history|cache)/)) Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPDobavitV_ _FPStartovoeMenu_", "cmdToStart"))
                }
            } else Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPPolnSbrosNastr_", "cmdReset"));
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("history") != 0)
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPIstoriya_ / Кеш", "cmdHistory"));
            else Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOchistitIstoriyu_", "cmdClearHistory"));
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("histurl") == 0 || this.l1IlIl01l0tUIl1IIYpr.indexOf("histsearch") == 0)
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPOchistitIstoriyu_", "cmdClear" + this.l1IlIl01l0tUIl1IIYpr));
            if ((kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("http") == 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr == "mylist") && !l1IOIIz1l0Ol110Ypr() && kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("no_save") == -1 && kjtYpr.global.player != "inner")
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "Сохранить страницу в кеш", "cmdSaveCache"));
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("cache") == 0) Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPClear cache_", "cmdClearCache"));
            if (!l1IOIIz1l0Ol110Ypr() && kjtYpr.GL.lang != "ru") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPTranslate_ " + kjtYpr.GL.lang, "cmdTranslate"));
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("tosettings") != 0) {
                if (!l1IOIIz1l0Ol110Ypr()) Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNaitiVglobPoiske_...", "cmdSearch"));
                if (!l1IOIIz1l0Ol110Ypr()) Menu.push(Array(lllIOl1r11OIl1Ypr++, "Рецензии и фильмография...", "cmdSearchKinopoisk"));
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPNastroiki_", "cmdMenuSettings"))
            }
            if ((this.l1IlIl01l0tUIl1IIYpr.indexOf("smarttv/api.php?do=list") > 0 || this.l1IlIl01l0tUIl1IIYpr == "mylist")) {
                if (curCh()["logo_30x30"].indexOf("smarttv/img/logo_folder.png") == -1) Menu.push(Array(lllIOl1r11OIl1Ypr++, "<font color=red>_FPUdalit_ _FPlistSservera_</font>", "cmdDelMylist"));
                if (curCh("description").indexOf("Как удалить себя") > 0)
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "<font color=red>Удалить устройство с forkplayer.tv</font>", "cmdDelHardware"))
            }
            if ((this.l1IlIl01l0tUIl1IIYpr == "mymail")) {
                if (curCh("description").indexOf("(c)forkplayer.tv") > 0)
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "<font color=red>Удалить устройство с forkplayer.tv</font>", "cmdDelHardware"))
            }
            if (this.l1IlIl01l0tUIl1IIYpr.indexOf("usb:/") == 0 || (platform == "sams" && curCh("stream_url") != "")) {
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPKopirovat_", "cmdCopyUsb"));
                if (this.l1IlIl01l0tUIl1IIYpr != "usb://" && this.l1IlIl01l0tUIl1IIYpr.indexOf("usb:/") == 0) {
                    if (copyUsb != "") Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPVstavit_", "cmdPasteUsb"));
                    Menu.push(Array(lllIOl1r11OIl1Ypr++, "<font color=red>_FPUdalit_</font>", "cmdDelUsb"))
                }
            }
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPZakladki_", "cmdFavopen"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, "_FPVneshnie_ _FPzakladki_", "cmdExtopen"));
            if (kjtYpr.GL.remote > 0) {
                Menu.push(Array(lllIOl1r11OIl1Ypr++, "Обновить сост. RemoteFork", "cmdRemoteUpdate"))
            }
            if (kjtYpr.GL.ts > 0) var tts = "_FPSave and_ ";
            else tts = "";
            if ((uaJ != "mag" && uaJ != "dune" && !is_tizen && platform != "android-device") || kjtYpr.mac == "54bd7952bfe8" || kjtYpr.mac == "525400123456") Menu.push(Array(lllIOl1r11OIl1Ypr++, tts + "_FPVijtiV_ Fork Store", "cmdForkStore"));
            else if (is_tizen) Menu.push(Array(lllIOl1r11OIl1Ypr++, tts + "_FPVijtiV_ Fork Store (HTML5)", "cmdForkStore"));
            Menu.push(Array(lllIOl1r11OIl1Ypr++, tts + "_FPEXIT_", "cmdExit"))
        }
    }
    if (Menu.length == 0) {
        kjtYpr.inf("Empty menu!", 1200);
        return
    }
    var l1100I1QvJubu0lIOOYpr = "";
    for (var index = 0; index < lllIOl1r11OIl1Ypr; index++) {
        var m_img = "";
        if (Menu[index][2] == "cmdMenuSettings") m_img = "/insetM" + "enu.png";
        else if (Menu[index][2] == "cmdSettings") m_img = "/settings.png";
        else if (Menu[index][2] == "cmdExit") m_img = "/exit.png";
        else if (Menu[index][2] == "cmdUp") m_img = "/move.png";
        else if (Menu[index][2] == "cmdRemoteUpdate") m_img = $_("remotesrc").src;
        else if (Menu[index][2] == "cmdTimes") m_img = "/cmdTimes.png";
        else if (Menu[index][2] == "extmedia") m_img = "/extmedia.png";
        else if (Menu[index][2] == "exthtml5") m_img = "/exthtml5.png";
        else if (Menu[index][2] == "cmdGroup") m_img = "/group.png";
        else if (Menu[index][2] == "cmdExtopen") m_img = "/extbookm.png";
        else if (Menu[index][2] == "cmdSetStart") m_img = "/cmdSetStart.png";
        else if (Menu[index][2] == "cmdSorting") m_img = "/sort.png";
        else if (Menu[index][2] == "cmdForkStore") m_img = "/exittostore.png";
        else if (Menu[index][2] == "cmdSearch") m_img = "/search.png";
        else if (Menu[index][2] == "cmdSearchKinopoisk") m_img = "" + "/recenzii.png";
        else if (Menu[index][2] == "cmdMail") m_img = "/mail.png";
        else if (Menu[index][2] == "cmdEdit") m_img = "/edit.png";
        else if (Menu[index][2] == "cmdDonate") m_img = "/donate-button.png";
        else if (Menu[index][2] == "cmdOpenStart") m_img = "/b/d.png";
        else if (Menu[index][2] == "cmdFavopen") m_img = "/zakl.png";
        else if (Menu[index][2] == "Bookmarks") m_img = "/addzakl.png";
        else if (Menu[index][2] == "cmdReload") m_img = "/reload.png";
        else if (Menu[index][2] == "cmdVivatArc") m_img = "/archive.png";
        else if (Menu[index][2] == "cmdTranslate") m_img = "/translate.png";
        else if (Menu[index][2] == "cmdEpg") m_img = "/epg.png";
        else if (Menu[index][2].indexOf("cmdDel") == 0) m_img = "/delete.png";
        else if (Menu[index][2] == "cmdHistory") m_img = "/history.png";
        else if (Menu[index][2] == "cmdToStart") m_img = "/addtostart.png";
        else if (Menu[index][2] == "cmdSelect" || Menu[index][2] == "cmdSelectAll") m_img = "/sele" + "ct_all.png";
        else if (Menu[index][3] == "media") m_img = "/media.png";
        else if (Menu[index][3] == "html5") m_img = "/html5.png";
        else if (Menu[index][3] == "jw") m_img = "/jw.png?ndate190505_";
        else if (Menu[index][3] == "ifrhtml5") m_img = "/ifrhtml5.png";
        else if (Menu[index][3] == "tizen") m_img = _img("_OT_p_tizen.png");
        else if (Menu[index][3] == "download") m_img = "/vstrpleer.png";
        else if (Menu[index][3] == "vadd") m_img = "/addzakl.png";
        else if (Menu[index][3] == "vdel") m_img = "/delete.png";
        else if (Menu[index][2] == "cmdDelFromStart") m_img = "/delete.png";
        else if (Menu[index][2] == "cmdClearHistory" || Menu[index][2] == "cmdClearCache") m_img = "/delete.png";
        else if (Menu[index][3] == "lock") m_img = "/lock.png";
        else if (Menu[index][3] == "unlock") m_img = "/unlock.png";
        else if (Menu[index][3] == "bookmarks/toolbar") m_img = "/addzakl.png";
        else if (Menu[index][2] == "" && typeof lastBookm.logo_30x30 != undefined) m_img = lastBookm.logo_30x30;
        else if (Menu[index][2] == "cmdSetIcon" && Menu[index][3] != "cancel") m_img = Menu[index][3];
        else if (typeof Menu[index][4] != "undefined")
            if (Menu[index][4] != "") m_img = Menu[index][4];
        if (Menu[index][2] == "Bookmarks" || Menu[index][2] == "cmdMoveBookmarks" || Menu[index][2] == "cmdAudio" || Menu[index][2] == "cmdEdit" || Menu[index][2] == "cmdSorting")
            var f_img = "<img align='right' style='padding-top: " + css_wh(5) + "px; margin-right: " + css_w(-7) + "px;' src='" + _img("_OI_b/f.png") + "' width='" + css_w(21) + "' height='" + css_wh(16) + "' />";
        else f_img = "";
        if (m_img.indexOf("/") == 0) m_img = "http://obovse.ru/ForkPlayer2.5/img" + m_img;
        if (m_img != "") m_img = "<img src='" + _img(m_img) + "' width='" + css_w(21) + "' height='" + css_wh(16) + "' />";
        else m_img = "&nbsp;";
        if (Menu[index][2] == "cmdForkStore") l1100I1QvJubu0lIOOYpr += "<div style='height:1px;margin:2px 0px 0px 0px;border-top:1px solid gray;'>&nbsp;</div>";
        l1100I1QvJubu0lIOOYpr = l1100I1QvJubu0lIOOYpr + "<div" + FgetSetting(1, [" onmousemove=\"lllIOl1r11OIl1Ypr=" + index + ";kjtYpr.l1l0l1OvIo1ll001lYprPos(lllIOl1r11OIl1Ypr);\" onclick=\"if(subMenu.length==0) kjtYpr.l1l0l1OvIo1ll001lYprPlay(Menu[lllIOl1r11OIl1Ypr][2]);\"", ""]) + " id='l1100I1QvJubu0lIOOYpr" + index + "' class='menuchannel' style='overflow:visible;padding:0px " + css_w(6) + "px " + css_w(4) + "px " + css_w(4) + "px;'><div style='float:left;height: 100%;width:" + css_w(28) + "px;padding-top:0px;'>" + m_img + "</div>" + Menu[index][1] + f_img + "</div>"
    }
    $_("MenuCh").style.fontSize = $_("main").style.fontSize;
    lO10OIOlxzlO100OIYpr("MenuCh", l1100I1QvJubu0lIOOYpr);
    ch_l = 290;
    ch_h = css_wh(70);
    if (m == "topmenu") ch_l = 500;
    else if (m == "favmenu") ch_l = 650;
    else if (getSelect() == -1) {
        if (l1OIOvnWuZI0lO0Ypr < lOI10QpJAilIIIYpr) {
            ch_l = l1OIOvnWuZI0lO0Ypr * (560 / lOI10QpJAilIIIYpr);
            if (ch_l > 500) ch_l = 500
        }
    } else if (getSelect() < 0) {
        ch_h = css_wh(73);
        ch_l = 100 + sdbarSel * 100
    } else {
        ch_h = $("#site").offset().top + $($_("ch" + getSelect())).offset().top + 20;
        ch_l = $($_("ch" + getSelect())).offset().left + 30;
        var bot_l = 0.93 * ($("#site").offset().top + $("#site").height());
        if (ch_h + $("#MenuCh").height() + 20 > bot_l) {
            ch_h = bot_l - $("#MenuCh").height() - 20
        }
    }
    if (ch_h < 10) ch_h = 10;
    if ((ch_l + 40 + $("#MenuCh").width()) > $("#site").width()) ch_l = $("#site").width() - $("#MenuCh").width() - 40;
    $_("MenuCh").style.top = ch_h + "px";
    $_("MenuCh").style.left = css_w(ch_l) + "px";
    $_("MenuCh").style.width = "auto";
    $_("MenuCh").style.borderRadius = "0px";
    $_("MenuCh").style.display = "block";
    $_("MenuCh").style.zIndex = "1";
    $_("MenuCh").style.overflowY = "auto";
    $_("MenuCh").style.maxHeight = "90%";
    handler = "context";
    kjtYpr.l1l0l1OvIo1ll001lYprPos(0)
};
kjtYpr.l1l0l1OvIo1ll001lYprPos = function (n, mode) {
    if (subMenu.length) {
        if (mode) {
            sublllIOl1r11OIl1Ypr = n;
            if (sublllIOl1r11OIl1Ypr < 0) sublllIOl1r11OIl1Ypr = subMenu.length - 1;
            if (sublllIOl1r11OIl1Ypr > (subMenu.length - 1)) sublllIOl1r11OIl1Ypr = 0;
            for (var index = 0; index < subMenu.length; index++) {
                if (index == sublllIOl1r11OIl1Ypr)
                    $_("subl1100I1QvJubu0lIOOYpr" + index).style.backgroundColor = "#4281F4";
                else $_("subl1100I1QvJubu0lIOOYpr" + index).style.backgroundColor = "transparent"
            }
            return
        } else {
            if (submenuParent != lllIOl1r11OIl1Ypr) closeSubMenu();
            else return
        }
    }
    lllIOl1r11OIl1Ypr = n;
    if (lllIOl1r11OIl1Ypr < 0) lllIOl1r11OIl1Ypr = Menu.length - 1;
    if (lllIOl1r11OIl1Ypr > (Menu.length - 1)) lllIOl1r11OIl1Ypr = 0;
    for (var index = 0; index < Menu.length; index++) {
        if (index == lllIOl1r11OIl1Ypr) {
            $_("l1100I1QvJubu0lIOOYpr" + index).style.backgroundColor = "#4281F4"
        } else {
            $_("l1100I1QvJubu0lIOOYpr" + index).style.backgroundColor = "transparent"
        }
    }
    var tmp = $_("site").offsetTop;
    tocroll($_("MenuCh"), $_("l1100I1QvJubu0lIOOYpr" + lllIOl1r11OIl1Ypr));
    $_("site").offsetTop = tmp
};

function tocroll(p, c) {
    var ch_pos = c.offsetTop - p.scrollTop;
    var site_bot = p.offsetHeight;
    var y_t = Math.ceil(c.offsetTop - site_bot * 0.18);
    var y_b = Math.ceil(c.offsetTop + c.offsetHeight - site_bot * 0.87);
    if (y_t < p.scrollTop) {
        p.scrollTop = y_t
    } else if (y_b > p.scrollTop) p.scrollTop = y_b
}

function cookieCompress(m, v, n) {
    if (v == "") return "";
    if (n.indexOf("url") == 0) {
        if (m == "setsW") {
            var t = l1l0IOIl_puQl1I1IYpr(v);
            var s = "";
            if (t.length > 1) var x = t.length - 2;
            else x = 0;
            for (var i = x; i < t.length; i++) {
                s += t[i].url + "~" + t[i].img + "~" + t[i].title + "|||"
            }
            return s
        } else if (m == "readW") {
            var t = v.split("|||");
            var a = [{
                "url": 'about:blank',
                "img": "",
                "title": ""
            }];
            for (var i = 0; i < t.length; i++) {
                var x = t[i].split("~");
                if (x[0] == undefined || x[0] == "") continue;
                a.push({
                    "url": x[0],
                    "img": x[1],
                    "title": x[2]
                })
            }
            return l10O0I11gdZlOOIIYpr(a)
        }
    } else if (n == "settings") {
        v = v.replace(/\r/g, "").replace(/\n/g, "");
        var jsonSets = ["rows", "JTVRegion", "next", "quality", "passwordkey", "password", "recovery", "player", "fon", "pr", "color", "remote", "remoteip", "streamplayer", "lang", "buffer", "Ph", "Pw", "vk_code", "vk_id", "vk_token", "fs", "sortiptv", "xmode", "pip", "audioplayer", "ts", "timeoutiptv", "rate", "country", "snow", "livesearch", "weather", "serv", "sidebar", "return", "adult", "time", "udp", "vk_token2", "proxy", "third", "scrsaver", "vivatlogin", "vivatpass", "acestream", "font", "torrserve", "headers"];
        if (m == "setsW") {
            var t = l1l0IOIl_puQl1I1IYpr(v);
            var s = "";
            for (var i = 0; i < jsonSets.length; i++) {
                if (typeof t[jsonSets[i]] == 'undefined') t[jsonSets[i]] = "";
                s += t[jsonSets[i]] + "|"
            }
            return s
        } else if (m == "readW") {
            var t = v.split("|");
            var a = {
                "zakladki.xml": '_FPzakladki_ / _FPRaznoe_',
                "zakladkiSerials.xml": "_FPzakladki_ / _FPSeriali_",
                "zakladkiFilms.xml": "_FPzakladki_ / _FPFilmi_",
                "zakladkiIPTV.xml": "_FPzakladki_ / IPTV"
            };
            for (var i = 0; i < jsonSets.length; i++) {
                a[jsonSets[i]] = t[i]
            }
            return l10O0I11gdZlOOIIYpr(a)
        }
    }
}
sd_timer = {};
kjtYpr.lIllOVRj11lO10Ypr = function (n, v, sd) {
    try {
        v = v.toString();
        v = "" + v;
        v = v.replace(/\r/g, "").replace(/\n/g, "").replace(/\t/g, "");
        var expr = new RegExp('http://obovse.ru/smarttv/', 'g');
        v = v.replace(expr, "_OS_");
        expr = new RegExp('http://obovse.ru/alexkdpulg.php.list=', 'g');
        v = v.replace(expr, "_OL_");
        if (n == "settings") v = cookieCompress("setsW", v, n);
        FileObj[n] = v;
        if (kjtYpr.GL.ts > 0 && autoImpOk) return;
        if (platform == "sams") {
            v = "" + v;
            var fileSystemObj = new FileSystem();
            var fileObj = fileSystemObj.openCommonFile(curWidget.id + '/' + n, 'w');
            if (fileObj != null) {
                fileObj.writeAll(v);
                fileSystemObj.closeCommonFile(fileObj)
            }
        } else {
            if (ifrrw) {
                $_("ifrrw").contentWindow.postMessage({
                    'cmd': 'write' + n,
                    'text': v
                }, "*");
                return
            }
            if (!supportStorage) {
                if (n == "rek" || n == "rt") kjtYpr.lIllOVRj11lO10YprC(n, v);
                else if (n == "settings") kjtYpr.lIllOVRj11lO10YprC(n, v);
                else if (n == "searches" || n == "enteres" || n == "glsearch" || n == "glstart") kjtYpr.lIllOVRj11lO10YprC(n, v);
                else if (n.indexOf("xxurl") == 0) kjtYpr.lIllOVRj11lO10YprC(n, v);
                FileObj[n] = v
            } else {
                if (window.localStorage !== null) {
                    window.localStorage.setItem(n, v)
                } else {
                    kjtYpr.inf("_FPOshibkaSohrDannih_!")
                }
            }
        }
    } catch (e) {
        return ""
    }
};
var defdel = "";
kjtYpr.lIlOOIIlIEIzH1l1OIYpr = function (n) {
    if (n == "") return "";
    var s = "";
    try {
        if (kjtYpr.GL.ts > 0 && autoImpOk) {
            if (typeof FileObj[n] != "undefined") s = FileObj[n];
            else s = ""
        } else {
            if (sd_timer[n] != null) return FileObj[n];
            if (platform == "sams") {
                var fileSystemObj = new FileSystem();
                var fileObj = fileSystemObj.openCommonFile(curWidget.id + '/' + n, 'r');
                if (fileObj != null) {
                    s = fileObj.readAll();
                    fileSystemObj.closeCommonFile(fileObj)
                } else s = ""
            } else {
                if (ifrrw) {
                    if (typeof FileObj[n] != "undefined") s = FileObj[n];
                    else s = ""
                } else if (!supportStorage) {
                    if (n == "rek" || n == "rt") s = kjtYpr.lIlOOIIlIEIzH1l1OIYprC(n);
                    else if (n == "settings") s = cookieCompress("readW", kjtYpr.lIlOOIIlIEIzH1l1OIYprC(n), n);
                    else if (n == "searches" || n == "enteres" || n == "xurlInset" || n == "glsearch" || n == "glstart") s = kjtYpr.lIlOOIIlIEIzH1l1OIYprC(n);
                    else if (n.indexOf("xurl") == 0) s = cookieCompress("readW", kjtYpr.lIlOOIIlIEIzH1l1OIYprC(n), n);
                    else if (typeof FileObj[n] != 'undefined') s = FileObj[n]
                } else if (window.localStorage !== null) {
                    if (typeof window.localStorage.getItem(n) != "string" || typeof localStorage.getItem(n) == "undefined") s = "";
                    else s = window.localStorage.getItem(n)
                } else {
                    kjtYpr.inf("_FPOshibkaChDannih_!")
                }
            }
        }
    } catch (e) {
        s = ""
    }
    if (n == "settings" && s.indexOf("{") == -1 && (s.indexOf("|") != -1 || s.indexOf("7C") != -1)) s = cookieCompress("readW", s, n);
    if (!isValidJSON(s, n)) {
        s = "";
        kjtYpr.inf(n + " damage, cleared!")
    }
    if (s == "" && n == "glstart") s = defdel;
    s = s.replace(/_OS_/g, "http://obovse.ru/smarttv/");
    s = s.replace(/_OL_/g, "http://obovse.ru/alexkdpulg.php?list=");
    s = s.replace(/\r/g, "").replace(/\n/g, "").replace(/\t/g, "");
    if (n.indexOf("zakladki") == 0 && s != "" && s.indexOf("null") > 0) {
        var data = l1l0IOIl_puQl1I1IYpr(s);
        for (var index = 0; index < data.channels.length; index++) {
            if (data.channels[index] == null) {
                data.channels.splice(index, 1);
                index--;
                continue
            }
        }
        s = l10O0I11gdZlOOIIYpr(data)
    }
    return s
};

function readWebOS(n) {
    try {
        var request = webOS.service.request("luna://com.palm.db", {
            method: "get",
            parameters: {
                "ids": [n]
            },
            onSuccess: function (inResponse) {
                return inResponse.results[n]
            },
            onFailure: function (inError) {
                return ""
            }
        })
    } catch (e) {}
    return ""
}

function writeWebOS(n, v) {
    try {
        var request = webOS.service.request("luna://com.palm.db", {
            method: "put",
            parameters: {
                "objects": [{
                    "_kind": "com.wforkplayer.tv:1",
                    n: v
                }]
            },
            onSuccess: function (inResponse) {
                return !0
            },
            onFailure: function (inError) {
                if (inError.errorCode == -3969) {
                    var request = webOS.service.request("luna://com.palm.db", {
                        method: "putKind",
                        parameters: {
                            "id": "com.wforkplayer.tv:1",
                            "owner": "com.wforkplayer.tv"
                        },
                        onSuccess: function (inResponse) {},
                        onFailure: function (inError) {
                            return
                        }
                    })
                }
                return !1
            }
        })
    } catch (e) {}
    return !1
}

function isValidJSON(src, n) {
    try {
        if (src.indexOf('<div id="') > 0) return !1;
        if (src.indexOf("{") == 0 || src.indexOf("[") == 0) {
            var i = -1;
            while (src[++i]) {}
            if (src[i - 1] == "]" || src[i - 1] == "}" || src[i - 2] == "]" || src[i - 2] == "}" || src[i - 3] == "]" || src[i - 3] == "}") return !0;
            else return !1
        }
    } catch (e) {
        return !1
    }
    return !0
};
kjtYpr.lIlOOIIlIEIzH1l1OIYprC = function (name) {
    try {
        if (platform == "android-device") return "";
        if (typeof FileObjC[name] != "undefined") return FileObjC[name];
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : ""
    } catch (e) {
        return ""
    }
};
FileObjC = {};
kjtYpr.lIllOVRj11lO10YprC = function (name, value) {
    try {
        if (platform == "android-device") return "";
        FileObjC[name] = value;
        if (ifrrw) {
            $_("ifrrw").contentWindow.postMessage({
                'cmd': 'lIllOVRj11lO10YprC' + name,
                'text': value
            }, "*");
            return
        }
        props = {
            path: "/",
            expires: 99999999
        };
        var exp = props.expires;
        if (typeof exp == "number" && exp) {
            var d = new Date();
            d.setTime(d.getTime() + exp * 1000);
            exp = props.expires = d
        }
        if (exp && exp.toUTCString) {
            props.expires = exp.toUTCString()
        }
        value = encodeURIComponent(value);
        var updatedCookie = name + "=" + value;
        for (var propName in props) {
            updatedCookie += "; " + propName;
            var propValue = props[propName];
            if (propValue !== !0) {
                updatedCookie += "=" + propValue
            }
        }
        document.cookie = updatedCookie;
        if (document.cookie.indexOf(name + "=" + value) == -1 && !supportStorage) setTimeout(function () {
            kjtYpr.inf("Ошибка записи данных в Cookies! Сбросьте настройки виджета", 1500)
        }, 300)
    } catch (e) {
        return !1
    }
};
var preurl = null;

function get_preurl(str) {
    return;
    kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
    kjtYpr.l1lIIOl110Ip101lYpr = [];
    lO10OIOlxzlO100OIYpr("presearch", "<div style='background-color: #291c45'>_FPBistrPoisk_:</div><div style='background-color:#323c42;font-size:" + css_wh(25) + "px;width:" + css_w(570) + "px;border:2px solid transparent;padding:0px 3px;border-radius:" + css_wh(8) + "px;overflow:hidden;'><center><img src='" + _img("_OI_b/loading.gif") + "' width=" + css_w(25) + " /></center></div>");
    if (preurl == null) PullDataFrom("http://" + ServerFromList + "/smarttv/fs.php?id=preurl", "preurl");
    var text = kjtYpr.lIlOOIIlIEIzH1l1OIYpr('enteres');
    if (text != "") text += "|";
    var data = text.split('|');
    var l1100I1QvJubu0lIOOYpr = "";
    kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
    kjtYpr.l1lIIOl110Ip101lYpr = [];
    if (str == "" || str == "h" || str == "ht") {
        for (var index = 0; index < data.length && index < 5; index++) {
            if (data[index] != "") {
                l1100I1QvJubu0lIOOYpr += renderQuick(kjtYpr.l1lIIOl110Ip101lYpr.length, data[index], _img("_OI_history.png"))
            }
        }
    }
    for (var index in preurl) {
        if (l1100I1QvJubu0lIOOYpr.indexOf(index) > 0) continue;
        if (str == "" && Math.random() > 0.5) continue;
        if (str != "")
            if (index.indexOf(str) != 0) continue;
        l1100I1QvJubu0lIOOYpr += renderQuick(kjtYpr.l1lIIOl110Ip101lYpr.length, index, _img('_OT_urls.png'));
        if (kjtYpr.l1lIIOl110Ip101lYpr.length > 10) {
            break
        }
    }
    if (kjtYpr.l1lIIOl110Ip101lYpr.length < 10) {
        l1100I1QvJubu0lIOOYpr += "<span id='qloader'><center><img src='" + _img("_OI_b/loading.gif") + "' width=" + css_w(25) + " /></center></span>";
        var xhr2 = new XMLHttpRequest();
        xhr2.onreadystatechange = function () {
            if (xhr2.readyState == 4) {
                statusbar("off");
                data = l1l0IOIl_puQl1I1IYpr(xhr2.responseText);
                if (data != null) {
                    for (var index = 0; index < data.length && index < 10; index++) {
                        if (kjtYpr.l1lIIOl110Ip101lYpr.length > 9) break;
                        if (l1100I1QvJubu0lIOOYpr.indexOf(data[index][0] + "<") > 0) continue;
                        var sri = "";
                        if (data[index][1] == "xmltitle" || data[index][1].indexOf("xmlurl") == 0) sri = _img('_OT_xmls.png');
                        else if (data[index][1] == "url") sri = _img('_OT_urls.png');
                        else if (data[index][1] == "web") sri = _img('_OT_search_200x200.png');
                        else if (typeof data[index][3] != "undefined") sri = data[index][3];
                        l1100I1QvJubu0lIOOYpr += renderQuick(kjtYpr.l1lIIOl110Ip101lYpr.length, data[index][0], sri)
                    }
                    lO10OIOlxzlO100OIYpr("presearch", "<div style='background-color: #291c45'>_FPBistrPoisk_:</div><div" + FgetSetting(1, [" onmouseout=\"kjtYpr.lOOlOIIOlcsICI0l1QYpr=-1;kjtYpr.lO1IIOIIW1lBO11IlYpr();\"", ""]) + " id='PreSearch' style='bbackground-color:#323c42;font-size:" + css_wh(25) + "px;width:" + css_w(570) + "px;border:2px solid transparent;padding:0px " + css_w(3) + "px;border-radius:" + css_wh(8) + "px;overflow:hidden;'>" + l1100I1QvJubu0lIOOYpr + "</div>");
                    kjtYpr.lO1IIOIIW1lBO11IlYpr()
                }
                $_("qloader").style.display = "none";
                xhr2 = null
            }
        }
        var u = addident("http://omnibox.spiderxml.com/?presearch=" + str);
        statusbar(u, "link");
        setTimeout(function () {
            if (xhr2 != null) xhr2.abort()
        }, 4500);
        xhr2.open('GET', u, !0);
        xhr2.send();
        return
    }
    lO10OIOlxzlO100OIYpr("presearch", "<div" + FgetSetting(1, [" onmouseout=\"kjtYpr.lOOlOIIOlcsICI0l1QYpr=-1;kjtYpr.lO1IIOIIW1lBO11IlYpr();\"", ""]) + " id='PreSearch' style='background-color:#323c42;font-size:" + css_wh(25) + "px;width:" + css_w(570) + "px;border:2px solid transparent;padding:0px 3px;border-radius:" + css_wh(8) + "px;overflow:hidden;'>" + l1100I1QvJubu0lIOOYpr + "</div>");
    kjtYpr.lO1IIOIIW1lBO11IlYpr()
}

function llIIl0IO0vMB0I0010Ypr(str, m) {
    try {
        $('#' + VK.id).get(0).scrollLeft = $('#' + VK.id).get(0).scrollWidth;
        if (VK.id == "quick_search") {
            setKeySearch();
            return
        }
        str = UnicodeToWin1251(str);
        if (gV(ChSel, "presearch").indexOf("http") != 0) {
            if (xml_live || (ChSel.title.match(/(ошук|arch|оиск|poisk|искат)/i)))
                ChSel.presearch = "http://omnibox.spiderxml.com/?type=auto"
        }
        return showPresearch(str, ChSel, ++kjtYpr.SUBREQUEST_ID)
    } catch (e) {}
};
var lastStr = "",
    xml_livetimer, xml_live_gstimer, xml_live_url = "",
    livecarettimer, livecaret = !1;

function liveSearch(str) {
    if (livecaret) {
        clearTimeout(xml_livetimer);
        clearTimeout(xml_live_gstimer);
        xml_livetimer = setTimeout("liveSearch('" + str + "');", 2500);
        return
    }
    if (handler != "vk" && lastStr == "") return;
    clearTimeout(xml_live_gstimer);
    if (kjtYpr.GL.livesearch > 0 && str.length > 2) {
        if (lastStr != str) {
            if (!xml_live) xml_live_url = curCh()["playlist_url"];
            lastStr = str;
            kjtYpr.l11l101lxO_tl1IlIYpr = str;
            ll1lIOiIO0lO1IIIYpr = Math.random();
            kjtYpr.l110l1lIPuoaO0I0IOYpr(xml_live_url, 0, !0)
        }
    }
}

function refreshStart() {
    $_("main").style.display = "block";
    var oldselect = getSelect();
    var data = {};
    data.channels = readSt();
    kjtYpr.l00100lIKlBWw1lllIlYpr(data);
    handler = "menu";
    ll1lIOiIO0lO1IIIYpr = Math.random();
    kjtYpr.lIOIOIBu0mO11llO0Ypr(oldselect)
}

function l11OllI0l1SAZgOOl1Ypr(str) {
    if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) saveQuickEnteres(str, ChSel, kjtYpr.inputId);
    if (kjtYpr.inputId == 'cmdEditUrl') {
        if (kjtYpr.lOOlOIIOlcsICI0l1QYpr != -1) {
            $_(VK.id).value = kjtYpr.l1lIIOl110Ip101lYpr[kjtYpr.lOOlOIIOlcsICI0l1QYpr];
            kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
            kjtYpr.lO1IIOIIW1lBO11IlYpr();
            return
        }
        if (l1IOIIz1l0Ol110Ypr()) {
            var t = getVars("start");
            t.fav[ChSel.id].playlist_url = str;
            setVars("start", t);
            $_("vk").style.display = "none";
            kjtYpr.inputId = "";
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            return
        }
    }
    if (kjtYpr.inputId == 'cmdUrlIcon') {
        if (kjtYpr.lOOlOIIOlcsICI0l1QYpr != -1) {
            $_(VK.id).value = kjtYpr.l1lIIOl110Ip101lYpr[kjtYpr.lOOlOIIOlcsICI0l1QYpr];
            kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
            kjtYpr.lO1IIOIIW1lBO11IlYpr();
            return
        }
        if (l1IOIIz1l0Ol110Ypr()) {
            var t = getVars("start");
            t.fav[ChSel.id].logo_30x30 = str;
            setVars("start", t);
            $_("vk").style.display = "none";
            kjtYpr.inputId = "";
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            return
        } else if (ChSel.playlist_url.indexOf("bookmarks/") == 0) {
            xhr_bookmark(ChSel.playlist_url, kjtYpr.inputId, str)
        }
    } else if (kjtYpr.inputId == 'tomflight') {
        if (kjtYpr.lOOlOIIOlcsICI0l1QYpr != -1) {
            $_(VK.id).value = kjtYpr.l1lIIOl110Ip101lYpr[kjtYpr.lOOlOIIOlcsICI0l1QYpr];
            kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
            kjtYpr.lO1IIOIIW1lBO11IlYpr();
            return
        }
        if (str == '') return;
        kjtYpr.lIllOVRj11lO10Ypr("tfn", str);
        // PullDataFrom("http://185.158.114.122/obovse.ru/smarttv/api.php?do=tomflight&setname=" + str + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "tomflight");
        PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/api.php?do=tomflight&setname=" + str + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "tomflight");
        $_("vk").style.display = "none";
        kjtYpr.inputId = "";
        lO10OIOlxzlO100OIYpr("infoList", "");
        ll0111l1wxUIOlO1lYpr(31, "Новый рекорд!<br>Счет: " + t_xnum + "<br>", "_FPZakrit_|_FPNachatZanovo_");
        handler = "confirm"
    } else if (kjtYpr.inputId == 'cmdRename') {
        if (kjtYpr.lOOlOIIOlcsICI0l1QYpr != -1) {
            $_(VK.id).value = kjtYpr.l1lIIOl110Ip101lYpr[kjtYpr.lOOlOIIOlcsICI0l1QYpr];
            kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
            kjtYpr.lO1IIOIIW1lBO11IlYpr();
            return
        }
        if (str == '') return;
        if (l1IOIIz1l0Ol110Ypr()) {
            var t = getVars("start");
            t.fav[ChSel.id].title = str;
            setVars("start", t);
            $_("vk").style.display = "none";
            kjtYpr.inputId = "";
            handler = "menu";
            page_rs({
                "src": "_reload"
            });
            return
        } else if (ChSel.playlist_url.indexOf("bookmarks/") == 0) {
            xhr_bookmark(ChSel.playlist_url, kjtYpr.inputId, str)
        } else if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("bookmarks/") == 0) {
            xhr_bookmark(kjtYpr.l1IlIl01l0tUIl1IIYpr, "bookmarkRename", str)
        } else if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("zakladki") == 0) {
            try {
                s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(kjtYpr.l1IlIl01l0tUIl1IIYpr);
                var data = l1l0IOIl_puQl1I1IYpr(s);
                if (data == null) {
                    data = {};
                    data["cha" + "nnels"] = []
                }
                data["cha" + "nnels"][getSelect()].title = str;
                kjtYpr.lIllOVRj11lO10Ypr(kjtYpr.l1IlIl01l0tUIl1IIYpr, l10O0I11gdZlOOIIYpr(data))
            } catch (e) {}
            var select2 = getSelect();
            handler = "menu";
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdReload");
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select2)
        }
    } else if (kjtYpr.inputId == 'setpass') {
        if (str == '') return;
        kjtYpr.GL.passwordkey = str;
        kjtYpr.inf("_FPParol_ _FPustanolen_!", 1000);
        kjtYpr.GL.password = 'On';
        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
        page_rs({
            "src": "_reload"
        })
    } else if (kjtYpr.inputId == 'delpass') {
        if (str == '') return;
        if (kjtYpr.GL.passwordkey == str || str == kjtYpr.mac.substr(8, 2) + kjtYpr.mac.substr(2, 2) + kjtYpr.mac.substr(5, 1)) {
            kjtYpr.GL.passwordkey = "";
            kjtYpr.GL.password = 'Off';
            kjtYpr.inf("_FPParol_ удален!", 1000);
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            page_rs({
                "src": "_reload"
            })
        } else kjtYpr.inf("_FPParol_ _FPnePodhodit_!", 1000)
    } else if (kjtYpr.inputId == 'unlockpass' && str != "") {
        if (str == '') return;
        if (kjtYpr.GL.passwordkey == str) {
            ll1lIOiIO0lO1IIIYpr = Math.random();
            if (kjtYpr.inputId2 == "VivatRod") kjtYpr.Password2 = str;
            else kjtYpr.Password = str;
            kjtYpr.inf("_FPDostupRazreshen_!", 1000);
            $_("vk").style.display = "none";
            kjtYpr.inputId = "";
            $_("main").style.display = "block";
            handler = "menu";
            kjtYpr.l0lI10EMI1I10Ypr();
            if (kjtYpr.Password == "0000") kjtYpr.popUp("<b><i>_FPVineSmP_</i></b>");
            else kjtYpr.popUp("<i>_FPParolDeistDk_</i>")
        } else {
            kjtYpr.inf("_FPParol_ _FPnePodhodit_!", 1000);
            return
        }
    } else if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) {
        if (ChSel.playlist_url == "tosetAS") {
            if (str == '') {
                kjtYpr.GL.acestream = ""
            } else if (str.indexOf(".") == -1 || str.indexOf(":") == -1) {
                kjtYpr.inf("Нужно ввести IP:PORT или оставить поле пустым!", 1500);
                return
            } else {
                kjtYpr.GL.acestream = str
            }
            AS_update();
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            page_rs({
                "src": "_reload"
            });
            return
        } else if (ChSel.playlist_url == "tosetTorrserve") {
            if (str == '') {
                kjtYpr.GL.torrserve = ""
            } else if (str.indexOf(".") == -1 || str.indexOf(":") == -1) {
                kjtYpr.inf("Нужно ввести IP:PORT или оставить поле пустым!", 1500);
                return
            } else {
                kjtYpr.GL.torrserve = str
            }
            AS_update();
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            page_rs({
                "src": "_reload"
            });
            return
        } else if (ChSel.playlist_url == "setUdp") {
            if (str == '') kjtYpr.GL.udp = "";
            else if (str.indexOf(".") == -1) {
                kjtYpr.inf("Нужно ввести IP адрес или оставить поле пустым!", 1500);
                return
            } else {
                kjtYpr.GL.udp = str
            }
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            page_rs({
                "src": "_reload"
            });
            return
        }
        if (ChSel.playlist_url == "setRemote") {
            if (str == '') {
                kjtYpr.GL.remoteip = "";
                kjtYpr.GL.remote = 0
            } else if (str.indexOf(":") == -1) {
                kjtYpr.inf("Нужно ввести IP адрес и порт!", 1500);
                return
            } else {
                kjtYpr.GL.remoteip = str
            }
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            page_rs({
                "src": "_reload"
            });
            l0I1l0lO0lsnG1I1QlYpr();
            return
        }
        if (str == '') {
            if (ChSel.playlist_url.indexOf("payd_") == 0) {
                kjtYpr.l11l101lxO_tl1IlIYpr = "";
                lOOlIII1usp1UIlI1lYpr(ChSel.playlist_url, "", getSelect(), null, null, kjtYpr.REQUEST_ID);
                returnVK()
            }
            return
        }
        kjtYpr.l11l101lxO_tl1IlIYpr = str;
        ChSel.type = gV(ChSel, "type");
        if (!xml_live) kjtYpr.l0lI10EMI1I10Ypr(null, ChSel);
        else {
            if (lastStr != str) {
                clearTimeout(l01IQlTho0O1lI1Ypr);
                clearTimeout(xml_livetimer);
                clearTimeout(xml_live_gstimer);
                try {
                    xhr.abort()
                } catch (e) {}
                kjtYpr.l11l101lxO_tl1IlIYpr = str;
                ll1lIOiIO0lO1IIIYpr = Math.random();
                xml_live = !1;
                gs.lOOI0IOMgONOO01OIYpr = null;
                gs.channels = [];
                kjtYpr.l110l1lIPuoaO0I0IOYpr(xml_live_url, 0)
            } else returnVK()
        }
    } else {
        var q = kjtYpr.l1lIIOl110Ip101lYpr[kjtYpr.lOOlOIIOlcsICI0l1QYpr];
        if (gV(q, "type") == "se") {
            kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
            l11OllI0l1SAZgOOl1Ypr(str);
            return
        }
        if (gV(q, "xml_url") != "") {
            returnVK();
            goBack = !1;
            kjtYpr.l0lI10EMI1I10Ypr(null, {
                "title": q.q,
                "playlist_url": q.xml_url,
                "logo_30x30": gV(q, "img")
            });
            return
        }
        ChSel.type_quicksearch = gV(q, "type");
        $_(VK.id).value = q.q;
        if (ChSel.type_quicksearch == "xml") kjtYpr.popUp("Поиск будет только по проиндексированным <img src='" + _img("_OT_xmls.png") + "' width=30 /> XML плейлистам", 1500);
        kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
        kjtYpr.lO1IIOIIW1lBO11IlYpr();
        if ($_(VK.id).value.indexOf("http") == 0 && VK.l1OII0nIl1IOlQI1Ypr1[1][0][0] != "q") {
            VK.l1OII0nIl1IOlQI1Ypr1 = VK.US;
            VK.Show(VK.id);
            VK.pos[0] = 2;
            VK.pos[1] = 12;
            VK.setpos();
            llIIl0IO0vMB0I0010Ypr(VK.focus.value);
            return
        }
        VK.pos[0] = 2;
        VK.pos[1] = 12;
        VK.setpos();
        if ($_(VK.id).value.indexOf("http") == 0) llIIl0IO0vMB0I0010Ypr(VK.focus.value);
        else if (VK.Mode == 0) llIIl0IO0vMB0I0010Ypr(VK.focus.value, !0)
    }
}

function returnVK() {
    if (kjtYpr.inputId == 'unlockpass' && l1IOIIz1l0Ol110Ypr(insetIn(-1, "get", "url"))) kjtYpr.l1IlIl01l0tUIl1IIYpr = insetIn(-1, "get", "url");
    kjtYpr.inputId = "";
    kjtYpr.l11l101lxO_tl1IlIYpr = "";
    $_("vk").style.display = "none";
    $_("main").style.display = "block";
    kjtYpr.inputId = "";
    handler = "menu";
    kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
    ll1lIOiIO0lO1IIIYpr = Math.random();
    if (getSelect() < 0) setSelect(0);
    if (!xml_live) kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
    goBack = !0
}
kjtYpr.lO1IIOIIW1lBO11IlYpr = function () {
    if (kjtYpr.lOOlOIIOlcsICI0l1QYpr < -1) kjtYpr.lOOlOIIOlcsICI0l1QYpr = kjtYpr.l1lIIOl110Ip101lYpr.length - 1;
    if (kjtYpr.lOOlOIIOlcsICI0l1QYpr > kjtYpr.l1lIIOl110Ip101lYpr.length - 1) kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
    if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) {
        $_("PreSearch").style.borderColor = "transparent";
        $_(VK.id).style.border = "2px solid #65D0E4"
    } else {
        $_("PreSearch").style.borderColor = "#65D0E4";
        $_(VK.id).style.border = "2px solid transparent"
    }
    for (var index = 0; index < kjtYpr.l1lIIOl110Ip101lYpr.length; index++) {
        if (gV(kjtYpr.l1lIIOl110Ip101lYpr[index], "type") == "se" && (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1 || kjtYpr.lOOlOIIOlcsICI0l1QYpr == index))
            $_("l1100I1QvJubu0lIOOYpr" + index).style.backgroundColor = "#465057";
        else $_("l1100I1QvJubu0lIOOYpr" + index).style.backgroundColor = "";
        if (index == kjtYpr.lOOlOIIOlcsICI0l1QYpr) {
            $_("l1100I1QvJubu0lIOOYpr" + index).style.color = "orange"
        } else {
            $_("l1100I1QvJubu0lIOOYpr" + index).style.color = "white"
        }
    }
};
kjtYpr.lOII1010Q1zuYIQ1I1Ypr = function () {
    if (kjtYpr.lllIIIlf0RlI1lOYpr < 0) kjtYpr.lllIIIlf0RlI1lOYpr = kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1;
    if (kjtYpr.lllIIIlf0RlI1lOYpr > kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1) kjtYpr.lllIIIlf0RlI1lOYpr = 0;
    try {
        for (var index = 0; index < kjtYpr.ll0Il1IRfsIQOO0Ypr.length; index++) {
            if (index == kjtYpr.lllIIIlf0RlI1lOYpr) {
                $_("ql1100I1QvJubu0lIOOYpr" + index).style.border = "1px solid white"
            } else {
                $_("ql1100I1QvJubu0lIOOYpr" + index).style.border = "1px solid transparent"
            }
        }
    } catch (e) {
        errlog(e)
    }
};

function getbut(id, img, url, text) {
    html = "<div class='btextss' style='float:left;'" + FgetSetting(1, [" onclick=\"" + url + "\"", ""]) + "><img id='but" + id + "' style='margin-top:2px; padding-left:" + css_w(12) + "px;width:16px; height:16px;' src='" + _img(img) + "' />";
    html += "<span id='bt" + id + "' style=''>" + text + "</span>";
    html += "</div>";
    return html
}
kjtYpr.l0OlII0Ix1fI1I01Ypr = function (b) {
    try {
        if (getSelect() >= 0) ChSel = curCh();
        var html = '';
        $_("bottom").style.top = "95.6%";
        if (handler == "ext") {
            html += getbut("1", _img("_OI_b/a.png"), "ext_close();", "Закрыть расширение")
        } else if (b == "menu") {
            if ($_("player").style.display == "block") text = "_FPVPLEER_";
            else if (submenuSelIcon.selicon) text = "_FPIcon_";
            else text = "_FPMenu_";
            html += getbut("1", _img("_OI_b/a.png"), "lQQOIOO01HvItO11QYpr('menu',VK_RED);", text);
            text = "_FPZakladki_";
            html += getbut("2", _img("_OI_b/b.png"), "lQQOIOO01HvItO11QYpr('menu',VK_GREEN);", text);
            html += getbut("3", _img("_OI_b/c.png"), "lQQOIOO01HvItO11QYpr('menu',VK_YELLOW);", "_FPVnesh_. _FPzakladki_");
            if (!l1IOIIz1l0Ol110Ypr()) html += getbut("4", _img("_OI_b/d.png"), "lQQOIOO01HvItO11QYpr('menu',VK_BLUE);", "_FPStartMenu_");
            if (kjtYpr.typeList != "start" && (count > kjtYpr.GL.rows || kjtYpr.global.next_page_url != ""))
                html += getbut("right", _img("_OI_b/f.png"), "lQQOIOO01HvItO11QYpr('menu',VK_RIGHT);", "_FPSleduushayaStr_.");
            if (l1IOIIz1l0Ol110Ypr() || kjtYpr.typeList == "start" || kjtYpr.global.typeList == "start") {
                html += "<div id='bottomMenu' style='float:left;padding-left:" + css_w(13) + "px;height: " + css_wh(30) + "px;overflow: hidden; max-width: " + (l1IOIIz1l0Ol110Ypr() ? "46" : "32") + "%;'>" + ChSel.description + "</div>"
            }
        } else if (b.indexOf("move") != -1) {
            html += " _FPVverhVniz_ - _FPPeredvinut_ ENTER - _FPSohranit_"
        } else if (b == "VK") {
            html += getbut("1", _img("_OI_b/a.png"), "keyHandler({'keycode':VK_RED});", "<img style='padding-left:1px;' src='" + _img("_OI_b/bksp.png") + "' />");
            if (ChSel.playlist_url.indexOf("allsearch.php") > 0) text = "_FPConfiguring search_";
            else text = "_FPYazik_";
            html += getbut("1", _img("_OI_b/b.png"), "keyHandler({'keycode':VK_GREEN});", text);
            if (kjtYpr.inputId.indexOf('cmd') == 0 || $_(VK.id).value != "") text = "_FPClear_";
            else text = "_FPOchistIst_";
            html += getbut("1", _img("_OI_b/c.png"), "keyHandler({'keycode':VK_YELLOW});", text);
            html += getbut("1", _img("_OI_b/d.png"), "keyHandler({'keycode':VK_BLUE});", "_FPVVOD_")
        }
        lO10OIOlxzlO100OIYpr("btdiv", html)
    } catch (e) {}
    if (kjtYpr.GL["return"] > 0 && kjtYpr.GL["return"] < 5) $_("but" + kjtYpr.GL["return"]).style.visibility = "hidden"
};

function tmf() {
    clearTimeout(np_timer);
    if (platform == "tizen") keyHandler({
        "keycode": 10009,
        "preventDefault": function () {}
    });
    else keyHandler({
        "keycode": VK_BACK,
        "preventDefault": function () {}
    })
}

function llIIII1l0iIIv010lIYpr(n) {
    for (var i = 0; i < n; i++) kjtYpr.lI11111bPNQ0III1Ypr();
}
var goBack = !1,
    norek = !1;
kjtYpr.lI11111bPNQ0III1Ypr = function (mode, mode_refresh, no_cache) {
    is_mark = !1;
    favarray = null;
    if (kjtYpr.GL.pip) {
        clearTimeout(plmini_timer)
    }
    if ($_("quick_search").style.display == "block") {
        if ($_("quick_search").value != "") {
            $_("quick_search").value = $_("quick_search").value.substr(0, $_("quick_search").value.length - 1)
        }
        if ($_("quick_search").value == "") {
            clearTimeout(qch_timer);
            clearTimeout(qch_stimer);
            $_("quick_search").style.display = "none"
        }
        setKeySearch();
        return
    }
    if (is_loadpage() && !mode_refresh) {
        if (is_ifr()) kjtYpr.inf("_FPOstanovleno_!", 800);
        stopLoadPage();
        return
    }
    if ($_("MenuCh").style.display == "block" && !mode) {
        closeMenu();
        handler = "menu";
        return
    }
    if (epg_ch != null && !plmini_on) {
        epg_ch = null;
        clearTimeout(epg_timer)
    }
    if (lI1lI1GUbh1QOOOYpr > 0) {
        clearTimeout(llI1lhk1I1III0Ypr);
        lI1lI1GUbh1QOOOYpr = 0;
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        kjtYpr.inf("_FPOstanovleno_!", 800);
        return
    }
    if (xhr2 != null) try {
        xhr2.abort()
    } catch (e) {}
    if (xhrParse != null) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        abortedParse = !0;
        xhrParse.abort();
        clearTimeout(assyncTimer);
        xhrParse = null;
        return
    }
    if (xhr != null && shn) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        aborted = !0;
        xhr.abort();
        clearTimeout(l01IQlTho0O1lI1Ypr);
        xhr = null;
        if (kjtYpr.channels.length > 0) return
    } else if (xhr != null) {
        xhr.abort();
        clearTimeout(l01IQlTho0O1lI1Ypr)
    }
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
    try {
        if (inset["tab" + insetActive].length > 1 || mode) {
            if (mode == null) {
                if (insetIn(-1, "get", "b") == "1") {
                    kjtYpr.popUp("_FPEtaVklBzabl_!<br>_FPDlRvIn_ _FPMenu_ / _FPRazblVkl_", 1500);
                    return
                }
                var z = inset["tab" + insetActive].pop();
                var x = inset["tab" + insetActive][inset["tab" + insetActive].length - 1]
            } else {
                x = inset["tab" + insetActive][inset["tab" + insetActive].length - 1];
                if (typeof x == "string") {
                    x = {
                        "url": x,
                        "title": "",
                        "img": ""
                    };
                    inset["tab" + insetActive] = [];
                    inset["tab" + insetActive].push(x)
                }
            }
            if (typeof x != "undefined") {
                if (x.url == "") {
                    kjtYpr.lI11111bPNQ0III1Ypr();
                    return
                }
                var CI = x.url.split("#submenu")[0];
                if (l1IOIIz1l0Ol110Ypr()) kjtYpr.Password = "";
                if (typeof prev[CI] == "object") {
                    if (prev[CI].cacheinfo == "nocache" || no_cache) {
                        delete(prev[CI])
                    } else if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("#submenu") > 0) {
                        if (gV(prev[CI], "url") == "") prev[CI].url = getInfoUrl(x.url)
                    }
                }
                kjtYpr.l1IlIl01l0tUIl1IIYpr = kjtYpr.REQUEST_XML = x.url;
                var nO = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(prev[CI]));
                if (!mode_refresh && nO != null && x.url.indexOf("vostorg.php") == -1 && x.url.indexOf("vivat.php") == -1 && typeof prev[CI] == "object" && !l1IOIIz1l0Ol110Ypr(x.url) && x.url.indexOf("zakladki") != 0 && x.url.indexOf("favorites") != 0) {
                    goBack = !0;
                    kjtYpr.typeSource = "cache";
                    kjtYpr.l00100lIKlBWw1lllIlYpr(nO, null, incID());
                    if (x.url.indexOf("extensions://") == 0) {
                        $_("ext").style.display = "block";
                        ext_focus()
                    }
                } else {
                    breakScreen(getInfoUrl(x.url));
                    if (getSelect() != -1) setSelect(0);
                    if (mode_refresh) cmdReload = !0;
                    goBack = !0;
                    statusbar("_FPVozobnovlenie_... " + x.url);
                    var xp = x.p;
                    var mb_pars = x.mp;
                    if (typeof x.l == "undefined") x.l = "";
                    if (typeof xp == "undefined") xp = "";
                    if (typeof mb_pars == "undefined") mb_pars = "";
                    if (x.url.indexOf("#stream_url") > 0 || ((is_mw(x.url) || is_hdgo(x.url)) && x.url.indexOf(".php") == -1)) {
                        var ch = {
                            "title": gV(x, "title"),
                            "logo_30x30": gV(x, "img"),
                            "stream_url": x.url.replace("#stream_url", ""),
                            "playlist_url": "",
                            "parser": xp,
                            "local": x.l,
                            "mb_parser": mb_pars
                        };
                        if (is_hdgo(x.url)) ch.menu_url = "hdgo";
                        norek = !0;
                        kjtYpr.l0lI10EMI1I10Ypr(null, ch);
                        return
                    }
                    if (is_vivat(x.url) > 1) {
                        if (device_token == "") {
                            vivat_auth(1, getSelect(), x.url);
                            return
                        }
                        xp = xp.replace(/device_id=.*?&/, "device_id=" + device_id + "&").replace(/device_token=.*?&/, "device_token=" + device_token + "&");
                        x.url = x.url.replace(/device_id=.*?&/, "device_id=" + device_id + "&").replace(/device_token=.*?&/, "device_token=" + device_token + "&")
                    }
                    if (x.url == "submenu") {
                        kjtYpr.lI11111bPNQ0III1Ypr();
                        return
                    }
                    if (getSelect() < 0) setSelect(0);
                    kjtYpr.l0lI10EMI1I10Ypr(null, {
                        "title": x.title,
                        "logo_30x30": x.img,
                        "playlist_url": x.url,
                        "parser": xp,
                        "local": x.l,
                        "mb_parser": mb_pars,
                        "stream_url": ""
                    })
                }
            } else gotoStart()
        } else {
            kjtYpr.inf("_FPEtoStList_!", 1500);
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
        }
    } catch (e) {}
    chGroupSel = 0
};

function gotoStart() {
    try {
        kjtYpr.l1IOllIQV1ul00IlYpr("about:blank");
        kjtYpr.Password = ""
    } catch (e) {
        kjtYpr.popUp("Err open START menu:<br>" + e.message, 5000)
    }
}

function lO1l0OILItCt1l11IYpr(url, mode) {
    try {
        url = insetIn(-1, "get", "url");
        if ((url.indexOf("http") != 0 && url != "mylist") || url.indexOf("no_save") > 0 || url == "submenu") return 0;
        if (mode || version_local_js) {
            var n_start = 9,
                n_per = 9,
                n_zakl = 9,
                j = 0;
            for (var i = inset["tab" + insetActive].length - 1; i > -1; i--) {
                if (l1IOIIz1l0Ol110Ypr(inset["tab" + insetActive][i].url) && n_start == 9) n_start = j;
                if (inset["tab" + insetActive][i].title == "_FPPerPoAdr_" && n_per == 9) n_per = j;
                if ((inset["tab" + insetActive][i].url.indexOf("bookmarks") == 0 || inset["tab" + insetActive][i].url.indexOf("zakladki") == 0) && n_zakl == 9) n_zakl = j;
                j++
            }
            if (n_start < 5 || n_per < 3 || n_zakl < 3 || mode) {
                if (n_start == 0 || n_per == 0 || n_zakl == 0) return 0;
                var savePrev = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("prev_cache"));
                if (savePrev == null) savePrev = {};
                if (typeof prev[kjtYpr.ORIG_URL].setcache != "undefined")
                    if (prev[kjtYpr.ORIG_URL].setcache != "") {
                        kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> Эта страница была загружена с кеша и может содержать устаревшие данные! Проверьте наличие интернет соединения или возможно страница была перемещена по новому адресу!", 2200);
                        return 0
                    }
                savePrev[url] = {
                    "setimg": insetIn(-1, "get", "img"),
                    "settitle": insetIn(-1, "get", "title"),
                    "typeList": prev[kjtYpr.ORIG_URL].typeList,
                    "setcache": Math.ceil(T.inetTime / 1000),
                    "channels": prev[kjtYpr.ORIG_URL].channels,
                    "url": prev[kjtYpr.ORIG_URL].url
                };
                kjtYpr.lIllOVRj11lO10Ypr("prev_cache", l10O0I11gdZlOOIIYpr(savePrev))
            }
        }
        return 1
    } catch (e) {}
}

function nohtml() {
    kjtYpr.l0lI10EMI1I10Ypr("media")
}
var rCook = new RegExp("^https?://(www\.|m\.|p\.lnka\.ru/|fxmlparsers\.ru/)?(.*?)(:|\\?|/|$|#)");

function addident(u, m) {
    var ident = "box_client=lg&box_mac=" + (gV(m).indexOf("https://filmix.red/") == 0 ? kjtYpr.mac.substr(0, 12) : kjtYpr.mac) + "&box_hardware=" + encodeURIComponent(gV(kjtYpr, "hardware")) + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + encodeURIComponent(gV(kjtYpr, "hardware")) + "|" + kjtYpr.serial + "|" + gnxu + "&vr=" + vr + "&platform=" + uaJ + "&country=" + ipCountry + "&box_server=" + nServer + "&tvp=" + timestamp + "&third=" + kjtYpr.GL.third + "&f=" + kjtYpr.GL.JTVRegion + "&hw=" + countHw;
    var ident = "box_client=lg&box_mac=pc1177615099&box_hardware=netrange&initial=ForkPlayer%202.5|pc1177615099|netrange|pc1177615099|MTYzMTM3NzE1MQR=E1713|755C7BF0E6FF75E|none|1&vr=0&platform=netrange&country=&box_server=13&tvp=0&third=0&f=2";


    if (user != null) ident += "&box_user=" + encodeURIComponent(gV(user, "email"));
    if (typeof kjtYpr.macv != "undefined") ident += "&mv=" + kjtYpr.macv;
    if (u == null) {
        ident = ident.replace(/ /g, "%20");
        return "&" + ident
    }
    if (!u.match(/(alexkdpulg\.php|\/obovse\.ru\/)/)) {
        var dm = u.match(rCook);
        if (dm != null) {
            dm = dm[2];
            if (typeof lO1lOlJvks1II11Ypr[dm] != "undefined") {
                for (var i in lO1lOlJvks1II11Ypr[dm]) ident += "&cookie[" + i + "]=" + encodeURIComponent(lO1lOlJvks1II11Ypr[dm][i]);
            }
        }
    }
    if (u.indexOf("initial=") > 0 && u.indexOf("box_mac") > 0) return u;
    if (u.indexOf("?") > 0) u += "&";
    else u += "?";
    ident = ident.replace(/ /g, "%20");
    u += ident;
    if (m == 1) u = u.replace(/\|/g, "-.-");
    return u
}

function showParrent(m) {
    ll1lIOiIO0lO1IIIYpr = Math.random();
    ll1lIOiIO0lO1IIIYpr = Math.random();
    if (kjtYpr.GL.passwordkey == "0000") kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /><span style=\"font-size:120%\"><b> _FPParol_ _FPpoumolch_ 0000<b></span><br><i>_FPSmIotk_ _FPparol_ _FPmoV_ <span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPMenu_ -> _FPNastroiki_ -> _FPRodKontr_</i>");
    try {
        l0111O0tihuOIIlOYpr("_FPDlDostVv_ _FPparol_:");
        VK.Show("search", 1);
        kjtYpr.inputId = 'unlockpass';
        if (m != null) kjtYpr.inputId2 = m;
        else kjtYpr.inputId2 = null;
        lO10OIOlxzlO100OIYpr("leftHalf", "<div style='width: " + css_w(633) + "px;height:640px;position:absolute;left:" + css_w(15) + "px; top:" + css_wh(48) + "px;overflow:hidden;'>_FPAdult content_!</div>")
    } catch (e) {}
}
var pl_serv = 0,
    pl_count = 1;
var flashmode = null,
    lastmode = null,
    is_rek = !1,
    rek_mode, ChSel = null,
    intl;
var handmode = null;

function getmode(url) {
    if (url == null) url = "";
    var m;
    if (handmode != null) m = handmode;
    else {}
    if (platform == "sams" && m != "jw") m = "media";
    return m
}
kjtYpr.l0lI10EMI1I10Ypr = function (mode, tmpch) {
    handmode = mode;
    intl = box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial + "|" + gnxu;
    modeGroup = !1;
    kjtYpr.YoutubeURL = null;
    if (handler == "move" || (handler == "player" && rek_url != "")) return;
    if (startPay == 1) startPay = 0;
    if (handler == "context") {
        Menu = [];
        closeMenu();
        handler = "menu"
    }
    if ($_("vk").style.display != "none") {
        $_("vk").style.display = "none";
        kjtYpr.inputId = "";
        $_("main").style.display = "block";
        handler = "menu"
    }
    m3u8_url = "";
    if (is_mark) {
        if (typeof is_mark_array[select] == "undefined" || is_mark_array[select] == "0") is_mark_array[select] = "1";
        else is_mark_array[select] = "0";
        ll1lIOiIO0lO1IIIYpr = Math.random();
        kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
        return
    }
    chGroupSel = 0;
    if (startPay == 2) {
        lO10OIOlxzlO100OIYpr("popUp", "");
        $_("popUp").style.display = "none";
        closeMenu();
        startPay = 0
    }
    if (lI1lI1GUbh1QOOOYpr > 0) {
        clearTimeout(llI1lhk1I1III0Ypr);
        lI1lI1GUbh1QOOOYpr = 0;
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        kjtYpr.inf("Прервано!", 800);
        return
    }
    if (tmpch != null) {
        ChSel = tmpch;
        for (var i = 0; i < pltags.length; i++)
            if (typeof ChSel[pltags[i]] == "undefined") ChSel[pltags[i]] = "";
        for (var i = 0; i < plgltags.length; i++)
            if (typeof kjtYpr.global[plgltags[i]] == "undefined") kjtYpr.global[plgltags[i]] = ""
    } else ChSel = curCh();
    for (var i = 0; i < pltags.length; i++)
        if (typeof ChSel[pltags[i]] == "undefined") ChSel[pltags[i]] = "";
    if (gV(ChSel, "onclick") != "") {
        if (ChSel.onclick == "autouserexport()") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(10);
            autouserexport();
            setTimeout(function () {
                ChSel.onclick = "";
                kjtYpr.l0lI10EMI1I10Ypr(mode, ChSel)
            }, 2000);
            return
        }
    }
    ChSel.index = select;
    kjtYpr.REQUEST_XXX = 0;
    if (!is_ifr()) kjtYpr.lastSearch = "";
    if (ChSel.playlist_url != "submenu" && gV(ChSel, "type") != "enterurl" && (is_xxx(ChSel.stream_url) || is_xxx(ChSel.playlist_url, gV(ChSel, "playlist_url_orig")) || is_xxx(ChSel.title) || is_xxx(ChSel.group))) {
        kjtYpr.REQUEST_XXX = 1;
        if (kjtYpr.Password != kjtYpr.GL.passwordkey) {
            showParrent();
            return
        }
    }
    if (typeof ChSel.is_parent_lock != "undefined") {
        if (ChSel.is_parent_lock == "1") {
            kjtYpr.REQUEST_XXX = 1;
            if (kjtYpr.Password != kjtYpr.GL.passwordkey) {
                showParrent();
                return
            }
        }
    }
    rek_mode = null;
    if (ChSel.playlist_url.indexOf("#CAT=") > 0 && chGroup.length) {
        var t = ChSel.playlist_url.split("#CAT=");
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf(t[0]) == 0) {
            kjtYpr.l1IlIl01l0tUIl1IIYpr = ChSel.playlist_url;
            if (!goBack) {
                var ad = {
                    "url": this.l1IlIl01l0tUIl1IIYpr,
                    "img": this.XML_IMG,
                    "title": ChSel.title
                };
                if (insetIn(-1, "get", "url").indexOf(t[0] + "#CAT=") == 0 && insetIn(-1, "get", "url").indexOf("#CAT=LISTCATS") == -1) {
                    inset["tab" + insetActive][inset["tab" + insetActive].length - 1] = ad
                } else {
                    insetIn(-1, "s", select);
                    inset["tab" + insetActive].push(ad)
                }
            }
            insetIn(0, "save");
            listGroup(t[1]);
            goBack = !1;
            return
        }
    }
    if (ChSel.playlist_url.indexOf("https://fex.net/s/") == 0) {
        ChSel.stream_url = ChSel.playlist_url;
        ChSel.playlist_url = ""
    }
    if (ChSel.stream_url.match(/\.torrent$/) && ChSel.stream_url.indexOf("torrent://") != 0) {
        ChSel.playlist_url = "torrent://" + ChSel.stream_url;
        ChSel.stream_url = ""
    }
    if (ChSel.stream_url.indexOf("torrent://") == 0 || ChSel.stream_url.indexOf("torrentb64://") == 0 || ChSel.stream_url.indexOf("magnet:") == 0) {
        ChSel.playlist_url = ChSel.stream_url;
        ChSel.stream_url = ""
    }
    var ar = ["playlist_url", "stream_url", "parser", "mb_parser"];
    for (elem in ar) ChSel[ar[elem]] = trylink(gV(ChSel, ar[elem]));
    if (ChSel.playlist_url.indexOf("vivat2.php?do=start&v=md5hash") > 0 || ChSel.playlist_url.indexOf("vivat.php?do=start&v=md5hash") > 0 || ChSel.playlist_url.indexOf("vostorg.php?do=start&v=md5hash") > 0)
        ChSel.parser = "vivat";
    if (ChSel.parser != "") {
        l0O1l101l1t_Y0lll1Ypr = mode;
        return mainPars(ChSel, mode, null, null, incID())
    }
    if (gV(ChSel, "parser2") != "") {
        ChSel.parser = ChSel.parser2;
        ChSel.parser2 = ""
    }
    if (ChSel.mb_parser != "") {
        return mainPars(ChSel, mode, null, null, incID())
    }
    if (mode != null) flashmode = mode;
    else if (flashmode != null) {
        mode = flashmode;
        flashmode = null
    }
    lastmode = mode;
    if (ChSel.stream_url != "" && !is_audio(ChSel.stream_url)) {
        if (is_hdgo(ChSel.stream_url) && (ChSel.title.indexOf("serial") > 0)) {} else {
            if (is_adult) {
                rek_url = "rek_on";
                is_adult = !1
            }
            if (typeof ChSel.advertising == "object") {
                lI1lI00l1gX0l0l0OYpr();
                var tcount = 0;

                function adend() {
                    is_rek = !1;
                    ChSel.advertising = "end";
                    handler = "menu";
                    lO10OIOlxzlO100OIYpr("jw", "");
                    $_("jw").style.display = "none";
                    $_("jw").style.zIndex = "0";
                    kjtYpr.l0lI10EMI1I10Ypr(handmode, ChSel)
                }

                function adTimer(t) {
                    if (!is_rek) return;
                    if (++tcount < 10) {
                        rekLifeTimer = setTimeout(function () {
                            adTimer()
                        }, 1000)
                    } else {
                        adend()
                    }
                }
                adTimer();
                is_rek = !0;
                if (typeof jwplayer == "undefined") {
                    kjtYpr.inf("LOAD JW API");
                    jwon();
                    setTimeout(function () {
                        kjtYpr.l0lI10EMI1I10Ypr(handmode, ChSel)
                    }, 1200)
                } else {
                    handler = "player";
                    rek_mode = "jw";
                    rek_type = "user";
                    kjtYpr.inf("LOAD AD(U)" + rek_q);
                    kjtYpr.inf("LOAD AD(U)" + rek_q);
                    $_("player").style.display = "block";
                    $_("QualCh").style.display = "none";
                    $_("main").style.display = "none";
                    $_("video").style.display = "none";
                    $_("jw").style.display = "block";
                    renderPlayer("adv");
                    rekBox();
                    jwplayer.key = "qcXu/ZrwbXbRPW/tm47rDKqkZXcp1nsBqUuuGEoWKok=";
                    jwplayer("jw").setup({
                        // "file": "http://195.88.208.101/rek_ivi.mp4",
                        "file": "http://127.0.0.1/rek_ivi.mp4",
                        controls: !0,
                        "height": "100%",
                        "width": "100%",
                        "autostart": !0,
                        "androidhls": !1,
                        "hlsjsdefault": !1,
                        "skin": {
                            // "url": "http://195.88.208.101/obovse.ru/ForkPlayer2.5/jw/skin.css",
                            "url": "http://127.0.0.1/obovse.ru/ForkPlayer2.5/jw/skin.css",
                            "name": "myskin"
                        },
                        "advertising": ChSel.advertising
                    });
                    jwplayer("jw").on("adBreakEnd", function (event) {
                        adend()
                    });
                    jwplayer("jw").on("setupError", function (event) {
                        adend()
                    });
                    jwplayer("jw").on("adTime", function (event) {
                        tcount = 0;
                        $_("jw").style.zIndex = "2"
                    });
                    jwplayer("jw").on("ready", function (event) {});
                    jwplayer("jw").on("all", function (event) {})
                }
                return
            } else if (kjtYpr.global.allvast != "") {
                lI1lI00l1gX0l0l0OYpr();
                handler = "player";
                pstream = !1;
                paused = !1;
                kjtYpr.inf("LOAD AD" + rek_q);
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(10);
                is_rek = !0;
                rekLife();
                rek_mode = mode;
                is_adult = !0;
                rek_type = "user";
                kjtYpr.inf("LOAD AD(U)" + rek_q);
                l1I1lllp1Fu1O0lYpr(kjtYpr.global.allvast, "", "start");
                kjtYpr.global.allvast = "";
                return
            }
            if (is_show_rek() && !FgetSetting(12)) {
                lI1lI00l1gX0l0l0OYpr();
                handler = "player";
                pstream = !1;
                paused = !1;
                kjtYpr.inf("LOAD AD" + rek_q);
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(10);
                is_rek = !0;
                rekLife();
                rek_mode = mode;
                rek_q++;
                rek_last = T.inetTime;
                kjtYpr.lIllOVRj11lO10Ypr("rek", T.inetTime);
                if (0 && (Math.random() > 0.3 && model != "sony" && model != "sonybravia" && !kjtYpr.series.match(/^(C|D|E)$/))) {
                    rek_type = "buzolla";
                    l1I1lllp1Fu1O0lYpr("https://exchange.buzzoola.com/adv/kbDH64c7yFY_jqB7YcKn5AO0DjQghO5AvXWuB3mug8XZ8I5Jvw5fWA/vast2", "", "start")
                } else {
                    rek_type = "youtube";
                    // if (Math.random() > 0.5) l1I1lllp1Fu1O0lYpr('http://195.88.208.101/rek_ivi.mp4', '', 'start');
                    // else l1I1lllp1Fu1O0lYpr('http://195.88.208.101/rekmegogo.mp4', '', 'start')
                    if (Math.random() > 0.5) l1I1lllp1Fu1O0lYpr('http://127.0.0.1/rek_ivi.mp4', '', 'start');
                    else l1I1lllp1Fu1O0lYpr('http://127.0.0.1/rekmegogo.mp4', '', 'start')
                }
                return
            }
        }
    }
    clearTimeout(advTimer);
    if ($_(VK.id) == null && kjtYpr.GL.third == 0 && (ChSel.playlist_url.indexOf("allsearch.php") > 0 || ChSel.playlist_url.indexOf("cmdSpider") == 0) && templic == 0 && kjtYpr.l11l101lxO_tl1IlIYpr == "") {
        ll0111l1wxUIOlO1lYpr(100, "Поиск в Интернет ведет на сторонние сайты и плейлисты, нажимая _FPProdolzhit_, вы подтверждаете что несёте ответственность за принятие решений о получении доступа к результатам поиска", "Больше не показывать|_FPProdolzhit_");
        return
    }
    templic = 0;
    if (ChSel.playlist_url.indexOf("cmd:") == 0) {
        var data = {
            "cmd": ChSel.playlist_url.substr(4)
        };
        handlerData(data, kjtYpr.l1IlIl01l0tUIl1IIYpr);
        return
    }
    if (ChSel.playlist_url.indexOf("set") == 0) {
        if (ChSel.playlist_url == "setUdp") {} else if (ChSel.playlist_url == "setRemote" && kjtYpr.GL.remote == 3) {
            ChSel.search_on = "IP:PORT"
        } else {
            kjtYpr.ll0IlI01bONa1111OlYpr(ChSel.playlist_url, VK_RIGHT);
            return
        }
    }
    if (ChSel.search_on != "" && kjtYpr.l11l101lxO_tl1IlIYpr == "") {
        try {
            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("ede.php") > 0) {
                ll0111l1wxUIOlO1lYpr(53, "<img src='" + _img("_OT_plus__200x200.png") + "' style='width:132px;padding:2px;'><br>Используйте для ввода ссылок на свои личные плейлисты пункт в Стартовом меню / Перейти по адресу!");
                return
            }
            $_("infoList").style.top = '0px';
            if (ChSel.search_on == "search" || ChSel.search_on == "search_on") ChSel.search_on = "_FPVvediteText_";
            if (select >= 0 && ChSel["tvg-shift"] == "99") {
                $_("ch" + select).style.visibility = "hidden"
            }
            l0111O0tihuOIIlOYpr(ChSel.search_on, ChSel.value);
            VK.Show("search");
            if (ChSel.playlist_url.indexOf("allsearch.php") > 0) kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> _FPinfoNastrPoiska_");
            else if (ChSel.playlist_url.indexOf("tosetVk") == 0) kjtYpr.popUp("<font color=orange>http://obovse.ru/vkforkstore/</font><br>_FPinfoVk_ http://vk.com")
        } catch (e) {}
    } else if (ChSel.playlist_url != "" && ChSel.stream_url == "") {
        if (ChSel.parser == "") {
            pl_serv = 0;
            pl_count = 1;
            while (gV(ChSel, "playlist_url" + (1 + pl_count)) != "") pl_count++;
            if (app_cors && ChSel.playlist_url.indexOf("alexkdpulg.php?list=") > 0) {
                ChSel.playlist_url = decodeURIComponent(ChSel.playlist_url.split("?list=")[1])
            }
            kjtYpr.l110l1lIPuoaO0I0IOYpr(ChSel.playlist_url, select, null, ChSel)
        } else kjtYpr.popUp("Ошибка! Не был обработан parser!", 2000)
    } else if (ChSel.stream_url != "") {
        if (is_audio(ChSel.stream_url) && kjtYpr.GL.audioplayer > 0 && mode == null) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            l0OO10QIvTrl10lYpr(kjtYpr.channels, select);
            return
        }
        l0llQlOl1LaOlQ1Ypr();
        var url = ChSel.stream_url.replace(/\\\//g, "/");
        if (url.indexOf("setEpg") == 0) {
            var z = url.split("|-");
            if (z[3] == "") try {
                delete epg_arr[z[2]][z[1]]
            } catch (e) {} else {
                if (typeof epg_arr[z[2]] == "undefined") epg_arr[z[2]] = {};
                epg_arr[z[2]][z[1]] = z[3]
            }
            kjtYpr.lIllOVRj11lO10Ypr("epg_set", l10O0I11gdZlOOIIYpr(epg_arr));
            tmf();
            setTimeout('kjtYpr.inf("' + z[1] + ' уст. епг ' + z[3] + '",1500);', 150);
            return
        }
        try {
            if (!stopped && !is_img(url)) {
                if (platform == "sams") samsStop();
                else if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    lO10OIOlxzlO100OIYpr("other", "");
                    video.src = ""
                } else if (l0O1l101l1t_Y0lll1Ypr == "html5") {
                    video.src = ""
                } else {
                    lO10OIOlxzlO100OIYpr("jw", "");
                    lO10OIOlxzlO100OIYpr("other", "")
                }
            }
        } catch (e) {}
        if (url.indexOf("http://mylist.obovse.ru/hls/") == 0 || url.indexOf("/hls/userencrypt/") > 0) {
            url = parse_urlm(url)
        }
        url = l1lQQO0OhRlPLI1OOYpr(url, null, null, null, incID());
        if (url == null || url == "") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
        } else if (url != "" && url != "assync") {
            lI1l1IOllHHCTuO0OlOYpr(url)
        }
    } else {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0, !0);
        kjtYpr.inf("Пустая ссылка!", 1500)
    }
};

function is_xxx(n, n2) {
    if (n2 != null)
        if (n2 != "") n = n2;
    if (n == null) n = "";
    if (typeof n != 'string') return 0;
    n = n.split("#POST")[0];
    if (n.match(/(http:|\/\/)/)) {
        if (n.match(/(18_plus|18plus|porn|ххх|xxx| sex |sex |adult)/i)) return 1;
        else return 0
    }
    if (n.match(/(русская ночь|18plus|playboy|creampi|compilati|18_plus|18\+|porn|hustler|ххх|xxx| sex |sex |adult| anal|pron|masturb|порно|секс| анал|мастурб|минет|эротика|brazzers)/i)) return 1;
    return 0
}

function is_parse_self(u1, u2) {
    var dm = u1.match(/^https?:\/\/(.*?)(:|\?|\/|$)/);
    if (dm != null) {
        dm2 = u2.match(/^https?:\/\/(.*?)(:|\?|\/|$)/);
        if (dm2 != null)
            if (dm[1] == dm2[1]) return 1
    }
    return 0
}

function is_local(url) {
    if (url.match(/(\/treeview|:45397\/|:8027\/|:8028\/|\/parserlink|\/smarttv\/acestream\.php)/)) return !0;
    var ip = "";
    if (kjtYpr.GL.acestream != "") ip = kjtYpr.GL.acestream.split(":")[0];
    if (kjtYpr.GL.remoteip != "") ip = kjtYpr.GL.remoteip.split(":")[0];
    if (ip != "")
        if (url.indexOf("http://" + ip) == 0) return !0;
    return !1
}

function is_directly(url, wp) {
    if (is_local(url) || wp == -2 || url.match(/(alexkdpulg\.php|mylist\.obovse\.ru|obovse.ru\/smarttv)/)) return !0;
    return !1
}

function getbc() {
    var res = !1;
    for (i = inset["tab" + insetActive].length - 1; i >= 0; i--) {
        try {
            var url = inset["tab" + insetActive][i].url;
            var t = inset["tab" + insetActive][i].title;
            if (url.indexOf("bc=true") > 0 || url == "mylist" || url == "favorites" || t.indexOf("_FPPerPoAdr_") == 0) return !0;
            if (url == "http://mylist.obovse.ru/top") {
                return !1
            }
            if (l1IOIIz1l0Ol110Ypr(url)) {
                break
            }
        } catch (e) {}
    }
    return res
}

function fromSpider() {
    var res = !1;
    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("http") != 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("http://forkplayer.tv/xml/account.php") == 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("alexkdpulg.php?bylist=") > 0) return !1;
    for (i = inset["tab" + insetActive].length - 1; i >= 0; i--) {
        try {
            var url = inset["tab" + insetActive][i].url;
            var t = inset["tab" + insetActive][i].title;
            if (url == "mylist" || url == "favorites" || t.indexOf("_FPPerPoAdr_") == 0) return !1;
            if (url.indexOf("http://spiderxml.com/top") == 0) {
                return !0
            }
            if (l1IOIIz1l0Ol110Ypr(url)) {
                break
            }
        } catch (e) {}
    }
    return res
}

function is_white(n) {
    if (n == null) n = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    if (typeof n == 'undefined') return 0;
    if (is_mw(n)) return 1;
    if (n == "tosettings" || n.indexOf("vk_audio") > 0) return 1;
    if ((n.indexOf("obovse.ru/smarttv") > 0) && n.indexOf("acestream_") == -1 && n.indexOf("iptv") == -1 && n.indexOf("fex") == -1 && n.indexOf("yapfiles") == -1 && n.indexOf("porn") == -1 && n.indexOf("xxx") == -1 && n.indexOf("adult") == -1) return 1;
    if (typeof curCh() != "undefined")
        if (typeof curCh()["advert"] != "undefined")
            if (curCh()["advert"] != "") return 1;
    var isx = 0,
        iso = 0;
    for (i = inset["tab" + insetActive].length - 1; i >= 0; i--) {
        try {
            var url = inset["tab" + insetActive][i].url;
            var t = inset["tab" + insetActive][i].title;
            if (l1IOIIz1l0Ol110Ypr(url) || url.indexOf("http") != 0) {
                break
            }
            if (is_xxx(url) || is_xxx(t) || is_xxx(ChSel.title) || is_xxx(ChSel.stream_url)) {
                isx = 1
            }
        } catch (e) {}
    }
    if (!isx) return 1;
    return 0
}

function is_m3u8(url) {
    if (url == null) url = playUrl;
    if (url == "") return 0;
    if (typeof url == 'undefined') return 0;
    if (ChSel != null) {
        if (ChSel.type == "vod") return 0;
        if (ChSel.type == "hls") return 2
    }
    if (kjtYpr.global.is_iptv == "true" || kjtYpr.global.is_iptv) return 1;
    if (url.indexOf("proxym3u8") > 0) return 2;
    if (url.indexOf("ace/getstream") > 0) return 0;
    if (url.indexOf(":8027") > 0 || url.indexOf("tivio.net") > 0) return 0;
    if (url.match(/\.(flv|mp4|mkv|avi|3gp|m2t|m2ts|mov|mpg|mpeg|ts).{0,1}$/)) {
        return 0
    }
    if ((url.indexOf("j.mp") > 0 && is_iptv > 2) || url.indexOf(".m3u8") > 0) return 2;
    else if (url.indexOf("/chtst") > 0 || url.indexOf("/udp") > 0 || url.indexOf("/hls") > 0) return 1;
    else if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf(".m3u") > 0 && url.indexOf("iptv") > 0) return 1;
    else return 0
}
var llI1lhk1I1III0Ypr = null;

function llI0llO11rsNIl0lOYpr(m, mode) {
    if (m) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
        lI1lI1GUbh1QOOOYpr = 1;
        document.location.href = homeurl + "#start";
        dns_url = unescape(document.location.href.split("#")[1]);
        if (mode == "vk") llI1lhk1I1III0Ypr = setTimeout("llI0llO11rsNIl0lOYpr(false,'vk');kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);", 200);
        else llI1lhk1I1III0Ypr = setTimeout("llI0llO11rsNIl0lOYpr();kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);", 200)
    } else {
        if (dns_url == unescape(document.location.href.split("#")[1])) {
            if (++lI1lI1GUbh1QOOOYpr < 180) {
                if (mode == "vk") llI1lhk1I1III0Ypr = setTimeout("llI0llO11rsNIl0lOYpr(false,'vk');kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);", 200);
                else llI1lhk1I1III0Ypr = setTimeout("llI0llO11rsNIl0lOYpr();kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);", 200)
            } else {
                lI1lI1GUbh1QOOOYpr = 0;
                if (mode == "vk") lI1lI00l1gX0l0l0OYpr();
                kjtYpr.inf("_FPPrevLimOzh_", 1500);
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1)
            }
        } else lIll1FO1ull11Ypr(mode)
    }
}

function lIll1FO1ull11Ypr(mode) {
    var str = unescape(window.location.href.split("#")[1]);
    if (str != undefined && str != "undefined") {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100);
        if (mode == "vk") {
            text = str;
            if (text.indexOf("{") == -1) {
                kjtYpr.inf(text, 1500)
            } else {
                var data = {
                    "response": l1l0IOIl_puQl1I1IYpr(text + "}")
                };
                if (vk_mini) plxmini(data);
                else plx(data)
            }
        } else {
            if (ChSel.playlist_url.indexOf("=postmd5") > 0 || (ChSel.playlist_url.indexOf("/obovse.ru/") > 0 && text.length > 9000)) {
                ChSel.postmd5 = text;
                text = "postmd5"
            }
            ChSel.playlist_url = ChSel.playlist_url.replace("md5hash", encodeURIComponent(str));
            if (ChSel.stream_url.indexOf("=postmd5") > 0) {
                ChSel.postmd5 = text;
                text = "postmd5"
            }
            ChSel.stream_url = ChSel.stream_url.replace("md5hash", str);
            ChSel.parser = "";
            lI1lI1GUbh1QOOOYpr = 0;
            kjtYpr.l0lI10EMI1I10Ypr(null, ChSel)
        }
    }
    lI1lI1GUbh1QOOOYpr = 0
}
kjtYpr.l110l1lIPuoaO0I0IOYpr = function (xml_url, sel, live, tmpch) {
    try {
        clearTimeout(xml_live_gstimer);
        if (typeof xml_url == "undefined") xml_url = "";
        if (!is_ifr()) {
            if (live == null) xml_live = !1;
            else xml_live = !0
        }
        incID();
        if (tmpch != null) Ch = tmpch;
        else {
            if (ttmac) kjtYpr.popUp("Err: Empty GET Ch", 2000);
            Ch = {}
        }
        if (preurl == null) PullDataFrom("http://" + ServerFromList + "/smarttv/fs.php?id=preurl", "preurl");
        else if (typeof preurl[xml_url] != "undefined") {
            Ch.logo_30x30 = preurl[xml_url][1];
            xml_url = preurl[xml_url][0]
        }
        if (xml_url.match(/^cmdSpider(#url|xml)?\|/)) {
            var xc = xml_url.split("|");
            xml_url = xc[0];
            kjtYpr.l11l101lxO_tl1IlIYpr = xc[1]
        }
        if (xml_url.indexOf("cmdSpider") == 0 && kjtYpr.l11l101lxO_tl1IlIYpr != "") {
            spider_stat = kjtYpr.l11l101lxO_tl1IlIYpr;
            if (kjtYpr.l11l101lxO_tl1IlIYpr == "tosettings") {
                kjtYpr.l1IOllIQV1ul00IlYpr(kjtYpr.l11l101lxO_tl1IlIYpr);
                return 1
            }
            if (kjtYpr.l11l101lxO_tl1IlIYpr.match(/^(http|about:|tosettings|cmd|vk:|www\.|html:\/\/)/) || Ch.playlist_url.indexOf("cmdSpider#url") == 0) {
                xml_url = "cmdEnterlist"
            } else {
                se = getVars("start").search;
                ch = [];

                function _rds(el) {
                    return {
                        "logo_30x30": el.logo,
                        "timeout": 10,
                        "title": el.title,
                        "iframe": "3",
                        "playlist_url": el.url.replace("%s", encodeURIComponent(kjtYpr.l11l101lxO_tl1IlIYpr))
                    }
                }
                for (var i = 0; i < se.system.length; i++) {
                    if (se.ds == i) ch.unshift(_rds(se.system[i]));
                    else if (gV(se.system[i], "dop")) ch.push(_rds(se.system[i]))
                }
                for (var i = 0; i < se.sites.length; i++) {
                    if (se.ds == -1 && se.ss == i) ch.unshift(_rds(se.sites[i]));
                    else if (gV(se.sites[i], "dop")) ch.push(_rds(se.sites[i]))
                }
                kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url + "|" + kjtYpr.l11l101lxO_tl1IlIYpr + "|" + ch[0].playlist_url;
                return kjtYpr.l00100lIKlBWw1lllIlYpr({
                    "title": "Поиск " + kjtYpr.l11l101lxO_tl1IlIYpr,
                    "channels": ch
                }, null, incID())
            }
        }
        if (xml_url.indexOf("cmdEnterlist") == 0) {
            ChSel.type = "enterurl";
            ChSel.title = xml_url = kjtYpr.l11l101lxO_tl1IlIYpr;
            kjtYpr.l11l101lxO_tl1IlIYpr = "";
            if (preurl == null) PullDataFrom("http://" + ServerFromList + "/smarttv/fs.php?id=preurl", "preurl");
            if (typeof preurl[xml_url] != "undefined") {
                Ch.logo_30x30 = preurl[xml_url][1];
                xml_url = preurl[xml_url][0]
            } else if (typeof preurl[xml_url + "/"] != "undefined") {
                Ch.logo_30x30 = preurl[xml_url + "/"][1];
                xml_url = preurl[xml_url + "/"][0];
                xml_url += (xml_url.indexOf("?") == -1) ? "?bc=true" : "&bc=true"
            } else {
                if (xml_url.indexOf("//") > 0 && xml_url.indexOf("?") == -1 && xml_url.lastIndexOf("/") != xml_url.length - 1 && !xml_url.match(/\/\/.*\//)) xml_url += "/";
                var ttl = xml_url.replace(/^https?:\/\//, "");
                if (ttl.indexOf("?") > 0) ttl = ttl.substring(0, ttl.indexOf("?"));
                var data = {
                    "title": ttl,
                    "icon": "_OI_emptydoc.png",
                    "channels": [{
                        "location": kjtYpr.applyenter,
                        "type": "enterurl",
                        "logo_30x30": "_OT_plus.png",
                        "title": ttl + "",
                        "playlist_url": xml_url
                    }]
                };
                kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url;
                kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, kjtYpr.REQUEST_ID);
                return 1
            }
        } else if (xml_url.indexOf("tosetVk") == 0) {
            if (kjtYpr.l11l101lxO_tl1IlIYpr != "") {
                kjtYpr.GL.vk_code = kjtYpr.l11l101lxO_tl1IlIYpr;
                // var u = "http://185.158.114.122/obovse.ru/smarttv/api.php?do=vk_code&code=" + kjtYpr.l11l101lxO_tl1IlIYpr;
                var u = "http://127.0.0.1/obovse.ru/smarttv/api.php?do=vk_code&code=" + kjtYpr.l11l101lxO_tl1IlIYpr;
                var xhrt = new XMLHttpRequest();
                xhrt.onreadystatechange = function () {
                    if (xhrt.readyState == 4) {
                        var s = xhrt.responseText;
                        var x = s.split("|");
                        if (x[0] != undefined && x[1] != undefined && x[1] != "") {
                            kjtYpr.GL.vk_id = x[0];
                            kjtYpr.GL.vk_token = x[1];
                            kjtYpr.popUp("_FPUspIdPolz_:" + x[0])
                        } else {
                            kjtYpr.GL.vk_id = "";
                            kjtYpr.GL.vk_token = "";
                            kjtYpr.popUp("_FPOshibka_!<br>_FPProvPravKodVk_")
                        }
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                        oldselect = select;
                        kjtYpr.l1IOllIQV1ul00IlYpr("tosettings");
                        kjtYpr.lIOIOIBu0mO11llO0Ypr(18)
                    }
                };
                xhrt.open('GET', u, !0);
                xhrt.send();
                kjtYpr.lIllOVRj11lO10Ypr("vk_audio_pl", "");
                kjtYpr.lIllOVRj11lO10Ypr("vk_audio_sel", "")
            }
            kjtYpr.l11l101lxO_tl1IlIYpr = "";
            return 1
        }
        kjtYpr.lastchannels = null;
        kjtYpr.applyenter = 1;
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("#submenu") > 0 && gV(curCh(), "type") == "replace") {
            kjtYpr.lastchannels = kjtYpr.channels;
            var n = insetIn(-2, "get", "s");
            inset["tab" + insetActive].pop();
            var t = insetIn(-1, "get", "title");
            inset["tab" + insetActive].pop();
            sel = select;
            if (kjtYpr.l11l101lxO_tl1IlIYpr != "") curCh("title", t + "[" + n + "=" + kjtYpr.l11l101lxO_tl1IlIYpr + "]");
            else curCh("title", t + "[" + n + "=" + curCh("title") + "]")
        }
        if (kjtYpr.l11l101lxO_tl1IlIYpr != "") {
            if (kjtYpr.hardware == "UE32J4500" || !0) kjtYpr.l11l101lxO_tl1IlIYpr = UnicodeToWin1251(kjtYpr.l11l101lxO_tl1IlIYpr);
            kjtYpr.lastSearch = kjtYpr.l11l101lxO_tl1IlIYpr
        }
        l00Q0OlutuW01I0Ypr = "w_la" + "ng=" + kjtYpr.GL.lang;
        if (platform == "sams" || uaJ == "dune" || uaJ == "mag" || uaJ == "android-device") l00Q0OlutuW01I0Ypr += "&appid=" + platform;
        else if (kjtYpr.GL.remote > 0) l00Q0OlutuW01I0Ypr += "&appid=remote";
        kjtYpr.REQUEST_XML = xml_url;
        kjtYpr.SEARCH_TEMPL = "";
        if (kjtYpr.l11l101lxO_tl1IlIYpr != "") {
            if (xml_url.indexOf("?") == -1) xml_url += "?";
            else xml_url += "&";
            if (xml_url.indexOf("{search}") != -1) {
                kjtYpr.SEARCH_TEMPL = xml_url.replace("{search}", "%s");
                xml_url = xml_url.replace("{search}", encodeURIComponent(kjtYpr.l11l101lxO_tl1IlIYpr))
            } else {
                kjtYpr.SEARCH_TEMPL = xml_url + "search=%s";
                xml_url += "search=" + encodeURIComponent(kjtYpr.l11l101lxO_tl1IlIYpr)
            }
            if (xml_live) l00Q0OlutuW01I0Ypr += "&livesearch=1";
            else {
                $_("vk").style.display = "none";
                kjtYpr.inputId = "";
                $_("main").style.display = "block";
                handler = "menu";
                kjtYpr.l0OlII0Ix1fI1I01Ypr("menu")
            }
        }
        l00Q0OlutuW01I0Ypr += addident(null, xml_url);
        lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, null, null, kjtYpr.REQUEST_ID)
    } catch (e) {
        kjtYpr.popUp("Error request: " + e.message, 2000)
    }
};
var countHw = 1.4;

function updateLogin(m) {
    // try {
    //     if (m == null) setTimeout("if(countHw==-1) updateLogin();", 50000);
    //     if (kjtYpr.mac == undefined) return;
    //     var url = addident("http://forkplayer.tv/xml/account.php?do=ping");
    //     if (platform == "android-device") url += "&signature=" + kjtYpr.signature + "&build=" + kjtYpr.build;
    //     url += "&mtype=" + model + "-" + kjtYpr.virtual + "&uadns=" + uadns + "&other=" + lg_model + "-" + lg_v + "&loader_orig=" + loader_orig + "&hm=" + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("hm");
    //     if (nServer == 2 || m) url = "http://" + lI101lOIQOlTlQ10I1Ypr + "/alexkdpulg.php?list=" + encodeURIComponent(url);
    //     var xhr4 = null;
    //     xhr4 = new XMLHttpRequest();
    //     xhr4.onreadystatechange = function () {
    //         if (xhr4.readyState == 4) {
    //             if (xhr4.status == 200) {
    //                 if (xhr4.responseText != "") {
    //                     updateLoginData(xhr4.responseText);
    //                     kjtYpr.lIllOVRj11lO10Ypr("lastdata", xhr4.responseText)
    //                 }
    //             } else if (m == null) {
    //                 updateLogin(!0)
    //             }
    //         }
    //     };
    //     xhr4.open('GET', url, !0);
    //     try {
    //         xhr4.setRequestHeader("Referer", "http://forkplayer.tv/device_" + kjtYpr.hardware + "_" + uaJ + "_" + kjtYpr.mac)
    //     } catch (e) {
    //         if (ttmac) kjtYpr.popUp("err set ref=" + e.message, 1100)
    //     }
    //     xhr4.send()
    // } catch (e) {
    //     kjtYpr.popUp("err updateLogin<br>" + e.message, 1800);
    //     countHw = 1.8
    // }
    console.log("Update login");
}
var user = null;

function updateLoginData(s) {
    try {
        if (typeof s == 'undefined') s = "";
        if (s == "") s = "3|MTNONEc2ODc5NAR|||||||||||||||";
        var t = s.split("|");
        countHw = t[0];
        if (countHw == "") countHw = 1.6;
        else if (isNaN(parseFloat(countHw))) countHw = 1.6;
        ipG = t[2];
        ipCountry = t[3];
        ipC = t[4];
        dateto = t[5];
        waitdonate = t[6];
        timestamp = t[7];
        if (t[8].indexOf("forkplayer.tv/device") > 0) xhr_referer = 3;
        else if (t[8].length > 0) xhr_referer = 1;
        else xhr_referer = 0;
        if (gV(t, 9) != "") {
            user = {
                "login": t[9],
                "email": t[10],
                "md5": t[11]
            };
            expChanged = 1;
            autouserexport()
        } else {
            user = null
        }
        if (typeof t[12] != "undefined") {
            if (t[12] == "info") {
                ll0111l1wxUIOlO1lYpr(53, t[13])
            }
        }
        kjtYpr.lII1O1LQIDl10IlOYpr();
        if (timestamp < 1) rek_url = "rek_on";
        else rek_url = "";
        gnxu = t[1] + "|" + md5("fork" + kjtYpr.mac + kjtYpr.mac + kjtYpr.serial + kjtYpr.virtual + model + ipG + "player").substr(2, 15).toUpperCase() + "|" + model + "|" + kjtYpr.virtual
    } catch (e) {
        countHw = 1.65;
        kjtYpr.popUp("Update login failed<br>" + e.message, 2000)
    }
}
var lastBookm = {
        "url": ""
    },
    rt_obj = null;

function xhr_bookmark(u, cmd, str, count, request_id) {
    var data = {
        "channels": []
    };
    s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("bookmarks");
    var sd = [];
    if (s != "") {
        sd = l1l0IOIl_puQl1I1IYpr(s);
        if (sd == null) sd = [];
        if (typeof sd.push == "undefined") sd = []
    }
    if (u == "bookmarksadd") {
        var n = sd.length + 1;
        payd.name = "Избранное " + n;
        data.channels.push({
            "logo_30x30": _img("_OI_1px.png"),
            "title": "<" + payd.name + ">",
            "value": "Избранное " + n + "",
            "search_on": "_FPName_:",
            "playlist_url": "payd_name"
        });
        data.channels.push({
            "logo_30x30": _img("_OI_ok.png"),
            "value": "",
            "title": "_FPPodtverdit_",
            "playlist_url": "bookmarksaddok",
            "description": ""
        })
    } else if (u == "bookmarksaddok") {
        if (payd.name != "") {
            sd.push({
                "title": payd.name,
                "type": "dir",
                "playlist_url": "bookmarks/" + (sd.length + 1)
            });
            kjtYpr.lIllOVRj11lO10Ypr("bookmarks", l10O0I11gdZlOOIIYpr(sd));
            kjtYpr.lI11111bPNQ0III1Ypr();
            return
        }
    } else {
        if (u.indexOf("bookmarks/extbookm") == 0) {
            if (cmd == "cmdDel") {
                var obj = {};
                var ch = kjtYpr.origchannels[str];
                for (var key in ch) {
                    if (ch[key] != null && key != "rates") {
                        if (ch[key] != "") {
                            if (key == 'title' || key == 'description') {
                                if (ch.title.indexOf("<div") == 0) {
                                    ch.title = ch.description.substr(0, ch.description.indexOf("<br"));
                                    ch.description = ""
                                }
                            }
                            obj[key] = ch[key]
                        }
                    }
                }
                var url = "bookm=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(obj));
                PullDataFrom(addident("http://forkplayer.tv/xml/account.php?do=extbookm&v=del&dir=" + u + "&n=" + str + "&" + url), "extbookmdel", str)
            } else {
                kjtYpr.l110l1lIPuoaO0I0IOYpr(addident("http://forkplayer.tv/xml/account.php?do=extbookm&v=get&dir=" + u))
            }
            return
        }
        if (u.indexOf("bookmarks/addext") == 0) {
            var url = "bookm=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(str));
            lastBookm.url = u;
            lastBookm.title = "_FPVneshnie_ _FPzakladki_ " + u.substring(16);
            lastBookm.logo_30x30 = _img("_OI_b/c.png");
            setTimeout(function () {
                PullDataFrom(addident("http://forkplayer.tv/xml/account.php?do=extbookm&dir=" + u + "&v=add&" + url), "extbookm")
            }, 550);
            return
        }
        if (u == "bookmarks/addnew") {
            u = "bookmarks/" + (sd.length + 1);
            kjtYpr.inf("Создана папка " + "Избранное " + (sd.length + 1), 1000);
            sd.push({
                "title": "Избранное " + (sd.length + 1),
                "type": "dir",
                "playlist_url": "bookmarks/" + (sd.length + 1)
            });
            kjtYpr.lIllOVRj11lO10Ypr("bookmarks", l10O0I11gdZlOOIIYpr(sd));
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("", u);
            return
        }
        if (u == "bookmarks/toolbar") {
            if (kjtYpr.GL.sidebar != "1") {
                rt_obj = str;
                ll0111l1wxUIOlO1lYpr(16, "_FPBookmark toolbar_ отключена в Настройках. Включить?");
                return
            }
            var exs = !1;
            for (var i = 0; i < sd.length; i++) {
                if (sd[i].playlist_url == u) exs = !0
            }
            if (!exs) {
                kjtYpr.inf("Создана папка " + "_FPBookmark toolbar_", 1000);
                sd.push({
                    "title": "_FPBookmark toolbar_",
                    "type": "dir",
                    "playlist_url": "bookmarks/toolbar"
                });
                kjtYpr.lIllOVRj11lO10Ypr("bookmarks", l10O0I11gdZlOOIIYpr(sd))
            }
        }
        for (var i = 0; i < sd.length; i++) {
            if (sd[i].playlist_url == u) {
                if (typeof (sd[i].channels) == "undefined") sd[i].channels = [];
                if (cmd != null) {
                    if (cmd == "count") return sd[i].channels.length
                    else if (cmd == "cmdRename") {
                        sd[i].title = str
                    } else if (cmd == "cmdUrlIcon") {
                        sd[i].logo_30x30 = str
                    } else if (cmd == "cmdSetIcon") {
                        sd[i].logo_30x30 = str;
                        kjtYpr.l110l1lIPuoaO0I0IOYpr("favorites");
                        setSelect(0)
                    } else if (cmd == "add") {
                        sd[i].channels.unshift(str);
                        kjtYpr.lIllOVRj11lO10Ypr("bookmarks", l10O0I11gdZlOOIIYpr(sd));
                        if (u != "bookmarks/toolbar") {
                            lastBookm.url = u;
                            lastBookm.title = sd[i].title;
                            if (typeof sd[i].logo_30x30 == "undefined") lastBookm.logo_30x30 = "";
                            else lastBookm.logo_30x30 = sd[i].logo_30x30
                        } else {
                            sdbar = null;
                            sidebar_show()
                        }
                        kjtYpr.inf("_FPDobavlenoV_ " + sd[i].title, 1000);
                        return
                    } else if (cmd == "cmdDel") {
                        if (str == -2) str = sdbarSel;
                        sd[i].channels.splice(str, 1);
                        kjtYpr.inf("Удалено!", 1000);
                        if (select > 0) select--
                    } else if (cmd == "alldel") {
                        sd.splice(i, 1);
                        kjtYpr.inf("Папка удалена!", 1000);
                        if (select > 0) select--
                    } else if (cmd == "bookmarkRename") {
                        sd[i].channels[select].title = str
                    }
                    kjtYpr.lIllOVRj11lO10Ypr("bookmarks", l10O0I11gdZlOOIIYpr(sd));
                    if (u == "bookmarks/toolbar") {
                        sdbar = null;
                        sidebar_show()
                    }
                    var sel = select;
                    if (sel >= 0) {
                        kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdReload");
                        kjtYpr.lIOIOIBu0mO11llO0Ypr(sel)
                    }
                    return
                }
                data.channels = sd[i].channels;
                break
            }
        }
    }
    if (data.channels.length == 0) {
        kjtYpr.inf("_FPZdesPusto_!", 1000);
        return
    }
    kjtYpr.l1IlIl01l0tUIl1IIYpr = u;
    kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id)
}
var l01IQlTho0O1lI1Ypr = null,
    listTimer = null,
    xhr = null,
    xhr2 = null,
    xhr_abort = !1,
    xml_vk_url, is_type = "",
    xml_live = !1,
    POST_S = "";

function lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, prs, l0Il01GzIvcIlllIYpr, request_id) {
    kjtYpr.typeSource = "";
    ll1lIOiIO0lO1IIIYpr = "";
    expChanged = 1;
    clearTimeout(l01IQlTho0O1lI1Ypr);
    is_type = "";
    torrentb64post = null;
    if (gV(ChSel, "local") == "directly" || gV(kjtYpr.global, "all_local") == "directly") l0Il01GzIvcIlllIYpr = -2;
    else if (l0Il01GzIvcIlllIYpr == null) l0Il01GzIvcIlllIYpr = 0;
    if (prs == null) POST_S = "";
    if (xml_url.indexOf("mylist") == 0) {
        kjtYpr.popUp("http://obovse.ru/RemoteForkPlayer_LG.zip<br><i>_FPZagruzhatListiMozhoS_ Remote Forkplayer!</i>");
        xml_url = "http://forkplayer.tv/xml/account.php?do=list"
    }
    if (!xml_url.match(/(alexkdpulg\.php|\/obovse\.ru\/)/) && xml_url.match(/^http/)) {
        var dm = xml_url.match(rCook);
        if (dm != null) {
            dm = dm[2];
            if (dm == "vivat" && typeof lO1lOlJvks1II11Ypr[dm] == "undefined" && kjtYpr.GL.vivatlogin != "") lO1lOlJvks1II11Ypr[dm] = {
                "vivatlogin": kjtYpr.GL.vivatlogin,
                "vivatpass": kjtYpr.GL.vivatpass
            };
            if (typeof lO1lOlJvks1II11Ypr[dm] != "undefined") {
                for (var i in lO1lOlJvks1II11Ypr[dm])
                    if (i.indexOf("replace") != 0) l00Q0OlutuW01I0Ypr += "&cookie[" + i + "]=" + encodeURIComponent(lO1lOlJvks1II11Ypr[dm][i]);
            }
        }
        if (dm == "") {}
    }
    if (xml_url.match(/^http:\/\/(spiderxml\.com|spider\.forkplayer\.tv)\/search/)) {
        readGl();
        l00Q0OlutuW01I0Ypr += "&cookie[GS.LOCAL]=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(gs.url))
    }
    if (xml_url.indexOf("payd=on") > 0) {
        for (var i in payd) {
            l00Q0OlutuW01I0Ypr += "&payd_" + i + "=" + encodeURIComponent(payd[i])
        }
    } else if (xml_url.indexOf("=payd_") > 0) {
        for (var i in payd) {
            xml_url = xml_url.replace("=payd_" + i, "=" + encodeURIComponent(payd[i]))
        }
        if (xml_url.indexOf("=payd_") > 0) {}
    } else {
        var ou = urlData(xml_url, sel, request_id);
        if (gV(ou) != "") xml_url = ou
    }
    if (xml_url == 1) return;
    try {
        if (typeof curCh()["js_url"] != "undefined") {
            clearInterval(kjtYpr.IntervalUpdateTime);
            clearInterval(kjtYpr.GlUpdateTime);
            AddToPage(curCh()["js_url"]);
            return
        }
    } catch (e) {}
    if (xml_url.indexOf("smarttv/api") == -1) {
        if (pl_serv > 0) xml_url = curCh()["playlist_url" + (1 + pl_serv)]
    }
    if (xml_url.indexOf("iptv://") == 0) {
        xml_url = "https://" + xml_url.substring(7);
        apijsUrl = xml_url;
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("provUser");
        if (typeof payd.user == "undefined") payd.user = "";
        if (typeof payd.passw == "undefined") payd.passw = "";
        if (payd.user != "") {
            kjtYpr.lIllOVRj11lO10Ypr("provUser", payd.user + "-1-" + payd.passw)
        } else if (payd.user == "" && s != "") {
            payd.user = s.split("-1-")[0];
            payd.passw = s.split("-1-")[1]
        }
        if (payd.user != "") {
            l00Q0OlutuW01I0Ypr += "&user=" + payd.user + "&passwd=" + payd.passw
        }
    } else apijsUrl = "";
    var orig_xml_url = xml_url;
    var ref = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    try {
        if (orig_xml_url == ref) {
            ref = insetIn(-2, "get", "url")
        }
    } catch (e) {}
    if (ref == "") ref = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    if (ref.indexOf("http") != 0 || ref.match(/(filmix)/)) ref = "";
    if (xml_url.indexOf("payd_storage") > 0) {
        var dm = xml_url.match(rCook);
        if (dm != null) {
            dm = dm[2]
        }
        var regexp = new RegExp("=(payd_storage.*?)(&|$|#)", "g");
        while ((ch = regexp.exec(orig_xml_url)) != null) {
            var tmp = "";
            if (lO1lOlJvks1II11Ypr[dm] != null)
                if (lO1lOlJvks1II11Ypr[dm][ch[1]] != null) tmp = lO1lOlJvks1II11Ypr[dm][ch[1]];
            xml_url = xml_url.replace(ch[1], tmp)
        }
    }
    if (prs == null && (app_cors || (kjtYpr.GL.remote >= 2 && kjtYpr.GL.remoteactive))) {
        var type = "";
        if (app_cors) {
            if (kjtYpr.series == "D" || kjtYpr.series == "C") type = "sams_d";
            else type = uaJ
        } else if (kjtYpr.GL.remoteip.indexOf(":8027") > 0) type = "curl_windows";
        else if (kjtYpr.GL.remoteip.indexOf(":8028") > 0) type = "curl_androind";
        if (l00Q0OlutuW01I0Ypr.indexOf("&cors=") == -1) l00Q0OlutuW01I0Ypr += "&cors=" + type
    }
    if (oID != "" && l00Q0OlutuW01I0Ypr.indexOf("&oID=") == -1) l00Q0OlutuW01I0Ypr += "&oID=" + oID;
    if (l00Q0OlutuW01I0Ypr.indexOf("&hw=" + countHw) == -1) l00Q0OlutuW01I0Ypr += "&hw=" + countHw;
    try {
        if (curCh()["local"] == "public") {
            // PullDataFrom("http://185.158.114.122/obovse.ru/smarttv/alltop.php?id=addurl&u=" + encodeURIComponent(xml_url) + "&" + l00Q0OlutuW01I0Ypr)
            PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/alltop.php?id=addurl&u=" + encodeURIComponent(xml_url) + "&" + l00Q0OlutuW01I0Ypr)
        }
        if (curCh()["local"] == "direct") l00Q0OlutuW01I0Ypr = ""
    } catch (e) {};
    if (xml_url.match(/(pastebin\.com|#direct)/)) l00Q0OlutuW01I0Ypr = "";
    if (l00Q0OlutuW01I0Ypr == "") {} else if ((xml_url + l00Q0OlutuW01I0Ypr).indexOf("?") == -1) l00Q0OlutuW01I0Ypr = "?" + l00Q0OlutuW01I0Ypr;
    else if (l00Q0OlutuW01I0Ypr.indexOf("&") != 0 && l00Q0OlutuW01I0Ypr.indexOf("?") != 0) l00Q0OlutuW01I0Ypr = "&" + l00Q0OlutuW01I0Ypr;
    var addsl = 0;
    if (l0Il01GzIvcIlllIYpr == -1) {
        addsl = 1;
        l0Il01GzIvcIlllIYpr = !1;
        url = xml_url + "/" + l00Q0OlutuW01I0Ypr
    } else if (xml_url.indexOf("#") > 0) {
        var url = xml_url.replace("#", l00Q0OlutuW01I0Ypr + "#")
    } else url = xml_url + l00Q0OlutuW01I0Ypr;
    if (l0Il01GzIvcIlllIYpr != -2) {
        if (timestamp > 2 && (xml_url.indexOf("sp-social.ru") > 0 || xml_url.indexOf("smartportaltv.ru") > 0) && !l0Il01GzIvcIlllIYpr && Math.random() > 0.93) l0Il01GzIvcIlllIYpr = !0;
        if (l0Il01GzIvcIlllIYpr) {
            if (xml_url.indexOf("sp-social.ru") > 0 || xml_url.indexOf("smartportaltv.ru") > 0) {
                // if (timestamp > 2) var sr = "185.158.114.122/obovse.ru";
                if (timestamp > 2) var sr = "127.0.0.1/obovse.ru";
                // else sr = "85.17.30.89/obovse.ru"
                else sr = "127.0.0.1/obovse.ru"
            } else sr = lI101lOIQOlTlQ10I1Ypr;
            var u1 = url.replace("&fastremote=1", "").replace(/\|/g, "%7C");
            if (l00Q0OlutuW01I0Ypr != "") {
                if (u1.indexOf("#") > 0) {
                    u1 = u1.replace("#", "&lip=" + ipG + "#")
                } else u1 += "&lip=" + ipG
            }
            if (!app_cors && kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) {
                url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent("curl -L \"" + u1 + "\"" + (ref != "" ? " -H \"Save-Data: " + ref + "\"" : "") + " -H \"User-Agent: " + navigator.userAgent + "\"");
                statusbar(url, "link")
            } else url = "http://" + sr + "/alexkdpulg.php?list=" + encodeURIComponent(u1) + "&" + l00Q0OlutuW01I0Ypr
        }
        if (url.indexOf("php?bylist=") != -1) {
            // url = url.replace("//obovse.ru", "//185.158.114.122/obovse.ru")
            url = url.replace("//obovse.ru", "//127.0.0.1/obovse.ru")
        } else if (ServerFromList != "" && url.indexOf("bobfilms.php") == -1 && url.indexOf("tv/wlist.php") == -1 && url.indexOf("alexkdpulg.php?list=") == -1 && url.indexOf("mylist") == -1 && url.indexOf("smarttv/api") == -1) {
            url = url.replace("//obovse.ru", "//" + ServerFromList)
        }
    }
    if (url.indexOf("tv/wlist.php") > -1) {
        kjtYpr.popUp("Fork Store App Market<br>_FPPrilUstSh_")
    }
    if (prs == null) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1)
    }
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (request_id != kjtYpr.REQUEST_ID) {
            return
        }
        if (pl_count > 1) kjtYpr.inf("Ист. " + (1 + pl_serv) + "/" + pl_count + "");
        if (xhr.readyState == 4) {
            $_("popUp").style.display = "none";
            clearTimeout(l01IQlTho0O1lI1Ypr);
            clearTimeout(tTimer);
            try {
                if (platform == "sams") {
                    if (xhr.getResponseHeader("Location") != "undefined" && xhr.getResponseHeader("Location") !== null) {
                        kjtYpr.inf("Moved to " + xhr.getResponseHeader("Location"), 1200)
                    }
                }
            } catch (e) {}
            if (xhr.status == 200) {
                lll0I0ll0O01Ypr(xhr.responseText, xml_url, l00Q0OlutuW01I0Ypr, sel, orig_xml_url, l0Il01GzIvcIlllIYpr, request_id)
            } else if (!aborted) {
                if (xhr.status == 301 || xhr.status == 302) kjtYpr.inf("Ошибка " + xhr.status, 1500);
                if (!is_ifr()) kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                if (xhr.status == 0 && !l0Il01GzIvcIlllIYpr && !addsl) {
                    if (xml_url.match(/\/\/[^\/]+(\/[^\.\/]+)?$/)) {
                        xhr = null;
                        lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, prs, -1, request_id);
                        return
                    }
                }
                if (xhr.status == 0 && !is_directly(url, l0Il01GzIvcIlllIYpr)) {
                    xhr = null;
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
                    try {
                        if (curCh()["local"] == "direct") {
                            lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, prs, 1, request_id);
                            return
                        }
                    } catch (e) {}
                    lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, prs, 1, request_id);
                    return
                } else if (!is_directly(url, l0Il01GzIvcIlllIYpr) && toploading != -1 && apijsUrl == "") {
                    xhr = null;
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
                    lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, prs, 1, request_id);
                    return
                } else {
                    if (!is_ifr()) {
                        var prev_cache = l1l0IOIl_puQl1I1IYpr(kjtYpr.lIlOOIIlIEIzH1l1OIYpr("prev_cache"));
                        if (prev_cache != null) {
                            if (typeof prev_cache[orig_xml_url] != "undefined") {
                                statusbar("Загрузка с кеша... " + orig_xml_url, "url");
                                lll0I0ll0O01Ypr(l10O0I11gdZlOOIIYpr(prev_cache[orig_xml_url]), xml_url, l00Q0OlutuW01I0Ypr, sel, orig_xml_url, null, request_id);
                                return
                            }
                        }
                        kjtYpr.inf("_FPOshibkaObrabotki_: " + xhr.status, 1500);
                        xhr = null;
                        ll1lIOiIO0lO1IIIYpr = "";
                        kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
                    }
                }
                if (is_ifr()) {
                    kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
                }
            }
        }
    };
    var atime = Math.ceil(30000 / pl_count);
    if (pl_serv == pl_count - 1 && pl_count > 1) atime += 9000;
    if (atime < 8000) atime = 8000;
    if (gV(ChSel, "timeout") > 0) atime = gV(ChSel, "timeout") * 1000;
    aborted = !1;
    l01IQlTho0O1lI1Ypr = setTimeout(function () {
        if (xhr != null) {
            aborted = !0;
            xhr.abort();
            xhr = null;
            if (pl_serv < pl_count - 1) {
                pl_serv++;
                lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, null, null, request_id);
                kjtYpr.inf('Загрузка с источника №' + (1 + pl_serv), 1500, 'yellow');
                return
            }
        }
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        if (!is_ifr()) {
            kjtYpr.inf('_FPServer not response_', 1500, 'yellow')
        }
    }, atime);
    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("cmdSpider|") == 0 && timestamp == 0) {
        tTimer = setTimeout(function () {
            if (user == null) kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + "Войдите в аккаунт ForkPlayer, это поможет не потерять ваши данные и добавит комфорта в пользовании приложением!<br>", 7000)
        }, 1500)
    } else if (url.match(/(obovse\.ru|lnka\.ru)\//) && url.indexOf("search") == -1 && timestamp == 0) {
        tTimer = setTimeout(function () {
            if (user == null) kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + "Войдите в аккаунт ForkPlayer, это поможет не потерять ваши данные и добавит комфорта в пользовании приложением!", 7000)
        }, 5000)
    }
    if (gV(ChSel, "infolink") != "" && !is_ifr()) var lUrl = ChSel.infolink;
    else lUrl = url;
    statusbar(lUrl, "link");
    breakScreen(getInfoUrl(lUrl));
    if (platform != "sams") {
        if (url.indexOf("http://vk.com") == 0) {
            lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, prs, !0, request_id);
            return
        }
    }
    if (cmdReload && url.indexOf("&refresh=true") == -1 && url.match(/(obovse\.ru|forkplayer\.tv|spiderxml\.com)/)) {
        cmdReload = !1;
        var xurl = url + "&refresh=true"
    } else xurl = url;
    xurl = xurl.replace(/#submenu\d+$/, "");
    if (url.indexOf("=postmd5") > 0) {
        if (xurl.indexOf("#POST") > 0) xurl += "&" + "postmd5=" + encodeURIComponent(ChSel.postmd5);
        else xurl += "#POSTpostmd5=" + encodeURIComponent(ChSel.postmd5)
    }
    if (prs != null) {
        xhr.open('POST', xurl + "&rparse=" + encodeURIComponent(prs), !0);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        try {
            if (app_cors && ref != "" && l00Q0OlutuW01I0Ypr != "") xhr.setRequestHeader('Save-Data', ref)
        } catch (e) {}
        xhr.send("remoteparse=" + encodeURIComponent(POST_S))
    } else if (torrentb64post != null) {
        xhr.open('POST', xurl, !0);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.send(torrentb64post)
    } else if (xurl.indexOf("#POST") > 0) {
        xhr.open('POST', xurl.split("#POST")[0], !0);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.send(xurl.split("#POST")[1])
    } else {
        if ((platform == "android-device" && kjtYpr.build >= 5.1 && kjtYpr.build < 5.6) || kjtYpr.build >= 6.0 || xml_url.indexOf("http://remotefo.rk/treeview") == 0) {
            waitcurl("init", request_id, "lll0I0ll0O01Ypr");
            waitc.xml_url = xml_url;
            waitc.l00Q0OlutuW01I0Ypr = l00Q0OlutuW01I0Ypr;
            waitc.sel = sel;
            waitc.orig_xml_url = orig_xml_url;
            if (xml_url.indexOf("http://remotefo.rk/treeview") == 0) s = andr.cmd2(xurl, waitc.mode);
            else {
                s = andr.cmd2("waitcurl -i -L \"" + xurl + "\"" + (ref != "" ? " -H \"Save-Data: " + ref + "\"" : "") + " -H \"User-Agent: Mozilla/5.0 (Linux; Tizen 2.3; SmartHub; SMART-TV; SmartTV; U; Maple2012) AppleWebKit/aForkPlayer/538.1+ (KHTML, like Gecko) TV Safari/538.1+\"", waitc.mode)
            }
            return
        }
        xhr.open('GET', xurl, !0);
        if (!is_local(xurl) && kjtYpr.GL.headers > 0 && ref != "") {
            try {
                if (platform == "sams" && !box_low2 && !FgetSetting(12) && l00Q0OlutuW01I0Ypr != "") xhr.setRequestHeader('Save-Data', ref);
                else xhr.setRequestHeader('Accept', ref)
            } catch (e) {}
        }
        xhr.send()
    }
}
var waitcnum = 1,
    waitc = {
        "start": !1,
        "mode": null,
        "timer": null,
        "cmd": "",
        "xml_url": "",
        "l00Q0OlutuW01I0Ypr": "",
        "sel": 0,
        "orig_xml_url": "",
        "data_parse": "",
        "l0Il01GzIvcIlllIYpr": null
    };

function waitcurl(s, mode, cmd, request_id) {
    clearTimeout(waitc.timer);
    if (s == "init") {
        waitc = {
            "start": !0,
            "request_id": request_id,
            "cmd": cmd,
            "mode": mode,
            "response": "",
            "xml_url": "",
            "l00Q0OlutuW01I0Ypr": "",
            "sel": 0,
            "orig_xml_url": "",
            "data_parse": "",
            "timer": null,
            "l0Il01GzIvcIlllIYpr": null
        };
        waitc.timer = setTimeout("waitcurl('abort');", 25000)
    } else if (s == "abort") {
        waitcurl(null);
        waitc.mode = -1
    } else {
        if (!waitc.start) {
            return
        }
        waitc.start = !1;
        if (s == null) s = {
            "response": ""
        };
        if (gV(s, "type") == "base64") {
            function b64DecodeUnicode(str) {
                str = str.replace(/\n/g, "");
                return decodeURIComponent(atob(str).split('').map(function (c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
                }).join(''))
            }
            try {
                s.headers = b64DecodeUnicode(s.headers);
                s.response = b64DecodeUnicode(s.response)
            } catch (e) {
                kjtYpr.popUp("waitcurl decode " + e.message, 2000);
                s.headers = atob(s.headers);
                s.response = atob(s.response)
            }
        }
        if (waitc.cmd == "lll0I0ll0O01Ypr") {
            if (mode != null && waitc.mode != mode) {
                return
            }
            lll0I0ll0O01Ypr(s.response, waitc.xml_url, waitc.l00Q0OlutuW01I0Ypr, waitc.sel, waitc.orig_xml_url, waitc.l0Il01GzIvcIlllIYpr, incID())
        }
        if (waitc.cmd == "remote") {
            if (mode != null && waitc.mode != mode) {
                return
            }
            if (s.response.length > 10) {
                PullDataFromPost("http://remote.forkplayer.tv/smarttv/api.php?directandr=1&xhr_referer=" + xhr_referer + "&country=" + ipCountry + "&type=android-waitcurl&plat" + "form=" + platform + "&do=xhrremote2&v=post&u=" + encodeURIComponent(waitc.url), "s=" + encodeURIComponent(s.response), "xhrremote", waitc.request_id)
            }
        }
        if (waitc.cmd == "selfparse") {
            if (mode != null && waitc.mode != mode) {
                return
            }
            if (s.response.indexOf('"parse":"') > 0) {
                return
            }
            POST_S = s.response;
            lOOlIII1usp1UIlI1lYpr(waitc.xml_url, waitc.l00Q0OlutuW01I0Ypr, waitc.sel, waitc.data_parse, waitc.l0Il01GzIvcIlllIYpr, incID())
        }
    }
}

function l1OOIQIueDlPQII1Ypr() {
    try {
        var len = 0,
            free = 0,
            after = 0;
        for (var key in localStorage) {
            if (key.indexOf("enteres") != -1 || key.indexOf("xml") != -1 || key.indexOf("settings") != -1 || key.indexOf("url") != -1 || key.indexOf("search") != -1) continue;
            else {
                localStorage.removeItem(key)
            }
        }
        setTimeout("kjtYpr.inf('Clear localStorage');", 1000)
    } catch (e) {
        kjtYpr.llOO11QYbl0IO1Ypr("LOG:ErrClear:" + e)
    }
}

function zx(data) {
    if (typeof data != "object") {
        kjtYpr.inf("_FPOshibkaParsPl_!", 2000);
        return
    }
    if (data.channels.length == 0) {
        kjtYpr.inf("_FPZdesPusto_!", 1300);
        return
    }
    kjtYpr.l1IlIl01l0tUIl1IIYpr = kjtYpr.js_xml;
    kjtYpr.l00100lIKlBWw1lllIlYpr(data)
}
kjtYpr.llOO11QYbl0IO1Ypr = function (e) {
    return;
    if (typeof e == 'object')
        for (i in e) s += e[i].toString();
    else s = e.toString();
    var url = "http://obovse.ru/forkplayer/ind.php?do=error&e=" + s.replace(/\n/g, "").replace(/\r/g, "");
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = !0;
    script.src = url;
    script.onload = function () {};
    document.getElementsByTagName('head')[0].appendChild(script)
};
kjtYpr.sendInfo = function (e) {
    var url = "http://obovse.ru/forkplayer/ind.php?do=error&e=info-" + e.replace(/\n/g, "").replace(/\r/g, "");
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = !0;
    script.src = url;
    script.onload = function () {};
    document.getElementsByTagName('head')[0].appendChild(script)
};

function insetIn(l, k, v, s, numinset) {
    if (numinset == null) numinset = insetActive;
    if (k == "save") {
        var ch = ChSel;
        if (ch != null && typeof ch != "undefined") {
            if (ch.playlist_url != "") {
                var n = inset["tab" + numinset].length - 1 + l;
                if (gV(kjtYpr.global, "all_local") != "") inset["tab" + numinset][n].l = gV(kjtYpr.global, "all_local");
                if (gV(ch, "local") != "") inset["tab" + numinset][n].l = ch.local;
                if (typeof ch.parser_orig != "undefined" && ch.parser_orig != "" && typeof ch.playlist_url_orig != "undefined") {
                    inset["tab" + numinset][n].url = ch.playlist_url_orig;
                    inset["tab" + numinset][n].p = ch.parser_orig;
                    if (ch.mb_parser != "") inset["tab" + numinset][n].mb = ch.mb_parser
                }
            }
        }
        if (inset["tabPriv" + insetActive]) return;
        else return kjtYpr.lIllOVRj11lO10Ypr("url" + numinset, l10O0I11gdZlOOIIYpr(inset["tab" + numinset]))
    }
    if (inset["tab" + numinset] == null) {
        inset["tab" + numinset] = []
    }
    var n = inset["tab" + numinset].length + l;
    if (k == "getobj") {
        return inset["tab" + numinset][n]
    }
    if (k == "get") {
        if (typeof inset["tab" + numinset][n] == 'undefined') return "";
        else if (typeof inset["tab" + numinset][n][v] == 'undefined') return "";
        else return inset["tab" + numinset][n][v]
    }
    if (k == "put") {
        inset["tab" + numinset][n][v] = s;
        if (inset["tabPriv" + insetActive]) return;
        else kjtYpr.lIllOVRj11lO10Ypr("url" + numinset, l10O0I11gdZlOOIIYpr(inset["tab" + numinset]))
    }
    if (n < 0) return "";
    if (l == -2 && k == "s") {
        if (typeof inset["tab" + numinset][n][k] != "undefined") return
    }
    inset["tab" + numinset][n][k] = v
}
var dataconfirm;

function handlerData(data, orig_xml_url) {
    try {
        if (typeof data.setcookie != "undefined") {
            var dm = orig_xml_url.match(rCook);
            if (dm != null) {
                dm = dm[2]
            } else dm = "localhost";
            for (var i in data.setcookie) {
                if (typeof lO1lOlJvks1II11Ypr[dm] == "undefined") lO1lOlJvks1II11Ypr[dm] = {};
                lO1lOlJvks1II11Ypr[dm][i] = data.setcookie[i]
            }
            if (!inset["tabPriv" + insetActive]) kjtYpr.lIllOVRj11lO10Ypr("storage", l10O0I11gdZlOOIIYpr(lO1lOlJvks1II11Ypr), !0)
        }
        if (orig_xml_url.indexOf("http://forkplayer.tv/xml/account.php?act=exit") == 0 || orig_xml_url.indexOf("http://forkplayer.tv/xml/account.php?act=submit") == 0) {
            updateLogin();
            if (kjtYpr.GL.ts == 1) autoexport()
        }
        if (typeof data.confirm != "undefined") {
            dataconfirm = data.confirm.channel;
            var dm = orig_xml_url.match(rCook);
            if (dm != null) {
                data.confirm.title = "<div style='font-weight: bold;background: #3b3e40;'>" + dm[2] + "</div>" + data.confirm.title
            }
            ll0111l1wxUIOlO1lYpr(12, data.confirm.title);
            return 1
        }
        if (gV(data, "info") != "") {
            var dm = orig_xml_url.match(rCook);
            if (dm != null) {
                data.info = "<div style='font-weight: bold;background: #3b3e40;'>" + dm[2] + "</div>" + data.info
            }
            ll0111l1wxUIOlO1lYpr(53, data.info);
            if (data.channels.length < 1) return 1
        }
        if (typeof data.notify != "undefined") {
            var dm = orig_xml_url.match(rCook);
            if (dm != null) {
                data.notify = dm[2] + ":" + data.notify
            }
            kjtYpr.inf(data.notify, 2200)
        }
        if (typeof data.cmd != "undefined") {
            var brea = 0;
            if (data.cmd.indexOf("setID(") >= 0) {
                var m = data.cmd.match(/setID\((.*?),(.*?)\)/);
                if (m == null) kjtYpr.inf("Error format setID. Must be setID(newID,userSignature)", 1500);
                else if (user == null) kjtYpr.inf("Error setID. Must be logged in ForkPlayer", 1500);
                else if (user.md5 != m[2]) kjtYpr.inf("Error userSignature setID", 1500);
                else {
                    kjtYpr.nmc = m[1];
                    ll0111l1wxUIOlO1lYpr(55, "Внимание! Если идентификатор " + kjtYpr.nmc + " все еще используется на каком-то другом устройстве то оно может потерять доступ к ForkPlayer. <br> Сменить идентификатор этого устройства на " + kjtYpr.nmc)
                }
                return 1
            }
            if (data.cmd.indexOf("historyclear(") >= 0) {
                var m = data.cmd.match(/historyclear\((.*?),(.*?)\)/);
                if (m == null) kjtYpr.inf("Error format historyclear. Must be historyclear(days,userSignature)", 1500);
                else if (user == null) kjtYpr.inf("Error historyclear. Must be logged in ForkPlayer", 1500);
                else if (user.md5 != m[2]) kjtYpr.inf("Error userSignature historyclear", 1500);
                else {
                    if (m[1] == -1) ll0I1lllpOugKllQ11Ypr = [];
                    else {
                        var nh = [];
                        for (var i in ll0I1lllpOugKllQ11Ypr) {
                            if (ll0I1lllpOugKllQ11Ypr[i].time < T.timestamp - 3600 * 24 * m[1]) nh.push(ll0I1lllpOugKllQ11Ypr[i])
                        }
                        ll0I1lllpOugKllQ11Ypr = nh;
                        kjtYpr.lIllOVRj11lO10Ypr("history", l10O0I11gdZlOOIIYpr(ll0I1lllpOugKllQ11Ypr))
                    }
                }
            }
            if (data.cmd.indexOf("historyback(") >= 0) {
                var m = data.cmd.match(/historyback\((.*?)\)/)[1];
                for (var i = 0; i < m; i++) {
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                    if (data.cmd.indexOf("reload(") >= 0) kjtYpr.lI11111bPNQ0III1Ypr(null, null, 1);
                    else tmf()
                }
                return 1
            }
            if (data.cmd.indexOf("info(") >= 0) {
                var m = data.cmd.match(/info\((.*?)\)/)[1];
                ll0111l1wxUIOlO1lYpr(53, m);
                return 1
            }
            if (data.cmd.indexOf("removeHist(") >= 0) {
                var m = data.cmd.match(/removeHist\((.*?)\)/)[1]
            }
            if (data.cmd.indexOf("settitle(") >= 0) {
                var m = data.cmd.match(/settitle\((.*?),(.*?)\)/);
                kjtYpr.channels[m[1]].title = m[2];
                ll1lIOiIO0lO1IIIYpr = "";
                kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
            }
            if (data.cmd.indexOf("setdescription(") >= 0) {
                var m = data.cmd.match(/setdescription\((.*?),(.*?)\);/);
                kjtYpr.channels[m[1]].description = m[2];
                ll1lIOiIO0lO1IIIYpr = "";
                kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
            }
            if (data.cmd.indexOf("reload(") >= 0) {
                var m = data.cmd.match(/reload\((.*?)\)/)[1];
                if (m != "" && m > 0) {
                    var xt = kjtYpr.l1IlIl01l0tUIl1IIYpr;
                    setTimeout(function () {
                        if (xt == kjtYpr.l1IlIl01l0tUIl1IIYpr) {
                            insetIn(-1, "s", select);
                            kjtYpr.lI11111bPNQ0III1Ypr(!0, !0)
                        }
                    }, 1000 * m)
                } else {
                    insetIn(-1, "s", select);
                    kjtYpr.lI11111bPNQ0III1Ypr(!0, !0)
                }
                return 1
            }
            if (data.cmd.indexOf("stop();") >= 0) {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                return 1
            }
            if (brea) return 1
        }
        if (typeof data.error != "undefined") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
            kjtYpr.inf(data.error, 2200);
            return 1
        }
    } catch (e) {
        kjtYpr.popUp("Error data<br>" + e.message, 2200)
    }
    return 0
}
var favarray = null;

function urlData(xml_url, sel, request_id) {
    try {
        if (l1IOIIz1l0Ol110Ypr(xml_url)) {
            kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url;
            var data = {};
            kjtYpr.global = {};
            data = getVars("about:blank");
            if (data.channels == null) {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
                kjtYpr.inf("_FPIzvFailovNo_!", 2300, 'yellow');
                return
            }
            kjtYpr.l00100lIKlBWw1lllIlYpr(data, sel, request_id);
            kjtYpr.Password = "";
            return 1
        } else if (xml_url.indexOf("alert(") == 0 || xml_url.indexOf("javascript:alert(") == 0) {
            ll0111l1wxUIOlO1lYpr(53, xml_url.match(/alert\((.*)\)/)[1]);
            return 1
        } else if (xml_url == "confirm") {
            dataconfirm = {
                "playlist_url": ChSel.confirm[0]
            };
            ll0111l1wxUIOlO1lYpr(12, ChSel.description);
            return 1
        } else if (xml_url.indexOf("#archive|") > 0) {
            kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url;
            var c = xml_url.split("#archive|");
            var d = c[1].split("|");
            var ch = [];
            insetIn(-1, "s", select);
            insetIn(0, "save");
            if (d[1] == "") {
                ch.push({
                    "title": "Нету телепрограммы для канала! "
                });
                data = {
                    "title": "_FPArchive_ " + d[0],
                    "channels": ch
                };
                kjtYpr.l00100lIKlBWw1lllIlYpr(data, 0, request_id, "ok")
            } else {
                if (d[1].indexOf("xmltv-") == 0) {
                    if (typeof (JtvSRC) == "undefined") JtvSRC = {};
                    JtvSRC[md5(c).substr(0, 7)] = c;
                    // var u = "http://195.88.208.101/obovse.ru/smarttv/api.php?do=xmltv&cmd=epg&src=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(JtvSRC)) + "&mode=full&get=" + d[1] + "&start=" + d[2]
                    var u = "http://127.0.0.1/obovse.ru/smarttv/api.php?do=xmltv&cmd=epg&src=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(JtvSRC)) + "&mode=full&get=" + d[1] + "&start=" + d[2]
                // } else u = "http://85.17.30.89/common/sip.php?do=full&get=" + encodeURIComponent(d[1]) + "&start=" + d[2];
            } else u = "http://127.0.0.1/common/sip.php?do=full&get=" + encodeURIComponent(d[1]) + "&start=" + d[2];
                xhrt = new XMLHttpRequest();
                ch.description += "<center><img id='bloading' src='" + _img("_OI_b/loading.gif") + "' width=15 /></center>";
                if (handler != "vk") lO10OIOlxzlO100OIYpr("infoList", ch.description);
                xhrt.onreadystatechange = function () {
                    if (xhrt.readyState == 4) {
                        if (request_id != null && request_id != kjtYpr.REQUEST_ID) {
                            if (ttmac) kjtYpr.popUp("getArc DIED OLD REQ ID " + request_id + " < " + kjtYpr.REQUEST_ID, 1000);
                            return
                        }
                        var ch = [];
                        var m = l1l0IOIl_puQl1I1IYpr(xhrt.responseText);
                        if (m != null) {
                            if (typeof m[d[1]] == "object") {
                                nj = "";
                                while (typeof m[d[1]]["title" + nj] != "undefined") {
                                    var au = c[0];
                                    if (d[3] == "default" && d[4] != "") {
                                        au = d[4].replace("${start}", m[d[1]]["start" + nj]).replace("${timestamp}", T.timestamp).replace("${offset}", T.timestamp - m[d[1]]["start" + nj])
                                    } else if (d[3] == "append" && d[4] != "") {
                                        au += d[4].replace("${start}", m[d[1]]["start" + nj]).replace("${timestamp}", T.timestamp).replace("${offset}", T.timestamp - m[d[1]]["start" + nj])
                                    } else if (d[3] == "flussonic" || d[3] == "fs" || d[3] == "flussonic-hls") {
                                        au = au.replace(/([^\?]*\/)([^\?]*?)(\.|\?|$)(.*)/, "$1$2-" + m[d[1]]["start" + nj] + "-10800$3$4")
                                    } else if (d[3] == "shift" || 1) {
                                        if (c[0].indexOf("?") > 0) au += "&";
                                        else au += "?";
                                        au += "utc=" + m[d[1]]["start" + nj] + "&lutc=" + T.timestamp
                                    }
                                    if (T.timestamp > m[d[1]]["start" + nj])
                                        ch.unshift({
                                            "title": dt(m[d[1]]["start" + nj], !0) + " - " + dt(m[d[1]]["end" + nj]) + "</span> " + m[d[1]]["title" + nj],
                                            "stream_url": au,
                                            "source_url": c[0],
                                            "catchup": d[3],
                                            "catchup_source": d[4],
                                            "catchup_days": (-1 * d[2]),
                                            "arcCurTime": m[d[1]]["start" + nj]
                                        });
                                    if (nj == "") nj = 2;
                                    else nj++
                                }
                                kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url + "|"
                            }
                        }
                        var au = c[0];
                        var def15 = T.timestamp - 900;
                        if (d[3] == "default" && d[4] != "") {
                            au = d[4].replace("${start}", def15).replace("${timestamp}", T.timestamp).replace("${offset}", T.timestamp - def15)
                        } else if (d[3] == "append" && d[4] != "") {
                            au += d[4].replace("${start}", def15).replace("${timestamp}", T.timestamp).replace("${offset}", def15)
                        } else if (d[3] == "flussonic" || d[3] == "fs" || d[3] == "flussonic-hls") {
                            au = au.replace(/([^\?]*\/)([^\?]*?)(\.|\?|$)(.*)/, "$1$2-" + def15 + "-10800$3$4")
                        } else if (d[3] == "shift" || 1) {
                            if (c[0].indexOf("?") > 0) au += "&";
                            else au += "?";
                            au += "utc=" + def15 + "&lutc=" + T.timestamp
                        }
                        ch.unshift({
                            "title": "15 минут назад",
                            "stream_url": au,
                            "source_url": c[0],
                            "catchup": d[3],
                            "catchup_source": d[4],
                            "catchup_days": (-1 * d[2]),
                            "arcCurTime": def15
                        });
                        data = {
                            "title": "_FPArchive_ " + d[0],
                            "channels": ch
                        };
                        kjtYpr.l00100lIKlBWw1lllIlYpr(data, 0, request_id, "ok")
                    }
                };
                xhrt.open('GET', u, !0);
                xhrt.send();
                lO10OIOlxzlO100OIYpr("leftHalf", "<div style='width: " + css_w(633) + "px;height:" + css_wh(640) + "px;position:absolute;left:" + css_w(15) + "px; top:" + css_wh(48) + "px;overflow:hidden;'><center><img src='" + _img("_OI_b/loading.gif") + "' width=" + css_w(25) + " /></center></div>")
            }
            return 1
        } else if (xml_url.indexOf("AddFavorite(") == 0) {
            var m = xml_url.match(/AddFavorite\((.*?)\)/)[1];
            if (m == "") {
                l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr + 1;
                kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
                kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
                kjtYpr.l1l0l1OvIo1ll001lYpr("favmenu")
            } else {
                m = m.split(",");
                if (m.length == 3) {
                    favarray = {};
                    favarray.stream_url = "";
                    favarray.search_on = "";
                    favarray.playlist_url = m[2];
                    favarray.title = m[0];
                    favarray.logo_30x30 = m[1];
                    l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr + 1;
                    kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
                    kjtYpr.lIOIOIBu0mO11llO0Ypr(-1);
                    kjtYpr.l1l0l1OvIo1ll001lYpr("favmenu")
                } else kjtYpr.inf("Error format! Must be AddFavorite(title,icon,url); or AddFavorite();", 2000)
            }
            return 1
        } else if (xml_url.indexOf("AddSearch(") == 0) {
            var m = xml_url.match(/AddSearch\((.*?)\)/)[1];
            m = m.split(",");
            if (m.length == 3) {
                lOIO0ljlJOI0l1Ypr(m[0], m[1], m[2])
            } else kjtYpr.inf("Error format! Must be AddSearch(title,icon,url search);", 2000);
            return 1
        } else if (xml_url.indexOf("app://") == 0) {
            ll0111l1wxUIOlO1lYpr(11, "Установить данное приложение?<br>Приложение появится в смартхаб");
            return 1
        } else if (xml_url.indexOf("cmdsetWeatherId") == 0) {
            kjtYpr.GL.weather = xml_url.substring(15);
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            $_("weather").style.display = "none";
            updateWeather();
            kjtYpr.lOlIOOWs1uO000lYpr();
            return 1
        } else if (xml_url.indexOf("extensions://") == 0) {
            kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url;
            kjtYpr.l00100lIKlBWw1lllIlYpr({
                "channels": [{
                    "title": "Run extension...",
                    "playlist_url": xml_url
                }]
            }, select, request_id);
            $_("ext").style.display = "block";
            if (xml_url.indexOf("xsmart") > 0) lO10OIOlxzlO100OIYpr("ext", '<iframe id="frame-id" style="margin-top: 0px; border:none; -webkit-transform: scaleX(1.13);" width="1280" height="640" src="' + xml_url.split("extensions://")[1] + '" />');
            else lO10OIOlxzlO100OIYpr("ext", '<iframe id="frame-id" style="margin-top: 0px; border:none; " width="1280" height="640" src="' + xml_url.split("extensions://")[1] + '" />');
            $(document.getElementById('frame-id').contentWindow.document).keyup(function (e) {
                if (e.keyCode == 37) {
                    i--
                }
            });
            kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + "Запущено расширение<br>" + "Меню - Закрыть расширение<br>" + "CH UP / CH DOWN - Открыть другую вкладку" + "", 2000);
            ext_focus();
            return 1
        } else if (xml_url.indexOf("bookmarks") == 0) {
            xhr_bookmark(xml_url, null, null, null, request_id);
            return 1
        } else if (xml_url.indexOf("payd_") == 0) {
            if (xml_url.indexOf("payd_storage") == 0) {
                var dm = kjtYpr.l1IlIl01l0tUIl1IIYpr.match(rCook);
                if (dm != null) {
                    dm = dm[2]
                }
                if (lO1lOlJvks1II11Ypr[dm] == null) lO1lOlJvks1II11Ypr[dm] = {};
                lO1lOlJvks1II11Ypr[dm][xml_url] = kjtYpr.l11l101lxO_tl1IlIYpr;
                kjtYpr.lIllOVRj11lO10Ypr("storage", l10O0I11gdZlOOIIYpr(lO1lOlJvks1II11Ypr), !0)
            }
            if (kjtYpr.l11l101lxO_tl1IlIYpr != "" || 1) payd[curCh()["playlist_url"].substring(5)] = kjtYpr.l11l101lxO_tl1IlIYpr;
            else if (curCh()["value"] != "") payd[curCh()["playlist_url"].substring(5)] = curCh()["value"];
            var t = curCh("title").split(":");
            if (gV(curCh(), "type") == "password") curCh("title", t[0] + ":" + kjtYpr.l11l101lxO_tl1IlIYpr.replace(/./g, "*"));
            else curCh("title", t[0] + ":" + kjtYpr.l11l101lxO_tl1IlIYpr);
            curCh()["value"] = kjtYpr.l11l101lxO_tl1IlIYpr;
            kjtYpr.l11l101lxO_tl1IlIYpr = "";
            ll1lIOiIO0lO1IIIYpr = Math.random();
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            return 1
        } else if (xml_url.indexOf("game://") == 0) {
            var c = xml_url.substring(7);
            tgame = c;
            setTimeout(function () {
                eval(c + "();");
                kjtYpr.popUp("<b>Управление:</b><br>ОК: Вверх<br>Вниз: Снижение")
            }, 300);
            return 1
        } else if (xml_url.indexOf("html://") == 0) {
            ll0111l1wxUIOlO1lYpr(61, "Внимание! ForkPlayer будет закрыт, вы уверены что хотите открыть страницу<br><b>" + xml_url.substring(7) + "</b>?");
            return 1
        } else if (xml_url.indexOf("xml://") == 0) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            var c = xml_url.substring(6);
            if (is_tizen || 1) PullDataFrom(c, "xml");
            else if (platform == "sams") {
                c = c.replace("/dtv/usb/", "$USB_DIR/");
                kjtYpr.popUp("Open file<br>" + c, 2000);
                var fileSystemObj = new FileSystem();
                var fileObj = fileSystemObj.openCommonFile(c, 'r');
                if (fileObj != null) {
                    s = fileObj.readAll();
                    fileSystemObj.closeCommonFile(fileObj)
                } else {
                    s = ""
                }
                if (s.indexOf("#EXTINF") > -1) {
                    data = parsem3u(s)
                } else if (c.indexOf(".txt") > 0) data = {
                    channels: parsetxt(s)
                };
                else data = parsexml(s);
                insetIn(-1, "s", select);
                kjtYpr.l1IlIl01l0tUIl1IIYpr = "xml://" + с;
                kjtYpr.l00100lIKlBWw1lllIlYpr(data, sel, request_id)
            }
            return 1
        } else if (xml_url.indexOf("usb://") == 0) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
            if (is_tizen) {
                TUsbList(xml_url.substr(5))
            } else if (xml_url == "usb://") ScanUsbPort();
            else {
                var c = xml_url.substring(6);
                getUsbList(c)
            }
            return 1
        } else if (xml_url.indexOf("hms") == 0) {
            is_type = "hms";
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
            var data = {
                "playlist_name": "",
                "channels": []
            };
            if (xml_url == "hms") {
                data.channels.push({
                    "title": "_FPNastroiki_ HMS!",
                    "playlist_url": "hms://settings",
                    "logo_30x30": "none"
                });
                if (kjtYpr.GL.remoteip == "") {
                    kjtYpr.popUp("_FPNeobhUstIzap_ Remote Forkplayer!");
                    return 1
                } else {
                    kjtYpr.GL.hms = kjtYpr.GL.remoteip.split(":")[0] + ":45397";
                    xml_url = "http://" + kjtYpr.GL.hms + "/MediaServer/Folders/0?start=0;count=0"
                }
            }
        } else if (xml_url.indexOf("vk://") == 0) {
            xml_vk_url = xml_url;
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            var z = "";
            var c = xml_url.substring(5).split("/");
            if (c.length > 1) z = '"' + c[1] + '"';
            if (c.length > 2) z += ',"' + c[2] + '"';
            if (c.length > 3) z += ',"' + c[3] + '"';
            if (kjtYpr.l11l101lxO_tl1IlIYpr != "") {
                if (xml_url.indexOf("get_audio") >= 0 || xml_url.indexOf("get_video") >= 0 || xml_url.indexOf("get_users") >= 0 || xml_url.indexOf("foto_get") >= 0) {
                    vk_search = kjtYpr.l11l101lxO_tl1IlIYpr;
                    z = '"0",null,"' + kjtYpr.l11l101lxO_tl1IlIYpr + '"'
                }
                kjtYpr.l11l101lxO_tl1IlIYpr = ""
            }
            c = "vk_" + c[0] + "(" + z + ");";
            eval(c);
            return 1
        } else if (xml_url.indexOf("torrent://") == 0) {
            var c = xml_url.replace("torrent://", "");
            if (kjtYpr.GL.torrserveactive) {
                if (parseFloat(torver) >= 1.2) return "http://" + kjtYpr.GL.torrserve + "/stream/playlists.m3u?link=" + encodeURIComponent(c) + "&m3u";
                else return "http://" + kjtYpr.GL.torrserve + "/torrent/play?m3u=true&link=" + encodeURIComponent(c)
            } else if (kjtYpr.GL.aceactive) {
                ace_get_file("http://" + kjtYpr.GL.acestream + "/server/api?method=get_media_files&url=" + encodeURIComponent(c), xml_url, request_id);
                return 1
            } else {
                l0I1l0lO0lsnG1I1QlYpr();
                ll0111l1wxUIOlO1lYpr(15);
                return 1
            }
        } else if (xml_url.indexOf("magnet:") == 0) {
            if (kjtYpr.GL.torrserveactive) {
                if (parseFloat(torver) >= 1.2) return "http://" + kjtYpr.GL.torrserve + "/stream/playlists.m3u?link=" + encodeURIComponent(xml_url) + "&m3u";
                else return "http://" + kjtYpr.GL.torrserve + "/torrent/play?m3u=true&link=" + encodeURIComponent(xml_url)
            } else if (kjtYpr.GL.aceactive) {
                ace_get_file("http://" + kjtYpr.GL.acestream + "/server/api?method=get_media_files&magnet=" + encodeURIComponent(xml_url), xml_url, request_id);
                return 1
            } else {
                l0I1l0lO0lsnG1I1QlYpr();
                ll0111l1wxUIOlO1lYpr(15);
                return 1
            }
        } else if (xml_url.indexOf("torrentb64://") == 0) {
            if (kjtYpr.GL.aceactive) {
                var u = "http://" + ServerFromList + "/smarttv/acestream.php";
                statusbar("http://api.torrentstream.net/upload/raw", "link");
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            clearTimeout(remoteTimer);
                            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(40);
                            ace_get_file("http://" + getip("acestream") + "/server/api?method=get_media_files&content_id=" + xhr.responseText, xml_url, request_id)
                        } else {
                            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
                            kjtYpr.inf("Error: " + xhr.status)
                        }
                    }
                }
                xhr.open('POST', u, !0);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                xhr.send("data=" + encodeURIComponent(xml_url.substring(13)));
                remoteTimer = setTimeout("xhr.abort();", 15000);
                return 1
            } else {
                l0I1l0lO0lsnG1I1QlYpr();
                ll0111l1wxUIOlO1lYpr(15);
                return 1
            }
        }
        if (xml_url.indexOf("javascript:") == 0) {
            eval("(function(){  try{" + xml_url.split("javascript:")[1] + "}catch(e){ll0111l1wxUIOlO1lYpr(53, 'Ошибка выполнения javascript:<br>'+e.message);}  })();");
            return 1
        }
        if (xml_url == "submenu") {
            if (typeof Ch[xml_url] != "undefined" && prev[kjtYpr.ORIG_URL.split("#submenu")[0]] != null) {
                kjtYpr.l1IlIl01l0tUIl1IIYpr += "#submenu" + Ch.index;
                kjtYpr.l00100lIKlBWw1lllIlYpr(l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr((prev[kjtYpr.ORIG_URL.split("#submenu")[0]]))), null, kjtYpr.REQUEST_ID)
            } else {
                kjtYpr.inf("Error submenu", 2000)
            }
            return 1
        }
        if (xml_url.indexOf("SearchName") == 0 || xml_url.indexOf("list=SearchName") > 0) {
            $_("quick_search").style.display = "block";
            $_("quick_search").value = "";
            VK.Show("quick_search");
            return 1
        } else if (xml_url.indexOf("cmdreset") == 0) {
            ll0111l1wxUIOlO1lYpr(99, "_FPSbrositNastr_ _FPprilozheniya_?<br>_FPVsaeZaklUd_!");
            return 1
        } else if (xml_url.indexOf("menu") == 0) {
            kjtYpr.l1l0l1OvIo1ll001lYpr("onlymenu");
            return 1
        } else if (xml_url.indexOf("cmdmenu") == 0) {
            kjtYpr.l1l0l1OvIo1ll001lYpr();
            return 1
        } else if (xml_url.match(/^(zakladki|histurl|histsearch|history|favorites|cache|about:)/)) {
            kjtYpr.l1IOllIQV1ul00IlYpr(xml_url);
            return 1
        } else if (xml_url.indexOf("cmdEpgRegion") == 0) {
            epg_region = xml_url.substr(12);
            kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdEpg");
            return 1
        } else if (xml_url.indexOf("mymail") == 0) {
            xml_url = "http://forkplayer.tv/xml/account.php?do=mail"
        } else if (xml_url.indexOf("tosettings") == 0) {
            kjtYpr.l1IOllIQV1ul00IlYpr(xml_url);
            return 1
        } else if (xml_url == "cmdDonate" || xml_url == "cmdAbout" || xml_url == "cmdOpenStart" || xml_url == "cmdHelp") {
            kjtYpr.l1l0l1OvIo1ll001lYprPlay(xml_url);
            return 1
        } else if (xml_url.indexOf("cmdHistory") == 0 || xml_url.indexOf("cmdSetWeather") == 0 || xml_url.indexOf("cmdSetSearch") == 0 || xml_url.indexOf("cmdSetStart") == 0 || xml_url.indexOf("cmdEpg") == 0 || xml_url.indexOf("cmdSetSync") == 0) {
            kjtYpr.l1l0l1OvIo1ll001lYprPlay(xml_url);
            return 1
        } else if (xml_url.indexOf("gotest") == 0) {
            document.location = "http://obovse.ru/forkplayer2.2/index.html";
            return 1
        } else if (xml_url.indexOf("forkdlna") == 0) {
            if (kjtYpr.GL.remoteip == "") {
                kjtYpr.popUp("_FPNeobhUstIzap_ Remote Forkplayer!");
                return 1
            } else xml_url = "http://" + kjtYpr.GL.remoteip + "/treeview?/"
        } else if ((is_hdgo(xml_url) || is_mw(xml_url)) && !xml_url.match(/\.(php|xml|m3u|txt)/)) {
            Ch.stream_url = Ch.playlist_url;
            Ch.playlist_url = "";
            kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr, Ch);
            return 1
        } else if (xml_url.indexOf("cmdmail") == 0) {
            xml_url = "http://forkplayer.tv/xml/account.php?do=mail"
        } else if (xml_url.indexOf("cmddonate") == 0) {
            donate();
            return 1
        }
        if (xml_url.indexOf("box_mac") > 0) xml_url = xml_url.replace(/box_mac/g, "box_mac2");
        if (xml_url.indexOf("box_user") > 0) xml_url = xml_url.replace(/box_user/g, "box_user2");
        // if (nServer == 2) xml_url = xml_url.replace("/185.158.114.122", "")
        if (nServer == 2) xml_url = xml_url.replace("/127.0.0.1", "")
    } catch (e) {
        kjtYpr.popUp("Error urlData: " + e.message, 2000);
        return 1
    }
    return xml_url
}
var blic = !0,
    dd1 = 0;
var licdata, licsel, licok = !1,
    redir = 0,
    pltags = ["title", "stream_url", "stream_url2", "logo_30x30", "description", "category", "category_id", "playlist_url", "playlist_url2", "parser", "mb_parser", "menu_url", "search_on", "presearch", "menu", "buffer", "ibuffer", "jtvname", "tvg-shift", "value", "group", "chat", "subtitles", "yellow_url", "yellow_title", "yellow_parser", "infolink", "location", "vast", "type", "SetTimeInterval"];
var plgltags = ["playlist_name", "align", "navigate", "options", "title", "icon", "url", "server", "next_page_url", "prev_page_url", "cacheinfo", "setcache", "cachetime", "access", "typeList", "player", "timeout", "is_iptv", "all_local", "all_description", "background-image", "background_image", "color", "pageinfo", "menu", "style", "location", "setcookie", "before", "allvast", "footer", "url_tvg", "info"];
kjtYpr.l00100lIKlBWw1lllIlYpr = function (data, sel, request_id, dtype) {
    if (request_id != null && request_id != kjtYpr.REQUEST_ID) {
        if (ttmac) kjtYpr.popUp("l00100lIKlBWw1lllIlYpr DIED OLD REQ ID " + request_id + " < " + kjtYpr.REQUEST_ID, 1000);
        return
    }
    if (!is_ifr()) {
        kjtYpr.IFRAMES = [];
        kjtYpr.IFRAMES_INSERT = 0;
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("#submenu") > 0) {
            if (typeof data.channels != "undefined") {
                try {
                    var x = kjtYpr.l1IlIl01l0tUIl1IIYpr.split("#submenu");
                    x.shift();
                    var ch = getSubI(x, data.channels);
                    data.title = "";
                    data.navigate = "";
                    data.channels = ch
                } catch (e) {}
            } else {
                for (var i in kjtYpr.global) {
                    if (i != "channels" && i != "title" && i != "navigate") data[i] = kjtYpr.global[i]
                }
            }
        }
        lastView = -1, lastView2 = -1;
        modeGroup = !1;
        kjtYpr.sourcedata = data;
        kjtYpr.global.url = "";
        kjtYpr.inf("Load OK");
        if (sel == null) sel = select;
        try {
            kjtYpr.playlist_name = box_client;
            tags = plgltags;
            for (var i in data) {
                if (i != "channels") kjtYpr.global[i] = data[i]
            }
            var m = kjtYpr.REQUEST_XML.match(/#.*?catchup=(.*?)(&|$|#)/);
            if (m != null) kjtYpr.global.catchup = m[1];
            var m = kjtYpr.REQUEST_XML.match(/#.*?catchup-days=(.*?)(&|$|#)/);
            if (m != null) kjtYpr.global.catchup_days = m[1];
            for (var i in tags) {
                if (typeof data[tags[i]] == 'undefined') kjtYpr.global[tags[i]] = "";
                else {
                    kjtYpr.global[tags[i]] = data[tags[i]]
                }
                try {
                    if (ServerFromList != "") {
                        kjtYpr.global[tags[i]] = kjtYpr.global[tags[i]].replace("//obovse.ru", "//" + ServerFromList)
                    }
                } catch (e) {}
            }
            if (kjtYpr.global.is_iptv == "false" || kjtYpr.global.is_iptv == "False") kjtYpr.global.is_iptv = !1;
            if (typeof kjtYpr.global.style.menu == "undefined") kjtYpr.global.style.menu = [];
            if (typeof kjtYpr.global.style.channels == "undefined") kjtYpr.global.style.channels = [];
            if (kjtYpr.global.url == "" && gV(ChSel, "infolink") != "") kjtYpr.global.url = ChSel.infolink;
            if (kjtYpr.global.url == "" && gV(ChSel, "parser") != "") {
                kjtYpr.global.url = ChSel.parser.split("|")[0].replace(/\?.*/, "")
            }
            if (kjtYpr.global.server != "") ServerFromList = serverLoad[kjtYpr.global.server].url;
            else ServerFromList = server_load;
            if (kjtYpr.global.access == 1 && redir < 1) {
                redir++;
                if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("?list=") > 0) {
                    text = unescape(kjtYpr.l1IlIl01l0tUIl1IIYpr.split("?list=")[1]);
                    kjtYpr.l110l1lIPuoaO0I0IOYpr(text)
                }
                return
            }
            redir = 0;
            if (insetIn(-1, "get", "b") == "1" && kjtYpr.channels.length > 0 && insetIn(-1, "get", "url") != this.l1IlIl01l0tUIl1IIYpr) {
                if (kjtYpr.l1IlIl01l0tUIl1IIYpr != "cmdEpg") {
                    kjtYpr.popUp("_FPEtaVklBzabl_!<br>_FPDlRvIn_ _FPMenu_ / _FPRazblVkl_", 1500);
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                    kjtYpr.l1IlIl01l0tUIl1IIYpr = insetIn(-1, "get", "url");
                    return
                }
            }
        } catch (e) {
            kjtYpr.popUp("GET error:<br>" + e.message, 1500)
        }
        try {
            this.XML_TITLE = ChSel.title;
            if (kjtYpr.l11l101lxO_tl1IlIYpr != "") {
                if (this.XML_TITLE.indexOf("_FPEnter") == 0) this.XML_TITLE = kjtYpr.l11l101lxO_tl1IlIYpr;
                else this.XML_TITLE = kjtYpr.l11l101lxO_tl1IlIYpr + " - " + this.XML_TITLE;
                kjtYpr.l11l101lxO_tl1IlIYpr = ""
            }
            this.XML_IMG = ChSel.logo_30x30
        } catch (e) {
            this.XML_IMG = "";
            this.XML_TITLE = ""
        }
        if (pl_count && pl_serv) this.XML_TITLE += " (ист. " + (1 + pl_serv) + ")";
        if (kjtYpr.global["background-image"] != "") chfon = 2;
        if (chfon && !gs.on) {
            setfon();
            chfon--
        }
        try {
            if (kjtYpr.global.navigate != "") {
                if (this.l1IlIl01l0tUIl1IIYpr.indexOf("http") != 0) this.XML_IMG = "_OI_1px.png";
                this.XML_TITLE = kjtYpr.global.navigate
            } else if (this.l1IlIl01l0tUIl1IIYpr == "history") {
                this.XML_IMG = "_OI_history.png";
                this.XML_TITLE = "_FPIstoriya_"
            } else if (this.l1IlIl01l0tUIl1IIYpr == "favorites") {
                this.XML_IMG = "_OI_star.png";
                this.XML_TITLE = "_FPZakladki_"
            } else if (this.l1IlIl01l0tUIl1IIYpr == "tosettings") {
                this.XML_IMG = "_OI_settings.jpg";
                this.XML_TITLE = "_FPNastroiki_"
            // } else if (this.l1IlIl01l0tUIl1IIYpr.indexOf("http://185.158.114.122/obovse.ru/smarttv/api.php?do=extbookm&v=get") == 0) {
            } else if (this.l1IlIl01l0tUIl1IIYpr.indexOf("http://127.0.0.1/obovse.ru/smarttv/api.php?do=extbookm&v=get") == 0) {
                ll1lIOiIO0lO1IIIYpr = Math.random();
                var x1 = this.l1IlIl01l0tUIl1IIYpr.indexOf("&dir=") + 5;
                this.l1IlIl01l0tUIl1IIYpr = this.l1IlIl01l0tUIl1IIYpr.substring(x1, this.l1IlIl01l0tUIl1IIYpr.indexOf("&", x1))
            }
            if (kjtYpr.global.title != "") this.XML_TITLE = kjtYpr.global.title;
            if (kjtYpr.global.icon != "") this.XML_IMG = kjtYpr.global.icon;
            if (l1IOIIz1l0Ol110Ypr()) {
                this.XML_IMG = "";
                this.XML_TITLE = fp("_FPDobroPozhalovat_")
            }
            var ad = {
                "url": this.l1IlIl01l0tUIl1IIYpr,
                "img": this.XML_IMG,
                "title": this.XML_TITLE
            };
            if (kjtYpr.global.navigate != "") ad.n = kjtYpr.global.navigate;
            if (inset["tab" + insetActive].length < 1)
                inset["tab" + insetActive].push(ad);
            else {
                if (insetIn(-1, "get", "url") == this.l1IlIl01l0tUIl1IIYpr) {
                    if (kjtYpr.global.title != "") insetIn(-1, "put", "title", kjtYpr.global.title);
                    if (kjtYpr.global.icon != "") insetIn(-1, "put", "img", kjtYpr.global.icon)
                } else if (!goBack) inset["tab" + insetActive].push(ad)
            }
        } catch (e) {
            kjtYpr.popUp("insetActive=" + insetActive + "<br>" + e.message)
        }
        if (!goBack) insetIn(-2, "s", sel);
        if (inset["tab" + insetActive].length > 15) {
            var z = inset["tab" + insetActive].shift();
            if (typeof prev[z] != 'undefined') delete prev[z]
        }
        if (gV(ChSel, "location") != 3) insetIn(0, "save");
        if (insetActive != lastInset) kjtYpr.lIllOVRj11lO10Ypr("urlInset", insetActive);
        lastInset = insetActive;
        kjtYpr.ORIG_URL = insetIn(-1, "get", "url");
        var m = kjtYpr.ORIG_URL.match(/(^.*?\/\/.*?)\//);
        if (m != null) kjtYpr.BASE_URL = m[1];
        else kjtYpr.BASE_URL = "";
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("#submenu") == -1) {
            prev[kjtYpr.ORIG_URL] = data;
            lO1l0OILItCt1l11IYpr(kjtYpr.ORIG_URL)
        }
        try {
            if (kjtYpr.global.playlist_name.length > 0) kjtYpr.playlist_name = box_client + " " + kjtYpr.global.playlist_name;
            else kjtYpr.playlist_name = box_client + " " + ChSel.title
        } catch (e) {}
        kjtYpr.last_playlist_name = kjtYpr.playlist_name;
        kjtYpr.menu = [];
        if (typeof data.menu != "undefined") {
            if (data.menu.length) {
                kjtYpr.menu = data.menu;
                var k = kjtYpr.menu.length;
                for (var i = 0; i < k; i++) {
                    if (gV(kjtYpr.menu[i], "playlist_url").indexOf("AddSearch(") == 0) {
                        if (llII1100Ovl1OOIlIYpr(gV(kjtYpr.menu[i], "playlist_url"))) {
                            kjtYpr.menu.splice(i, 1);
                            i--
                        }
                    } else if (gV(kjtYpr.menu[i], "playlist_url").indexOf("AddFavorite(") == 0) {
                        if (llII11IIxmIfhlOllOOYpr(gV(kjtYpr.menu[i], "playlist_url"))) {
                            kjtYpr.menu.splice(i, 1);
                            i--
                        }
                    }
                }
            }
        }
    }
    var ch = data["chan" + "nels"];
    if (ch == undefined || (ch.length == 0 && this.l1IlIl01l0tUIl1IIYpr.indexOf("zakladki") != 0)) {
        if (kjtYpr.menu.length > 0) ch = [{
            "title": "_FPZdesPusto_!",
            "logo_30x30": "none"
        }];
        else ch = [{
            "title": "_FPOshibkaObrabotki_ " + this.l1IlIl01l0tUIl1IIYpr
        }]
    }
    is_iptv = 0;
    chGroup = [];
    gs.pindex = -1;
    var bc = getbc();
    vivat_start = !1;
    var kxb = 0;
    if (kjtYpr.global.is_iptv) is_iptv = 10;
    var chinfo = {
        "hasifr": 0,
        "nrc": 0
    };
    for (var index = 0; index < ch.length; index++) {
        if (ch[index] == null) {
            ch.splice(index, 1);
            index--;
            continue
        }
        if (kjtYpr.global.all_local != "") ch[index].local = kjtYpr.global.all_local;
        if (typeof data.all_advertising != "undefined" && typeof ch[index].advertising == "undefined" && gV(ch[index], "stream_url") != "") ch[index].advertising = data.all_advertising;
        if (gV(ch[index], "iframe") != "") {
            chinfo.hasifr = 1;
            ch[index].iframeid = index;
            ch[index].iframelogo = gV(ch[index], "logo_30x30");
            kjtYpr.IFRAMES.push(ch[index])
        }
        if (gV(ch[index], "search_on") == "" && (gV(ch[index], "playlist_url") + gV(ch[index], "stream_url")).match(/^(http|udp)/)) chinfo.nrc++;
        tags = pltags;
        try {
            for (var j in tags) {
                if (typeof ch[index][tags[j]] == 'undefined') {
                    ch[index][tags[j]] = ""
                }
                if (ch[index][tags[j]] == "") continue;
                else if (tags[j] == "playlist_url") {
                    if (ch[index].playlist_url.indexOf("AddSearch(") == 0) {
                        if (llII1100Ovl1OOIlIYpr(ch[index].playlist_url)) {
                            ch.splice(index, 1);
                            index--;
                            break
                        }
                    } else if (ch[index].playlist_url.indexOf("AddFavorite(") == 0) {
                        if (llII11IIxmIfhlOllOOYpr(ch[index].playlist_url)) {
                            ch.splice(index, 1);
                            index--;
                            break
                        }
                    } else if (ch[index].playlist_url.indexOf("payd_") == 0) {
                        if (typeof ch[index].value != 'undefined') payd[ch[index].playlist_url.substring(5)] = ch[index].value
                    }
                } else if (tags[j] == "stream_url") {
                    if (ch[index].stream_url.match(/\.(m3u|xml|txt)$/i)) {
                        ch[index].playlist_url = ch[index].stream_url;
                        ch[index].stream_url = ""
                    }
                    if (!l1IOIIz1l0Ol110Ypr() && !kjtYpr.global.is_iptv && is_iptv < 4) {
                        if (typeof ch[index].jtvname != 'undefined' && ch[index].jtvname != "") is_iptv++;
                        else if (is_vod(ch[index][tags[j]]) != 2) {
                            var ttl = ch[index].title;
                            if (ttl.length > 27) {} else if (typeof JtvC[ttl.toLowerCase()] != "undefined" || typeof JtvE[ttl.toLowerCase()] != "undefined") {
                                is_iptv++
                            } else if (ttl.match(/^(discovery|россия|СТС|тнт|первый канал|brazzers tv|hustler |Amedia|Пиксель|Nickelodeon|ПлюсПлюс|Карусель|Малятко|Boomerang|Охота и рыбалка|Матч|CBS|Bridge|MTV |Music Box|CNN|LifeNews|Russia Today|TV |TV-)/i)) {
                                is_iptv++
                            } else if (ttl.match(/ tv( |$)/i)) {
                                is_iptv++
                            }
                        }
                    }
                    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("remote/index.php?do=dhcpget") > 0) {
                        ch[index][tags[j]] = decodeURIComponent(ch[index][tags[j]])
                    }
                } else if (tags[j] == "description") {
                    if (kjtYpr.global.all_description != "") ch[index][tags[j]] = ch[index][tags[j]].replace("all_description", kjtYpr.global.all_description);
                    ch[index][tags[j]] = ch[index][tags[j]].replace(/<a /g, "<");
                    ch[index][tags[j]] = ch[index][tags[j]].replace(/src=("|')\//g, "src=$1" + kjtYpr.BASE_URL + "/")
                } else if (tags[j] == "group" && ch[index][tags[j]] != "") {
                    var k = ch[index][tags[j]].split(";");
                    for (var jk = 0; jk < k.length; jk++) {
                        if (!in_array(k[jk], chGroup)) chGroup.push(k[jk])
                    }
                }
                if (kjtYpr.GL.adult == 0 && this.l1IlIl01l0tUIl1IIYpr != "tosettings") {
                    if (gV(ch[index], "group").match(/взрослы/i) || (is_xxx(ch[index].group) || is_xxx(ch[index].title) || is_xxx(ch[index].playlist_url) || is_xxx(ch[index].stream_url))) {
                        if (is_xxx(ch[index].group)) {}
                        if (is_xxx(ch[index].title)) {}
                        if (is_xxx(ch[index].playlist_url)) {}
                        if (gV(ch[index], "position") != "html") {
                            ch.splice(index, 1);
                            index--
                        } else {
                            ch[index].title = "";
                            ch[index].logo_30x30 = "http://static.tempdata.forkplayer.tv/staticfiles/fimg/sensitive.png"
                        }
                        break
                    }
                }
                if (tags[j] == "location") {
                    if (ch[index].location) {
                        try {
                            var l = inset["tab" + insetActive][inset["tab" + insetActive].length - 2].url
                        } catch (e) {
                            l = inset["tab" + insetActive][inset["tab" + insetActive].length - 1].url
                        }
                        if (typeof prev[l] != "undefined") prev[l].cacheinfo = "nocache";
                        if (ch[index].location == 2) {} else goBack = !0;
                        kjtYpr.l0lI10EMI1I10Ypr(null, ch[index]);
                        return
                    }
                }
            }
        } catch (e) {
            kjtYpr.popUp("Parse list error: " + e.toString(), 1800)
        }
    }
    if (is_iptv > 2 && ipCountry == "UA") {
        if (fromSpider()) {
            for (var index = 0; index < ch.length; index++) {
                if (ch[index].title.match(/(^россия |звезда|рен.тв|россия-|республикан|новоросс|донбас|ново россия|днр|лнр|донецкая|луганская|народная)/i)) {
                    kxb++;
                    ch.splice(index, 1);
                    index--;
                    continue
                }
                try {
                    if (blocked_ch.match(new RegExp("," + trim2(ch[index].title.replace("+", "\+")) + "(.hd)?,", "i"))) {
                        kxb++;
                        ch.splice(index, 1);
                        index--;
                        continue
                    }
                } catch (e) {}
                var origt = ch[index].title;
                if (blocked_epg.indexOf("," + l110II10zlBuI0110IYpr(ch[index]) + ",") > 0) {
                    kxb++;
                    ch.splice(index, 1);
                    index--;
                    continue
                }
                ch[index].title = origt
            }
        }
    }
    if (kxb > 0) kjtYpr.popUp("Несколько элементов списка (" + kxb + ") было скрыто!", 1500);
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(80);
    lIII1Ql10v1lQ00lYpr();
    if (gV(ChSel, "menu_url").indexOf("dns") != -1 && !app_cors && !kjtYpr.GL.remoteactive) {
        if (Math.random() > -5) kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> _FPinfodns_")
    }
    if (kjtYpr.global.is_iptv === 0) is_iptv = 0;
    if (this.l1IlIl01l0tUIl1IIYpr == "cmdEpg" || is_vivat() == 3) is_iptv = 3;
    if (is_iptv > 2) {
        if (gV(kjtYpr.global, "url_tvg") != "") {
            loadxmltv(gV(kjtYpr.global, "url_tvg"));
            statusbar("EPG load " + gV(kjtYpr.global, "url_tvg"), "orig");
            etst = setTimeout(function () {
                lOlI11R1qyII110Ypr(kjtYpr.channels);
                ll1lIOiIO0lO1IIIYpr = Math.random();
                kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
            }, 3000)
        } else lOlI11R1qyII110Ypr(ch);
        if (kjtYpr.GL.sortiptv > 0 && kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("http") == 0) ch.sort(function (a, b) {
            var str1 = a.title;
            var str2 = b.title;
            if (kjtYpr.GL.sortiptv == 2) {
                if (str1.charCodeAt(0) < 256 && str1.charCodeAt(0) > 57) str1 = "яя" + str1;
                if (str2.charCodeAt(0) < 256 && str2.charCodeAt(0) > 57) str2 = "яя" + str2
            }
            try {
                var rx = /([^\d]+|\d+)/ig;
                var str1split = str1.match(rx);
                var str2split = str2.match(rx);
                for (var i = 0, l = Math.min(str1split.length, str2split.length); i < l; i++) {
                    var s1 = str1split[i],
                        s2 = str2split[i];
                    if (s1 === s2) continue;
                    if (isNaN(+s1) || isNaN(+s2)) {
                        return s1 > s2 ? 1 : -1
                    } else return +s1 - s2
                }
            } catch (e) {
                return 0
            }
            return 0
        })
    }
    $_("quick_search").value = "";
    last_qnum = -1;
    qch_pos = 0;
    $_("quick_search").style.display = "none";
    $_("quick_search").value = "";
    if (kjtYpr.GL.sortiptv == 3) {
        for (var index = 0; index < ch.length; index++) {
            ch[index].origsel = index
        }
        kjtYpr.ordchannels = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(ch));
        try {
            ch = reordered(ch)
        } catch (e) {
            kjtYpr.inf("Error sorting channels: " + e.message, 2000)
        }
    }
    if (!is_ifr()) {
        kjtYpr.channels = ch;
        kjtYpr.origchannels = ch
    } else {
        for (var i in kjtYpr.channels) {
            var xp = ChSel.iframe.split(",");
            if (xp.length > 1) kjtYpr.IFRAMES_INSERT = parseInt(xp[1]);
            if (kjtYpr.channels[i].iframeid == ChSel.iframeid) {
                if (isNaN(kjtYpr.IFRAMES_INSERT) || kjtYpr.IFRAMES_INSERT < 1) kjtYpr.IFRAMES_INSERT = i;
                kjtYpr.channels.splice(i, 1);
                for (var j = 0; j < ch.length; j++) {
                    if (ch[j].stream_url == "" && ch[j].playlist_url == "") continue;
                    if (gV(ChSel, "excludetitlematch") != "") {
                        if (ch[j].title.match(new RegExp(gV(ChSel, "excludetitlematch"), "ig"))) continue
                    } else if (ch[j].title.match(/(не найдено|здесь пусто|следующая стр|нет результатов)/i)) continue;
                    if (ChSel.logo_30x30.match(/^(http|_)/)) ch[j].logo_30x30 = ChSel.iframelogo;
                    ch[j].position = gV(ChSel, "position");
                    if (isNaN(xp[0]) || xp[0] < 1 || xp[0] > j) kjtYpr.channels.splice(kjtYpr.IFRAMES_INSERT++, 0, ch[j]);
                    else kjtYpr.channels.push(ch[j])
                }
                break
            }
        }
    }
    if (gV(ChSel, "type") == "enterurl") {
        kjtYpr.popUp("<img align='left' src='" + _img("_OT_page_fav_on.png?ndate181128_") + "' height='22' width='22' style='padding:2px;'> Нажмите чтобы добавить этот портал в закладки или стартовое меню", 10000, "fav")
    }
    if (kjtYpr.lastSearch != "" && gV(ChSel, "title").match(/(поиск|search|искать|найти)/i) && chinfo.nrc > 1 && (!is_ifr() || chinfo.hasifr) && !is_local(kjtYpr.REQUEST_XML)) {
        title = ChSel.title;
        img = ChSel.logo_30x30;
        var x = insetIn(-2, "getobj");
        if (x != null)
            if (!l1IOIIz1l0Ol110Ypr(x.url)) {
                if (x.title.length < 15) title = x.title + " " + title;
                img = gV(x, "img")
            }
        if (kjtYpr.SEARCH_TEMPL.indexOf("%s") > 0) {
            try {
                var se = getVars("start").search;
                if (chinfo.hasifr) var p = "system";
                else p = "sites";
                var exs = 0,
                    els = -1,
                    exsl = 0;
                for (var i = 0; i < se[p].length; i++) {
                    {
                        if (se.ds == i || se.ds == -1 && se.ss == i || se[p][i].dop) {
                            if (se[p][i].url == kjtYpr.SEARCH_TEMPL) {
                                exs = 1
                            }
                            els = i
                        } else if (se[p][i].url == kjtYpr.SEARCH_TEMPL) {
                            exs = 2;
                            exsl = i
                        }
                    }
                }
                if (exs == 0) {
                    se[p].splice(els + 1, 0, {
                        "title": title,
                        "url": kjtYpr.SEARCH_TEMPL,
                        "logo": img
                    });
                    setVars("search", se);
                    kjtYpr.popUp(title + " добавлен в историю поисковикых систем! <br>Меню/Настройки/Поисковые системы", 2000)
                } else if (exs == 2) {
                    if (exsl > -1 && exsl != els && els > -1) {
                        var old = se[p][exsl];
                        se[p][exsl] = se[p][els];
                        se[p][els] = old
                    }
                    setVars("search", se)
                }
            } catch (e) {
                kjtYpr.popUp("Err search getchannels " + e.message, 2000)
            }
        }
        if (!title.match(/(_FP|Глобальный поиск \()/)) {
            seSt.push({
                "url": kjtYpr.REQUEST_XML,
                "img": img,
                "title": title,
                "is_xxx": kjtYpr.REQUEST_XXX,
                "text": kjtYpr.lastSearch,
                "gs": chinfo.hasifr,
                "count": ch.length,
                "app_cors": app_cors,
                "rf": (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive),
                "acestream": kjtYpr.GL.aceactive
            });
            if (!FgetSetting(12)) {
                clearTimeout(stSend);
                stSend = setTimeout(function () {
                    // PullDataFrom("http://185.158.114.122/obovse.ru/smarttv/spider.php?id=cmdSpiderSearch&s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(seSt)) + "&ver=11&" + addident());
                    PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/spider.php?id=cmdSpiderSearch&s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(seSt)) + "&ver=11&" + addident());
                    seSt = []
                }, 25000)
            }
        }
    }
    if (spider_stat != "" && !FgetSetting(12) && gV(dtype) == "ok" && !spider_stat.match(/obovse\.ru\//)) {
        img = gV(kjtYpr.global, "icon");
        // PullDataFrom("http://185.158.114.122/obovse.ru/smarttv/spider.php?id=cmdSpiderStat&s=" + encodeURIComponent(spider_stat) + "&img=" + encodeURIComponent(img) + "&ver=2" + addident())
        PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/spider.php?id=cmdSpiderStat&s=" + encodeURIComponent(spider_stat) + "&img=" + encodeURIComponent(img) + "&ver=2" + addident())
    }
    spider_stat = "";
    if (chGroup.length > 0) {
        chOrig = ch;
        chGroup.unshift("_FPALL_");
        listGroup(null)
    }
    if (getSelect() == -2) {
        kjtYpr.lIOIOIBu0mO11llO0Ypr(0)
    } else if (getSelect() == -1 && !goBack) {
        var tmpSel = l1OIOvnWuZI0lO0Ypr;
        kjtYpr.lIOIOIBu0mO11llO0Ypr(0);
        if (tmpSel == lOI10QpJAilIIIYpr + 2) l1OIOvnWuZI0lO0Ypr = lOI10QpJAilIIIYpr + 2;
        lastsel = -1;
        kjtYpr.lIOIOIBu0mO11llO0Ypr(-1)
    } else {
        var s = inset["tab" + insetActive][inset["tab" + insetActive].length - 1];
        if (typeof s.s != "undefined" && s.s >= 0) {
            kjtYpr.lIOIOIBu0mO11llO0Ypr(s.s, "load")
        } else {
            kjtYpr.lIOIOIBu0mO11llO0Ypr()
        }
    }
    delete(inset["tab" + insetActive][inset["tab" + insetActive].length - 1].s);
    if (gV(data, "defaultSelect") > 0 && !goBack) {
        kjtYpr.lIOIOIBu0mO11llO0Ypr(gV(data, "defaultSelect"))
    }
    if (!gs.on && !xml_live) goBack = !1;
    else goBack = !0
};

function ord_id() {
    var x = kjtYpr.l1IlIl01l0tUIl1IIYpr.replace(/device_id.*?&/i, "").replace(/device_token.*?&/i, "");
    var nm = md5(x);
    return nm
}

function reordered(ch) {
    if (ordered == null) {
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("ordered");
        if (s == "") ordered = {};
        else ordered = l1l0IOIl_puQl1I1IYpr(s);
        if (ordered == null) ordered = {}
    }
    var nm = ord_id();
    if (typeof ordered[nm] != "undefined") {
        var chs = [];
        for (var k in ordered[nm]) {
            if (ordered[nm].hasOwnProperty(k)) {
                ch[k].order = ordered[nm][k];
                ch[k].del = 1;
                chs.push(ch[k])
            }
        }
        for (var index = 0; index < ch.length; index++) {
            if (ch[index].del == 1) {
                ch.splice(index, 1);
                index--;
                continue
            }
        }
        chs.sort(function (a, b) {
            return a.order - b.order
        });
        for (var index = 0; index < chs.length; index++) {
            if (chs[index].order > 0) ch.unshift(chs[index]);
            else ch.push(chs[index])
        }
    }
    return ch
}
var popTimer, popTimer2, pop2on = !1,
    pop2msg = [],
    pop2msgint;
kjtYpr.popUp = function (text, timer, cmd, och) {
    if ($_("popUp").style.display != "block") pop2on = !1;
    if (pop2on) return;
    if (cmd == "full") {
        $_("popUp").style.top = css_wh(20) + "px";
        $_("popUp").style.left = css_w(20) + "px";
        $_("popUp").style.width = css_w(1200) + "px";
        $_("popUp").style.fontSize = css_wh(15) + "px";
        lO10OIOlxzlO100OIYpr("popUp", text);
        $_("popUp").style.display = "block";
        return
    }
    if (och == null && ($_("popUp").style.display == "block" || pop2msg.length > 0) && rek_url == "") {
        if (pop2msg.length == 0) pop2msgint = setInterval(function () {
            if (pop2msg.length == 0) clearInterval(pop2msgint);
            else if ($_("popUp").style.display != "block") {
                var mn = pop2msg.shift();
                kjtYpr.popUp(mn.text, mn.timer, mn.cmd, !0)
            }
        }, 1000);
        if (timer == null) timer = 1300;
        if (timer > 1300) timer = 1300;
        pop2msg.push({
            "text": text,
            "timer": timer,
            "cmd": cmd
        });
        return
    }
    if (cmd == "url") text = text.replace(/\//g, "/ ");
    $_("popUp").style.top = "84%";
    $_("popUp").style.left = css_w(960) + "px";
    $_("popUp").style.width = css_w(290) + "px";
    $_("popUp").style.fontSize = css_wh(15) + "px";
    if (cmd == 'on') {
        $_("popUp").style.display = "block";
        lO10OIOlxzlO100OIYpr("popUp", text);
        setTimeout('$_("popUp").style.display="none";', timer);
        return
    }
    if (cmd == "fav") {
        $_("popUp").style.top = css_wh(27) + "px";
        $_("popUp").style.left = css_w(774) + "px"
    } else if (cmd == 'noborder') {
        $_("popUp").style.backgroundColor = "transparent";
        $_("popUp").style.border = "none"
    } else if (cmd == 'skip') {
        $_("popUp").style.backgroundColor = "#E0E0E0";
        $_("popUp").style.border = "none";
        $_("popUp").style.width = "auto";
        $_("popUp").style.left = css_w(1060) + "px";
        $_("popUp").style.color = "black";
        $_("popUp").style.display = "block";
        lO10OIOlxzlO100OIYpr("popUp", text);
        pop2on = !1;
        clearTimeout(popTimer);
        return
    } else {
        $_("popUp").style.backgroundColor = "#E0E0E0";
        $_("popUp").style.border = "1px solid #767676"
    }
    $_("popUp").style.color = "black";
    if (timer == null) timer = 3500;
    clearTimeout(popTimer);
    clearTimeout(popTimer2);
    if (text == "") {
        $_("popUp").style.display = "none";
        return
    }
    setTimeout(function () {
        lO10OIOlxzlO100OIYpr("popUp", text);
        $_("popUp").style.display = "block";
        popTimer = setTimeout(function () {
            if (!pop2on) $_("popUp").style.display = "none"
        }, timer)
    }, 160)
};
kjtYpr.popUp2 = function (text) {
    lO10OIOlxzlO100OIYpr("popUp", text);
    $_("popUp").style.display = "block";
    $_("popUp").style.top = "44%";
    $_("popUp").style.left = css_w(800) + "px";
    $_("popUp").style.width = css_w(450) + "px";
    pop2on = !0
};
var inftimer, inftimer2, infad = !1;
kjtYpr.inf = showinform = function (text, delay, color, tm) {
    if (text == "") {
        lO10OIOlxzlO100OIYpr("textinfo", text);
        lO10OIOlxzlO100OIYpr("bstatus", text);
        clearTimeout(inftimer2)
    }
    if (text == null) text = "";
    text = text.replace(/'/g, "").replace(/\r/g, "").split('\n');
    if (delay != null) {
        clearTimeout(inftimer);
        if (infad) {
            inftimer2 = setTimeout("infad=false;kjtYpr.inf('" + text + "'," + delay + ");", 800);
            return
        }
        if (color != null) text = "<span style='color:" + color + ";background-color:black;'>" + text + "</span>";
        else text = "<span style='color:white;background-color:black;'>" + text + "</span>";
        $_("textinfo").style.zIndex = "1";
        lO10OIOlxzlO100OIYpr("textinfo", text);
        infad = !0;
        inftimer = setTimeout('infad=false;lO10OIOlxzlO100OIYpr("textinfo","");$_("textinfo").style.zIndex="0";', delay)
    } else {
        text = text.toString();
        $_("bstatus").style.padding = "0px";
        if (text.length < 8) {
            $_("bstatus").style.fontSize = css_wh(25) + "px"
        } else if (text.length < 12) {
            $_("bstatus").style.fontSize = css_wh(17) + "px"
        } else if (text.length < 15) {
            $_("bstatus").style.fontSize = css_wh(16) + "px"
        } else {
            $_("bstatus").style.fontSize = css_wh(10) + "px"
        }
        lO10OIOlxzlO100OIYpr("bstatus", text)
    }
};
var T = {
    s: 0,
    m: 0,
    h: 0,
    day: 0,
    date: 0,
    month: 0,
    year: 0,
    inetTime: 0,
    delta: 0,
    y_t_days: 0,
    Sync_step: 0,
    timezone: 0,
    offset: new Date().getTimezoneOffset(),
    summertime: (new Date().getTimezoneOffset() - new Date(2011, 0, 11).getTimezoneOffset()) / 60,
    timestamp: 0
};

function getDT(t) {
    try {
        var timesec = new Date(parseInt(t));
        T.year = timesec.getFullYear();
        T.date = timesec.getDate();
        T.month = timesec.getMonth();
        T.day = timesec.getDay();
        T.h = timesec.getHours();
        T.m = timesec.getMinutes();
        T.s = timesec.getSeconds()
    } catch (e) {
        errlog(e)
    }
};

function SetTimeDate() {
    if (T.inetTime > 0) {
        T.timestamp += 1;
        T.inetTime += 1000;
        if (handler == "iframe") return;
        getDT(T.inetTime + kjtYpr.GL.JTVRegion * 3600000)
    } else {
        return
    };
    nkh = 0;
    var dstring = to(T.h, T.m, T.s, 0);
    if ($_('widget_time').innerHTML != "&nbsp;") lO10OIOlxzlO100OIYpr('widget_time', dstring);
    try {
        if (handler == 'player' || handler == 'qual' || plmini_on || kjtYpr.GL.scrsaver < 1 || minimize || isScreensaver || $_("main").style.display == "none") screensavertimer = -1;
        else {
            if (screensavertimer == -1) screensavertimer = T.inetTime
            else if (T.inetTime - screensavertimer > 185000) screensavertimer = -1;
            else if (T.inetTime - screensavertimer > 180000) screensaver(!0)
        }
        if ((handler == 'player' || handler == 'qual') || (lOlI1OII1UehOl1lIOIOYpr && $_("vk_audio").style.display == "block")) {
            if (uaJ == "mag" || uaJ == "dune") getVideoPlayInfo();
            if (lOlI1OII1UehOl1lIOIOYpr || (plmini_on && platform != "sams")) getVideoPlayInfo();
            else if (handler == 'player' || handler == 'qual') {
                getVideoPlayInfo()
            }
            if (handler == "player" || handler == "qual") {
                if (!paused)
                    if (is_vivat() == 2 && $_("loading").style.display == "none") vivat_fwd += 1;
                if (info_mode == 3 || info_mode == 4) dstring = dstring.substring(0, dstring.length - 3);
                if ($_("player_time") != null) lO10OIOlxzlO100OIYpr('player_time', dstring)
            }
        }
    } catch (e) {}
    var _0xf8efx72 = ['_FPSunday_', '_FPMonday_', '_FPTuesday_', '_FPWednesday_', '_FPThursday_', '_FPFriday_', '_FPSaturday_'];
    var _0xf8efx73 = ['_FPJanuary_', '_FPFebruary_', '_FPMarch_', '_FPApril_', '_FPMay_', '_FPJune_', '_FPJule_', '_FPAugust_', '_FPSeptember_', '_FPOctober_', '_FPNovember_', '_FPDecember_'];
    var _0xf8efx74 = _0xf8efx72[T.day];
    var _0xf8efx75 = _0xf8efx73[T.month];
    var _0xf8efx76 = _0xf8efx74 + ', ' + T.date + ' ' + _0xf8efx75;
    lO10OIOlxzlO100OIYpr('widget_date', _0xf8efx76);
    var n = Math.floor(T.inetTime / 1000);
    if (timestamp) {
        if (n % 120 == 0) autouserexport()
    } else if (n % 900 == 0) autouserexport();
    if (n % 2800 == 0) selfpages = {};
    if ((n % 180 == 0 && handler == "menu") || n % 1980 == 0) {
        if (kjtYpr.GL.remote) {
            l0I1l0lO0lsnG1I1QlYpr()
        }
    }
    if (select < 0) var st = 0;
    else st = select;
    if (kjtYpr.channels.length)
        if (typeof kjtYpr.channels[st].SetTimeInterval == "object") {
            var o = kjtYpr.channels[st].SetTimeInterval;
            if (n % (60 * o.time) == 10) {
                if (handler == "player") var u = gV(o, "onplay");
                else u = gV(o, "onmenu");
                if (u.indexOf("http") == 0) {
                    var xhr = null;
                    xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4) {
                            var s = xhr.responseText;
                            if (s.indexOf("}") > 0) {
                                var x = l1l0IOIl_puQl1I1IYpr(s);
                                if (gV(x, "message") != "" && handler != "player") kjtYpr.inf(x.message, 1200)
                            }
                        }
                    };
                    xhr.open('GET', u, !0);
                    xhr.send()
                }
            }
        }
    if (n % 60 == 0 || vivat_start) {
        if (is_vivat() || vivat_start) {
            var action_id = 0;
            var content_id = 0;
            if (handler == "player") {
                if (is_vivat() == 2) {
                    action_id = 5;
                    content_id = curCh()["tvarc_id"];
                    if (api_vivat.indexOf("/ajax") > 0) content_id = curCh()["channel_id"]
                } else {
                    action_id = 1;
                    content_id = curCh()["channel_id"]
                }
            }
            if (vivat_start) {
                if (typeof kjtYpr.channels[0] != "undefined") {
                    device_id = kjtYpr.channels[0].device_id;
                    device_token = kjtYpr.channels[0].device_token
                }
                action_id = "0";
                vivat_start = !1
            }
            if (api_vivat.indexOf("/ajax") > 0) var url = api_vivat + "/send_status_log.php?actionid=" + action_id + "&curchmovid=" + content_id + "&STBId=" + device_id + "&sn=" + ss + "&mac=" + sm + "&version=" + vivat_portal_version + "&token=" + device_token;
            else url = api_vivat + "/device_log.php?device_id=" + device_id + "&device_token=" + device_token + "&action_id=" + action_id + "&content_id=" + content_id;
            var xhr = null;
            xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    var s = xhr.responseText;
                    if (s.indexOf("}") > 0) {
                        var x = l1l0IOIl_puQl1I1IYpr(s);
                        if (x.message == "message" || x.message_type == "advertisement") {
                            ll0111l1wxUIOlO1lYprok(53, x.message)
                        }
                        if (typeof x.message != "undefined") {
                            if (x.message != "") ll0111l1wxUIOlO1lYprok(53, x.message);
                            return
                        }
                        url = api_vivat + "/device_log.php?device_id=" + device_id + "&device_token=" + device_token + "&action_id=4&content_id=" + x.message_id;
                        var xhr2 = null;
                        xhr2 = new XMLHttpRequest();
                        xhr2.onreadystatechange = function () {};
                        xhr2.open('GET', url, !0);
                        xhr2.send()
                    }
                }
            };
            xhr.open('GET', url, !0);
            xhr.send()
        }
    }
};
var remoteTimer2 = null,
    doprf1 = "",
    doprf2 = "",
    remoteXhr2 = null,
    remoteTimer = null,
    remoteXhr = null,
    acestream = !1,
    prxremote = "http://remote.forkplayer.tv/smarttv/api.php";

function getip(t, nop) {
    var ip = "";
    if (kjtYpr.GL[t] != "") ip = kjtYpr.GL[t];
    else if (gV(kjtYpr.GL, "remoteip") != "") {
        var ip = kjtYpr.GL.remoteip.split(":")[0]
    } else ip = "127.0.0.1";
    if (ip.indexOf(":") == -1) {
        if (t == "acestream") ip += ":6878";
        else if (t == "torrserve") ip += ":8090"
    }
    if (nop) return ip.split(":")[0];
    else return ip
}
var torver = "";

function AS_update(mode) {
    $_("acesrc").width = "0";
    $_("acesrc").src = "";
    $_("acesrc").style.display = "none";
    kjtYpr.GL.aceactive = !1;
    kjtYpr.GL.torrserveactive = !1;
    if (getip("acestream") != "") {
        url = "http://" + getip("acestream") + "/webui/api/service?method=get_version&format=jsonp&callback=mycallback";
        remoteXhr3 = new XMLHttpRequest();
        remoteXhr3.onreadystatechange = function () {
            if (remoteXhr3.readyState == 4) {
                clearTimeout(remoteTimer3);
                if (remoteXhr3.responseText.indexOf("mycallback") != -1) {
                    kjtYpr.GL.aceactive = !0;
                    $_("acesrc").style.display = "block";
                    $_("acesrc").width = css_w(24);
                    $_("acesrc").src = _img("_ST_acesrc.png")
                }
                arimg()
            }
        };
        remoteXhr3.open('GET', url, !0);
        remoteXhr3.send();
        remoteTimer3 = setTimeout(function () {
            kjtYpr.GL.aceactive = !1;
            remoteXhr3.abort()
        }, 3000)
    }
    if (getip("torrserve") != "") {
        url = "http://" + getip("torrserve") + "/echo";
        remoteXhr4 = new XMLHttpRequest();
        remoteXhr4.onreadystatechange = function () {
            if (remoteXhr4.readyState == 4) {
                clearTimeout(remoteTimer4);
                if (remoteXhr4.responseText.indexOf(".") > 0) {
                    torver = remoteXhr4.responseText;
                    if (torver.indexOf("MatriX") >= 0) torver = 1.2;
                    kjtYpr.GL.torrserveactive = !0;
                    $_("acesrc").style.display = "block";
                    $_("acesrc").width = css_w(24);
                    $_("acesrc").src = _img("_ST_acesrc.png");
                    statusbar("Torrserve active! Version: " + torver, "text")
                }
                arimg()
            }
        };
        remoteXhr4.open('GET', url, !0);
        remoteXhr4.send();
        remoteTimer4 = setTimeout(function () {
            kjtYpr.GL.torrserveactive = !1;
            remoteXhr4.abort()
        }, 3000)
    }
    arimg()
}

function ace_get_file(u, xu, request_id) {
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
    statusbar(u, "link");
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            clearTimeout(remoteTimer);
            if (xhr.status == 200) {
                var a = l1l0IOIl_puQl1I1IYpr(xhr.responseText);
                if (a.error != null) {
                    kjtYpr.inf("Error: " + a.error.toString(), 2000)
                } else {
                    var obj = [];
                    for (var i in a.result) {
                        obj.push({
                            "id": i,
                            "text": a.result[i]
                        })
                    }
                    obj.sort(function (a, b) {
                        str1 = a.text;
                        str2 = b.text;
                        try {
                            var rx = /([^\d]+|\d+)/ig;
                            var str1split = str1.match(rx);
                            var str2split = str2.match(rx);
                            for (var i = 0, l = Math.min(str1split.length, str2split.length); i < l; i++) {
                                var s1 = str1split[i],
                                    s2 = str2split[i];
                                if (s1 === s2) continue;
                                if (isNaN(+s1) || isNaN(+s2)) {
                                    return s1 > s2 ? 1 : -1
                                } else return +s1 - s2
                            }
                        } catch (e) {
                            return 0
                        }
                        return 0
                    });
                    var data = {};
                    data["chan" + "nels"] = [];
                    for (var i = 0; i < obj.length; i++) {
                        data["chan" + "nels"].push({
                            "title": obj[i].text,
                            "stream_url": u.replace("server/api?method=get_media_files", "ace/getstream?_idx=" + obj[i].id + "&"),
                            "logo_30x30": "",
                            "description": ""
                        })
                    }
                    for (var i = 0; i < obj.length; i++) {
                        data["chan" + "nels"].push({
                            "title": "(hls) " + obj[i].text,
                            "stream_url": u.replace("server/api?method=get_media_files", "ace/manifest.m3u8?_idx=" + obj[i].id + "&"),
                            "logo_30x30": "",
                            "description": ""
                        })
                    }
                    kjtYpr.l1IlIl01l0tUIl1IIYpr = xu;
                    kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id)
                }
            } else {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
                kjtYpr.inf("Error: " + xhr.status, 2000)
            }
            xhr = null
        }
    };
    xhr.open('GET', u, !0);
    xhr.send();
    remoteTimer = setTimeout("xhr.abort();", 15000)
}

function trylink(s) {
    s = gV(s);
    if (s.indexOf("ACE_PORT") > 0) s = s.replace(/ACE_PORT/g, getip("acestream").split(":")[1]);
    if (s.indexOf("LOCAL_PORT") > 0) {
        if (kjtYpr.GL.remoteip == "") kjtYpr.inf("Установите значение Remote Fork в Настройках!");
        s = s.replace(/LOCAL_PORT/g, kjtYpr.GL.remoteip.split(":")[1])
    }
    if (s.indexOf("LOCAL_IP") > 0) {
        if (kjtYpr.GL.remoteip == "") {
            kjtYpr.inf("Установите значение Remote Fork в Настройках!", 2000);
            s = s.replace(/LOCAL_IP/g, "127.0.0.1")
        } else s = s.replace(/LOCAL_IP/g, kjtYpr.GL.remoteip.split(":")[0])
    }
    if (s.indexOf("ACE_IP") > 0) s = s.replace(/(MB_)?ACE_IP/g, getip("acestream", !0));
    if (s.indexOf("TORRSERVE_IP") > 0) s = s.replace(/TORRSERVE_IP/g, getip("torrserve", !0));
    return s
}

function arimg() {
    if (kjtYpr.GL.aceactive && kjtYpr.GL.remote > 0) {
        $_("acesrc").width = css_w(15);
        $_("remotesrc").width = css_w(15)
    } else if (kjtYpr.GL.aceactive) $_("acesrc").width = css_w(24);
    else if (kjtYpr.GL.remote > 0) $_("remotesrc").width = css_w(24)
}

function l0I1l0lO0lsnG1I1QlYpr(mode) {
    if (mode == null) {
        AS_update();
        $_("remotesrc").style.display = "none"
    }
    if (kjtYpr.GL.remote > 0) {
        $_("remotesrc").style.display = "block"
    } else {
        kjtYpr.GL.remoteactive = !1;
        $_("remotesrc").style.display = "none";
        arimg();
        return
    }
    if (kjtYpr.GL.remote == 3 && kjtYpr.GL.remoteip == "") {
        kjtYpr.inf("IP:PORT для RemoteFork не установлен в Настройках приложения! Установите эти данные, или выставьте значение _FPauto_", 2500)
    }
    if (mode == null && kjtYpr.GL.remoteip != "") {
        RemoteActive()
    } else {
        if (kjtYpr.GL.remote == 3) return;
        var url = "http://getlist2.obovse.ru/remote/index.php?do=active&initial=" + kjtYpr.mac + "|" + kjtYpr.serial + "|" + kjtYpr.hardware;
        if (nServer == 2) {
            if (homeurl.indexOf("operatv.obovse.ru") > 0) var px = "http://operatv.obovse.ru/xhrremote.php";
            else if (homeurl.indexOf("obovse.ru") > 0) px = "http://obovse.ru/xhrremote.php";
            else px = "http://getlist2.obovse.ru/remote/index.php";
            url = px + "?do=active&initial=" + kjtYpr.mac + "|" + kjtYpr.serial + "|" + kjtYpr.hardware
        }
        remoteXhr2 = new XMLHttpRequest();
        remoteXhr2.onreadystatechange = function () {
            if (remoteXhr2.readyState == 4) {
                clearTimeout(remoteTimer2);
                var gp = remoteXhr2.responseText.split("|")[0];
                if (gp.indexOf(":80") > 0 && gp.length > 9) kjtYpr.GL.remoteip = gp;
                if (remoteXhr2.responseText.split("|")[1] == "proxy") kjtYpr.GL.proxy = 1;
                else kjtYpr.GL.proxy = 0;
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                RemoteActive(!0)
            }
        };
        remoteXhr2.open('GET', url, !0);
        remoteXhr2.send();
        remoteTimer2 = setTimeout(function () {
            remoteXhr2.abort()
        }, 17000)
    }
}
var rf_ver = 0,
    test_thvp = !1;

function RemoteActive(mode) {
    if (kjtYpr.GL.remoteip == "") {
        $_("remotesrc").src = _img("_OI_remoteOffline.png");
        kjtYpr.GL.remoteactive = !1;
        return
    }
    acestream = !1;
    if (!test_thvp) {
        getthvpinfo(!0);
        test_thvp = !0
    }
    if (kjtYpr.GL.proxy == 1 && mode != null) {
        remote_version = 1.2;
        vr = 0;
        kjtYpr.GL.remoteactive = !1;
        $_("remotesrc").src = _img("_OI_remoteOnlineU.png");
        if (homeurl.indexOf("operatv.obovse.ru") > 0) prxremote = "http://operatv.obovse.ru/xhrremote.php";
        else if (homeurl.indexOf("obovse.ru") > 0) prxremote = "http://obovse.ru/xhrremote.php";
        else prxremote = "http://remote.forkplayer.tv/smarttv/api.php";
        return
    }
    kjtYpr.GL.proxy = 0;
    prxremote = "http://remote.forkplayer.tv/smarttv/api.php";
    var url = "http://" + kjtYpr.GL.remoteip + "/test?" + kjtYpr.mac + "|" + kjtYpr.serial + "|" + kjtYpr.hardware;
    url = url.replace(":80/", "/");
    remoteXhr = new XMLHttpRequest();
    remoteXhr.onreadystatechange = function () {
        if (remoteXhr.readyState == 4) {
            clearTimeout(remoteTimer);
            if (/polaroid/i.test(ua)) {}
            if (remoteXhr.responseText.indexOf("Ace Stream") > 0) acestream = !0;
            if (remoteXhr.responseText.indexOf("Work") > 0) {
                if (remoteXhr.responseText.indexOf("Android") > 0 || kjtYpr.GL.remoteip.indexOf(":8028") > 0) $_("remotesrc").src = _img("_OI_st_andr.png");
                else $_("remotesrc").src = _img("_OI_remoteOnline.png");
                $_("remotesrc").width = css_w(24);
                kjtYpr.GL.remoteactive = !0;
                if (remoteXhr.responseText.indexOf("Visual Studio") > 0 || remoteXhr.responseText.indexOf("RemoteFork Server") > 0) {
                    remote_version = 1.2;
                    readGl()
                } else remote_version = 1.1;
                mc = remoteXhr.responseText.match(/v\. (\d+\.\d+)\./);
                if (mc != null) {
                    vr = mc[1];
                    if (vr >= 1.40) {
                        doprf1 = "/hlsproxy";
                        doprf2 = "/acestream"
                    }
                }
                mc = remoteXhr.responseText.match(/v\. (.*?)</);
                if (mc != null) rf_ver = mc[1]
            } else {
                vr = 0;
                remote_version = 0;
                $_("remotesrc").src = _img("_OI_remoteOffline.png");
                kjtYpr.GL.remoteactive = !1;
                if (!mode) l0I1l0lO0lsnG1I1QlYpr(!0)
            }
            readSt();
            arimg()
        }
    };
    remoteXhr.open('GET', url, !0);
    remoteXhr.send();
    remoteTimer = setTimeout(function () {
        $_("remotesrc").src = _img("_OI_remoteOffline.png");
        kjtYpr.GL.remoteactive = !1;
        remoteXhr.abort()
    }, 2500);
    if (kjtYpr.l1IlIl01l0tUIl1IIYpr == "tosettings") lO10OIOlxzlO100OIYpr("infoList", url.split("?")[0] + "<br><iframe src='" + url.split("?")[0] + "' width=460 height=200></iframe>")
}

function to(_0xf8efx6b, _0xf8efx6c, Seconds, _0xf8efxc) {
    return (_0xf8efx6b > 9 ? _0xf8efx6b : ('0' + _0xf8efx6b)) + ':' + (_0xf8efx6c > 9 ? _0xf8efx6c : ('0' + _0xf8efx6c)) + ((!0) ? (':' + (Seconds > 9 ? Seconds : ('0' + Seconds))) : '')
};

function to2(sec) {
    if (isNaN(sec) || sec == Infinity) return "∞";
    var s = " 0" + (sec % 60);
    m = Math.floor(sec / 60);
    return m + ":" + s.substr(s.length - 2)
}
var autimpint;

function setautoimp() {
    clearInterval(autimpint);
    if (timestamp) var t = 100000;
    else t = 300000;
    autimpint = setInterval("if(kjtYpr.GL['ts']==1) autoexport('timer');", t)
}

function llllQO1WlII1lOYpr() {
    var xhrm = new XMLHttpRequest();
    xhrm.onreadystatechange = function () {
        if (xhrm.readyState == 4) {
            var offset = new Date().getTimezoneOffset();
            T.timestamp = Number(xhrm.responseText.split("=")[1]);
            var timesec = T.timestamp * 1000 + offset * 60000;
            if (!isNaN(timesec) && timesec > 0) {
                T.inetTime = Math.ceil(timesec);
                clearInterval(kjtYpr.IntervalUpdateTime);
                kjtYpr.IntervalUpdateTime = setInterval('SetTimeDate();', 1000);
                clearInterval(kjtYpr.GlUpdateTime);
                kjtYpr.GlUpdateTime = setInterval('llllQO1WlII1lOYpr();', 2700000)
            } else {
                lO10OIOlxzlO100OIYpr('widget_date', "_FPOshibka_ _FPpolVr_")
            };
            xhrm = null
        }
    };
    var url = 'http://player.local/time.php';
    xhrm.open('GET', url, !0);
    xhrm.send()
}
var api_vivat = "",
    api_type = "",
    vivat_timer, sm, ssx;

function vivat_auth(m, sel, u) {
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
    clearTimeout(vivat_timer);
    if (kjtYpr.mac.length < 11) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        kjtYpr.popUp("Ошибка авторизации! ID вашего устройства не был определен! Попробуйте сменить способ запуска ForkPlayer или переустановить его!", 3000);
        return
    }
    if (kjtYpr.mac == "f46d04148b88") {}
    sm = kjtYpr.mac;
    ssx = ss = kjtYpr.serial;
    if (u.indexOf("vostorg.php") == -1) {
        if (typeof kjtYpr.macv != "undefined") sm = kjtYpr.macv;
        if (typeof kjtYpr.serialv != "undefined") ss = kjtYpr.serialv
    }
    if (u == null) u = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    if (u.indexOf(".php") == -1) {
        kjtYpr.lI11111bPNQ0III1Ypr();
        return
    }
    if (u.indexOf("vostorg.php") > 0) {
        api_vivat = "http://main.vostorg.tv/russian/api";
        api_type = "RUR";
        url = api_vivat + "/auth_client.php?serial=" + ss + "&mac=" + sm + "&dealer_id=3&dealer_key=" + md5(md5("Jnd0Rd[z") + "3" + ss);
        PullDataFrom(url, "getVivatId", m, sel)
    } else if (u.indexOf("vivat2.php") > 0) {
        if (u.indexOf("frmac=1") > 0) {
            sm = kjtYpr.mac;
            ssx = ss = kjtYpr.serial
        } else {
            sm = wf(kjtYpr.mac);
            ssx = ss = wf(kjtYpr.serial)
        }
        if (kjtYpr.mac == "641cb0dc4145") {
            sm = ss = "flg1539962572"
        }
        // api_vivat = "http://193.30.240.2/try/ajax";
        api_vivat = "http://127.0.0.1/try/ajax";
        api_type = "UAH";
        // PullDataFrom("http://193.30.240.2/try/ajax/get_data.php?par=" + l10O0I11gdZlOOIIYpr({
        PullDataFrom("http://127.0.0.1/try/ajax/get_data.php?par=" + l10O0I11gdZlOOIIYpr({
            "datamode": "getRegInfo",
            "sn": ss,
            "mac": sm,
            "devtype": 0,
            "referrer": "forkplayer.tv",
            "clearPreviousSetting": !1
        }), "getVivatId2", m, sel)
    }
}

function wf(s) {
    return "f" + s
}
var vivat_settings = null,
    m3u8_url = "",
    vivat_tvarc_templ, vivat_portal_version;

function PullDataFrom(url, mode, y, title, orig, request_id) {
    var orig_url = url;
    if (orig != null) orig_url = orig;
    var xhrt = new XMLHttpRequest();
    xhrt.onreadystatechange = function () {
        if (mode == "cmdVivatArc") kjtYpr.l1l1IOO0lvWaDIll1lIYpr(20);
        if (xhrt.readyState == 4) {
            var s = xhrt.responseText;
            if (mode == "lgusbmac") {
                if (s != "") {
                    kjtYpr.mac = kjtYpr.serial = s.replace(/:/g, "").replace(/(\r|\n)/, "");
                    kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.mac);
                    kjtYpr.lIllOVRj11lO10Ypr("ID", kjtYpr.mac);
                    kjtYpr.lIllOVRj11lO10Ypr("IDS", kjtYpr.serial);
                    kjtYpr.lIllOVRj11lO10YprC("IDS", kjtYpr.serial)
                }
            }
            if (mode == "mwjs") {
                s = parse_urlm(s, 1);
                if (ttmac) kjtYpr.popUp("mwjs: " + s, 2200);
                glscr = l1l0IOIl_puQl1I1IYpr(s);
                setTimeout("glscr=null;", 1800000);
                if (!y) {
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(20);
                    kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr, ChSel)
                } else {
                    l1lQQO0OhRlPLI1OOYpr(RemoteMoonwalk, !1, !0);
                    return
                }
            }
            if (mode == "showinfo") {
                kjtYpr.inf(s, 2500)
            }
            if (mode == "preurl") {
                preurl = l1l0IOIl_puQl1I1IYpr(s);
                if (handler == "vk") llIIl0IO0vMB0I0010Ypr("")
            }
            if (mode == "addstat") {
                if (s == "  ") {
                    countHw = 4;
                    timestamp = 0;
                    kjtYpr.mac = "";
                    kjtYpr.serial = "";
                    kjtYpr.popUp("ID вашего устройства не был определен! Попробуйте сменить способ запуска ForkPlayer или переустановить его!", 3000)
                }
                return
            }
            if (mode == "xhrremote") {
                xhrremote(s);
                return
            }
            if (mode == "extbookmdel") {
                var js = l1l0IOIl_puQl1I1IYpr(s)["channels"][0];
                kjtYpr.inf(js.title, 1500);
                if (js.title.indexOf("Удалено") != -1) {
                    kjtYpr.channels = js.channels;
                    if (select > 0) --select;
                    ll1lIOiIO0lO1IIIYpr = Math.random();
                    kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
                }
                return
            }
            if (mode == "extbookm") {
                kjtYpr.inf(l1l0IOIl_puQl1I1IYpr(s)["channels"][0].title, 1500);
                return
            }
            if (mode == "getVivatId2") {
                statusbar("http://vivat-tv.com/ajax/getDevParams", "text");
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(15);
                var ks = l1l0IOIl_puQl1I1IYpr(s);
                if (ks == null) {
                    kjtYpr.popUp("Vivat TV return NULL", 2000);
                    return
                }
                if (typeof kjtYpr.GL.vivatlogin != "undefined" && typeof kjtYpr.GL.vivatpass != "undefined")
                    if (kjtYpr.GL.vivatlogin != "" && kjtYpr.GL.vivatpass != "") {
                        ks.authatuser = !0;
                        // PullDataFrom("http://193.30.240.2/try/ajax/get_data.php?par=" + l10O0I11gdZlOOIIYpr({
                        PullDataFrom("http://127.0.0.1/try/ajax/get_data.php?par=" + l10O0I11gdZlOOIIYpr({
                            "datamode": "getDevParams",
                            "sn": ss,
                            "mac": sm,
                            "devtype": 0,
                            "authMode": 1,
                            "STBId": ks.devID,
                            "Login": kjtYpr.GL.vivatlogin,
                            "Password": kjtYpr.GL.vivatpass,
                            "loginSave": 1,
                            "unLogOldDev": 1
                        }), "getVivatId3", y, title, ks, request_id);
                        return
                    }
                // PullDataFrom("http://193.30.240.2/try/ajax/get_data.php?par=" + l10O0I11gdZlOOIIYpr({
                PullDataFrom("http://127.0.0.1/try/ajax/get_data.php?par=" + l10O0I11gdZlOOIIYpr({
                    "datamode": "getDevParams",
                    "sn": ss,
                    "mac": sm,
                    "devtype": 0,
                    "authMode": 0,
                    "STBId": ks.devID,
                    "Login": "",
                    "Password": "",
                    "loginSave": 0,
                    "unLogOldDev": 1
                }), "getVivatId3", y, title, ks, request_id);
                return
            }
            if (mode == "getVivatId3") {
                statusbar("http://vivat-tv.com/ajax/get_lk_payments", "text");
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(25);
                var ks0 = l1l0IOIl_puQl1I1IYpr(s);
                ks0.auth = orig;
                if (ks0.reg_stb_id == null) lO0lIlIIlOnIG0Q1QYpr(ks0, y, title);
                // else PullDataFrom("http://193.30.240.2/try/ajax/get_lk_payments.php?rstb_id=" + ks0.reg_stb_id, "getVivatId4", y, title, ks0, request_id);
                else PullDataFrom("http://127.0.0.1/try/ajax/get_lk_payments.php?rstb_id=" + ks0.reg_stb_id, "getVivatId4", y, title, ks0, request_id);
                return
            }
            if (mode == "getVivatId4") {
                var ks0 = orig;
                var ks = l1l0IOIl_puQl1I1IYpr(s);
                ks0.lk = ks;
                lO0lIlIIlOnIG0Q1QYpr(ks0, y, title);
                return
            }
            if (mode == "getVivatId") {
                if (ttmac) kjtYpr.popUp("getVivatId<br>" + s, 3000);
                var ks = l1l0IOIl_puQl1I1IYpr(s);
                if (ks == null) {
                    if (typeof kjtYpr.macv == "undefined" && api_vivat.indexOf("russian") == -1) {
                        kjtYpr.macv = "f" + kjtYpr.mac;
                        kjtYpr.serialv = "f" + kjtYpr.serial;
                        vivat_auth(y, title, "http://obovse.ru/smarttv/vivat.php?do=start&v=md5hash");
                        return
                    }
                } else if (ks.is_access == -2 && typeof kjtYpr.macv == "undefined" && api_vivat.indexOf("russian") == -1) {
                    kjtYpr.macv = "f" + kjtYpr.mac;
                    kjtYpr.serialv = "f" + kjtYpr.serial;
                    vivat_auth(y, title, "http://obovse.ru/smarttv/vivat.php?do=start&v=md5hash");
                    return
                }
                if (y == 2) {
                    ChSel.playlist_url = ChSel.playlist_url.replace("md5hash", encodeURIComponent(s));
                    ChSel.parser = "";
                    select = title;
                    kjtYpr.l0lI10EMI1I10Ypr(null, ChSel);
                    ChSel.parser = ""
                }
                s = l1l0IOIl_puQl1I1IYpr(s);
                if (s == null) {
                    kjtYpr.inf("Ошибка авторизации! ", 1500);
                    device_id = "false";
                    device_token = "false";
                    client_id = "false"
                } else {
                    if (y != 2) {
                        if (s.is_access == 1) kjtYpr.inf("Авторизация успешна! ID " + s.client_id, 1500);
                        else if (s.is_access == -1) kjtYpr.inf("Ошибка авторизации! Недостаточно средств", 1500);
                        else kjtYpr.inf("Ошибка авторизации! Код ошибки " + s.is_access, 1500)
                    }
                    device_id = s.device_id;
                    device_token = s.device_token;
                    client_id = s.client_id
                }
                if (y == 1) {
                    vivat_start = !0;
                    SetTimeDate();
                    setTimeout("kjtYpr.lI11111bPNQ0III1Ypr(true);", 2000)
                }
            }
            if (mode == "setTvArc") {
                s = l1l0IOIl_puQl1I1IYpr(s);
                vivat_settings = s
            }
            if (mode == "gethls") {
                if (s.length < 50) {
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, !0);
                    lI1lI00l1gX0l0l0OYpr(1);
                    if (y == "lg") kjtYpr.popUp("Ошибка получения данных с " + m3u8_url + "!<br>Запуск RemoteFork на PC может помочь!", 2500);
                    else kjtYpr.popUp("Ошибка получения данных с " + m3u8_url + "!", 2500)
                // } else PullDataFromPost("http://195.88.208.101/obovse.ru/smarttv/hdrezka.php?id=post&n=" + encodeURIComponent(m3u8_url), "s=" + encodeURIComponent(s), "sethls", request_id)
                } else PullDataFromPost("http://127.0.0.1/obovse.ru/smarttv/hdrezka.php?id=post&n=" + encodeURIComponent(m3u8_url), "s=" + encodeURIComponent(s), "sethls", request_id)
            }
            if (mode == "m3u8") {
                var mtc = s.replace(/\r/g, "").replace(/\n/g, "").match(/(http.*?m3u8)/g);
                if (mtc != null) {
                    var n = 3 - kjtYpr.GL.quality;
                    if (n < 0) n = 0;
                    if (timestamp < 1 && n == 3) n = 2;
                    if (n > mtc.length - 1) n = mtc.length - 1;
                    m3u8_url = mtc[n];
                    if (y == "post") {
                        PullDataFrom(m3u8_url, "gethls", null, null, null, request_id);
                        return
                    }
                    if (y) {
                        if (remotesubsrc != "") {
                            s = s.replace('#EXTM3U', "#EXTM3U\n" + '#EXT-X-MEDIA:TYPE=SUBTITLES,NAME="Sub1",DEFAULT=NO,AUTOSELECT=YES,FORCED=NO,LANGUAGE="sub",URI="' + remotesubsrc + '"')
                        }
                        PullDataFromPost("http://remote.forkplayer.tv/smarttv/api.php?type=moonwalk&xhr_referer=" + xhr_referer + "&plat" + "form=" + platform + "&do=xhrremote2&v=post&u=" + encodeURIComponent(RemoteMoonwalk), "s=" + encodeURIComponent(s), "xhrremote", request_id);
                        return
                    }
                    l0llQlOl1LaOlQ1Ypr();
                    lI1l1IOllHHCTuO0OlOYpr(m3u8_url)
                }
            }
            if (mode == "tomflight") {
                t_glrek = xhrt.responseText;
                s = t_glrek.split("<br>");
                lO10OIOlxzlO100OIYpr("gallrel", "WEEK " + s[2] + " " + s[1] + ":" + s[0].split(":")[1]);
                if (s[3] == "new") {
                    l0111O0tihuOIIlOYpr("_FPWeek record! Enter your nickname_");
                    VK.Show("search");
                    $_("game").style.zIndex = "0";
                    $_("ll0111l1wxUIOlO1lYpr").style.zIndex = "0";
                    kjtYpr.inputId = "tomflight";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr("VK");
                    VK.shift = 1;
                    VK.Show(VK.id);
                    handler = "vk";
                    ll0111l1wxUIOlO1lYprmode = 0;
                    try {
                        $_("ll0111l1wxUIOlO1lYpr").parentNode.removeChild($_("ll0111l1wxUIOlO1lYpr"))
                    } catch (e) {}
                }
            }
            if (mode == "xml") {
                if (platform == "sams") {}
                if (s.indexOf("#EXTINF") > -1) {
                    data = parsem3u(s)
                } else if (url.indexOf(".txt") > 0) data = {
                    channels: parsetxt(s)
                };
                else data = parsexml(s);
                insetIn(-1, "s", select);
                kjtYpr.l1IlIl01l0tUIl1IIYpr = "xml://" + url;
                kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id)
            } else if (mode == "cmdSetSyncImpAuto") {
                if (autoimpok) return;
                autoimpok = !0;
                var x = s.split("[-..-]");
                if (x.length < 3) loadinfo("<font color=red>_FPError download data, load local settings_!</font>");
                else {
                    kjtYpr.l1IlIl01l0tUIl1IIYpr = mode;
                    var g = 0;
                    for (var i = 0; i < x.length && i < allfs.length; i++) {
                        kjtYpr.lIllOVRj11lO10Ypr(allfs[i], x[i]);
                        g += x[i].length
                    }
                    loadinfo("_FPSize data_ " + g + " _FPBait_!");
                    autoImpOk = !0;
                    setautoimp()
                }
                setTimeout('kjtYpr.kjtYpj("sync");', 1200)
            } else if (mode == "cmdSetSyncImp") {
                var x = s.split("[-..-]");
                if (x.length < 3) kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
                else {
                    kjtYpr.l1IlIl01l0tUIl1IIYpr = mode;
                    var g = '';
                    for (var i = 0; i < x.length && i < allfs.length; i++) {
                        if (allfs[i] == "settings") {
                            var xx = l1l0IOIl_puQl1I1IYpr(x[i]);
                            if (xx != null) {
                                if (ChSel.description.indexOf("my<") != 0) {
                                    xx.vk_code = "";
                                    xx.vk_id = "";
                                    xx.vk_token = ""
                                }
                                xx.ts = "0";
                                x[i] = l10O0I11gdZlOOIIYpr(xx)
                            }
                        }
                        kjtYpr.lIllOVRj11lO10Ypr(allfs[i], x[i])
                    }
                    if (ChSel.description.indexOf("my<") != 0) {
                        kjtYpr.lIllOVRj11lO10Ypr('vk_audio_pl', "");
                        kjtYpr.lIllOVRj11lO10Ypr('vk_audio_sel', "");
                        kjtYpr.lIllOVRj11lO10Ypr('history', '');
                        kjtYpr.lIllOVRj11lO10Ypr('prev', '')
                    }
                    kjtYpr.inf("Иморт завершен", 2500);
                    kjtYpr.popUp("Перезагрузите приложение!");
                    kjtYpr.lIllOVRj11lO10YprC("ts", "0");
                    if (uaJ != "mag") {
                        document.location.reload();
                        location.reload()
                    }
                }
            } else if (mode == "newvideo") {}
            xhrt = null
        }
    };
    if (mode == "newvideo") {
        if (url.length > 30000) {
            url = url.replace("//obovse.ru", "//" + serverLoad[1].url)
        } else if (ServerFromList != "" && url.indexOf("tv/wlist.php") == -1 && url.indexOf("php?bylist=") == -1 && url.indexOf("mylist") == -1 && url.indexOf("smarttv/api") == -1 && url.indexOf("forkiptv.php") == -1) {
            url = url.replace("//obovse.ru", "//" + ServerFromList)
        }
        url = addident(url)
    }
    xhrt.open('GET', url, !0);
    try {
        if (xhr_referer == 3 && url.indexOf("/obovse.ru/") == -1) xhrt.setRequestHeader("User-Agent", ua_chrome)
    } catch (e) {}
    xhrt.send()
};

function closeapp() {
    try {
        if (uaJ == "mag") {
            window.location = resolution_portal
        } else if (uaJ == "dune") {
            window.location = resolution_portal
        } else if (platform == "sams") widgetAPI.sendReturnEvent();
        else if (platform == "tizen") tizen.application.getCurrentApplication().exit();
        else if (platform == "android-device") andr.cmd("exit");
        else if (uaJ == "lg") window.NetCastExit();
        else if (uaJ == "lgw" || uaJ == "lgw2") {
            try {
                webOS.platformBack()
            } catch (e) {}
            window.close()
        } else window.close()
    } catch (e) {}
}

function PullDataFromPost(url, p, mode, request_id) {
    var xhrt = null;
    xhrt = new XMLHttpRequest();
    xhrt.onreadystatechange = function () {
        if (xhrt.readyState == 4) {
            statusbar("off");
            if (mode == "sethls") {
                l0llQlOl1LaOlQ1Ypr();
                lI1l1IOllHHCTuO0OlOYpr(xhrt.responseText)
            }
            if (mode == "cmdSetSyncExpExit") {
                if (xhrt.responseText.indexOf(".frk") > 0) {
                    statusbar("Сохранение данных завершено!   ", "link");
                    statusbar("off");
                    if (autoexl0O1l101l1t_Y0lll1Ypr == "timer") return;
                    if (autoexl0O1l101l1t_Y0lll1Ypr == "store") {
                        if (is_tizen) document.location = "http://smart.obovse.ru/?do=forktizen";
                        else document.location = "http://smart.obovse.ru/?do=fork"
                    } else setTimeout("closeapp();", 1000)
                } else {
                    kjtYpr.inf("Ошибка сохранения данных на сервере! " + xhrt.responseText, 2500)
                }
            } else if (mode == "xmltv") {
                try {
                    eval(xhrt.responseText)
                } catch (e) {
                    statusbar(xhrt.responseText.substr(0, 140))
                }
            } else if (mode == "user") {
                var data = l1l0IOIl_puQl1I1IYpr(xhrt.responseText);
                allTimes = l1l0IOIl_puQl1I1IYpr(data.times)
            } else if (mode == "cmdSetSyncExp") {
                var data = l1l0IOIl_puQl1I1IYpr(xhrt.responseText);
                kjtYpr.l1IlIl01l0tUIl1IIYpr = mode;
                kjtYpr.l00100lIKlBWw1lllIlYpr(data)
            } else if (mode == "translatepage") {
                var data = l1l0IOIl_puQl1I1IYpr(xhrt.responseText);
                if (data.code == '404') {
                    kjtYpr.popUp(data.message, 1500)
                } else {
                    var j = 0;
                    insetIn(-1, "put", "title", data[j++]);
                    kjtYpr.lII1O1LQIDl10IlOYpr();
                    for (var i = 0; i < kjtYpr.channels.length; i++) {
                        kjtYpr.channels[i].title = data[j++];
                        kjtYpr.channels[i].description = data[j++]
                    }
                }
                ll1lIOiIO0lO1IIIYpr = Math.random();
                kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
            }
        }
    };
    xhrt.open('POST', url, !0);
    xhrt.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhrt.send(p)
}

function rand(min, max) {
    var argc = arguments.length;
    if (argc === 0) {
        min = 0;
        max = 2147483647
    } else if (argc === 1) {
        throw new Error('Warning: rand() expects exactly 2 parameters, 1 given')
    }
    return Math.floor(Math.random() * (max - min + 1)) + min
}
rTime1 = 30;
rTime2 = 150;
var timerremote = setTimeout("xhrremote();", rTime1 * 1000),
    RemoteMoonwalk = "";

function is_onRemote(m) {
    if (kjtYpr.GL.remote >= 2 && kjtYpr.GL.remoteactive) {
        if (m == null || kjtYpr.GL.remoteip.match(/\d+\.\d+:802(7|8)/)) return 1
    }
    return 0
}

function xhrremote(s) {
    var request_id = -1;
    if (box_low2 || FgetSetting(12)) return;
    if (ipCountry != "UA" && ipCountry != "RU" && ipCountry != "BY") return;
    if (!is_loadpage() && (app_cors || is_onRemote(1))) {
        var type = "";
        if (is_onRemote(1)) {
            rTime2 = 150;
            if (kjtYpr.GL.remoteip.match(/:8027/)) type = "curl_windows" + "|moonwalk";
            else if (kjtYpr.GL.remoteip.match(/:8028/)) type = "curl_androind" + "|moonwalk"
        } else if (app_cors) {
            rTime2 = 500;
            if (platform == "android-device") {
                if ((kjtYpr.build >= 5.1 && kjtYpr.build < 5.6) || kjtYpr.build >= 6.0) {
                    type = uaJ + "|moonwalk";
                    rTime2 = 250
                } else return
            } else if (xhr_referer == 1 || xhr_referer == 2) {
                type = "referer";
                rTime2 = 1500
            } else if (loader_orig == "lg_webos_ide") type = "lg_webos_ide";
            else if (kjtYpr.series == "D" || kjtYpr.series == "C") {
                type = "sams_d";
                rTime2 = 1500
            } else if (xhr_referer == 3) {
                type = uaJ + "|moonwalk";
                rTime2 = 250
            } else if (xhr_referer == 0) {
                type = uaJ + "|no_referer";
                rTime2 = 1200
            }
        } else type = "null";
        if (s == null) PullDataFrom("http://remote.forkplayer.tv/smarttv/api.php?plat" + "form=" + platform + "" + (platform == "android-device" ? "&build=" + kjtYpr.build : "") + "&xhr_referer=" + xhr_referer + "&type=" + type + "&do=xhrremote2&rf_ver=" + rf_ver + "&version=13&v=get&country=" + ipCountry, "xhrremote", null, null, null, request_id);
        else {
            var allx = s.split("\n");
            if (allx.length > 2) x = allx[rand(0, allx.length - 1)];
            else x = s.split("\n")[0];
            if (x.indexOf("http") != 0 && x.indexOf("curl") != 0) return;
            if (x.indexOf("http") == 0 && x.indexOf("/iframe") > 0) {
                RemoteMoonwalk = x;
                l1lQQO0OhRlPLI1OOYpr(x, !1, !0);
                return
            }
            aborttimer = setTimeout("RemoteXhr.abort();", 25000);
            RemoteXhr = null;
            RemoteXhr = new XMLHttpRequest();
            RemoteXhr.onreadystatechange = function () {
                if (RemoteXhr.readyState == 4) {
                    clearTimeout(aborttimer);
                    var xs = RemoteXhr.responseText;
                    if (xs.length > 10) {
                        PullDataFromPost("http://remote.forkplayer.tv/smarttv/api.php?rf_ver=" + rf_ver + "&xhr_referer=" + xhr_referer + "&country=" + ipCountry + "&type=" + type + "&plat" + "form=" + platform + "&do=xhrremote2&v=post&u=" + encodeURIComponent(x), "s=" + encodeURIComponent(xs), "xhrremote", request_id)
                    }
                }
            };
            if (x.indexOf("curl") == 0) var xurl = x;
            else xurl = 'curl "' + x + '" -H "User-Agent: ' + ua_chrome + '"';
            if (is_onRemote(1)) {
                RemoteXhr.open("GET", "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(xurl), !0);
                RemoteXhr.send()
            } else if (platform == "android-device") {
                waitc.mode = rand(0, 100);
                waitcurl("init", waitc.mode, "remote");
                waitc.url = x;
                s = andr.cmd2("wait" + xurl, waitc.mode)
            } else if (app_cors && x.indexOf("curl") != 0) {
                RemoteXhr.open("GET", x, !0);
                RemoteXhr.send()
            }
        }
    }
    clearTimeout(timerremote);
    timerremote = setTimeout("xhrremote();", rTime2 * 1000)
}

function parsetxt(s) {
    data = [];
    var lI00IlDbcQIII1Ypr = s.replace(/\r/g, "").split('\n');
    for (var index = 0; index < lI00IlDbcQIII1Ypr.length; index++) {
        data.push({
            "title": lI00IlDbcQIII1Ypr[index].split("/")[lI00IlDbcQIII1Ypr[index].split("/").length - 1],
            "stream_url": lI00IlDbcQIII1Ypr[index],
            description: lI00IlDbcQIII1Ypr[index]
        })
    }
    if (channels.length) kjtYpr.typeSource = "txt";
    return data
}

function parsem3u(s, xu) {
    var data = [],
        pl = {};
    s = s.replace(/\r/g, "");
    dd1 = new Date().getTime();
    var mtg = "catchup-source|catchup|catchup-days|url-tvg".split("|");
    for (var i in mtg) {
        var mtc = s.match(new RegExp("#EXTM3U.*?" + mtg[i] + "=(.*?)( |,|$)", "m"));
        if (mtc != null) {
            pl[mtg[i].replace("-", "_")] = mtc[1].replace(/("|')/g, "")
        } else pl[mtg[i].replace("-", "_")] = ""
    }
    var lI00IlDbcQIII1Ypr = s.split('\n');
    try {
        for (var index = 0; index < lI00IlDbcQIII1Ypr.length; index++) {
            if (lI00IlDbcQIII1Ypr[index].indexOf("#EXTINF:") > -1) {
                title = lI00IlDbcQIII1Ypr[index].substring(lI00IlDbcQIII1Ypr[index].indexOf(",") + 1);
                title = title.replace(/^\s*/, "").replace(/\s*$/, "").replace(/\r/g, "").replace(/\n/g, "");
                var regexp = new RegExp("tvg-shift=(.*?)( |,)");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var tvgshift = items[1].replace(/"/g, "").replace(/'/g, "")
                }
                var regexp = new RegExp("(catchup|catchup-type)=(.*?)( |,)");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var catchup = items[2].replace(/("|')/g, "")
                } else catchup = "";
                var regexp = new RegExp("catchup-days=(.*?)( |,)");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var catchup_days = items[1].replace(/"/g, "").replace(/'/g, "")
                } else catchup_days = "";
                var regexp = new RegExp("catchup-source=(.*?)( |,)");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var catchup_source = items[1].replace(/"/g, "").replace(/'/g, "")
                } else catchup_source = "";
                var regexp = new RegExp("group-title=.(.*?)(\"|,|')");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var group = items[1].replace(/"/g, "").replace(/'/g, "")
                } else group = "";
                var regexp = new RegExp("tvg-logo=.(.*?)(\"|,|')");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var logo = items[1].replace(/"/g, "").replace(/'/g, "");
                    if (logo.indexOf("http") != 0) logo = ""
                } else logo = "";
                var regexp = new RegExp("(tvg-name|tvg-id)=.(.*?)(\"|,|')");
                if (items = regexp.exec(lI00IlDbcQIII1Ypr[index])) {
                    var tvgname = items[2].replace(/"/g, "").replace(/'/g, "")
                } else tvgname = "";
                var urlind = index + 1;
                while (lI00IlDbcQIII1Ypr[urlind].indexOf("magnet:") == -1 && lI00IlDbcQIII1Ypr[urlind].indexOf("https:") == -1 && lI00IlDbcQIII1Ypr[urlind].indexOf("http:") == -1 && lI00IlDbcQIII1Ypr[urlind].indexOf(":\/\/") == -1 && lI00IlDbcQIII1Ypr[urlind].indexOf("://") == -1 && urlind < lI00IlDbcQIII1Ypr.length) {
                    if (group == "") {
                        regexp = new RegExp("#EXTGRP:(.*?)(\n|$)");
                        if (items = regexp.exec(lI00IlDbcQIII1Ypr[urlind])) {
                            group = items[1]
                        }
                    }
                    urlind++;
                    if (urlind >= lI00IlDbcQIII1Ypr.length - 1) break
                }
                var url = lI00IlDbcQIII1Ypr[urlind].replace(/^\s*/, "").replace(/\s*$/, "");
                if (url.indexOf("45397/MediaServer") > 0) title = title.replace("- ", "");
                if (xu != null) {
                    if ((xu.match(/(remotefo\.rk|8027|8028)\/treeview/) && xu.indexOf(".m3u") == -1 && xu.indexOf(".xml") == -1)) {
                        var decu = decodeURIComponent(url);
                        if (url.indexOf(".xml") > 0 || url.indexOf(".m3u") > 0 || url[url.length - 1] == '/' || url[url.length - 1] == '\\' || decu[decu.length - 1] == '/' || decu[decu.length - 1] == '\\') {
                            data.push({
                                "title": title,
                                "playlist_url": decu,
                                "tvg-shift": tvgshift
                            });
                            index++;
                            continue
                        }
                    }
                }
                data.push({
                    "title": title,
                    "logo_30x30": logo,
                    "stream_url": url,
                    "jtvname": tvgname,
                    "tvg-shift": tvgshift,
                    "group": group,
                    "catchup_days": catchup_days,
                    "catchup_source": catchup_source,
                    "catchup": catchup
                });
                index++
            }
        }
        if (data.length) kjtYpr.typeSource = "m3u";
        pl["chan" + "nels"] = data;
        var mat = s.match(/#PLAYLIST:(.*)/i);
        if (mat != null) pl.title = mat[1];
        var mat = s.match(/#ICON:(.*)/i);
        if (mat != null) pl.icon = mat[1];
        var mat = s.match(/#BACKGROUND-IMAGE:(.*)/i);
        if (mat != null) pl["background-image"] = mat[1]
    } catch (e) {
        return {
            "channels": []
        }
    }
    return pl
}

function parseacestream(s) {
    data = l1l0IOIl_puQl1I1IYpr(s);
    kjtYpr.typeSource = "acestream";
    var pl = {
        "title": "Torrserve",
        "channels": []
    }
    if (data == null) {
        pl.before = "<center>Ошибка ответа от Ace Stream!<br>Проверьте запущена ли программа по адресу " + kjtYpr.REQUEST_XML + ". <br> Если локальный IP адрес хоста вашего Ace Stream не совпадает - укажите его в Настройках приложения в Ace Stream direct</center>"
    } else {
        pl.before = "<center>Ace Stream" + (data.error != null ? "<br>Ошибки: " + data.error : "") + "</center>";
        var obj = [];
        for (var i in data.result) {
            obj.push({
                "id": i,
                "text": data.result[i]
            })
        }
        obj.sort(function (a, b) {
            str1 = a.text;
            str2 = b.text;
            try {
                var rx = /([^\d]+|\d+)/ig;
                var str1split = str1.match(rx);
                var str2split = str2.match(rx);
                for (var i = 0, l = Math.min(str1split.length, str2split.length); i < l; i++) {
                    var s1 = str1split[i],
                        s2 = str2split[i];
                    if (s1 === s2) continue;
                    if (isNaN(+s1) || isNaN(+s2)) {
                        return s1 > s2 ? 1 : -1
                    } else return +s1 - s2
                }
            } catch (e) {
                return 0
            }
            return 0
        });
        var data = {};
        for (var i = 0; i < obj.length; i++) {
            pl.channels.push({
                "title": obj[i].text,
                "stream_url": kjtYpr.REQUEST_XML.replace("server/api?method=get_media_files", "ace/getstream?_idx=" + obj[i].id + "&"),
                "logo_30x30": "",
                "description": ""
            })
        }
        for (var i = 0; i < obj.length; i++) {
            pl.channels.push({
                "title": "(hls) " + obj[i].text,
                "stream_url": kjtYpr.REQUEST_XML.replace("server/api?method=get_media_files", "ace/manifest.m3u8?_idx=" + obj[i].id + "&"),
                "logo_30x30": "",
                "description": ""
            })
        }
    }
    return pl
}

function parsetorrserve(s) {
    data = l1l0IOIl_puQl1I1IYpr(s);
    kjtYpr.typeSource = "torrserve";
    var pl = {
        "title": "Torrserve",
        "channels": []
    }
    if (data == null) {
        pl.before = "<center>Ошибка ответа от Torrserve!<br>Проверьте запущена ли программа по адресу " + kjtYpr.REQUEST_XML + ". <br> Если локальный IP адрес хоста вашего Torrserve не совпадает - укажите его в Настройках приложения / TORRSERVE_IP</center>"
    } else {
        pl.before = "<center>Torrserver<br>" + data.Name + "<br>Size: " + ToSize(data.TorrentSize) + " TotalPeers: " + data.TotalPeers + "</center>";
        for (var i in data.FileStats) {
            pl.channels.push({
                "title": data.FileStats[i].Path,
                "stream_url": kjtYpr.REQUEST_XML + "&file=" + data.FileStats[i].Id + " " + ToSize(data.FileStats[i].Length)
            })
        }
    }
    return pl
}

function parsehms(s) {
    s = s.replace(/\r/g, "").replace(/\n/g, "");
    if (typeof kjtYpr.GL.hms == "undefined" || kjtYpr.GL.hms == "") kjtYpr.GL.hms = kjtYpr.GL.remoteip.split(":")[0] + ":45397";
    var channels = [],
        output = {};
    try {
        var regexp = new RegExp("<img class=\"imagelist\" src=\"(.*?)\".*?title=\"(.*?)\" href=\"(.*?)\"", "ig");
        while ((ch = regexp.exec(s)) != null) {
            channels.push({
                "title": ch[2],
                "logo_30x30": "http://" + kjtYpr.GL.hms + ch[1],
                "playlist_url": "http://" + kjtYpr.GL.hms + ch[3].replace("count=0", "count=0;").replace("count=15", "count=0;")
            })
        }
    } catch (e) {}
    if (channels.length) kjtYpr.typeSource = "hms";
    output.channels = channels;
    return output
}

function parsexspf(s) {
    s = s.replace(/\r/g, "").replace(/\n/g, "");
    var channels = [],
        output = {};
    try {
        var regexp = new RegExp("<track>(.*?)<\/track>", "ig");
        while ((ch = regexp.exec(s)) != null) {
            var title = "",
                url = "";
            var mtc = ch[1].match(/<title>(.*?)<\/title>/);
            if (mtc != null) {
                title = mtc[1]
            }
            var mtc = ch[1].match(/<location>(.*?)<\/location>/);
            if (mtc != null) {
                url = mtc[1]
            }
            if (title == "") title = url.split("/")[url.split("/").length - 1];
            channels.push({
                "title": title,
                "logo_30x30": "",
                "stream_url": url
            })
        }
    } catch (e) {}
    if (channels.length) kjtYpr.typeSource = "xspf";
    output.channels = channels;
    return output
}

function xmlTagToChArr(s, tag, tags) {
    var result = [],
        i = 0;
    var regexp = new RegExp("<" + tag + ">(.*?)</" + tag + ">", "ig");
    while ((ch = regexp.exec(s)) != null) {
        result.push({});
        for (var j = 0; j < tags.length; j++) {
            var reg2 = new RegExp("<" + tags[j] + ".*?>(.*?)</" + tags[j] + ">", "ig");
            if ((t = reg2.exec(ch[1])) != null) {
                res = t[1].replace("<![CDATA[", "").replace("]]>", "")
            } else res = "";
            result[i][tags[j]] = trim2(res)
        }
        i++
    }
    return result
}

function parsexml(s) {
    s = s.replace(/\r/g, "").replace(/\n/g, "");
    var channels = [],
        i = 0,
        output = {},
        cat_id = {};
    try {
        var regexp = new RegExp("<category>(.*?)<\/category>", "ig");
        while ((ch = regexp.exec(s)) != null) {
            var reg2 = new RegExp("<category_id>(.*?)</category_id>", "ig");
            if ((t = reg2.exec(ch[1])) != null) {
                res = t[1].replace("<![CDATA[", "").replace("]]>", "")
            } else res = "";
            var reg2 = new RegExp("<category_title>(.*?)</category_title>", "ig");
            if ((t = reg2.exec(ch[1])) != null) {
                res2 = t[1].replace("<![CDATA[", "").replace("]]>", "")
            } else res2 = "";
            cat_id[res] = res2
        }
        var regexp = new RegExp("<channel>(.*?)(</channel>|$)", "ig");
        while ((ch = regexp.exec(s)) != null) {
            channels.push({});
            tags = pltags;
            for (var j = 0; j < tags.length; j++) {
                if (tags[j] == "group") continue;
                var reg2 = new RegExp("<" + tags[j] + ".*?>(.*?)</" + tags[j] + ">", "ig");
                if ((t = reg2.exec(ch[1])) != null) {
                    res = t[1];
                    if (res != "" && tags[j] == "SetTimeInterval") {
                        try {
                            var x = xmlToJSON.parseString("<SetTimeInterval>" + res + "</SetTimeInterval>");
                            if (x != null) channels[i].SetTimeInterval = x.SetTimeInterval
                        } catch (e) {}
                        continue
                    }
                    res = t[1].replace("<![CDATA[", "").replace("]]>", "")
                } else res = "";
                if (tags[j] == "category_id") {
                    var resspl = res.split(",");
                    res = "";
                    for (var k = 0; k < resspl.length; k++) {
                        if (res != "") res += ";";
                        if (typeof cat_id[resspl[k]] != "undefined") res += cat_id[resspl[k]];
                        else res += resspl[k]
                    }
                    channels[i].group = trim2(res)
                } else channels[i][tags[j]] = trim2(res)
            }
            var subs = xmlTagToChArr(ch[1], "submenu", pltags);
            if (subs.length) channels[i].submenu = subs;
            i++
        }
        var menu = [],
            i = 0;
        var regexp = new RegExp("<menu>(.*?)</menu>", "ig");
        var tmps = s.replace(/<style>.*?<\/style>/ig, "");
        while ((ch = regexp.exec(tmps)) != null) {
            menu.push({});
            tags = pltags;
            for (var j = 0; j < tags.length; j++) {
                var reg2 = new RegExp("<" + tags[j] + ".*?>(.*?)</" + tags[j] + ">", "ig");
                if ((t = reg2.exec(ch[1])) != null) {
                    res = t[1].replace("<![CDATA[", "").replace("]]>", "")
                } else res = "";
                menu[i][tags[j]] = trim2(res)
            }
            var subs = xmlTagToChArr(ch[1], "submenu", pltags);
            if (subs.length) menu[i].submenu = subs;
            i++
        }
        var style = {};
        var regexp = new RegExp("<style>(.*?)</style>", "ig");
        while ((ch = regexp.exec(s)) != null) {
            result = xmlToJSON.parseString(ch[1]);
            style = collect(style, result)
        }
    } catch (e) {}
    try {
        tags = plgltags;
        s = s.replace(/<channel>.*?<\/channel>/ig, "");
        s = s.replace(/<menu>.*?<\/menu>/ig, "");
        s = s.replace(/<style>.*?<\/style>/ig, "");
        for (j = 0; j < tags.length; j++) {
            var reg2 = new RegExp("<" + tags[j] + ".*?>(.*?)</" + tags[j] + ">", "ig");
            if ((t = reg2.exec(s)) != null) {
                res = t[1].replace("<![CDATA[", "").replace("]]>", "")
            } else res = "";
            output[tags[j]] = res
        }
    } catch (e) {}
    if (channels.length) kjtYpr.typeSource = "xml";
    output.channels = channels;
    output.menu = menu;
    output.style = style;
    return output
}
img_dir = "img";
ServerFromList = lI101lOIQOlTlQ10I1Ypr = "obovse.ru";
var serverLoad = [{
    "url": "46.36.220.208/obovse.ru",
    "img": "http://46.36.220.208/obovse.ru/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "46.36.222.114/getlist1.obovse.ru",
    "img": "http://46.36.222.114/getlist1.obovse.ru/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "obovse.ru",
    "img": "http://obovse.ru/ForkPlayer2.5/img",
    "pr": 12000
}, {
    "url": "79.98.29.139/xhr",
    "img": "http://79.98.29.139/xhr/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "n",
    "img": "n",
    "pr": -1
}, {
    "url": "n",
    "img": "n",
    "pr": -1
}, {
    "url": "85.17.30.89/obovse.ru",
    "img": "http://85.17.30.89/obovse.ru/ForkPlayer2.5/img",
    "pr": 50
}, {
    "url": "n",
    "img": "n",
    "pr": -1
}, {
    "url": "46.36.218.194/obovse.ru",
    "img": "http://46.36.218.194/obovse.ru/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "217.79.190.156/obovse.ru",
    "img": "http://217.79.190.156/obovse.ru/ForkPlayer2.5/img",
    "pr": 8800
}, {
    "url": "n",
    "img": "n",
    "pr": -1
}, {
    "url": "195.88.208.101/obovse.ru",
    "img": "http://195.88.208.101/obovse.ru/ForkPlayer2.5/img",
    "pr": 600
}, {
    "url": "185.158.114.122/obovse.ru",
    "img": "http://185.158.114.122/obovse.ru/ForkPlayer2.5/img",
    "pr": 3000
}, {
    "url": "51.15.17.204/obovse.ru",
    "img": "http://51.15.17.204/obovse.ru/ForkPlayer2.5/img",
    "pr": 300
}];

var serverLoad = [{
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 12000
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": -1
},{
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 50
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": -1
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 8800
},  {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 600
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 3000
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 300
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 300
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 300
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 300
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 300
}, {
    "url": "player.local",
    "img": "http://player.local/ForkPlayer2.5/img",
    "pr": 300
}];


var xhrl = {},
    cached = {
        "start": ""
    },
    prload = !1,
    prloadi = !1;
nServer = -1;

function invert(n1, n2) {
    var x = serverLoad[n1].pr;
    serverLoad[n1].pr = serverLoad[n2].pr;
    serverLoad[n2].pr = x
}

function reset_server(mode) {
    var xr = Math.random();
    if (xr > 0.95) {
        invert(12, 6)
    } else if (xr > 0.65) {
        invert(11, 6)
    } else if (xr > 0.2) {
        invert(13, 6)
    } else if (xr > 0.1) {
        invert(7, 6)
    }
    if (mode != null) {
        return
    }
    for (var i = 0; i < serverLoad.length; i++) {
        if (serverLoad[i].pr > 0) {
            if (i == 2 && tFlp == "lg") var tt = 3500;
            else tt = serverLoad[i].pr;
            if (servC != "")
                if (servC > 0) tt += 6000;
            xnn++;
            setTimeout("if(!prload) ll1I0aX1lI1IYpr(" + i + ");", tt)
        }
    }
}
if (document.location.href.indexOf("test_server=") > 0) {
    or = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(serverLoad));
    var n = 10000,
        gp = {};
    for (var i = 0; i < n; i++) {
        serverLoad = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(or));
        reset_server(!0);
        min = 99999;
        smin = -1;
        for (var j = 0; j < serverLoad.length; j++) {
            if (serverLoad[j].pr > 0 && serverLoad[j].pr < min) {
                smin = j;
                min = serverLoad[j].pr
            }
        }
        if (typeof gp[smin] == "undefined") gp[smin] = 0.01;
        else gp[smin] += 0.01
    }
    console.log = function () {}
}
var xnn = 0,
    xne = 0;

function ll1I0aX1lI1IYpr(n) {
    xhrl["p" + n] = new XMLHttpRequest();
    xhrl["p" + n].onreadystatechange = function () {
        if (xhrl["p" + n].readyState == 4) {
            if (!prload) {
                loadinfo("_FPConnectToServer_: " + n + "...")
            }
            var s = xhrl["p" + n].responseText;
            if (s.indexOf("channels") == -1 && !prload) {
                if (xnn > 0 && ++xne == xnn) {
                    n = 2;
                    var errl = !0;
                    lO10OIOlxzlO100OIYpr("startcmd", "");
                    loadinfo("_FPServer_ offline OK!");
                    s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("cached_start");
                    if (s.indexOf("channels") == -1) s = '{"playlist_name":"","channels":[]"}'
                }
            } else {
                if (installedLocal) kjtYpr.lIllOVRj11lO10Ypr("cached_start", s)
            }
            if (s.indexOf("channels") > 0 && !prload) {
                try {
                    if (!errl) loadinfo("_FPServer_ " + n + ": OK!");
                    nServer = n;
                    ServerFromList = server_load = serverLoad[n].url;
                    AddToPage("http://player.local/js/underscore.js");
                    lI101lOIQOlTlQ10I1Ypr = serverLoad[n].url;
                    prload = !0;
                    loadinfo("_FPZagruzka_ _FPInterface_...");
                    if (version_local_files >= 180502) img_dir = "img";
                    else img_dir = serverLoad[n].img;
                    cached.start = s;
                    if (ifrrw) {
                        if (ifrreaded) kjtYpr.kjtYpj();
                        setTimeout("if(!inited) {ifrrw=false;loadinfo('<b>Error Writing and Reading data! Force load...</b>');}", 7000);
                        setTimeout("if(!inited) {ifrrw=false;kjtYpr.kjtYpj();}", 9000)
                    } else if (servC != "" && servC > 0) setTimeout("kjtYpr.kjtYpj();", 50);
                    else if ((platform == "sams" && box_low) || uaJ == "sony" || uaJ == "ph") setTimeout("kjtYpr.kjtYpj();", 1400);
                    else setTimeout("kjtYpr.kjtYpj();", 1400);
                    try {
                        for (var i = 0; i < serverLoad.length; i++)
                            if (i != n) {
                                xhrl["p" + i].abort();
                                clearTimeout(xhrl["t" + i])
                            }
                    } catch (e) {}
                    clearTimeout(xhrl["t" + n])
                } catch (e) {
                    loadinfo("<b>_FPError_: " + e.message + "</b>")
                }
            }
        }
    };
    url = 'http://player.local/extra/recommendation';
    xhrl["p" + n].open('GET', url, !0);
    xhrl["p" + n].send();
    xhrl["t" + n] = setTimeout('if(!prload) {xhrl["p' + n + '"].abort();loadinfo("<b>_FPServer_ ' + n + ': busy!</b>");}', 5000)
};
var servC = kjtYpr.lIlOOIIlIEIzH1l1OIYprC("serv");
if (servC == "") {
    try {
        servC = window.localStorage.getItem("serv")
    } catch (e) {
        servC = ""
    }
}
if (document.location.href.indexOf("sub_server=") > 0) servC = document.location.href.substr(document.location.href.indexOf("sub_server=") + 11).split("#")[0];
var tId, tonloaded = !1;
(function () {
    var tCount = 0;
    tId = setInterval(function () {
        tCount++;
        if ((document.readyState == "complete" || tCount > 100) && tCount > 8) onComplete()
    }, 100);

    function onComplete() {
        if (tonloaded) return;
        tonloaded = !0;
        clearInterval(tId);
        if (!is_tizen && !1 && ua.match(/tizen/) && !ua.match(/maple/) && homeurl.indexOf("operatv.obovse.ru") == -1 && homeurl.indexOf("file") == -1) {
            loadinfo("_FPZagruzka_ ForkPlayer 2.5: FALSE");
            loadinfo("Tizen webapis divan.tv Not Found");
            prload = 1;
            prloadi = 1
        } else {
            loadinfo("_FPZagruzka_ ForkPlayer 2.5: OK");
            if (platform == "sams") loadinfo("_FPINFO_: _FPForResetAppPressButton_ TOOLS");
            else loadinfo("_FPINFO_: _FPForResetAppPressButton_ <span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPMenu_");
            if (servC != "" && servC > 0) {
                loadinfo("<b>_FPPreferred server_ " + servC + "</b>");
                ll1I0aX1lI1IYpr(servC);
                setTimeout("reset_server();", 5000)
            } else reset_server()
        }
    }
})();
var vivat_pl = "";

function is_vivat(url) {
    try {
        if (url == null) url = kjtYpr.l1IlIl01l0tUIl1IIYpr;
        if (url.indexOf(".php?id=open") > 0) return 0;
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("vostorg.php") > 0) {
            vivat_pl = "vostorg.php";
            api_vivat = "http://main.vostorg.tv/russian/api"
        } else if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("vivat2.php") > 0) {
            // api_vivat = "http://193.30.240.2/portal/ajax";
            api_vivat = "http://127.0.0.1/portal/ajax";
            vivat_pl = "vivat2.php"
        }
        if (url.indexOf("cmdVivatArc") == 0) return 2;
        else if ((url.indexOf("vivat.php?do=list") > 0 || url.indexOf("vivat2.php?do=list") > 0 || url.indexOf("vostorg.php?do=list") > 0) && url.indexOf("is_fav=1") > 0) return 4;
        else if (url.indexOf("vivat.php?do=list") > 0 || url.indexOf("vivat2.php?do=list") > 0 || url.indexOf("vostorg.php?do=list") > 0) return 3;
        else if (url.indexOf("vivat2.php") > 0 || url.indexOf("vivat.php") > 0 || url.indexOf("vostorg.php") > 0) return 1;
        else return 0
    } catch (e) {
        return 0
    }
}

function l1IOIIz1l0Ol110Ypr(url) {
    if (url == null) url = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    for (var i = 0; i < serverLoad.length; i++)
        if (url == "http://" + serverLoad[i].url + "/alexkdpulg.php") return !0;
    if (url.indexOf("isstartmenu") > 0 || url == "about:blank") return !0;
    return !1
}

function is_audio(url) {
    if (select >= 0 && typeof curCh() != "undefined")
        if (curCh("title").indexOf(".mp3") > 0) return !0;
    if (url.indexOf("mycdn.me/file.go") > 0 || url.indexOf(".mp3") > 0 || url.indexOf("/getsong/") > 0) return !0;
    else return !1
}

function is_mw(url) {
    if (url.indexOf(".m3u8") > 0 || is_local(url)) return 0;
    if (url.match(/^https?:\/\/[^\/]+\/(serial|video)\/[^\/]+\/iframe/)) return !0;
    else return !1
}

function is_hdgo(url) {
    if (is_local(url)) return 0;
    try {
        if (ChSel.menu_url == "hdgo") return !0
    } catch (e) {}
    if (url.match(/\.(flv|mp4|mkv|avi|3gp|m2t|m2ts|mov|mpg|mpeg|ts).{0,1}/)) return !1;
    if (url.match(/\/\/(go|to)\..*\/video\//)) {
        return !0
    }
    if (url.match(/\/video\/(t|serials)\/[^\/]+\/\d\d+/)) return !0;
    if (url.match(/\/video\/playlist\/\d+/)) return !0;
    if (url.match(/(hdgo\.|streamvideo\.ru|cdnbalancer\.ru|countvideodb\.ru|thevideocom\.ru|apollostream\.xyz|6nnt0lmhf219\.ru).{8}/)) return !0;
    // if ((kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("hdpult.php") > 0 && url.indexOf("/video") > 0) || url.indexOf("apollovideo.ru") > 0 || url.indexOf("46.30.41.122") > 0 || url.indexOf("46.30.43.38") > 0 || url.indexOf("hdpult.com") > 0) return !0;
    if ((kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("hdpult.php") > 0 && url.indexOf("/video") > 0) || url.indexOf("apollovideo.ru") > 0 || url.indexOf("127.0.0.1") > 0 || url.indexOf("127.0.0.1") > 0 || url.indexOf("hdpult.com") > 0) return !0;
    else return !1
}

function is_vod(url) {
    try {
        if (url == null) url = playUrl;
        if (kjtYpr.global.is_iptv == "false") return 2;
        if (kjtYpr.global.is_iptv == "true" || kjtYpr.global.is_iptv) return 0;
        if (typeof url == 'undefined') return 1;
        if (url.match(/\/ace\//i)) return 1;
        if (handler == "player") {
            if (curTime > 0 && totalTime > 120 && totalTime < 11 * 3600) return 1
        }
        if (is_hdgo(url) || is_mw(url) || kjtYpr.l1IlIl01l0tUIl1IIYpr.match(/(kinokrad|uakino|amcnet|3tv.im)\.php/) || url.indexOf("hls/tracks-") > 0 || url.indexOf("hdrezka.php") > 0 || url.indexOf("3tv.im") > 0 || url.indexOf(":5555/") > 0) return 2;
        else return 0
    } catch (e) {
        return 1
    }
}

function is_thvp(url) {
    if (url == null) return !1;
    if ((url.indexOf(":5555/") > 0 || url.indexOf(":33829/") > 0) && url.indexOf(kjtYpr.GL.remoteip.split(":")[0]) > 0) return !0;
    else return !1
}

function is_img(url) {
    try {
        if (url == null) url = playUrl;
        if (url.match(/\.(jpg|gif|png|jpeg)/i) || url.indexOf("image/") == 0) return !0;
        else return !1
    } catch (e) {
        return !1
    }
}

function logtime(mode) {
    return;
    if (kjtYpr.mac == '3ccd939893f1' || kjtYpr.mac == 'f46d04148b88') {
        var d = new Date().getTime();
        if (mode == 1) {
            lO10OIOlxzlO100OIYpr("bstatus", d - a[0]);
            a = []
        } else a.push(d)
    }
}
var statusTimer;

function statusbar(text, mode) {
    if (typeof text == "undefined") text = "";
    if ((handler == "player" || handler == "qual") && $_("loading").style.display != "block" && text != "off") return;
    clearTimeout(statusTimer);
    var timer = 45000,
        timer2 = 40;
    if (text == "off") $_("statbar").style.display = "none";
    else {
        if (mode == "link") {
            if (text.indexOf("curl") == 0) {
                var curl = parseCURL(text);
                text = curl.url;
                if (curl.method == "POST") text += " " + curl.body
            }
            if (text.indexOf("?list=") > 0) {
                text = unescape(text.split("?list=")[1])
            }
            text = text.replace(/&wlIO11l11NEB100OYpr=.*/, "");
            text = text.replace(/\?wlIO11l11NEB100OYpr=.*/, "");
            text = text.replace(/http:\/\/.*?\/(getlist1.)?obovse.ru\//, "http://obovse.ru/");
            for (var i in baseurl) {
                if (text.indexOf(i) >= 0) text = text.replace(/http.*?\.php/, baseurl[i])
            }
            text = text.replace(/http:\/\/.*?\/xhr\//, "http://obovse.ru/");
            text = text.replace("forkiptv.php", "tv");
            text = text.replace("http://obovse.ru/", "...");
            text = text.replace(/.*?\/xhr.php.../, "...");
            text = "_FPOzhidanie_ " + text
        } else if (mode == "dns") {
            text = "_FPOzhidanie_ DNS " + text
        } else if (mode == "orig") {
            return;
            if (text.indexOf("obovse.ru") == -1 && text.indexOf("xhr/") == -1) return;
            timer = 1500;
            timer2 = 300
        } else if (mode == "translate") {
            timer = 60000;
            timer2 = 300;
            text = "_FPOzhidanie_ " + text
        } else if (mode == "copy") {
            timer = 900000;
            timer2 = 30
        }
        if (mode == "fulllink") {
            if (text.lastIndexOf("http") > 5) {
                var text = "_FPOzhidanie_ " + "http" + decodeURIComponent(text.split("http")[1])
            } else text = "_FPOzhidanie_ " + text
        } else if (mode != "copy") {
            if (text.length > 60) text = text.substr(0, 60);
            else if (text.lastIndexOf("_") < text.length - 5) text = text.substr(0, text.length - 5) + ".."
        }
        if (text.lastIndexOf("http") > 5) {
            try {
                var text = "_FPOzhidanie_ " + decodeURIComponent("http" + text.split("http")[1])
            } catch (e) {}
        }
        lO10OIOlxzlO100OIYpr("statbar", text);
        $_("statbar").style.display = "block";
        statusTimer = setTimeout('$_("statbar").style.display="none";', timer)
    }
}

function jwon() {
    if (typeof jwplayer == "undefined") {
        AddToPage("http://" + ServerFromList + "/ForkPlayer2.5/jw/index.js");
        AddToPage("http://" + ServerFromList + "/ForkPlayer2.5/jw/provider.hlsjs.js")
    }
}

function loadxmltv(u) {
    // if (ServerFromList == "") var x = "85.17.30.89/obovse.ru";
    if (ServerFromList == "") var x = "127.0.0.1/obovse.ru";
    else x = ServerFromList;
    // x = "195.88.208.101/obovse.ru";
    x = "127.0.0.1/obovse.ru";
    if (u != null) {
        if (typeof JtvCFxmltv != "undefined")
            if (typeof JtvCFxmltv[md5(u).substring(0, 7)] != "undefined") return;
        JtvCFxmltv = {};
        JtvEFxmltv = {};
        JtvIMxmltv = {};
        JtvSRC = {};
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = !0;
        script.src = "http://" + x + "/smarttv/api.php?do=xmltv&cmd=ch&u=" + encodeURIComponent(u);
        script.onload = function () {
            clearTimeout(etst);
            lOlI11R1qyII110Ypr(kjtYpr.channels);
            ll1lIOiIO0lO1IIIYpr = Math.random();
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
        };
        document.getElementsByTagName('head')[0].appendChild(script)
    }
}

// AddToPage("http://85.17.30.89/common/jtv.js?v=6");
// AddToPage("http://46.36.220.208/common/jtv.js?v=6");

loadxmltv();
if (platform == "tizen" && typeof webapis == "undefined") {
    AddToPage("$WEBAPIS/webapis/webapis.js")
}

function isset(variable) {
    return !(typeof (variable) == 'undefined')
}
var ua_chrome = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36";
var moonref = "http://hdrezka.ag/";
var lg_uid = "",
    lg_model = "",
    lg_v = "";
    
PullDataFrom("http://player.local/extra/preurl", "preurl");

setTimeout(function () {
    if (model == "lgusb") {
        PullDataFrom("file:///sys/class/net/eth0/address", "lgusbmac")
    }
}, 40);
if (box_client != "lgForkPlayer2.5" && model == "lgusb" && (uaJ == "lgw" || uaJ == "lgw2")) {
    function lil() {};
    ! function () {
        window.webOS = window.webOS || {}, "object" == typeof module && module.exports && (module.exports = window.webOS)
    }(),
    function () {
        if (webOS.yuit = {}, window.PalmSystem)
            if (navigator.userAgent.indexOf("SmartWatch") > -1) webOS.yuit.watch = !0;
            else if (navigator.userAgent.indexOf("SmartTV") > -1 || navigator.userAgent.indexOf("Large Screen") > -1) webOS.yuit.tv = !0;
        else {
            try {
                var e = JSON.parse(PalmSystem.deviceInfo || "{}");
                if (e.yuitVersionMajor && e.yuitVersionMinor) {
                    var t = parseInt(e.yuitVersionMajor),
                        o = parseInt(e.yuitVersionMinor);
                    t < 3 || 3 == t && o <= 0 ? webOS.yuit.legacy = !0 : webOS.yuit.open = !0
                }
            } catch (i) {
                webOS.yuit.open = !0
            }
            window.Mojo = window.Mojo || {
                relaunch: function (e) {}
            }, window.PalmSystem && PalmSystem.stageReady && PalmSystem.stageReady()
        } else webOS.yuit.unknown = !0
    }(),
    function () {
        webOS.fetchAppId = function () {
            if (window.PalmSystem && PalmSystem.identifier) return PalmSystem.identifier.split(" ")[0]
        }, webOS.fetchAppInfo = function (e, t) {
            if (webOS.appInfo) e && e(webOS.appInfo);
            else {
                var o = function (t, o) {
                        if (!t && o) try {
                            webOS.appInfo = JSON.parse(o), e && e(webOS.appInfo)
                        } catch (i) {
                            lil("Unable to parse appinfo.json file for " + appID), e && e()
                        } else e && e()
                    },
                    i = new XMLHttpRequest;
                i.onreadystatechange = function () {
                    4 == i.readyState && (i.status >= 200 && i.status < 300 || 0 === i.status ? o(void 0, i.responseText) : o({
                        status: 404
                    }))
                };
                try {
                    i.open("GET", t || "appinfo.json", !0), i.send(null)
                } catch (s) {
                    o({
                        status: 404
                    })
                }
            }
        }, webOS.fetchAppRootPath = function () {
            var e = window.location.href;
            if ("baseURI" in window.document) e = window.document.baseURI;
            else {
                var t = window.document.getElementsByTagName("base");
                t.length > 0 && (e = t[0].href)
            }
            var o = e.match(new RegExp(".*://[^#]*/"));
            return o ? o[0] : ""
        }, webOS.yuitBack = function () {
            if (window.PalmSystem && PalmSystem.yuitBack) return PalmSystem.yuitBack()
        }
    }(),
    function () {
        webOS.deviceInfo = function (e) {
            if (this.device) e(this.device);
            else {
                this.device = {};
                try {
                    var t = JSON.parse(PalmSystem.deviceInfo);
                    this.device.modelName = t.modelName, this.device.modelNameAscii = t.modelNameAscii, this.device.version = t.yuitVersion, this.device.versionMajor = t.yuitVersionMajor, this.device.versionMinor = t.yuitVersionMinor, this.device.versionDot = t.yuitVersionDot, this.device.sdkVersion = t.yuitVersion, this.device.screenWidth = t.screenWidth, this.device.screenHeight = t.screenHeight
                } catch (o) {
                    this.device.modelName = this.device.modelNameAscii = "webOS Device"
                }
                this.device.screenHeight = this.device.screenHeight || screen.height, this.device.screenWidth = this.device.screenWidth || screen.width;
                var i = this;
                webOS.yuit.tv ? webOS.service.request("luna://com.webos.service.tv.systemproperty", {
                    method: "getSystemInfo",
                    parameters: {
                        keys: ["firmwareVersion", "modelName", "sdkVersion", "UHD"]
                    },
                    onSuccess: function (t) {
                        if (i.device.modelName = t.modelName || i.device.modelName, i.device.modelNameAscii = t.modelName || i.device.modelNameAscii, i.device.sdkVersion = t.sdkVersion || i.device.sdkVersion, i.device.uhd = "true" === t.UHD, t.firmwareVersion && "0.0.0" !== t.firmwareVersion || (t.firmwareVersion = t.sdkVersion), t.firmwareVersion) {
                            i.device.version = t.firmwareVersion;
                            for (var o = i.device.version.split("."), s = ["versionMajor", "versionMinor", "versionDot"], n = 0; n < s.length; n++) try {
                                i.device[s[n]] = parseInt(o[n])
                            } catch (r) {
                                i.device[s[n]] = o[n]
                            }
                        }
                        e(i.device)
                    },
                    onFailure: function (t) {
                        e(i.device)
                    }
                }) : (webOS.yuit.watch && (this.device.modelName = this.device.modelNameAscii = "webOS Watch"), e(this.device))
            }
        }
    }(),
    function () {
        webOS.feedback = {
            play: function (e) {
                if (webOS && webOS.yuit && webOS.yuit.watch) {
                    var t = {
                        name: e || "touch",
                        sink: "pfeedback"
                    };
                    if (!window.PalmServiceBridge) return;
                    webOS.service.request("luna://com.palm.audio/systemsounds", {
                        method: "playFeedback",
                        parameters: t,
                        subscribe: !1,
                        resubscribe: !1
                    })
                }
            }
        }
    }(),
    function () {
        webOS.keyboard = {
            isShowing: function () {
                return !!(PalmSystem && PalmSystem.isl1OII0nIl1IOlQI1YprVisible && PalmSystem.isl1OII0nIl1IOlQI1YprVisible())
            }
        }
    }(),
    function () {
        webOS.notification = {
            showToast: function (e, t) {
                var o = e.message || "",
                    i = e.icon || "",
                    s = webOS.fetchAppId(),
                    n = e.appId || s,
                    r = e.appParams || {},
                    a = e.target,
                    c = e.noaction,
                    l = e.stale || !1,
                    m = e.soundClass || "",
                    u = e.soundFile || "",
                    d = e.soundDurationMs || "";
                if (webOS.yuit.legacy || webOS.yuit.open) {
                    var f = (e.response || {
                        banner: !0
                    }, PalmSystem.addBannerMessage(o, JSON.stringify(r), i, m, u, d));
                    t && t(f)
                } else {
                    o.length > 60 && console.warn("Toast notification message is longer than recommended. May not display as intended");
                    var b = {
                        sourceId: s,
                        message: o,
                        stale: l,
                        noaction: c
                    };
                    i && i.length > 0 && (b.iconUrl = i), c || (a ? b.onclick = {
                        target: a
                    } : b.onclick = {
                        appId: n,
                        params: r
                    }), this.showToastRequest = webOS.service.request("palm://com.webos.notification", {
                        method: "createToast",
                        parameters: b,
                        onSuccess: function (e) {
                            t && t(e.toastId)
                        },
                        onFailure: function (e) {
                            lil("Failed to create toast: " + JSON.stringify(e)), t && t()
                        }
                    })
                }
            },
            removeToast: function (e) {
                if (webOS.yuit.legacy || webOS.yuit.open) try {
                    PalmSystem.removeBannerMessage(e)
                } catch (t) {
                    console.warn(t), PalmSystem.clearBannerMessage()
                } else this.removeToastRequest = webOS.service.request("palm://com.webos.notification", {
                    method: "closeToast",
                    parameters: {
                        toastId: e
                    }
                })
            },
            supportsDashboard: function () {
                return webOS.yuit.legacy || webOS.yuit.open
            },
            showDashboard: function (e, t) {
                if (webOS.yuit.legacy || webOS.yuit.open) {
                    var o = window.open(e, "_blank", 'attributes={"window":"dashboard"}');
                    return t && o.document.write(t), o.PalmSystem && o.PalmSystem.stageReady(), o
                }
                console.warn("Dashboards are not supported on this version of webOS.")
            }
        }
    }(),
    function () {
        var e = 0,
            t = 1,
            o = 2,
            i = 3,
            s = 4,
            n = 5,
            r = 6,
            a = 7,
            c = function (e) {
                return !!e && "object" == typeof e && "[object Array]" !== Object.prototype.toString.call(e)
            },
            l = function (e, t, o, s) {
                window.PalmSystem && (o && !c(o) && (e = i, o = {
                    msgid: t
                }, t = "MISMATCHED_FMT", s = null, console.warn("webOSLog called with invalid format: keyVals must be an object")), t || e == a || console.warn("webOSLog called with invalid format: messageId was empty"), o && (o = JSON.stringify(o)), window.PalmSystem.PmLogString ? e == a ? window.PalmSystem.PmLogString(e, null, null, s) : window.PalmSystem.PmLogString(e, t, o, s) : lil("Unable to send log; PmLogString not found in this version of PalmSystem"))
            };
        webOS.emergency = function (t, o, i) {
            l(e, t, o, i)
        }, webOS.alert = function (e, o, i) {
            l(t, e, o, i)
        }, webOS.critical = function (e, t, i) {
            l(o, e, t, i)
        }, webOS.error = function (e, t, o) {
            l(i, e, t, o)
        }, webOS.warning = function (e, t, o) {
            l(s, e, t, o)
        }, webOS.notice = function (e, t, o) {
            l(n, e, t, o)
        }, webOS.info = function (e, t, o) {
            l(r, e, t, o)
        }, webOS.debug = function (e) {
            l(a, "", "", e)
        }
    }(),
    function () {
        function e(e, t) {
            this.uri = e, t = t || {}, t.method && ("/" != this.uri.charAt(this.uri.length - 1) && (this.uri += "/"), this.uri += t.method), "function" == typeof t.onSuccess && (this.onSuccess = t.onSuccess), "function" == typeof t.onFailure && (this.onFailure = t.onFailure), "function" == typeof t.onComplete && (this.onComplete = t.onComplete), this.params = "object" == typeof t.parameters ? t.parameters : {}, this.subscribe = t.subscribe || !1, this.subscribe && (this.params.subscribe = t.subscribe), this.params.subscribe && (this.subscribe = this.params.subscribe), this.resubscribe = t.resubscribe || !1, this.send()
        }
        e.prototype.send = function () {
            if (!window.PalmServiceBridge) return this.onFailure && this.onFailure({
                errorCode: -1,
                errorText: "PalmServiceBridge not found.",
                returnValue: !1
            }), this.onComplete && this.onComplete({
                errorCode: -1,
                errorText: "PalmServiceBridge not found.",
                returnValue: !1
            }), void lil("PalmServiceBridge not found.");
            this.bridge = new PalmServiceBridge;
            var t = this;
            this.bridge.onservicecallback = this.callback = function (o) {
                var i;
                if (!t.cancelled) {
                    try {
                        i = JSON.parse(o)
                    } catch (s) {
                        i = {
                            errorCode: -1,
                            errorText: o,
                            returnValue: !1
                        }
                    }(i.errorCode || 0 == i.returnValue) && t.onFailure ? (t.onFailure(i), t.resubscribe && t.subscribe && (t.delayID = setTimeout(function () {
                        t.send()
                    }, e.resubscribeDelay))) : t.onSuccess && t.onSuccess(i), t.onComplete && t.onComplete(i), t.subscribe || t.cancel()
                }
            }, this.bridge.call(this.uri, JSON.stringify(this.params))
        }, e.prototype.cancel = function () {
            this.cancelled = !0, this.resubscribeJob && clearTimeout(this.delayID), this.bridge && (this.bridge.cancel(), this.bridge = void 0)
        }, e.prototype.toString = function () {
            return "[LS2Request]"
        }, e.resubscribeDelay = 1e4, webOS.service = {
            request: function (t, o) {
                return new e(t, o)
            },
            systemPrefix: "com.webos.",
            protocol: "luna://"
        }, navigator.service = {
            request: webOS.service.request
        }, navigator.service.Request = navigator.service.request
    }(),
    function () {
        webOS.libVersion = "0.1.0"
    }(),
    function () {
        webOS.voicereadout = {
            readAlert: function (e, t) {
                var o = "boolean" != typeof t || t;
                if (webOS && webOS.yuit && webOS.yuit.watch) {
                    var i, s, n = function (e) {
                            webOS.service.request("luna://com.webos.settingsservice", {
                                method: "getSystemSettings",
                                parameters: {
                                    category: "VoiceReadOut"
                                },
                                onSuccess: function (t) {
                                    t && t.settings.talkbackEnable && e()
                                },
                                onFailure: function (e) {
                                    lil("Failed to get system VoiceReadOut settings: " + JSON.stringify(e))
                                }
                            })
                        },
                        r = function (e) {
                            webOS.service.request("luna://com.webos.settingsservice", {
                                method: "getSystemSettings",
                                parameters: {
                                    keys: ["localeInfo"]
                                },
                                onSuccess: function (t) {
                                    i = t.settings.localeInfo.locales.TTS, e()
                                },
                                onFailure: function (e) {
                                    lil("Failed to get system localeInfo settings: " + JSON.stringify(e))
                                }
                            })
                        },
                        a = function (e) {
                            webOS.service.request("luna://com.webos.settingsservice", {
                                method: "getSystemSettings",
                                parameters: {
                                    category: "option",
                                    key: "ttsSpeechRate"
                                },
                                onSuccess: function (t) {
                                    s = Number(t.settings.ttsSpeechRate), e()
                                },
                                onFailure: function (e) {
                                    lil("Failed to get system speechRate settings: " + JSON.stringify(e))
                                }
                            })
                        },
                        c = function () {
                            webOS.service.request("luna://com.lge.service.tts", {
                                method: "speak",
                                parameters: {
                                    locale: i,
                                    text: e,
                                    speechRate: s
                                }
                            })
                        };
                    n(function () {
                        r(function () {
                            a(c)
                        })
                    })
                } else if (webOS && webOS.yuit && webOS.yuit.tv) {
                    var l = function (e) {
                            webOS.service.request("luna://com.webos.settingsservice", {
                                method: "getSystemSettings",
                                parameters: {
                                    keys: ["audioGuidance"],
                                    category: "option"
                                },
                                onSuccess: function (t) {
                                    t && "on" === t.settings.audioGuidance && e()
                                },
                                onFailure: function (e) {
                                    lil("Failed to get system AudioGuidance settings: " + JSON.stringify(e))
                                }
                            })
                        },
                        c = function () {
                            webOS.service.request("luna://com.webos.service.tts", {
                                method: "speak",
                                parameters: {
                                    text: e,
                                    clear: o
                                },
                                onFailure: function (e) {
                                    lil("Failed to readAlertMessage: " + JSON.stringify(e))
                                }
                            })
                        };
                    l(c)
                } else console.warn("Platform doesn't support TTS api.")
            }
        }
    }();
    var request2 = webOS.service.request("luna://com.webos.service.sm", {
        method: "deviceid/getIDs",
        parameters: {
            "idType": ["LGUDID"]
        },
        onSuccess: function (inResponse) {
            if (typeof inResponse.idList[0].idValue != "undefined") {
                lg_uid = inResponse.idList[0].idValue.split("-")[4].replace(/(\r|\n)/, "")
            }
        },
        onFailure: function (inError) {
            return
        }
    });
    var request = webOS.service.request("luna://com.webos.service.tv.systemproperty", {
        method: "getSystemInfo",
        parameters: {
            "keys": ["modelName", "firmwareVersion", "UHD", "sdkVersion"]
        },
        onComplete: function (inResponse) {
            var isSucceeded = inResponse.returnValue;
            if (isSucceeded) {
                lg_model = inResponse.modelName;
                lg_v = inResponse.sdkVersion
            } else {
                return
            }
        }
    })
}
try {
    var el1 = new Image();
    Object.defineProperty(el1, 'id', {
        get: function () {}
    });
    console.dir(el1);
    setInterval(function () {}, 1000)
} catch (e) {}
var Player = {
    plugin: null,
    Screen3Dplugin: null,
    SefPlugin: null,
    mode3D: 0,
    h: 0,
    w: 0,
    cur_time: 0,
    total_time: 0,
    isMuted: !1,
    oncur: 0
};
var allMenuObject;
var allExitObject;
var videoArray = ["LG_Commercial.mp4"];
var supportedMimeTypes = [".mp4", ".mpeg", ".wmv", ".ts"];
var currentType = "";
var defaultClass = ["stopButton", "playButton", "rewindButton", "forwardButton", "optionButton", "prevButton", "prevButton", "nextButton"];
var exitBtnClass = ["backKey", "exitKey"];
var video;
var progressBarWidth = css_w(1280);
var TIME_FOR_SEEK = 10;
var hideTimerId;
var rowID = 1;
var cntIndex = 1;
var lOIO1lY1ula1IIlYpr = -1;
var oldBuffer = 0;
var dragged = !1;
var vidIndex = 0;
var stopped = !0,
    terminated = !1;
var eventtimer = null,
    media = null,
    paused = !0,
    endTimer, glSec = 0,
    end_ok = !1,
    fst = !1,
    refhdgo = "";
var uplayer = {};
var allMenuObject = ["stop", "play", "rewind", "forward", "option", "lastview", "prev", "next"];
var allExitObject = ["qual_text", "exit_text"];

function lOOI1lQTVIO111IYpr() {
    try {
        if (uaJ == "mag") {
            var div = document.createElement('div');
            div.id = "video";
            div.style.display = "none";
            div.style.position = "absolute";
            $_("main").appendChild(div);
            video = $_('video');
            return
        }
        video = $_('video');
        for (i in allMenuObject) {
            $_(allMenuObject[i]).onmouseover = function (event) {
                resetFocus();
                for (k in allMenuObject)
                    if (allMenuObject[k] == this.id) break;
                this.className = defaultClass[k] + " " + defaultClass[k] + "Hover";
                rowID = 1;
                cntIndex = k
            };
            $_(allMenuObject[i]).onclick = function () {
                resetFocus();
                for (k in allMenuObject)
                    if (allMenuObject[k] == this.id) break;
                this.className = defaultClass[k] + " " + defaultClass[k] + "Hover";
                rowID = 1;
                cntIndex = k;
                selectedButton()
            }
        };
        for (i in allExitObject) {
            $_(allExitObject[i]).onmouseover = function (event) {
                resetFocus();
                for (k in allExitObject)
                    if (allExitObject[k] == this.id) break;
                $_(allExitObject[k]).className = exitBtnClass[k] + " " + exitBtnClass[k] + "Hover";
                rowID = 3;
                cntIndex = k
            };
            $_(allExitObject[i]).onclick = function () {
                selectedButton()
            }
        };
        try {
            $_("rtime").style.width = css_w(230) + "px"
        } catch (e) {}
        $_("progressBall").onmouseover = function (event) {
            return;
            resetFocus();
            $(this).toggleClass("progressBallHover");
            rowID = 2;
            if (platform == "sams") {
                if (Player.total_time > 0) {
                    $(".progressBallHover").draggable({
                        axis: 'x',
                        disabled: !1,
                        containment: '#progressBall',
                        start: function (event, ui) {
                            dragged = !0
                        },
                        stop: function (event, ui) {
                            var x = ui.position.left;
                            var a = (x / progressBarWidth) * Player.total_time;
                            x = Math.ceil(a - Player.cur_time);
                            if (x > 0) lQ1llOmVIbIlO1lYpr(x);
                            else l00II10LBpj1OIIIYpr(x);
                            dragged = !1
                        }
                    })
                }
            } else if (uaJ == "mag") {
                if (video.currentTime > 0) {
                    $(".progressBallHover").draggable({
                        axis: 'x',
                        disabled: !1,
                        containment: '#progressBall',
                        start: function (event, ui) {
                            video.pause();
                            dragged = !0
                        },
                        stop: function (event, ui) {
                            var xmove = ui.position.left;
                            video.currentTime = (xmove / progressBarWidth) * video.duration;
                            video.play();
                            dragged = !1
                        }
                    })
                }
            } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                if (video.currentTime > 0) {
                    $(".progressBallHover").draggable({
                        axis: 'x',
                        disabled: !1,
                        containment: '#progressBall',
                        start: function (event, ui) {
                            video.pause();
                            dragged = !0
                        },
                        stop: function (event, ui) {
                            var xmove = ui.position.left;
                            video.currentTime = (xmove / progressBarWidth) * video.duration;
                            video.play();
                            dragged = !1
                        }
                    })
                }
            } else {
                if (media.playTime > 0) {
                    $(".progressBallHover").draggable({
                        axis: 'x',
                        disabled: !1,
                        containment: '#progressBall',
                        start: function (event, ui) {
                            media.play(0);
                            dragged = !0
                        },
                        stop: function (event, ui) {
                            var xmove = ui.position.left;
                            media.seek((xmove / progressBarWidth) * media.playTime);
                            media.play(1);
                            dragged = !1
                        }
                    })
                }
            }
        };
        $_("progressBall").onmouseout = function (event) {};
        $_('progressBarClick').onclick = function (e) {
            if (dragged || rek_url != "") return;
            var x = e.pageX - $(this).offset().left;
            curTime = getCur();
            totalTime = getTotal();
            if (is_arc) {
                var tt = Math.ceil(T.timestamp - (1 - (x / progressBarWidth)) * gV(playElement, "catchup_days") * 24 * 3600);
                arc_fwd = 0;
                arc_timestamp = 0;
                arcfwd(Math.ceil(tt - T.timestamp))
            } else if (totalTime > 0) {
                if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
                    uplayer[l0O1l101l1t_Y0lll1Ypr].seek((x / progressBarWidth) * getTotal())
                } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                    var a = (x / progressBarWidth) * getTotal();
                    if (a > getCur()) lQ1llOmVIbIlO1lYpr(a - getCur());
                    else l00II10LBpj1OIIIYpr(a - getCur())
                } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                    jwplayer("jw").seek((x / progressBarWidth) * getTotal())
                } else if (platform == "sams") {
                    var a = (x / progressBarWidth) * Player.total_time;
                    if (a > Player.cur_time) lQ1llOmVIbIlO1lYpr(a - Player.cur_time);
                    else l00II10LBpj1OIIIYpr(a - Player.cur_time)
                } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
                    media.seek((x / progressBarWidth) * media.playTime)
                } else if (uaJ == "dune") {
                    stb.setPositionInSeconds((x / progressBarWidth) * totalTime)
                } else if (uaJ == "mag") {
                    stb.SetPosTime((x / progressBarWidth) * totalTime)
                } else {
                    video.currentTime = (x / progressBarWidth) * getTotal()
                }
                setTimeout("lI1IOI10aO11QYpr();", 3000)
            }
        };
        $_("progressBarClick").onmouseout = function (event) {
            $_("thumb").style.display = "none";
            $_("arrow").style.display = "none";
            $_("arrowtime").style.display = "none"
        };
        $_('progressBarClick').onmousemove = function (e) {
            curTime = getCur();
            totalTime = getTotal();
            var pos = e.pageX - $(this).offset().left;
            if (is_arc) {
                $_("arrowtime").style.display = "block";
                if (pos / progressBarWidth > 0.96) pos = Math.ceil(0.96 * progressBarWidth);
                else if (pos / progressBarWidth < 0.02) pos = 85;
                $_("arrowtime").style.left = (pos - css_w(80)) + "px";
                var tt = Math.ceil(T.timestamp - (1 - (pos / progressBarWidth)) * gV(playElement, "catchup_days") * 24 * 3600);
                lO10OIOlxzlO100OIYpr('arrowtime', dt(tt, !0, !0));
                return
            }
            if ((pstream && !is_vod()) || isNaN(totalTime) || totalTime < 10) return;
            $_("arrowtime").style.display = "block";
            $_("arrowtime").style.left = (pos - css_w(30)) + "px";
            var y = Math.ceil((pos / progressBarWidth) * totalTime);
            lO10OIOlxzlO100OIYpr('arrowtime', getTimeFromMS(y));
            if (platform != "sams" && (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") && !1) {
                $_("thumb").style.display = "block";
                totalTime = Math.round(video.duration);
                if ($_("thumbv") == null || $_("thumbv").currentSrc != video.currentSrc) lO10OIOlxzlO100OIYpr('thumb', '<video width="' + css_w(128) + '" height="' + css_wh(72) + '" id="thumbv" class="thumb" src="' + video.currentSrc + '"></video>');
                if (x < 26) x = 26;
                $_("thumb").style.left = css_w(x - 29) + "px";
                $_("thumbv").currentTime = y
            }
        };
        $_('jw').onmousemove = $_('player').onmousemove = $_('video').onmousemove = function (event) {
            showPlayer();
            triggerHide()
        };
        video.addEventListener("play", function () {
            videoLoad("off", -1);
            getVideoPlayInfo()
        })
    } catch (e) {
        kjtYpr.popUp(e.message, 5500)
    }
    try {
        if (platform == "sams") {
            try {
                plaginAudio = $_('pluginAudio');
                plaginNavi = $_('pluginObjectNNavi');
                naviFirm = plaginNavi.GetFirmware()
            } catch (e) {
                naviFirm = ""
            }
            try {
                $_('pluginObjectSef').onmousemove = function (event) {
                    if (handler == "player") {
                        showPlayer();
                        triggerHide()
                    }
                };
                $_('pluginPlayer').onmousemove = function (event) {
                    if (handler == "player") {
                        showPlayer();
                        triggerHide()
                    }
                };
                document.body.onmousemove = function (event) {
                    if (handler == "player") {
                        showPlayer();
                        triggerHide()
                    }
                };
                document.onmousemove = function (event) {
                    if (handler == "player") {
                        showPlayer();
                        triggerHide()
                    }
                }
            } catch (e) {}
            naviFirm = naviFirm.split('-');
            if (naviFirm[1] && (naviFirm[1].indexOf('2011') != -1 || naviFirm[1].indexOf('2012') != -1 || naviFirm[1].indexOf('2013') != -1 || naviFirm[1].indexOf('2014') != -1 || naviFirm[1].indexOf('2015') != -1)) {
                Player.SefPlugin = $_('pluginObjectSef')
            };
            if (Player.SefPlugin != null) {
                Player.Sef = !0
            } else {
                Player.plugin = $_('pluginPlayer');
                Player.Sef = !1
            };
            plaginTVMW = $_('pluginObjectTVMW');
            if ((Player.plugin != null || Player.Sef) && plaginTVMW != null) {
                Player.Screen3Dplugin = $_('pluginObjectScreen3D');
                if (Player.plugin != null) {
                    Player.plugin.OnBufferingStart = 'Player.OnBufferingStart';
                    Player.plugin.OnBufferingProgress = 'Player.OnBufferingProgress';
                    Player.plugin.OnBufferingComplete = 'Player.OnBufferingComplete';
                    Player.plugin.OnCurrentPlayTime = 'Player.OnCurrentPlayTime'
                }
                plaginTVMW.SetMediaSource()
            } else {
                kjtYpr.inf("Error initialization Player", 2000, "red")
            }
        } else {
            video.addEventListener("pause", function () {});
            video.addEventListener("timeupdate", function () {
                getVideoPlayInfo()
            });
            video.addEventListener("error", function (event) {
                html5error(event)
            });
            video.addEventListener("progress", function () {
                buffering()
            })
        }
    } catch (e) {
        kjtYpr.popUp("ERR2: " + e.message, 5500)
    }
}

function err_rek(stat) {
    kjtYpr.inf("");
    clearTimeout(advTimer);
    rek_last = T.inetTime;
    rek_url = "";
    is_adult = !1;
    if (handler != "menu") easystop();
    handler = "menu";
    is_rek = !1;
    setTimeout("kjtYpr.l0lI10EMI1I10Ypr(rek_mode);", 250);
    if (stat != null) {
        // PullDataFrom("http://185.158.114.122/obovse.ru/forklmod/addstat.php?do=rek&cid=" + stat + "&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + ChSel.title)
        PullDataFrom("http://127.0.0.1/obovse.ru/forklmod/addstat.php?do=rek&cid=" + stat + "&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + ChSel.title)
    }
    setTimeout("is_adult=true;rek_n=0;", 45000)
}

function easystop(onlystop) {
    try {
        if (uaJ == "dune") {
            try {
                stb.stop()
            } catch (e) {}
        } else if (uaJ == "mag") {
            stb.Stop()
        } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
            webapis.avplay.stop();
            webapis.avplay.close()
        } else if (platform == "sams") samsStop();
        else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
            if (platform == "android-device") video.style.display = "none";
            video.pause();
            video.src = ""
        } else {
            lO10OIOlxzlO100OIYpr("jw", "");
            lO10OIOlxzlO100OIYpr("other", "")
        }
    } catch (e) {}
    lIIlO1uuOl100Ypr();
    if (handler == "player" && l0O1l101l1t_Y0lll1Ypr != "jw") $_("loading").style.display = "block";
    if (onlystop) return;
    sendr = !0;
    stopped = !0;
    iptv_succed = !1;
    curTime = -1;
    totalTime = 0;
    $_("popUp").style.display = "none";
    clearTimeout(loaderTimer);
    clearTimeout(slideTimer);
    clearTimeout(endTimer);
    clearTimeout(plmini_timer);
    clearTimeout(eventtimer);
    clearTimeout(timeoutWork);
    epg_select = -1;
    clearTimeout(setRekTimer);
    clearTimeout(l110I0qquII11OYpr);
    clearTimeout(l1ll1O00QKcMlO01l0OYprTimer);
    if (handler == "player") $_("loading").style.display = "block";
    lO10OIOlxzlO100OIYpr("ptt", "")
}
var errauto, xhrremotetime = 4800;
var html5error = function (event) {
    try {
        if (l0O1l101l1t_Y0lll1Ypr != "jw") {
            if (kjtYpr.GL.timeoutiptv > 55) return;
            if (is_rek && rek_url != "" && !stopped && handler != "menu") {
                if (ttmac) {
                    kjtYpr.popUp("html5error rek=" + event.target.error.code, 1000)
                }
                if (event.target.error.code >= 2 && event.target.error.code != 4) err_rek("errloadfile" + event.target.error.code);
                return
            }
            if (stopped || handler == "menu" || rek_url != "" || event.target.error.code < 2) return
        }
        var tmpCur = curTime;
        if ((!pstream || is_vod()) && curTime > 1) {
            errauto = setTimeout(function () {
                if (!stopped) lIO1IlIhslyl0OIQYpr(playUrl, !0, tmpCur)
            }, 2500);
            lOlI01hyFSW1QI1OlYpr("_FPSoedineniePrervano_!" + curTime + playUrl);
            return
        }
        iptv_retry++;
        if (pstream && iptv_succed) {
            setTimeout("if(!stopped) lIO1IlIhslyl0OIQYpr(playUrl,true);", 800);
            lOlI01hyFSW1QI1OlYpr("_FPOshibka_! _FPPodkluchenie_ " + iptv_retry + "...");
            return
        }
        if (iptv_retry > 3) {
            xhrremotetime = 60;
            setTimeout("if(!stopped) lI1lI00l1gX0l0l0OYpr();", 1000)
        } else {
            if (!plmini_on) {
                t = " _FPpodklucheniya_";
                lifeN = 0;
                lifeSec = -1;
                videoLoad("on");
                lIO1IlIhslyl0OIQYpr(playUrl, !0);
                lOlI01hyFSW1QI1OlYpr("_FPOshibka_" + t + "! _FPPodkluchenie_  " + (iptv_retry + 1) + "...")
            }
        }
        window.addEventListener("popstate", function (n) {
            n.state === t ? keyHandler({
                "keycode": VK_BACK
            }) : history.forward()
        })
    } catch (e) {
        kjtYpr.popUp("html5error " + e.message, 1500)
    }
};

function FsetFocus(idx) {
    try {
        idx = parseInt(idx);
        cntIndex = parseInt(cntIndex);
        if (!is_arc && (is_iptv > 2 || (!is_vod(url) && pstream))) {
            $_("progressBall").style.display = "none"
        } else {
            $_("progressBall").style.display = "block"
        }
        if (rowID == 1) {
            if (allMenuObject[cntIndex + idx] != undefined) {
                resetFocus();
                cntIndex = cntIndex + idx;
                $_(allMenuObject[cntIndex]).className += " " + defaultClass[cntIndex] + "Hover"
            } else if (rek_url == "") {
                if (idx == 1) lQ1llOmVIbIlO1lYpr(120);
                else l00II10LBpj1OIIIYpr(-120)
            }
        } else if (rowID == 2) {
            if (idx != 0) {
                idx == 1 ? lQ1llOmVIbIlO1lYpr(60) : l00II10LBpj1OIIIYpr(-60)
            } else {
                resetFocus();
                $_("progressBall").className += " progressBallHover";
                $_("progressBarStatus").className += " progressBallHover"
            }
        } else if (rowID == 3) {
            if (allExitObject[cntIndex + idx] != undefined) {
                resetFocus();
                cntIndex = cntIndex + idx;
                $_(allExitObject[cntIndex]).className += " " + exitBtnClass[cntIndex] + "Hover"
            }
        }
    } catch (e) {
        kjtYpr.popUp("Err Play media6:<br>" + e.toString(), 3000);
        lIO1IlIhslyl0OIQYpr(url)
    }
}

function resetFocus() {
    for (i in allMenuObject) {
        $_(allMenuObject[i]).className = defaultClass[i]
    };
    for (i in allExitObject) {
        $_(allExitObject[i]).className = exitBtnClass[i]
    };
    $_("progressBall").className = "progressBall";
    $_("progressBarStatus").className = "progressBarStatus"
}

function triggerHide(t, n) {
    clearTimeout(hideTimerId);
    if (handler == "menu" && stopped) return;
    if (t == null) t = 5000;
    if (n == null) n = 0;
    hideTimerId = setTimeout("hidePlayer(" + n + ");", t)
}

function hidePlayer(force) {
    if (is_rek) return;
    if (!force && ($_("loading").style.display == "block" || glSec > 0 || handler == "qual" || paused || is_rek)) {
        triggerHide(4500)
    } else {
        console.log("hide player");
        if (platform == "android-device") andr.cmd("hideSystemUI");
        if (uaJ == "mag") {
            try {
                stb.SetWinMode(1)
            } catch (e) {}
            try {
                stb.SetTopWin(1)
            } catch (e) {}
        } else if (uaJ == "dune") {
            $_("player").style.display = "none"
        }
        if (info_mode == 1) return;
        else if (info_mode == 3 || kjtYpr.GL.time > 0) {
            $_("playerBottom").style.display = "none";
            $_("buttonTop").style.display = "none";
            $_("recovery").style.display = "none";
            $_("ptt").style.display = "none";
            $_("epg_full").style.display = "none";
            $_("infPl").style.display = "none";
            $_("pstream").style.display = "block";
            $_("player_time").style.display = "block";
            try {
                $_("ico_p").style.display = "none"
            } catch (e) {}
            try {
                $_("infR").style.display = "none"
            } catch (e) {}
        } else if (info_mode == 4) {
            $_("playerBottom").style.display = "none";
            $_("buttonTop").style.display = "none";
            $_("recovery").style.display = "none";
            $_("ptt").style.display = "block";
            $_("pstream").style.display = "block";
            $_("player_time").style.display = "block";
            $_("epg_player").style.display = "block";
            $_("epg_player").style.height = css_wh(85) + "px";
            try {
                $_("ico_p").style.display = "none"
            } catch (e) {}
            try {
                $_("info_num").style.display = "none"
            } catch (e) {}
            try {
                $_("infR").style.display = "none"
            } catch (e) {}
        } else {
            $_("playerBottom").style.display = "none";
            $_("buttonTop").style.display = "none";
            $_("ptt").style.display = "none";
            $_("pstream").style.display = "none";
            $_("recovery").style.display = "none";
            $_("epg_full").style.display = "none"
        }
        $_("thvpinfo").style.display = "none";
        clearTimeout(thvptimer);
        $_("thumb").style.display = "none";
        try {
            $_("arrow").style.display = "none";
            $_("arrowtime").style.display = "none"
        } catch (e) {}
    }
}

function showPlayer() {
    if (uaJ == "mag") {
        try {
            stb.SetWinMode(0)
        } catch (e) {}
        try {
            stb.SetTopWin(0)
        } catch (e) {}
    } else if (uaJ == "dune") {
        $_("player").style.display = "block"
    }
    $_("playerBottom").style.display = "block";
    if (!is_rek) $_("buttonTop").style.display = "block";
    else return;
    $_("ptt").style.display = "block";
    $_("pstream").style.display = "block";
    $_("recovery").style.display = "block";
    try {
        $_("ico_p").style.display = "block"
    } catch (e) {}
    try {
        $_("infR").style.display = "block"
    } catch (e) {}
    try {
        $_("info_num").style.display = "block";
        $_("epg_player").style.height = css_wh(45) + "px"
    } catch (e) {}
    if (rek_url == "") {
        getshowEpg()
    }
    if (platform == "sams") Player.GetResolution();
    if (is_thvp(playUrl)) {
        getthvpinfo();
        $_("thvpinfo").style.display = "block"
    }
}
var thvptimer, lastthvp = 0,
    THVPRunned = !1,
    THVPerr = 0,
    xhrt2;

function getthvpinfo(test) {
    if (xhrt2 != null) xhrt2.abort();
    if (test) {
        THVPRunned = !1;
        xhrt2 = null;
        xhrt2 = new XMLHttpRequest();
        xhrt2.onreadystatechange = function () {
            if (xhrt2.readyState == 4) {
                if (xhrt2.status == 200) {
                    THVPRunned = !0;
                    THVPerr = 0;
                    if (l1IOIIz1l0Ol110Ypr()) {
                        var os = select;
                        ll1lIOiIO0lO1IIIYpr = Math.random();
                        gotoStart();
                        kjtYpr.lIOIOIBu0mO11llO0Ypr(os)
                    }
                }
            }
        };
        xhrt2.open('GET', "http://" + kjtYpr.GL.remoteip.split(":")[0] + ":5555/getinfo", !0);
        xhrt2.send();
        return
    }
    if (is_thvp(playUrl) && !stopped) {
        clearTimeout(thvptimer);
        thvptimer = setTimeout("getthvpinfo();", 2500);
        if (T.inetTime - lastthvp < 300) return;
        lastthvp = T.inetTime;
        xhrt2 = null;
        xhrt2 = new XMLHttpRequest();
        xhrt2.onreadystatechange = function () {
            if (xhrt2.readyState == 4) {
                if (xhrt2.status == 200) {
                    THVPerr = 0;
                    THVPRunned = !0;
                    var s = xhrt2.responseText.replace(/notorrent/g, "Нет торрента").replace(/\n/g, "<br>").replace("url:", "").replace("status", "Status").replace("peers", "Peers").replace("upload_speed_kbs", "Upload (kbs)").replace("download_speed_kbs", "Download (kbs)").replace("complete_percent", "Complete (%)");
                    lO10OIOlxzlO100OIYpr("thvpinfo", s)
                } else {
                    THVPerr++;
                    if (THVPerr > 3) {
                        lI1lI00l1gX0l0l0OYpr();
                        kjtYpr.popUp("Нет ответа от THVP сервера на компьютере! Убедитесь что он запущен в трее или повторите запуск!", 2500)
                    }
                }
            }
        };
        xhrt2.open('GET', "http://" + kjtYpr.GL.remoteip.split(":")[0] + ":5555/getinfo", !0);
        xhrt2.send()
    }
}

function getshowEpg(m) {
    if (!is_rek && is_iptv > 2 && epg_select >= 0 && !plmini_on && handler != "menu" && $_("chtitle") != null) {
        try {
            $_("epg_full").style.display = "block";
            var e = epg_channels[epg_select].epg;
            var se = null,
                html = "";
            if (typeof e != "undefined") {
                if (typeof epg_ch_full[e] != "undefined") se = epg_ch_full[e];
                else if (typeof epg_ch[e] != "undefined") se = epg_ch[e]
            }
            if (se != null) {
                var nj = "",
                    knj = 0;
                while (typeof se["title" + nj] != "undefined") {
                    if (epg_time >= se["start" + nj] && epg_time < se["end" + nj]) {
                        curTime = epg_time - se["start" + nj];
                        totalTime = se["end" + nj] - se["start" + nj];
                        if (!is_arc) {
                            lO10OIOlxzlO100OIYpr("remainingTime", getTimeFromMS(curTime).substring(0, 5));
                            lO10OIOlxzlO100OIYpr("totalTime", " / " + getTimeFromMS(totalTime).substring(0, 5));
                            var pos = Math.ceil((curTime / totalTime) * progressBarWidth);
                            setPosition(pos)
                        } else if (arc_timestamp == 0) {
                            lO10OIOlxzlO100OIYpr("totalTime", "/" + dt(se["end" + nj]) + "<img  height='" + css_wh(18) + "' src='" + _img("_OT_live.png?ndate191118_") + "' />");
                            getVideoPlayInfo()
                        }
                    }
                    if ((epg_time) < se["end" + nj]) {
                        knj++;
                        html += "<span style='color:rgb(197, 157, 157);'>" + dt(se["start" + nj]) + " - " + dt(se["end" + nj]) + "</span> " + se["title" + nj] + "<br>"
                    }
                    if (nj == "") nj = 2;
                    else nj++;
                    if (knj > 2) break
                }
            }
            lO10OIOlxzlO100OIYpr("epg_full", html);
            if ($_("playerBottom").style.display != "block") $_("epg_full").style.display = "none";
            if (html != "") {
                tl = curCh("title");
                tl = "<div id='progname'>" + tl + "</div>";
                lO10OIOlxzlO100OIYpr("chtitle", tl)
            } else {
                if (typeof epg_ch_full[e] != "undefined") delete epg_ch_full[e];
                ll1lO1OuWT0100Ypr(ChSel)
            }
        } catch (e) {}
    } else $_("epg_full").style.display = "none"
}

function epg_setPos() {
    if (!is_rek) {
        var e = epg_channels[epg_select].epg;
        var ep = null;
        if (typeof e != "undefined") {
            if (typeof epg_ch_full[e] != "undefined") ep = epg_ch_full[e];
            else if (typeof epg_ch[e] != "undefined") ep = epg_ch[e]
        }
        if (ep != null) {
            var nj = "";
            while (typeof ep["title" + nj] != "undefined") {
                if (epg_time >= ep["start" + nj] && epg_time < ep["end" + nj]) break;
                if (nj == "") nj = 2;
                else nj++
            }
            curTime = epg_time - ep["start" + nj];
            totalTime = ep["end" + nj] - ep["start" + nj];
            if (!is_arc) {
                lO10OIOlxzlO100OIYpr("remainingTime", getTimeFromMS(curTime).substring(0, 5));
                lO10OIOlxzlO100OIYpr("totalTime", " / " + getTimeFromMS(totalTime).substring(0, 5));
                var pos = Math.ceil((curTime / totalTime) * progressBarWidth);
                setPosition(pos)
            }
        }
    }
}

function buffering(be) {
    if (video || be != null) {
        try {
            if (be == null) {
                be = video.buffered.end(0) / video.duration
            }
            var bufferPos = Math.ceil(be * progressBarWidth)
        } catch (e) {
            bufferPos = NaN
        }
        if (!isNaN(bufferPos)) {
            setBufferPosition(bufferPos)
        }
    }
}
var gl_buf = 0;

function setBufferPosition(position) {
    if (position == null) position = gl_buf;
    else gl_buf = position;
    position -= 40;
    if (position > gl_position) $_("progressBuffer").style.width = (position - gl_position) + 'px';
    else $_("progressBuffer").style.width = "0px"
}

function resetProgress() {
    clearTimeout(hideTimerId);
    showPlayer();
    $_('progressBall').className = 'progressBallInitial';
    $_("progressBuffer").style.width = "0px";
    $_("progressBarStatus").style.width = '6px';
    $_('progressBall').style.marginLeft = "-6px";
    lO10OIOlxzlO100OIYpr("remainingTime", "");
    lO10OIOlxzlO100OIYpr("totalTime", "");
    rowID = 1;
    try {
        FsetFocus(0)
    } catch (e) {
        kjtYpr.popUp("Err Play media5:<br>" + e.toString(), 3000);
        lIO1IlIhslyl0OIQYpr(url)
    }
    mouseDown = !1;
    dragged = !1
}

function getTimeFromMS(sec) {
    var time = Math.round(sec);
    var hours = Math.floor(time / 3600);
    var mins = Math.floor((time % 3600) / 60);
    var secs = Math.floor((time % 3600) % 60);
    if (hours < 0 || mins < 0 || secs < 0) return "&#8734;";
    if (hours < 10)
        hours = "0" + hours;
    if (mins < 10)
        mins = "0" + mins;
    if (secs < 10)
        secs = "0" + secs;
    return hours + ":" + mins + ":" + secs
}
var gl_position = 0;

function setPosition(position) {
    gl_position = position;
    $_("progressBall").innerHTML = "";
    if (progressBarWidth - position < 13) {
        $_('progressBall').style.marginLeft = "-20px";
        $_("progressBarStatus").style.width = progressBarWidth + 'px'
    } else if (position <= 6) {
        $_("progressBarStatus").style.width = '6px';
        $_('progressBall').style.marginLeft = "-6px"
    } else {
        $_("progressBarStatus").style.width = position + 'px';
        $_('progressBall').style.marginLeft = "-6px"
    }
    setBufferPosition()
}
var lTime = 0,
    curTime = 0,
    totalTime = 0,
    si = 0;

function endrek() {
    $_("popUp").style.display = "none";
    if (ttmac) {
        setTimeout('kjtYpr.popUp("endrek ' + curTime + '/' + totalTime + '", 2000);', 10000)
    }
    kjtYpr.popUp("", 100);
    kjtYpr.lIllOVRj11lO10Ypr("rek", T.inetTime);
    if (rek_type == "youtube" || rek_type == "advarkads") {
        kjtYpr.lIllOVRj11lO10Ypr("xr", T.inetTime);
        if (ttmac) kjtYpr.popUp("write " + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("xr"), 1500)
    }
    if (rek_type == "youtube2") {
        kjtYpr.lIllOVRj11lO10Ypr("xr2", T.inetTime);
        if (ttmac) kjtYpr.popUp("write 2 " + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("xr2"), 1500)
    }
    is_adult = !1;
    rek_last = T.inetTime;
    rek_q = 0
}

function endvideo() {
    if (plmini_on) return;
    if (lOlI1OII1UehOl1lIOIOYpr) {
        if ($_("vk_audio").style.display == "block") {
            if (vk_repeat) l0OO10QIvTrl10lYpr(vk_audio_pl, vk_audio_sel);
            else l0OO10QIvTrl10lYpr(vk_audio_pl, ++vk_audio_sel);
            if (vk_visual) {
                kjtYpr.popUp(vk_audio_pl[vk_audio_sel].description, 1500)
            }
            return
        }
    }
    if (rek_url != "") {
        endrek();
        if (is_img(playUrl) || (curTime > 1 && totalTime > 2)) {
            if (Point["impression"] != null) {
                l1I1lllp1Fu1O0lYpr(Point["impression"], "half")
            }
            if (Point["dstUrl"] != null) {
                l1I1lllp1Fu1O0lYpr(Point["dstUrl"], "half")
            }
            if (Point["start"] != null) {
                l1I1lllp1Fu1O0lYpr(Point["start"], "half");
                Point["start"] = ""
            }
            if (Point["firstQuartile"] != null) {
                l1I1lllp1Fu1O0lYpr(Point["firstQuartile"], "half");
                Point["firstQuartile"] = ""
            }
            if (Point["midpoint"] != null) {
                l1I1lllp1Fu1O0lYpr(Point["midpoint"], "half");
                Point["midpoint"] = ""
            }
            if (Point["thirdQuartile"] != null) {
                l1I1lllp1Fu1O0lYpr(Point["thirdQuartile"], "half");
                Point["thirdQuartile"] = ""
            }
            l1I1lllp1Fu1O0lYpr(gV(Point, "complete"), "half");
            // PullDataFrom("http://185.158.114.122/obovse.ru/forklmod/addstat.php?do=rek&cid=close&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title") + "&" + playUrl);
            PullDataFrom("http://127.0.0.1/obovse.ru/forklmod/addstat.php?do=rek&cid=close&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title") + "&" + playUrl);
            rek_url = ""
        } else {
            // PullDataFrom("http://185.158.114.122/obovse.ru/forklmod/addstat.php?do=rek&cid=errtimerek&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title"))
            PullDataFrom("http://127.0.0.1/obovse.ru/forklmod/addstat.php?do=rek&cid=errtimerek&appid=" + rek_type + platform + "&hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&box_low=" + box_low + "&title=" + curCh("title"))
        }
        if (platform == "android-device") lI1lI00l1gX0l0l0OYpr();
        else easystop();
        setTimeout("kjtYpr.l0lI10EMI1I10Ypr(rek_mode);", 500);
        return
    }
    try {
        if (kjtYpr.GL.next == 4) return;
        if (pstream && !is_vod(playUrl)) return;
        else if (parseInt(kjtYpr.GL.next) == 2) {
            easystop();
            l0llQlOl1LaOlQ1Ypr();
            lIO1IlIhslyl0OIQYpr(playUrl)
        } else if (parseInt(kjtYpr.GL.next) == 1 && parseInt(select) + 1 < count && kjtYpr.channels[parseInt(select) + 1].stream_url != '') l11OlO1EMTi1OOl1Ypr();
        else if (parseInt(kjtYpr.GL.next) == 3) l11OlO1EMTi1OOl1Ypr();
        else lI1lI00l1gX0l0l0OYpr()
    } catch (e) {
        lI1lI00l1gX0l0l0OYpr()
    }
}

function getCur() {
    if (is_rek && rek_curtime > 0) return rek_curtime;
    if (is_vivat() == 2) return vivat_fwd + parseInt(curCh()["start"]);
    try {
        if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
            curTime = Player.cur_time
        } else if (uaJ == "dune") {
            curTime = stb.getPositionInSeconds()
        } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
            curTime = jwplayer("jw").getPosition()
        } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
            curTime = Player.cur_time / 1000
        } else if (uaJ == "mag") {
            curTime = stb.GetPosTime()
        } else if (platform == "sams") {
            curTime = Player.cur_time
        } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
            curTime = video.currentTime;
            if (uaJ == "spark") {
                curTime = video.currentTime;
                totalTime = parseInt(video.duration);
                if (totalTime > 11000) {
                    totalTime = Math.ceil(totalTime / 1000);
                    if (curTime > totalTime) curTime = Math.ceil(curTime / 1000)
                }
            }
        } else {
            try {
                curTime = media.playPosition / 1000
            } catch (e) {
                curTime = 0
            }
        }
        if (isNaN(curTime) || !isFinite(curTime)) curTime = 0;
        curTime = Math.round(curTime)
    } catch (e) {
        curTime = 0
    }
    return curTime
}

function getTotal() {
    if (is_rek && rek_totaltime > 0) return rek_totaltime;
    if (is_vivat() == 2) return Math.ceil((T.inetTime + (kjtYpr.GL.JTVRegion) * 3600000) / 1000);
    try {
        if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
            totalTime = Player.total_time
        } else if (uaJ == "dune") {
            totalTime = stb.getLengthInSeconds()
        } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
            totalTime = jwplayer("jw").getDuration()
        } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
            totalTime = webapis.avplay.getDuration() / 1000
        } else if (uaJ == "mag") {
            totalTime = stb.GetMediaLen()
        } else if (platform == "sams") {
            totalTime = Player.total_time
        } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
            totalTime = video.duration;
            if (uaJ == "spark") {
                curTime = video.currentTime;
                totalTime = parseInt(video.duration);
                if (totalTime > 11000) {
                    totalTime = Math.ceil(totalTime / 1000);
                    if (curTime > totalTime) curTime = Math.ceil(curTime / 1000)
                }
            }
        } else {
            try {
                totalTime = media.playTime / 1000
            } catch (e) {
                totalTime = 0
            }
        }
        if (isNaN(totalTime) || !isFinite(totalTime)) totalTime = 0;
        totalTime = Math.round(totalTime)
    } catch (e) {
        totalTime = 0
    }
    return totalTime
}
var sendr = !0,
    sendonce = !0,
    vivat_tek = null,
    kklp = 0;

function getVideoPlayInfo(tC, tT) {
    if (glSec != 0) return;
    try {
        if (plmini_on) return;
        si++;
        if (piframe && sendr && tT != null) {
            sendr = !1
        }
        if (tC != null) curTime = Math.round(tC);
        else curTime = getCur();
        if (tT != null) totalTime = tT;
        else totalTime = getTotal();
        if (l1OlOlOTIFl10lIYpr()) {
            if (totalTime - curTime <= 6 && totalTime > 0) {
                if (!end_ok) endTimer = setTimeout("endvideo();", 5200);
                end_ok = !0
            }
            if (curTime > 0 && totalTime > 0) {
                var pos = Math.ceil((curTime / totalTime) * 292);
                $_("vk_audio_pos").style.width = css_wh(pos) + "px";
                lO10OIOlxzlO100OIYpr("rtma", "-" + (to2(totalTime - curTime)))
            }
            return
        }
        if (curTime > 0 || totalTime > 0) {
            if ($_("statbar").style.display != "none") statusbar("off");
            if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                iptv_succed = !0;
                iptv_retry = 0
            }
            getBufferingInfo();
            if ($_("loading").style.display == "block") {
                videoLoad("off", curTime)
            }
            if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                var html = "";
                if (typeof jwplayer("jw").getVisualQuality().level.width != "undefined") html += jwplayer("jw").getVisualQuality().level.width + "x" + jwplayer("jw").getVisualQuality().level.height;
                else if ($_("jwvideo") != null) {
                    if ($_("jwvideo").videoWidth) html += $_("jwvideo").videoWidth + "x" + $_("jwvideo").videoHeight
                }
                html += " " + optScreenJW[kjtYpr.GL.xmode];
                html += " " + jwplayer("jw").getProvider().name;
                if (jwplayer("jw").getQualityLevels().length > 1) {
                    var bitrate = jwplayer("jw").getQualityLevels()[jwplayer("jw").getCurrentQuality()].bitrate;
                    var quality = jwplayer("jw").getCurrentQuality();
                    if (quality == 0) quality = "Auto";
                    html += " Качество: ";
                    if (!isNaN(bitrate)) html += Math.ceil(bitrate / 1000) + "kbps";
                    html += " [" + quality + "/" + (jwplayer("jw").getQualityLevels().length - 1) + "]"
                }
                if (jwplayer("jw").getAudioTracks().length > 1) {
                    var curA = jwplayer("jw").getCurrentAudioTrack();
                    if (curA == 0) curA = "Auto";
                    html += " Аудио: " + jwplayer("jw").getAudioTracks()[jwplayer("jw").getCurrentAudioTrack()].name + " [" + curA + "/" + jwplayer("jw").getAudioTracks().length + "]"
                }
                lO10OIOlxzlO100OIYpr("infR", html)
            }
            if (fst) {
                if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    if (video.videoWidth) {
                        lO10OIOlxzlO100OIYpr("infR", video.videoWidth + "x" + video.videoHeight);
                        lOlI01hyFSW1QI1OlYpr("")
                    }
                    if (kjtYpr.GL.xmode > 0) setVideoResolution()
                }
                fst = !1
            }
            if (rek_url != "" && totalTime > 0 && curTime > 1 && !plmini_on) {
                if (totalTime > 600) {
                    rek_url = "";
                    lI1lI00l1gX0l0l0OYpr();
                    setTimeout("kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr);", 500);
                    return
                }
                if (lTime != curTime) {
                    lTime = curTime;
                    if (Point["skipTime"] > 0 && Point["skipTime"] < curTime && curTime <= totalTime) {
                        rekBox("Пропустить <img width=15 src='" + _img("_OI_enter.png") + "' />")
                    } else {
                        if (Point["skipTime"] > 0 && Point["skipTime"] < totalTime) var ost = Point["skipTime"] - curTime;
                        else ost = totalTime - curTime;
                        if (ost < 0) ost = 0;
                        rekBox("Пропустить через " + ost + " сек.")
                    }
                    if (Point["impression"] != null) {
                        l1I1lllp1Fu1O0lYpr(Point["impression"], "half");
                        Point["impression"] = null
                    }
                    if (Point["dstUrl"] != null) {
                        l1I1lllp1Fu1O0lYpr(Point["dstUrl"], "half");
                        Point["dstUrl"] = null
                    }
                    if (Point["start"] != null) {
                        l1I1lllp1Fu1O0lYpr(Point["start"], "half");
                        Point["start"] = null
                    } else if (Math.round(totalTime / 2) == curTime) {
                        if (Point["firstQuartile"] != null) {
                            l1I1lllp1Fu1O0lYpr(Point["firstQuartile"], "half");
                            Point["firstQuartile"] = null
                        }
                        l1I1lllp1Fu1O0lYpr(Point["midpoint"], "half");
                        Point["midpoint"] = null
                    } else if (Math.round(totalTime / 4) == curTime) {
                        l1I1lllp1Fu1O0lYpr(Point["firstQuartile"], "half");
                        Point["firstQuartile"] = null
                    } else if (Math.round((totalTime / 4) * 3) == curTime) {
                        if (Point["midpoint"] != null) {
                            l1I1lllp1Fu1O0lYpr(Point["midpoint"], "half");
                            Point["midpoint"] = null
                        }
                        l1I1lllp1Fu1O0lYpr(Point["thirdQuartile"], "half");
                        Point["thirdQuartile"] = null
                    }
                    if (totalTime - curTime <= 1) {
                        if (!end_ok) endTimer = setTimeout("endvideo();", 1000);
                        end_ok = !0;
                        return
                    }
                }
            }
            if (playUrlAudio != "" && sound != null) {
                if (handler == "menu") sound.pause();
                else {
                    if (curTime == 0) sound.play();
                    if (!paused) {
                        if (Math.abs($_("video").currentTime - sound.currentTime) > 0 && Math.abs(totalTime - sound.duration) < 10 && totalTime > 10) {
                            if (--soundn < 1) {
                                if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") sound.currentTime = $_("video").currentTime;
                                else sound.currentTime = curTime;
                                kjtYpr.popUp("audio sync " + sound.currentTime + "<br>cur=" + curTime + "<br>Tot=" + totalTime, 800);
                                sound.play();
                                soundn = 20
                            }
                        }
                    }
                }
            }
            if (curTime > totalTime && curTime > 11 * 3600) curTime = 0;
            if (curTime == 25 && handler == "player" && rek_url == "") sendStat(1);
            if ($_("epg_full").style.display == "block") {
                epg_setPos();
                return
            }
            if (kjtYpr.lOIOO1QlPbx111OOYpr > 0 && rek_url == "") {
                lll11I0lOt1br10I11Ypr = kjtYpr.lOIOO1QlPbx111OOYpr;
                kjtYpr.lOIOO1QlPbx111OOYpr = 0;
                lQO1lT_OpIQlOlOYpr();
                if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {}
                if (l0O1l101l1t_Y0lll1Ypr == "html5") video.style.display = "block";
                else $_("jw").style.display = "block"
            }
            if (l0O1l101l1t_Y0lll1Ypr != "jw" && totalTime > 10 && totalTime > curTime && totalTime - curTime <= 5 && (!pstream || is_vod(playUrl)) && rek_url == "" && kjtYpr.GL.next != 4) {
                if (!end_ok) endTimer = setTimeout("endvideo();", 6000);
                end_ok = !0
            }
            if (curTime < 30 && totalTime > 70 && !paused) getSaveTime();
            else {
                lO10OIOlxzlO100OIYpr("recovery", "");
                lll11I0lOt1br10I11Ypr = 0
            }
            if (!is_arc) {
                lO10OIOlxzlO100OIYpr("remainingTime", getTimeFromMS(curTime));
                lO10OIOlxzlO100OIYpr("totalTime", "/" + getTimeFromMS(totalTime));
                var pos = Math.ceil((curTime / totalTime) * progressBarWidth);
                if (pos > progressBarWidth) pos = progressBarWidth;
                setPosition(pos);
                if (curTime >= 30 && curTime % 15 == 0) SaveTime()
            }
        }
        if (is_arc) {
            if (arc_timestamp == 0) {
                var xt = T.timestamp
            } else {
                xt = arc_timestamp + curTime;
                lO10OIOlxzlO100OIYpr("totalTime", "<img height='" + css_wh(18) + "' src='" + _img("_OT_archive_play.png?ndate191118_") + "' /> " + gV(playElement, "catchup_days"))
            }
            var tt = T.timestamp - gV(playElement, "catchup_days") * 24 * 3600;
            var ct = tt + T.timestamp - xt;
            if (arc_timestamp == 0) {
                lO10OIOlxzlO100OIYpr("remainingTime", dt(xt, !1, !1))
            } else lO10OIOlxzlO100OIYpr("remainingTime", dt(xt, !0, !0));
            pos = Math.ceil(((xt - tt) / (T.timestamp - tt)) * progressBarWidth);
            setPosition(pos)
        }
    } catch (e) {}
}
var statU = "",
    statU2 = "",
    r2, r2t;

function sendStat(m, xml_url) {
    try {
        if (m) {
            tl = ChSel.title;
            // var u = "http://185.158.114.122/obovse.ru/forklmod/sendstat.php?do=filestat&isiptv=" + is_iptv + "&u=" + encodeURIComponent(kjtYpr.l1IlIl01l0tUIl1IIYpr) + "&n=" + encodeURIComponent(tl) + addident();
            var u = "http://127.0.0.1/obovse.ru/forklmod/sendstat.php?do=filestat&isiptv=" + is_iptv + "&u=" + encodeURIComponent(kjtYpr.l1IlIl01l0tUIl1IIYpr) + "&n=" + encodeURIComponent(tl) + addident();
            if (statU2 != u && Math.random() > 0.666) PullDataFrom(u, "");
            statU2 = u
        }
        var n = 0,
            u = "",
            t = "";
        for (var i = inset["tab" + insetActive].length - 1; i > -1; i--) {
            if (l1IOIIz1l0Ol110Ypr(inset["tab" + insetActive][i].url) || inset["tab" + insetActive][i].img == _img("_OI_star.png") || inset["tab" + insetActive][i].title == "_FPPerPoAdr_" || inset["tab" + insetActive][i].title.indexOf("_FPEnter search query") == 0) {
                n = i;
                break
            }
        }
        var sp = [],
            sendsp = 0,
            is_x = 0;
        if (m == 0) sendsp = -2;
        for (i = n + 1; i < inset["tab" + insetActive].length; i++) {
            if (u != "") u += "-";
            if (t != "") t += "-|-";
            var ur = inset["tab" + insetActive][i].url.replace(/http.*?\/treeview\?plugin/, "http://remotefork/treeview?plugin");
            u += md5(ur);
            t += inset["tab" + insetActive][i].title;
            var ks = inset["tab" + insetActive][i];
            if (sendsp == 0) sendsp = 1;
            if (ks.url.indexOf("http") == -1 || (is_local(ks.url) && kjtYpr.GL.remote && kjtYpr.GL.remoteactive)) {
                sendsp = -1;
                continue
            }
            if (is_xxx(ks.url)) is_x = 1;
            var tim = ks.img;
            if (is_mw(ks.url) || is_hdgo(ks.url) || ks.url.match(/(#submenu|no_save)/) || ks.url.indexOf("http://mylist.obovse.ru") == 0 || ks.url.indexOf("http://spider.forkplayer.tv/search") == 0 || ks.url.indexOf("http://spiderxml.com/search") == 0) continue;
            if (ks.url.indexOf("/obovse.ru/smarttv/") > 0) {
                var be = 0;
                for (var z in preurl) {
                    if (ks.url.indexOf(preurl[z][0]) == 0) {
                        sp = [{
                            "url": z,
                            "title": preurl[z][2],
                            "img": preurl[z][1]
                        }];
                        be = 1;
                        break
                    }
                }
                if (!b) sendsp = -1;
                continue
            } else if (ks.url.indexOf("alexkdpulg.php?list=") > 0) var tu = unescape(ks.url.split("?list=")[1]);
            else if (ks.url.indexOf("alexkdpulg.php") > 0) {
                sendsp = -1;
                continue
            } else tu = ks.url;
            if (tu.lastIndexOf("?") == tu.length - 1) tu = tu.substr(0, tu.length - 1);
            tu = tu.replace(/[\?&#](iu=|bc=true|box_mac=).*/, "");
            var ttl = fp(ks.title);
            if (ks.img.indexOf("search_logo_folder.png") > 0) {
                if (sendsp == 0) sendsp = 1;
                ttl = tu.split("/").pop() + " - url/плейлист/playlist сайт/xml/m3u";
                continue
            }
            var tmp = {
                "url": tu,
                "title": ttl,
                "img": tim
            };
            if (tmp.url.length > 160 || tmp.url.indexOf("http://mylist.obovse.ru/?id=search") == 0) {} else sp.push(tmp)
        }
        if (typeof xml_url != "undefined") {
            if (xml_url.indexOf("id=search") > 0) {
                return
            }
        }
        if (statU == u) {
            if (ttmac) kjtYpr.popUp("Пропуск.. SendSP=" + sendsp, 1500);
            return
        } else if (ttmac) kjtYpr.popUp("Send SendSP=" + sendsp, 1500);
        statU = u;
        // if (sendsp == 1 && m == 1) PullDataFromPost("http://185.158.114.122/obovse.ru/smarttv/spider.php?id=add3&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(sp)));
        if (sendsp == 1 && m == 1) PullDataFromPost("http://127.0.0.1/obovse.ru/smarttv/spider.php?id=add3&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(sp)));
        else {}
        var tp = Math.random();
        if (tp > 0.18) {
            return
        }
        if (is_vivat() && m == 0) {
            return
        }
        // var url = "http://185.158.114.122/obovse.ru/forklmod/sendstat.php?u=" + u + "&m=" + m + "&initial=" + uaJ + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "&t=" + encodeURIComponent(t);
        var url = "http://127.0.0.1/obovse.ru/forklmod/sendstat.php?u=" + u + "&m=" + m + "&initial=" + uaJ + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "&t=" + encodeURIComponent(t);
        r2 = new XMLHttpRequest();
        r2.onreadystatechange = function () {
            if (r2.readyState == 4) {
                clearTimeout(r2t)
            }
        };
        r2.open('GET', url, !0);
        r2.send();
        r2t = setTimeout(function () {
            r2.abort()
        }, 4000)
    } catch (e) {}
}

function getBufferingInfo() {
    if (platform != "sams" && l0O1l101l1t_Y0lll1Ypr == "media" && pstream) {
        try {
            var playInfo = media.mediaPlayInfo();
            var mbitSec = ((playInfo.bitrateInstant) / 1048576).toFixed(2);
            if (isNaN(mbitSec)) {} else {
                if (mbitSec > 0) {
                    lO10OIOlxzlO100OIYpr("pinfo", "" + mbitSec + " Mbit/s")
                }
            }
        } catch (e) {}
    }
}
var vk_mini, old_y = "";

function l1lQQO0OhRlPLI1OOYpr(url, mini, remote, ypost, request_id) {
    if (app_cors_once) {
        app_cors = !1
    }
    var xhr = null;
    m3u8_url = "";
    url = url.replace("/s3.cdnapponline.com", "/streamguard.cc");
    if ((url.indexOf("video_ext") > 0)) {
        statusbar(url, "link");
        url = url.replace("vkontakte.ru", "vk.com");
        if (app_cors || (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive && remote_version >= 1.2)) {
            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(url);
            xhr = null;
            xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    s = xhr.responseText.replace(/\r/g, "").replace(/\n/g, "");
                    var mt = s.match(/playerParams = (\{.*?\]\});/);
                    if (mt != null) var zz = l1l0IOIl_puQl1I1IYpr(mt[1]);
                    else zz = [];
                    var q = [];
                    try {
                        z = zz.params[0];
                        if (typeof z.url720 != "undefined") q.push(["", z.url720, 1]);
                        if (typeof z.url480 != "undefined") q.push(["", z.url480, 2]);
                        if (typeof z.url360 != "undefined") q.push(["", z.url360, 3]);
                        if (typeof z.url240 != "undefined") q.push(["", z.url240, 4])
                    } catch (e) {}
                    url = l10O0I11gdZlOOIIYpr(q);
                    if (mini) {} else {
                        l0llQlOl1LaOlQ1Ypr();
                        lI1l1IOllHHCTuO0OlOYpr(url)
                    }
                }
            };
            xhr.open('GET', url, !0);
            xhr.send();
            return "assync"
        }
        url = "http://" + lI101lOIQOlTlQ10I1Ypr + "/smarttv/api.php?do=vk&box_client=lg&box_mac=" + kjtYpr.mac + "&u=" + encodeURIComponent(url);
        xhr = null;
        xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (mini) {} else {
                    l0llQlOl1LaOlQ1Ypr();
                    lI1l1IOllHHCTuO0OlOYpr(xhr.responseText)
                }
            }
        };
        xhr.open('GET', url, !0);
        xhr.send();
        return "assync"
    } else if (url.indexOf("=postmd5") > 0) {
        var uh = Object.create(uHelper);
        uh.parse = function (s) {
            ChSel.stream_url = s;
            if (mini) play_mini(s);
            else {
                l0llQlOl1LaOlQ1Ypr();
                lI1l1IOllHHCTuO0OlOYpr(s)
            }
        }
        uh.remote = 0;
        if (gV(ChSel, "postmd5") == "") {
            kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_! Empty POST", 2000);
            return ""
        }
        uh.postdata = "postmd5=" + encodeURIComponent(ChSel.postmd5);
        uh.local = 1;
        uh.allowproxy = 1;
        uh.get(url);
        return "assync"
    } else if (url.indexOf("#playerjs") > 0) {
        l0O1l101l1t_Y0lll1Ypr = "playerjs";
        uplayer[l0O1l101l1t_Y0lll1Ypr] = {
            fullscreen: function () {
                $_("playerjs").contentWindow.postMessage({
                    "api": "fullscreen"
                }, "*")
            },
            volume: function (x) {
                $_("playerjs").contentWindow.postMessage({
                    "api": "volume",
                    "set": x
                }, "*")
            },
            play: function () {
                $_("jw").style.zIndex = "0";
                $_("playerjs").contentWindow.postMessage({
                    "api": "play"
                }, "*")
            },
            pause: function () {
                $_("playerjs").contentWindow.postMessage({
                    "api": "pause"
                }, "*")
            },
            stop: function () {
                lO10OIOlxzlO100OIYpr("jw", "")
            },
            message: function (event) {
                if (event.data.event == "inited") {
                    $_("jw").style.zIndex = "2";
                    this.play()
                } else if (event.data.event == "resumed") {
                    paused = !1
                } else if (event.data.event == "paused") {
                    paused = !0
                } else if (event.data.event == "ended") {
                    endvideo()
                } else if (event.data.event == "time") {
                    Player.cur_time = Math.ceil(event.data.data);
                    Player.total_time = Math.ceil(event.data.duration);
                    if (Player.cur_time > 3) $_("jw").style.zIndex = "0";
                    else $_("jw").style.zIndex = "2";
                    if (Player.total_time > 0) getVideoPlayInfo(Player.cur_time, Player.total_time)
                } else if (typeof event.data != "undefined") {
                    if (typeof event.data.duration != "undefined") Player.total_time = Math.ceil(event.data.duration);
                    if (typeof event.data.played != "undefined") Player.cur_time = Math.ceil(event.data.played);
                    if (Player.cur_time > 3) $_("jw").style.zIndex = "0";
                    else $_("jw").style.zIndex = "2";
                    getVideoPlayInfo(Player.cur_time, Player.total_time)
                }
            },
            seek: function (n) {
                $_("playerjs").contentWindow.postMessage({
                    "api": "seek",
                    "set": n
                }, "*")
            }
        }
        if (platform == "android-device") {
            $_("player").style.backgroundColor = "transparent"
        }
        lI1l1IOllHHCTuO0OlOYpr(url);
        return "assync"
    } else if (url.indexOf("//fex.net/s/") > 0) {
        var ch = {
            "title": url,
            "playlist_url": "http://" + ServerFromList + "/smarttv/fex.php?id=key&private=1&search=" + encodeURIComponent(url)
        };
        kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr, ch);
        return "assync"
    } else if (url.indexOf("delivembed.cc/embed/") > 0 || ChSel.menu_url == "delivembed") {
        var orig_url = url;
        var gurl = url;
        if (gurl.indexOf("?") > 0) gurl = gurl.substr(0, gurl.indexOf("?"));
        var season = null;
        var episode = null;
        var mtc = url.match(/season=(.*?)(&|$|#)/);
        if (mtc != null) {
            season = mtc[1]
        }
        var mtc = url.match(/episode=(.*)$/);
        if (mtc != null) {
            episode = mtc[1]
        }
        var pref = url.match(/^(https?):\/\/(.*?)\//);

        function delive_res(data) {
            var k = 0,
                url = "";
            for (var i in data) {
                var u1 = data[i];
                var uB = pUrl(u1, pref[1]);
                if (platform == "android-device") {
                    var u1 = uB + "#OPT:Referer|" + gurl + "|User-Agent|" + ua_chrome + "|Origin|" + pref[1] + "://" + pref[2]
                } else {
                    u1 = 'curl "' + uB + '" -H "Referer: ' + gurl + '" -H "Origin: ' + pref[1] + '://' + pref[2] + '" -H "User-Agent: ' + ua_chrome + '" -H "DNT: 1"'
                }
                data[i] = {
                    "url": u1,
                    "audio": 1
                };
                if (url == "" || (parseInt(i) > k && i < (sQual[kjtYpr.GL.quality] + 80))) {
                    url = u1
                }
            }
            if (url == "") {
                lI1lI00l1gX0l0l0OYpr();
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                return
            }
            if (platform == "android-device") {
                if (mini) play_mini(url);
                else {
                    l0llQlOl1LaOlQ1Ypr();
                    lI1l1IOllHHCTuO0OlOYpr(url)
                }
            } else {
                var xhrt3 = null;
                xhrt3 = new XMLHttpRequest();
                xhrt3.onreadystatechange = function () {
                    if (xhrt3.readyState == 4) {
                        var u = xhrt3.responseText.match(/^.*\.m3u8$/m)[0];
                        uB = uB.replace(/(^.*\/)(.*)/, "$1");
                        if (u.indexOf("http") != 0) u = uB + u;
                        u = 'curl "' + u + '" -H "Referer: ' + gurl + '" -H "Origin: ' + pref[1] + '://' + pref[2] + '" -H "User-Agent: ' + ua_chrome + '""';
                        var xhrt4 = null;
                        xhrt4 = new XMLHttpRequest();
                        xhrt4.onreadystatechange = function () {
                            if (xhrt3.readyState == 4) {
                                s = xhrt4.responseText;
                                s = s.replace(/^(^[^#].*)/gm, "http://" + kjtYpr.GL.remoteip + "/proxym3u8" + uB + "$1OPT:Referer--" + gurl + "--Origin--" + pref[1] + "://" + pref[2] + "OPEND:/");
                                // PullDataFromPost("http://195.88.208.101/obovse.ru/smarttv/hdrezka.php?id=post&n=" + encodeURIComponent(u), "s=" + encodeURIComponent(s), "sethls", request_id)
                                PullDataFromPost("http://127.0.0.1/obovse.ru/smarttv/hdrezka.php?id=post&n=" + encodeURIComponent(u), "s=" + encodeURIComponent(s), "sethls", request_id)
                            }
                        };
                        xhrt4.open('GET', "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(u), !0);
                        xhrt4.send()
                    }
                };
                xhrt3.open('GET', "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(url), !0);
                xhrt3.send()
            }
        }
        if (season != null) {
            var xhr2 = new XMLHttpRequest();
            xhr2.onreadystatechange = function () {
                if (xhr2.readyState == 4) {
                    clearTimeout(l01IQlTho0O1lI1Ypr);
                    var f = l1l0IOIl_puQl1I1IYpr(xhr2.responseText);
                    var ch = [];
                    for (var i in f) {
                        link = l10O0I11gdZlOOIIYpr(f[i].urlQuality);
                        if (!f[i].blocked) ch.push({
                            "logo_30x30": f[i].poster.small,
                            "title": f[i].name,
                            "stream_url": gurl + "?episode=" + link
                        })
                    }
                    if (ch.length) {
                        data = {
                            "channels": ch
                        };
                        kjtYpr.l1IlIl01l0tUIl1IIYpr = orig_url + "#stream_url";
                        kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id)
                    }
                }
            };
            xhr2.open('GET', "https://api1569851172.delivembed.cc/contents/video/by-season/?id=" + season + "&host=zombie-film.com-embed", !0);
            xhr2.send();
            var atime = 15000;
            l01IQlTho0O1lI1Ypr = setTimeout(function () {
                xhr2.abort();
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                kjtYpr.inf('_FPPrevLimOzh_', 1500, 'yellow')
            }, atime)
        } else if (episode != null) {
            delive_res(l1l0IOIl_puQl1I1IYpr(episode))
        } else if (app_cors || (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive)) {
            statusbar(url, "link");
            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(url);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    try {
                        var s = xhr.responseText;
                        if (s.match(/oneSeason/)) {
                            if (season == null) {
                                var m = s.replace(/\n/g, "").replace(/\r/g, "").match(/var app = .*?\((\{.*?)\);/);
                                eval("try{v1=" + m[1].replace("playerBase", "\"\"").replace("adsConfig", "\"\"") + "}catch(e){}");
                                var xhr2 = new XMLHttpRequest();
                                xhr2.onreadystatechange = function () {
                                    if (xhr2.readyState == 4) {
                                        clearTimeout(l01IQlTho0O1lI1Ypr);
                                        var f = l1l0IOIl_puQl1I1IYpr(xhr2.responseText);
                                        var ch = [];
                                        for (var i in f) {
                                            if (!f[i].blocked) ch.push({
                                                "title": "Season " + f[i].season + " " + f[i].name,
                                                "stream_url": gurl + "?season=" + f[i].id
                                            })
                                        }
                                        if (ch.length) {
                                            data = {
                                                "channels": ch
                                            };
                                            kjtYpr.l1IlIl01l0tUIl1IIYpr = orig_url + "#stream_url";
                                            kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id)
                                        }
                                    }
                                };
                                xhr2.open('GET', "https://api1569851172.delivembed.cc/contents/season/by-franchise/?id=" + v1.franchise + "&host=zombie-film.com-embed", !0);
                                xhr2.send();
                                var atime = 15000;
                                l01IQlTho0O1lI1Ypr = setTimeout(function () {
                                    xhr2.abort();
                                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                                    kjtYpr.inf('_FPPrevLimOzh_', 1500, 'yellow')
                                }, atime)
                            }
                            return
                        }
                        var data = s.match(/hlsList: (\{.*?\})/);
                        if (data != null) {
                            data = l1l0IOIl_puQl1I1IYpr(data[1])
                        } else {
                            lI1lI00l1gX0l0l0OYpr();
                            kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                            return
                        }
                        delive_res(data);
                        return
                    } catch (e) {
                        lI1lI00l1gX0l0l0OYpr();
                        kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_! " + e.message, 2000);
                        return
                    }
                }
            };
            xhr.open('GET', url, !0);
            xhr.send()
        } else kjtYpr.inf("delivembed.cc - _FPNeobhodimRemoteFork_", 2000);
        return "assync"
    } else if (url.indexOf("cdnvideo.co/embed") > 0 || url.match(/https?:\/\/[^\/]+\/embed\/\d+(\/|$)/)) {
        if (app_cors || (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive)) {
            statusbar(url, "link");
            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(url);
            xhr = null;
            xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    try {
                        var s = xhr.responseText;
                        var data = s.match(/file:"(.*?)"/);
                        if (data != null) {
                            kjtYpr.YoutubeURL = {};
                            var regexp = new RegExp("(^|)(.*?)(http.*?)(,|$)", "ig");
                            var n = 0;
                            while ((ch = regexp.exec(data[1])) != null) {
                                var r = ch[2].match(/\d+/)[0];
                                if (isNaN(r)) r = 1;
                                kjtYpr.YoutubeURL[r] = {
                                    "title": r,
                                    "type": "",
                                    "url": ch[3],
                                    "audio": 1
                                }
                            }
                            l0O0ll1QVvyRH10OOIYpr(mini);
                            data = data[1].split(",")
                        } else {
                            lI1lI00l1gX0l0l0OYpr();
                            kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                            return
                        }
                    } catch (e) {
                        lI1lI00l1gX0l0l0OYpr();
                        kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_! " + e.message, 2000);
                        return
                    }
                }
            };
            xhr.open('GET', url, !0);
            xhr.send()
        } else kjtYpr.inf("cdnvideo.co - _FPNeobhodimRemoteFork_", 2000);
        return "assync"
    } else if (url.indexOf("ok.ru/video") > 0) {
        var video_id = "";
        statusbar(url, "link");
        video_id = url.substr(url.indexOf('video/') + 6);
        if (video_id.indexOf("?") > 0) video_id = video_id.substr(0, video_id.indexOf("?"));
        if (video_id == "") {
            kjtYpr.inf("_FPNevernayaSsilka_ ok!", 1500);
            lI1lI00l1gX0l0l0OYpr();
            return
        }
        // url = "http://51.15.17.204/obovse.ru/smarttv/api.php?do=ok&box_client=lg&box_mac=" + kjtYpr.mac + "&v=" + video_id + "&box_hardware=" + kjtYpr.hardware + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial + "|" + gnxu + "&box_server=" + nServer + "&" + Math.random();
        url = "http://127.0.0.1/obovse.ru/smarttv/api.php?do=ok&box_client=lg&box_mac=" + kjtYpr.mac + "&v=" + video_id + "&box_hardware=" + kjtYpr.hardware + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial + "|" + gnxu + "&box_server=" + nServer + "&" + Math.random();
        xhr = null;
        xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                var data = l1l0IOIl_puQl1I1IYpr(xhr.responseText);
                if (typeof data != "object" || data == null) {
                    lI1lI00l1gX0l0l0OYpr();
                    kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                    return
                }
                url = xhr.responseText;
                if (mini) {} else {
                    l0llQlOl1LaOlQ1Ypr();
                    lI1l1IOllHHCTuO0OlOYpr(url)
                }
            }
        };
        xhr.open('GET', url, !0);
        xhr.send();
        return "assync"
    } else if (url.indexOf("rutube.ru/play/embed/") > 0 || url.indexOf("rutube.ru/video/") > 0) {
        var video_id = "";
        statusbar(url, "link");
        if (url.indexOf("embed") > 0) video_id = url.substr(url.indexOf('embed/') + 6);
        else video_id = url.substr(url.indexOf('video/') + 6);
        if (video_id.indexOf("?") > 0) video_id = video_id.substr(0, video_id.indexOf("?"));
        if (video_id == "") {
            kjtYpr.inf("_FPNevernayaSsilka_ rutube!", 1500);
            lI1lI00l1gX0l0l0OYpr();
            return
        }
        // url = "http://185.158.114.122/obovse.ru/smarttv/api.php?do=rutube&box_client=lg&box_mac=" + kjtYpr.mac + "&v=" + video_id;
        url = "http://127.0.0.1/obovse.ru/smarttv/api.php?do=rutube&box_client=lg&box_mac=" + kjtYpr.mac + "&v=" + video_id;
        xhr = null;
        xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.responseText.indexOf("[") == -1) {
                    lI1lI00l1gX0l0l0OYpr();
                    kjtYpr.inf(xhr.responseText, 2000);
                    return
                }
                var data = l1l0IOIl_puQl1I1IYpr(xhr.responseText);
                if (typeof data != "object" || data == null) {
                    lI1lI00l1gX0l0l0OYpr();
                    kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                    return
                }
                kjtYpr.ll0Il1IRfsIQOO0Ypr = data;
                var n = 0;
                if (kjtYpr.GL.quality > 1) {
                    for (var i = kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1; i >= 0; i--) {
                        if (kjtYpr.GL.quality <= kjtYpr.ll0Il1IRfsIQOO0Ypr[i][2] - 1) {
                            n = i;
                            break
                        }
                    }
                }
                url = kjtYpr.ll0Il1IRfsIQOO0Ypr[n][1];
                $_("qual_text").innerHTML = kjtYpr.ll0Il1IRfsIQOO0Ypr[n][0];
                if (mini) play_mini(url);
                else {
                    l0llQlOl1LaOlQ1Ypr();
                    lI1l1IOllHHCTuO0OlOYpr(url)
                }
            }
        };
        xhr.open('GET', url, !0);
        xhr.send();
        return "assync"
    } else if (url.indexOf("youtube.com/watch?v=") > 0 || url.indexOf("youtube.com/embed") > 0 || url.indexOf("youtube.com/video") > 0 || url.indexOf("youtu.be/") > 0) {
        var video_id = "";
        statusbar(url, "link");
        if (url.indexOf("v=") > 0) video_id = url.substr(url.indexOf('=') + 1);
        else if (url.indexOf("embed") > 0) video_id = url.substr(url.indexOf('embed/') + 6);
        else if (url.indexOf("video") > 0) video_id = url.substr(url.indexOf('video/') + 6);
        else if (url.indexOf("youtu.be/") > 0) video_id = url.substr(url.indexOf('youtu.be/') + 9);
        if (video_id == "") {
            kjtYpr.inf("_FPNevernayaSsilka_ youtube!", 1500);
            lI1lI00l1gX0l0l0OYpr();
            return
        }
        if (video_id.indexOf("?") > 0) video_id = video_id.substr(0, video_id.indexOf("?"));
        var u = "https://www.youtube.com/watch?v=" + video_id + "&gl=US&hl=en&has_verified=1&bpctr=9999999999";
        var u2 = "http://" + lI101lOIQOlTlQ10I1Ypr + "/smarttv/api.php?do=youtube-dl-html&v=" + video_id + "&box_client=lg&box_mac=" + kjtYpr.mac + "&tvp=" + timestamp + "&country=" + ipCountry;
        var uh = Object.create(uHelper);
        var uh2 = Object.create(uHelper);
        uh2.local = 1;
        uh2.atime = 45000;
        var P1 = "",
            P2 = "";
        uh.parse = function (s) {
            if (s.indexOf("Our systems have detected unusual traffic from your computer network") > 0) {
                kjtYpr.inf("YouTube says: Our systems have detected unusual traffic from your computer network", 1300);
                uh2.get(u2);
                return
            }
            uh2.postdata = "html=" + encodeURIComponent(s) + "";
            uh2.get(u2)
        }
        uh2.parse = function (s) {
            var m = l1l0IOIl_puQl1I1IYpr(s);
            if (m != null) {
                kjtYpr.YoutubeURL = m;
                l0O0ll1QVvyRH10OOIYpr(mini)
            } else {
                kjtYpr.inf("YouTube err ", 1300);
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1)
            }
        }
        if (app_cors || (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive)) {
            uh.remote = 1;
            uh.get(u)
        } else uh2.get(u2);
        return "assync";

        function sendy(video_id, ypost, s2, s3) {
            statusbar(url, "link");
            url = "http://" + lI101lOIQOlTlQ10I1Ypr + "/smarttv/api.php?do=youtube-dl-mod&v=" + video_id + "&box_client=lg&box_mac=" + kjtYpr.mac + "&tvp=" + timestamp + "&country=" + ipCountry;
            xhr = null;
            xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.responseText.indexOf("{") == -1) {
                        lI1lI00l1gX0l0l0OYpr();
                        kjtYpr.inf(xhr.responseText, 2000);
                        return
                    }
                    var data = l1l0IOIl_puQl1I1IYpr(xhr.responseText);
                    if (typeof data != "object" || data == null) {
                        lI1lI00l1gX0l0l0OYpr();
                        kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                        return
                    }
                    kjtYpr.YoutubeURL = data;
                    var k = 0;
                    for (var i in data) {
                        if (parseInt(i) > k && i < (sQual[kjtYpr.GL.quality] + 80)) {
                            if (data[i].audio == "1") k = i
                        }
                    }
                    if (k == 0) {
                        k = 10000;
                        for (var i in data) {
                            if (parseInt(i) < k && i > sQual[kjtYpr.GL.quality] - 80) {
                                if (data[i].audio == "1") k = i
                            }
                        }
                    }
                    if (typeof data[k] == "undefined") {
                        lI1lI00l1gX0l0l0OYpr();
                        kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_!", 2000);
                        return
                    }
                    url = data[k].url;
                    kjtYpr.YoutubeURLselect = k;
                    if (data[k].audio != "1") url += "#AUDIO=" + data[k].audio;
                    if (mini) play_mini(url);
                    else {
                        l0llQlOl1LaOlQ1Ypr();
                        if (typeof data.hls == "string" && l0O1l101l1t_Y0lll1Ypr == "jw") url = "http://" + ServerFromList + "/smarttv/hdrezka.php?idcont=" + b64_ENCODE(data.hls) + "&.m3u8";
                        lI1l1IOllHHCTuO0OlOYpr(url)
                    }
                    return;
                    kjtYpr.ll0Il1IRfsIQOO0Ypr = data;
                    if (kjtYpr.ll0Il1IRfsIQOO0Ypr[0][2] == "live") {
                        var data = {
                            "playlist_name": "LIVE",
                            "channels": []
                        };
                        for (i = 0; i < kjtYpr.ll0Il1IRfsIQOO0Ypr.length; i++) {
                            data.channels.push({
                                "title": kjtYpr.ll0Il1IRfsIQOO0Ypr[i][0],
                                "stream_url": kjtYpr.ll0Il1IRfsIQOO0Ypr[i][1]
                            })
                        }
                        kjtYpr.l1IlIl01l0tUIl1IIYpr += "#live";
                        kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id);
                        return ""
                    }
                    var n = 0;
                    if (kjtYpr.GL.quality > 1) {
                        for (var i = kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1; i >= 0; i--) {
                            if (kjtYpr.GL.quality <= kjtYpr.ll0Il1IRfsIQOO0Ypr[i][2] - 1) {
                                n = i;
                                break
                            }
                        }
                    }
                    url = kjtYpr.ll0Il1IRfsIQOO0Ypr[n][1];
                    if (typeof kjtYpr.ll0Il1IRfsIQOO0Ypr[n][3] != "undefined") {
                        if (kjtYpr.ll0Il1IRfsIQOO0Ypr[n][3] != "") {
                            url += "&signature=" + CE(kjtYpr.ll0Il1IRfsIQOO0Ypr[n][3])
                        }
                    }
                    $_("qual_text").innerHTML = kjtYpr.ll0Il1IRfsIQOO0Ypr[n][0];
                    if (mini) play_mini(url);
                    else {
                        l0llQlOl1LaOlQ1Ypr();
                        lI1l1IOllHHCTuO0OlOYpr(url)
                    }
                }
            };
            if (ypost == null || ypost == "") {
                xhr.open('GET', url, !0);
                xhr.send()
            } else {
                xhr.open('POST', url, !0);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                if (s2 == undefined) s2 = "";
                if (s3 == undefined) s3 = "";
                xhr.send("r=1&gvi=" + encodeURIComponent(ypost) + "&s2=" + encodeURIComponent(s2) + "&s3=" + encodeURIComponent(s3))
            }
        }
        if (app_cors || (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive)) {
            var arr = ["&el=embedded", "&el=detailpage", "&el=vevo", ""];
            var el = 0;

            function getvideoinfo() {
                var u = 'https://www.youtube.com/get_video_info?video_id=' + video_id + '' + arr[el] + '&ps=default&eurl=&gl=US&hl=en';
                if (!app_cors && kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) u = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(u);
                statusbar(u, "link");
                xhr = null;
                xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        var s = xhr.responseText;
                        if (s.indexOf("Our systems have detected unusual traffic from your computer network") > 0) {
                            kjtYpr.inf("YouTube says: Our systems have detected unusual traffic from your computer network", 1300);
                            sendy(video_id, s);
                            return
                        }
                        if (s.indexOf("player_response") == -1 || s.indexOf("22OK") == -1) {
                            el++;
                            if (el < 4) getvideoinfo();
                            else sendy(video_id);
                            return
                        }
                        if (0 && (s.indexOf("=s%3D") > 0 || s.indexOf("%26s%3D") > 0)) {
                            var u = 'curl -L "https://www.youtube.com/watch?v=' + video_id + '&gl=US&hl=en" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"';
                            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) u = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(u);
                            if (app_cors) u = "https://www.youtube.com/watch?v=" + video_id + "&gl=US&hl=en";
                            statusbar(u, "link");
                            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(10);
                            xhr = null;
                            xhr = new XMLHttpRequest();
                            xhr.onreadystatechange = function () {
                                if (xhr.readyState == 4) {
                                    var s2 = xhr.responseText;
                                    var mtc = s2.match(/(yts.{1,4}jsbin.{1,4}player.*?[\\\/]base\.js)/);
                                    if (mtc != null) {
                                        var u = "https://youtube.com/" + mtc[1];
                                        u = u.replace(/\\/g, "");
                                        statusbar(u, "link");
                                        if (!app_cors && kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) u = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(u);
                                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(20);
                                        xhr = null;
                                        xhr = new XMLHttpRequest();
                                        xhr.onreadystatechange = function () {
                                            if (xhr.readyState == 4) {
                                                if (xhr.responseText.indexOf('|"signature",') == -1) {
                                                    sendy(video_id, s)
                                                } else sendy(video_id, s, s2, xhr.responseText)
                                            }
                                        };
                                        xhr.open('GET', u, !0);
                                        xhr.send()
                                    } else {
                                        sendy(video_id, s)
                                    }
                                }
                            };
                            xhr.open('GET', u, !0);
                            try {
                                if (u.indexOf("http") == 0) xhr.setRequestHeader("user-agent", "Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1")
                            } catch (e) {}
                            xhr.send()
                        } else {
                            sendy(video_id, s)
                        }
                    }
                };
                xhr.open('GET', u, !0);
                xhr.send()
            }
            getvideoinfo()
        } else sendy(video_id);
        return "assync"
    } else if (gV(ChSel, "menu_url") == "videocdn" || gV(ChSel, "menu_url") == "hdvb") {
        var uh = Object.create(uHelper);
        uh.parse = function (s) {
            var m = s.match(/data-config='(.*?)'/);
            if (m != null) {
                var f = l1l0IOIl_puQl1I1IYpr(m[1]);
                if (f.hls.indexOf("//") == 0) f.hls = "http:" + f.hls;
                if (l0O1l101l1t_Y0lll1Ypr == "jw" && !mini && app_cors) lI1l1IOllHHCTuO0OlOYpr(f.hls);
                else {
                    kjtYpr.YoutubeURL = {};
                    for (var i in ["360", "480", "720"]) kjtYpr.YoutubeURL[i] = {
                        "title": i,
                        "type": "",
                        "url": f.hls.replace("index.m3u8", i + "/index.m3u8"),
                        "audio": 1
                    };
                    l0O0ll1QVvyRH10OOIYpr(mini)
                }
            } else {
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 2!", 2000);
                lI1lI00l1gX0l0l0OYpr();
                return
            }
        }
        uh.get(url);
        return "assync"
    } else if (url.match(/\/serial\/[0-9]+/i) && gV(ChSel, "menu_url") != "directlink") {
        var uh = Object.create(uHelper);
        uh.parse = function (s) {
            var m = s.match(/file:'(.*?)'/);
            if (m != null) {
                var f = l1l0IOIl_puQl1I1IYpr(m[1]);
                if (f != null) {
                    uh.recurFolder(f, "", ChSel.title);
                    data = {
                        "channels": uh.list
                    };
                    kjtYpr.l1IlIl01l0tUIl1IIYpr = url + "#stream_url";
                    kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id)
                } else {
                    kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 012!", 2000);
                    lI1lI00l1gX0l0l0OYpr();
                    return
                }
            } else {
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 011!", 2000);
                lI1lI00l1gX0l0l0OYpr();
                return
            }
        }
        uh.get(url);
        return "assync"
    } else if (url.match(/\/vod\/[0-9]+/i) && gV(ChSel, "menu_url") != "directlink") {
        var uh = Object.create(uHelper);
        uh.parse = function (s) {
            var m = s.match(/file:"(.*?)"/);
            if (m != null) {
                if (mini) play_mini(m[1]);
                else {
                    l0llQlOl1LaOlQ1Ypr();
                    lI1l1IOllHHCTuO0OlOYpr(m[1])
                }
            } else {
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 1!", 2000);
                lI1lI00l1gX0l0l0OYpr();
                return
            }
        }
        uh.get(url);
        return "assync"
    } else if (url.match(/https?:\/\/yadi\.sk\/(i|d)\/.+/i) && gV(ChSel, "menu_url") != "directlink") {
        var uh = Object.create(uHelper);
        uh.parse = function (s) {
            var m = s.match(/"store-prefetch">.*?(\{.*?)<\/script/);
            kjtYpr.YoutubeURL = {};
            if (m != null) {
                var k = l1l0IOIl_puQl1I1IYpr(m[1]);
                if (k != null) {
                    for (var z in k.resources) {
                        if (k.resources[z].videoStreams) {
                            var t = k.resources[z].videoStreams.videos;
                            for (var i in t) {
                                if (is_m3u8(url)) pstream = !0;
                                else pstream = !1;
                                if (!mini && handmode == null && kjtYpr.GL.streamplayer == "jw" && t[i].dimension == "adaptive") {
                                    kjtYpr.YoutubeURL = {};
                                    l0llQlOl1LaOlQ1Ypr();
                                    lI1l1IOllHHCTuO0OlOYpr(t[i].url);
                                    return
                                } else {
                                    if (gV(t[i].size, "height") > 0)
                                        kjtYpr.YoutubeURL[t[i].size.height] = {
                                            "title": t[i].dimension,
                                            "type": "",
                                            "url": t[i].url,
                                            "audio": 1
                                        }
                                }
                            }
                        }
                    }
                    l0O0ll1QVvyRH10OOIYpr(mini)
                } else {
                    kjtYpr.inf("_FPOshibka_ webpage yadisk!", 2000);
                    lI1lI00l1gX0l0l0OYpr();
                    return
                }
            } else {
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ yadisk!", 2000);
                lI1lI00l1gX0l0l0OYpr();
                return
            }
        }
        uh.remote = 1;
        uh.get(url, "", 1);
        return "assync"
    } else if (gV(ChSel, "menu_url") == "kodik" || url.match(/kodik.*\/video\/[0-9]+\/[0-9a-z]+\//i)) {
        function kodik_start(u) {
            statusbar(u, "link");
            var lc = 'curl -L "' + u + '" -H "Referer: https://we.kinokong.ws/" -H "Pragma: no-cache" -H "DNT: 1" -H "Accept-Encoding: deflate" -H "Accept-Language: ru,en;q=0.8,uk;q=0.6,bg;q=0.4" -H "User-Agent: ' + ua_chrome + '" -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" -H "Cache-Control: no-cache" -H "Connection: keep-alive"';
            if (platform == "android-device") {
                var s = andr.cmd(lc);
                kodik_parse(s);
                return "assync"
            }
            xhr_abort = !1;
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    clearTimeout(l01IQlTho0O1lI1Ypr);
                    kodik_parse(xhr.responseText)
                }
            };
            if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) {
                url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(lc)
            } else if (kjtYpr.series != "D" && kjtYpr.series != "C" && app_cors && xhr_referer == 3) {
                xhr.setRequestHeader("User-Agent", ua_chrome);
                xhr.setRequestHeader("Accept", "*/*");
                xhr.setRequestHeader("Accept-Encoding", "deflate");
                xhr.setRequestHeader("Referer", url)
            } else {
                // serv = ["195.88.208.101", "46.36.218.194", "185.158.114.122"];
                serv = ["player.local"];
                url = "http://" + serv[rand(0, 2)] + "/xhr.php?u=" + encodeURIComponent(lc);
                if (cmdReload) {
                    cmdReload = !1;
                    url += "&refresh=true"
                }
            }
            xhr.open('GET', url, !0);
            xhr.send();
            var atime = 15000;
            l01IQlTho0O1lI1Ypr = setTimeout(function () {
                xhr_abort = !0;
                xhr.abort();
                kjtYpr.inf('_FPPrevLimOzh_', 1500, 'yellow');
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
            }, atime)
        }

        function kodik_parse(s) {
            var m = s.match(/iframe.src = "(.*?)"/);
            if (m != null) {
                var v1 = m[1].match(/\/video\/(\d+)\/(.*?)\/.*?\?(.*)$/);
                if (v1 != null) {
                    var obj = {};
                    var pairs = v1[3].split('&');
                    for (i in pairs) {
                        var split = pairs[i].split('=');
                        obj[decodeURIComponent(split[0])] = decodeURIComponent(split[1])
                    }
                    lc = 'curl "https://kodik.info/video-links" -H "Origin: https://kodik.info" -H "User-Agent: ' + ua_chrome + '" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Accept: application/json, text/javascript, */*; q=0.01" -H "Referer: https:' + m[1] + '" -H "X-Requested-With: XMLHttpRequest" -H "DNT: 1" --data "d=' + obj.d + '&d_sign=' + obj.d_sign + '&pd=' + obj.pd + '&pd_sign=' + obj.pd_sign + '&ref=' + encodeURIComponent(obj.ref) + '&ref_sign=' + obj.ref_sign + '&bad_user=false&type=video&hash=' + v1[2] + '&id=' + v1[1] + '"';
                    if (platform == "android-device") {
                        var s = andr.cmd(lc);
                        kodik_res(s);
                        return "assync"
                    }
                    xhr_abort = !1;
                    var xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4) {
                            clearTimeout(l01IQlTho0O1lI1Ypr);
                            kodik_res(xhr.responseText)
                        }
                    };
                    if (kjtYpr.GL.remote > 0 && kjtYpr.GL.remoteactive) {
                        url = "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(lc)
                    } else if (0 && kjtYpr.series != "D" && kjtYpr.series != "C" && app_cors && xhr_referer == 3) {
                        xhr.setRequestHeader("User-Agent", ua_chrome);
                        xhr.setRequestHeader("Accept", "*/*");
                        xhr.setRequestHeader("Accept-Encoding", "deflate");
                        xhr.setRequestHeader("Referer", url)
                    } else {
                        // serv = ["195.88.208.101", "46.36.218.194", "185.158.114.122"];
                        serv = ["player.local"];
                        url = "http://" + serv[rand(0, 2)] + "/xhr.php?u=" + encodeURIComponent(lc);
                        if (cmdReload) {
                            cmdReload = !1;
                            url += "&refresh=true"
                        }
                    }
                    xhr.open('GET', url, !0);
                    xhr.send();
                    var atime = 15000;
                    l01IQlTho0O1lI1Ypr = setTimeout(function () {
                        xhr_abort = !0;
                        xhr.abort();
                        kjtYpr.inf('_FPPrevLimOzh_', 1500, 'yellow');
                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
                    }, atime)
                } else {
                    kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 1!", 2000);
                    lI1lI00l1gX0l0l0OYpr();
                    return
                }
            } else {
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 2!", 2000);
                lI1lI00l1gX0l0l0OYpr();
                return
            }
        }

        function kodik_res(s) {
            var f = l1l0IOIl_puQl1I1IYpr(s);
            kjtYpr.YoutubeURL = {};
            if (f != null) {
                for (var i in f.links) {
                    var u1 = f.links[i][0].src;
                    if (u1.indexOf("//") == 0) u1 = "http:" + u1;
                    kjtYpr.YoutubeURL[i] = {
                        "title": i,
                        "type": "",
                        "url": u1,
                        "audio": 1
                    }
                }
                l0O0ll1QVvyRH10OOIYpr(mini)
            } else {
                kjtYpr.inf("_FPOshibka_ _FPparsingaVideossilki_ 3!", 2000);
                lI1lI00l1gX0l0l0OYpr();
                return
            }
        }
        kodik_start(url);
        return "assync"
    }
    if (kjtYpr.GL.remote == 3 && kjtYpr.GL.remoteactive && vr >= 1.36 && !1) {
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("filmix.php") > 0) {
            url = "http://" + kjtYpr.GL.remoteip + "/proxym3u8B" + b64_ENCODE(url + "OPT:ContentType--video/mpegOPEND:") + "endbase64/"
        }
    }
    return url
}

function ll0111l1wxUIOlO1lYpr(mode, text, but) {
    try {
        $_("ll0111l1wxUIOlO1lYpr").parentNode.removeChild($_("ll0111l1wxUIOlO1lYpr"))
    } catch (e) {}
    ll0111l1wxUIOlO1lYprmode = mode;
    ll0111l1wxUIOlO1lYprx = 1;
    var div = document.createElement('div');
    div.id = "ll0111l1wxUIOlO1lYpr";
    div.style.position = "absolute";
    div.style.textAlign = "center";
    div.style.border = "2px solid #2f8be8";
    div.style.borderRadius = "6px";
    div.style.fontSize = css_wh(22) + "px";
    div.style.zIndex = "1";
    div.style.backgroundColor = "gray";
    div.style.padding = "2px";
    div.style.visibility = "hidden";
    div.style.width = css_w(560) + "px";
    div.style.left = css_w(355) + "px";
    if (mode == 19) {
        div.style.width = css_w(1250) + "px";
        div.style.height = css_w(690) + "px";
        div.style.overflow = "hidden";
        div.style.left = css_w(10) + "px";
        div.style.top = css_wh(10) + "px";
        div.style.textAlign = "left"
    }
    if (text == null) {
        text = "_FPOshibka_ _FPopredDns_!<br>  Смените днс или установите RemoteFork на PC или Android<br>_FPVseRavnoProdolzhit_?";
        if (uaJ == "android") {
            text = "Установить RemoteFork.apk на это Android устройство?<br>Если Remotefork уже установлен то нажмите _FPOtmena_ и запустите его<br>Подробнее http://forkplayer.tv/smart-tv/remotefork/";
            but = "_FPDownload RemoteFork_|_FPOtmena_"
        }
    }
    if (but == null) but = "_FPProdolzhit_|_FPOtmena_";
    if (mode == 53 || mode == 58 || mode == 19) {
        but = "_FPProdolzhit_|_FPOK_"
    } else if (mode == 15) {
        but = "Настройки IP|_FPOtmena_";
        text = "Для торрент ссылок torrentb64:// необходим Ace Stream! Проверьте запущен ли Ace Stream на " + getip("acestream") + " или Torrserve на " + getip("torrserve") + "<br>Или пропишите правильный IP вашего Ace Stream в Настройках приложения"
    }
    sb = but.split("|");
    if (box_low || box_low2) var st = "";
    else st = "word-wrap: break-word;overflow-wrap: break-word;";
    var inner = "<div style='background-color:#111111;margin:0px 0px 10px 0px;overflow:hidden;" + st + "'>" + text + "</div><div style='padding:0px 0px 3px 0px;text-align:center;'><span id='dnsc0' class='cbutton' onmouseover=\"ll0111l1wxUIOlO1lYprx=0;ll0111l1wxUIOlO1lYprmove();\" onclick=\"ll0111l1wxUIOlO1lYprok();\">" + sb[0] + "</span> <span id='dnsc1' class='cbutton' onmouseover=\"ll0111l1wxUIOlO1lYprx=1;ll0111l1wxUIOlO1lYprmove();\" onclick=\"ll0111l1wxUIOlO1lYprok();\" style='background-color:red;'>" + sb[1] + "</span></div>";
    document.getElementsByTagName('body')[0].appendChild(div);
    lO10OIOlxzlO100OIYpr("ll0111l1wxUIOlO1lYpr", inner);
    if (mode == 53 || mode == 58 || mode == 19) {
        $_("dnsc0").style.display = "none"
    }
    handler = "confirm";
    setTimeout(function () {
        handler = "confirm";
        var x = 720 - $_("ll0111l1wxUIOlO1lYpr").offsetHeight;
        if (x < 10) x = 10;
        if (x > 205) x = 205;
        $_("ll0111l1wxUIOlO1lYpr").style.top = x + "px";
        $_("ll0111l1wxUIOlO1lYpr").style.visibility = "visible";
        $_("main").onclick = function () {
            ll0111l1wxUIOlO1lYprx = 1;
            ll0111l1wxUIOlO1lYprok()
        }
    }, 250);
    if (mode != 62) lI1lI00l1gX0l0l0OYpr(1)
}

function ll0111l1wxUIOlO1lYprmove() {
    $_("dnsc0").style.backgroundColor = 'transparent';
    $_("dnsc1").style.backgroundColor = 'transparent';
    $_("dnsc" + ll0111l1wxUIOlO1lYprx).style.backgroundColor = 'red'
}

function ll0111l1wxUIOlO1lYprok() {
    if (ll0111l1wxUIOlO1lYprmode == 1 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.lIllOVRj11lO10YprC("pm", l0O1l101l1t_Y0lll1Ypr);
        var prs = curCh()["parser"].split("|");
        document.location = curCh()["parser"].split("|")[0] + "#" + escape(prs[1]) + "|" + escape(prs[2]) + "|" + escape(fshomeurl) + "|" + escape(curCh("stream_url"))
    } else if (ll0111l1wxUIOlO1lYprmode == 15 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.l110l1lIPuoaO0I0IOYpr("tosettings");
        kjtYpr.lIOIOIBu0mO11llO0Ypr(19)
    } else if (ll0111l1wxUIOlO1lYprmode == 16 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.GL.sidebar = 1;
        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
        xhr_bookmark("bookmarks/toolbar", "add", rt_obj)
    } else if (ll0111l1wxUIOlO1lYprmode == 17 && ll0111l1wxUIOlO1lYprx == 0) {
        oldinset = inset["tab" + l1OIOvnWuZI0lO0Ypr];
        inset["tab" + l1OIOvnWuZI0lO0Ypr] = null;
        var newinset = {};
        var kx = -1;
        for (var i = 0; i < lO00Oll1CKJll11Ypr; i++) {
            if (inset["tab" + i] != null) {
                kx++;
                newinset["tab" + kx] = inset["tab" + i];
                kjtYpr.lIllOVRj11lO10Ypr("url" + kx, l10O0I11gdZlOOIIYpr(newinset["tab" + kx]))
            }
        }
        for (i = kx + 1; i < lO00Oll1CKJll11Ypr; i++) kjtYpr.lIllOVRj11lO10Ypr("url" + i, "");
        inset = newinset;
        lOI10QpJAilIIIYpr--;
        if (insetActive > lOI10QpJAilIIIYpr - 1) insetActive = lOI10QpJAilIIIYpr - 1;
        l1OIOvnWuZI0lO0Ypr = insetActive;
        kjtYpr.lIllOVRj11lO10Ypr("urlInset", insetActive);
        kjtYpr.lII1O1LQIDl10IlOYpr();
        kjtYpr.channels = [];
        lO10OIOlxzlO100OIYpr("leftHalf", "<div style='width: " + css_w(633) + "px;height:" + css_wh(640) + "px;position:absolute;left:" + css_w(15) + "px; top:" + css_wh(48) + "px;overflow:hidden;'><center><img src='" + _img("_OI_b/loading.gif") + "' width=" + css_w(25) + " /></center></div>");
        ll1lIOiIO0lO1IIIYpr = Math.random();
        kjtYpr.lI11111bPNQ0III1Ypr(!0)
    } else if (ll0111l1wxUIOlO1lYprmode == 100 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.GL.third = 2;
        kjtYpr.l0lI10EMI1I10Ypr(null, ChSel);
        $_("ll0111l1wxUIOlO1lYpr").parentNode.removeChild($_("ll0111l1wxUIOlO1lYpr"));
        $_("main").onclick = "";
        return
    } else if (ll0111l1wxUIOlO1lYprmode == 100 && ll0111l1wxUIOlO1lYprx == 1) {
        templic = 1;
        kjtYpr.l0lI10EMI1I10Ypr(null, ChSel);
        $_("ll0111l1wxUIOlO1lYpr").parentNode.removeChild($_("ll0111l1wxUIOlO1lYpr"));
        $_("main").onclick = "";
        return
    } else if (ll0111l1wxUIOlO1lYprmode == 5 && ll0111l1wxUIOlO1lYprx == 0) {
        try {
            andr.cmd("videohttp://obovse.ru/aForkPlayer.apk")
        } catch (e) {
            document.location = "http://obovse.ru/aForkPlayer.apk"
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 6 && ll0111l1wxUIOlO1lYprx == 0) {
        try {
            andr.cmd("videohttp://obovse.ru/xmtvplayer.apk")
        } catch (e) {
            document.location = "http://obovse.ru/xmtvplayer.apk"
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 7 && ll0111l1wxUIOlO1lYprx == 0) {
        // PullDataFrom("http://185.158.114.122/obovse.ru/smarttv/api.php?do=delmyhardware&box_mac=" + kjtYpr.mac + "&box_client=lg&box_hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial + "|" + gnxu + "&hw=" + countHw + "&" + Math.random(), "showinfo")
        PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/api.php?do=delmyhardware&box_mac=" + kjtYpr.mac + "&box_client=lg&box_hardware=" + kjtYpr.hardware + "&vr=" + vr + "&box_server=" + nServer + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial + "|" + gnxu + "&hw=" + countHw + "&" + Math.random(), "showinfo")
    } else if (ll0111l1wxUIOlO1lYprmode == 8 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.l0lI10EMI1I10Ypr(null, {
            "playlist_url": "setGlStart",
            "menu_url": "third1"
        })
    } else if (ll0111l1wxUIOlO1lYprmode == 14 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.lIllOVRj11lO10Ypr("glstart", "");
        kjtYpr.lIllOVRj11lO10Ypr("datas", "");
        userTop = {};
        kjtYpr.GL.third = 0;
        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
        page_rs({
            "src": "_reload"
        })
    } else if (ll0111l1wxUIOlO1lYprmode == 9 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.GL.vivatlogin = "";
        kjtYpr.GL.vivatpass = "";
        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
        data = {
            "playlist_name": "",
            "channels": [{
                "title": "Отключено. Перезайдите в Виват ТВ!",
                "playlist_url": "http://obovse.ru/smarttv/vivat2.php?do=start&v=md5hash",
                "logo_30x30": "none"
            }]
        };
        kjtYpr.l1IlIl01l0tUIl1IIYpr = "vivatenterclear";
        kjtYpr.l00100lIKlBWw1lllIlYpr(data)
    } else if (ll0111l1wxUIOlO1lYprmode == 2 && ll0111l1wxUIOlO1lYprx == 0) {
        if (uaJ == "android") {
            kjtYpr.GL.remote = 2;
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
            l0I1l0lO0lsnG1I1QlYpr();
            document.location = "http://forkplayer.tv/RemoteFork1.2.f4.apk"
        } else {
            llI0llO11rsNIl0lOYpr(!0);
            prs = curCh()["parser"].split("|");
            lO10OIOlxzlO100OIYpr("infoList", "<iframe style='display:none;position:absolute;' width='0px' height='0px' id='ifr' src='" + prs[0] + "#" + escape(prs[1]) + "|" + escape(prs[2]) + "|" + escape(homeurl) + "'></iframe>")
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 3 && ll0111l1wxUIOlO1lYprx == 0) {
        llI0llO11rsNIl0lOYpr(!0);
        prs = curCh()["parser"].split("|");
        lO10OIOlxzlO100OIYpr("infoList", "<iframe style='display:none;position:absolute;' width='0px' height='0px' id='ifr' src='http://obovse.ru/smarttv/kinoxa.php?tushkan.net&" + Math.random() + "&url2=" + escape(prs[0]) + "&p1=" + escape(prs[1].replace("'", "quote")) + "&p2=" + escape(prs[2].replace("'", "quote")) + "&p3=" + escape(homeurl) + "'></iframe>")
    } else if (ll0111l1wxUIOlO1lYprmode == 4 && ll0111l1wxUIOlO1lYprx == 0) {
        llI0llO11rsNIl0lOYpr(!0);
        prs = curCh()["parser"].split("|");
        lO10OIOlxzlO100OIYpr("infoList", "<iframe style='display:none;position:absolute;' width='0px' height='0px' id='ifr' src='http://obovse.ru/smarttv/kinoxa.php?kinoxa-x.ru&" + Math.random() + "&url=" + escape(prs[0]) + "&p1=" + escape(prs[1]) + "&p2=" + escape(prs[2]) + "&p3=" + escape(homeurl) + "'></iframe>")
    } else if (ll0111l1wxUIOlO1lYprmode == 10 && ll0111l1wxUIOlO1lYprx == 0) {
        if (!is_mark) {
            is_mark_array = {};
            is_mark_array[select] = "1"
        }
        for (var i = 0; i < kjtYpr.channels.length; i++) {
            if (is_mark_array[i] == "1") {
                var ch = kjtYpr.channels[i];
                if (ch.playlist_url == "") var s = ch.stream_url;
                else s = ch.playlist_url;
                s = s.replace("usb://", "").replace("xml://", "");
                if (s.length > 0) usbDelete(s)
            }
        }
        setTimeout("is_mark=false;ll1lIOiIO0lO1IIIYpr=Math.random();kjtYpr.l110l1lIPuoaO0I0IOYpr(kjtYpr.l1IlIl01l0tUIl1IIYpr);", 850)
    } else if (ll0111l1wxUIOlO1lYprmode == 11 && ll0111l1wxUIOlO1lYprx == 0) {
        var ch = curCh();
        var c = ch.playlist_url.substring(6);
        setTimeout(function () {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
            if (c.indexOf("http") == 0) savezipfile(c, curCh("title"));
            else {
                savezipfile("http://obovse.ru/widget/app/" + c)
            }
        }, 500)
    } else if (ll0111l1wxUIOlO1lYprmode == 12 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.l0lI10EMI1I10Ypr(null, dataconfirm)
    } else if (ll0111l1wxUIOlO1lYprmode == 13 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.inf('_FPZagruzka_ HTML IFRAME', 1500, 'yellow');
        $_("ext").style.display = "block";
        lO10OIOlxzlO100OIYpr("ext", '<iframe onerror="" id="frame-id" style="margin-top: 0px; border:none; background-color:black;" width="1280" height="640" src="' + ChSel.playlist_url + '" />');
        kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + "Запущен сайт в iframe<br>" + "Меню (красная кнопка) - Закрыть<br>" + "CH UP / CH DOWN - Открыть другую вкладку" + "", 2000);
        handler = "ext";
        kjtYpr.l0OlII0Ix1fI1I01Ypr();
        $_("frame-id").onloadd = function () {
            var that = document.getElementById('frame-id');
            try {
                (that.contentWindow || that.contentDocument).location.href
            } catch (err) {
                kjtYpr.popUp('err: ' + err.message, 2000);
                ext_close()
            }
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 29 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.GL.sortiptv = 3;
        kjtYpr.lOlIOOWs1uO000lYpr();
        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
        kjtYpr.l00100lIKlBWw1lllIlYpr(kjtYpr.origchannels, select)
    } else if (ll0111l1wxUIOlO1lYprmode == 12 && ll0111l1wxUIOlO1lYprx == 0) {
        if (urlinst != "") document.location = urlinst
    } else if (ll0111l1wxUIOlO1lYprmode == 31) {
        if (ll0111l1wxUIOlO1lYprx == 1) {
            tomflight_start()
        } else {
            tscreen = "main";
            $_("game").style.display = "none";
            $_("game").style.zIndex = "0"
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 66) {
        if (ll0111l1wxUIOlO1lYprx == 0) {
            kjtYpr.lIllOVRj11lO10Ypr("lic", "1");
            kjtYpr.lIllOVRj11lO10YprC("lic", "1")
        } else {}
        licok = !0;
        kjtYpr.l00100lIKlBWw1lllIlYpr(licdata, licsel)
    } else if (ll0111l1wxUIOlO1lYprmode == 61) {
        if (ll0111l1wxUIOlO1lYprx == 0) {
            kjtYpr.l1IlIl01l0tUIl1IIYpr = ChSel.playlist_url;
            lIIlO1uuOl100Ypr();
            // PullDataFrom("http://185.158.114.122/obovse.ru/smarttv/spider.php?id=cmdSpiderStat&s=" + encodeURIComponent(ChSel.playlist_url) + "&img=" + addident());
            PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/spider.php?id=cmdSpiderStat&s=" + encodeURIComponent(ChSel.playlist_url) + "&img=" + addident());
            var u = ChSel.playlist_url.substr(7);
            document.location = u
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 62) {
        if (ll0111l1wxUIOlO1lYprx == 0) {
            l1I1lllp1Fu1O0lYpr(gV(Point, "complete"), "half");
            endrek();
            lI1lI00l1gX0l0l0OYpr();
            if (Point["ClickThrough"].indexOf("html://") == 0) {
                document.location = Point["ClickThrough"].substr(7)
            } else if (Point["ClickThrough"].indexOf("http") == 0 && Point["ClickThrough"].indexOf("xml") == -1) {
                if (platform == "android-device") document.location = Point["ClickThrough"];
                else {
                    $_("ext").style.display = "block";
                    lO10OIOlxzlO100OIYpr("ext", '<iframe id="frame-id" style="margin-top: 0px; border:none; background-color:black;" width="1280" height="640" src="' + Point["ClickThrough"] + '" />');
                    kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + "Запущен сайт в iframe<br>" + "Меню (красная кнопка) - Закрыть<br>" + "CH UP / CH DOWN - Открыть другую вкладку" + "", 2000);
                    handler = "ext";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr()
                }
            } else kjtYpr.l0lI10EMI1I10Ypr(null, {
                "title": " " + Point["linkTxt"],
                "playlist_url": Point["ClickThrough"]
            })
        } else {
            $_("ll0111l1wxUIOlO1lYpr").parentNode.removeChild($_("ll0111l1wxUIOlO1lYpr"));
            $_("main").onclick = "";
            handler = "player";
            goMedia();
            return
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 57) {
        if (ll0111l1wxUIOlO1lYprx == 0) {
            var u = "http://obovse.ru/widget/tmp/" + curCh()["playlist_url"].substr(6) + "/index.html" + location.search;
            document.location = u
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 56) {
        if (ll0111l1wxUIOlO1lYprx == 0) {
            xhr_bookmark(curCh()["playlist_url"], "alldel")
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 55) {
        if (ll0111l1wxUIOlO1lYprx == 0) {
            if (typeof kjtYpr.nmc != "undefined") {
                if (kjtYpr.nmc.length == 12 || kjtYpr.nmc.length == 14) {
                    kjtYpr.lIllOVRj11lO10YprC("oID", kjtYpr.mac);
                    kjtYpr.lIllOVRj11lO10Ypr("oID", kjtYpr.mac);
                    kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.nmc);
                    kjtYpr.lIllOVRj11lO10Ypr("ID", kjtYpr.nmc);
                    kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.nmc);
                    kjtYpr.mac = kjtYpr.serial = kjtYpr.nmc;
                    kjtYpr.inf("OK set ID " + kjtYpr.mac, 2200);
                    updateLogin();
                    kjtYpr.lI11111bPNQ0III1Ypr(null, null, 1)
                } else kjtYpr.inf("Error format ID", 1500)
            }
        }
    } else if (ll0111l1wxUIOlO1lYprmode == 54) {
        if (ll0111l1wxUIOlO1lYprx == 0) kjtYpr.l0lI10EMI1I10Ypr("download")
    } else if (ll0111l1wxUIOlO1lYprmode == 53) {} else if (ll0111l1wxUIOlO1lYprmode == 58) {
        lQQOIOO01HvItO11QYpr('menu', VK_BLUE)
    } else if (ll0111l1wxUIOlO1lYprmode == 52) {
        if (ll0111l1wxUIOlO1lYprx == 0) copyUsbMode = 2;
        else copyUsbMode = 3
    } else if (ll0111l1wxUIOlO1lYprmode == 51 && ll0111l1wxUIOlO1lYprx == 0) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(1);
        statusbar("/api/export/" + kjtYpr.hardware + ".....", "link");
        var g = "";
        for (var i in allfs) {
            var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr(allfs[i]);
            g += s + "[-..-]"
        }
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(10);
        PullDataFromPost(addident("http://forkplayer.tv/xml/account.php?do=fexport"), 's=' + encodeURIComponent(g), "cmdSetSyncExp")
    } else if (ll0111l1wxUIOlO1lYprmode == 99 && ll0111l1wxUIOlO1lYprx == 0) {
        sbrosok()
    }
    handler = "menu";
    $_("ll0111l1wxUIOlO1lYpr").parentNode.removeChild($_("ll0111l1wxUIOlO1lYpr"));
    $_("main").onclick = ""
}

function sbrosok(noreload) {
    try {
        pqrs();
        document.cookie = ""
    } catch (e) {}
    try {
        for (var i in allfs) {
            kjtYpr.lIllOVRj11lO10Ypr(allfs[i], "")
        }
        kjtYpr.lIllOVRj11lO10Ypr("vk_audio_pl", "");
        kjtYpr.lIllOVRj11lO10Ypr("vk_audio_sel", "");
        for (var key in localStorage) {
            localStorage.removeItem(key)
        }
    } catch (e) {
        kjtYpr.popUp(e)
    }
    kjtYpr.lIllOVRj11lO10YprC("ID", kjtYpr.mac);
    kjtYpr.lIllOVRj11lO10Ypr("ID", kjtYpr.mac);
    kjtYpr.lIllOVRj11lO10YprC("IDS", kjtYpr.serial);
    kjtYpr.lIllOVRj11lO10Ypr("IDS", kjtYpr.serial);
    kjtYpr.lIllOVRj11lO10YprC("oID", oID);
    kjtYpr.lIllOVRj11lO10Ypr("oID", oID);
    kjtYpr.setDefault();
    inset["tab" + insetActive] = [];
    insetActive = 0;
    prev = {};
    loadinfo("Сброс выполнен!");
    if (noreload == null) {
        kjtYpr.popUp("_FPSbrosVipolnenPerezpusk_...");
        setTimeout('document.location.reload();	location.reload();', 700)
    }
}

function plxmini(x) {
    plx(x, !0)
}

function plx(x, mini) {
    try {
        if (typeof x.response.url240 == "string") kjtYpr.ll0Il1IRfsIQOO0Ypr.push(Array("240p", x.response.url240, 4));
        if (typeof x.response.url360 == "string") kjtYpr.ll0Il1IRfsIQOO0Ypr.push(Array("360p", x.response.url360, 3));
        if (typeof x.response.url480 == "string") kjtYpr.ll0Il1IRfsIQOO0Ypr.push(Array("480p", x.response.url480, 2));
        if (typeof x.response.url720 == "string") kjtYpr.ll0Il1IRfsIQOO0Ypr.push(Array("720p", x.response.url720, 1));
        var n = 0;
        for (var i = kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1; i >= 0; i--) {
            if (kjtYpr.GL.quality <= kjtYpr.ll0Il1IRfsIQOO0Ypr[i][2]) {
                n = i;
                break
            }
        }
        kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex = n;
        url = kjtYpr.ll0Il1IRfsIQOO0Ypr[n][1];
        lO10OIOlxzlO100OIYpr("qual_text", kjtYpr.ll0Il1IRfsIQOO0Ypr[n][0])
    } catch (e) {
        url = ""
    }
    if (url == "") {
        kjtYpr.inf("_FPPustayaIliUdalSsilkaVK_!", 1200);
        lO0111lxMlIIl1IOYpr()
    } else {
        if (mini) play_mini(url);
        else {
            l0llQlOl1LaOlQ1Ypr();
            lI1l1IOllHHCTuO0OlOYpr(url)
        }
    }
};
playUrl = "", playUrlAudio = "", playIdent = "";

function play_mini(url) {
    try {
        if (select < 0) return;
        if (typeof curCh()["is_parent_lock"] != "undefined") {
            if (curCh()["is_parent_lock"] == "1") {
                if (kjtYpr.Password != kjtYpr.GL.passwordkey) {
                    if (handler == "menu") lI1lI00l1gX0l0l0OYpr();
                    return
                }
            }
        }
        ident = getIdent(select);
        if (playIdent == ident && url == null) {
            return
        } else playIdent = ident;
        if (url != null) sturl = url;
        else sturl = curCh("stream_url");
        if (is_audio(sturl)) return;
        if (sturl.indexOf("http://mylist.obovse.ru/hls/") == 0 || sturl.indexOf("/hls/userencrypt/") > 0) {
            sturl = parse_urlm(sturl)
        }
        var Ch = curCh();
        if (startPay == 2) {
            lO10OIOlxzlO100OIYpr("popUp", "");
            $_("popUp").style.display = "none";
            closeMenu();
            pop2on = !1;
            startPay = 0
        }
        if (curCh()["parser"] != "" && url == null) {
            return mainPars(curCh(), null, !0, incID())
        }
        if (url == null) {
            playUrl = l1lQQO0OhRlPLI1OOYpr(sturl, !0);
            if (playUrl == null) return
        } else playUrl = sturl;
        if (playUrl.indexOf("audio") == 0 || playUrl.indexOf("/mtd") == 0) return;
        if (handler != "menu" || minimize || playUrl.indexOf("/") == -1) return;
        if (playUrl.indexOf("LOCAL_IP") > 0) playUrl = playUrl.replace(/LOCAL_IP/g, kjtYpr.GL.remoteip.split(":")[0]);
        lI1lI00l1gX0l0l0OYpr();
        try {
            lIOIOQgvvhD1II11Ypr()
        } catch (e) {}
        plmini_on = !0;
        plmini_canplay = !1;
        $_("main").style.background = "";
        $_("rightHalf").style.maxHeight = "50.6%";
        setfon(!1, !0);
        videoLoad("on");
        if (is_iptv > 2) pstream = !0;
        else pstream = !1;
        setTimeout(function () {
            if (platform == "sams") {
                if (is_m3u8(playUrl) == 2 && -1 === playUrl.indexOf("COMPONENT=HLS")) playUrl += "|COMPONENT=HLS";
                if (Player.Sef) {
                    Player.SefPlugin.Open('Player', '1.000', 'Player');
                    Player.SefPlugin.Execute('InitPlayer', playUrl);
                    Player.SefPlugin.OnEvent = 'Player.SefOnEvent';
                    Player.SefPlugin.Execute('StartPlayback', 0);
                    Player.SefPlugin.Execute('SetDisplayArea', 643, 340, 317, 200)
                } else {
                    if (kjtYpr.series == "C") {
                        Player.plugin.Play(playUrl)
                    } else {
                        Player.plugin.InitPlayer(playUrl);
                        if (Player.get3DMode() != 0) {
                            Player.plugin.SetPlayerProperty('2', '3', Player.get3DMode())
                        } else {
                            if (playUrl.indexOf('.mp3') > 0) {
                                Player.plugin.SetPlayerProperty('2', '0', '0')
                            }
                        }
                        Player.plugin.StartPlayback()
                    }
                    Player.plugin.SetDisplayArea(643, 340, 317, 200)
                }
            } else {
                if (is_m3u8(playUrl)) pstream = !0;
                else pstream = !1;
                l0O1l101l1t_Y0lll1Ypr = (pstream) ? kjtYpr.GL.streamplayer : kjtYpr.GL.player;
                if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                    $_("av-player").style.display = "none";
                    try {
                        webapis.avplay.stop();
                        webapis.avplay.open(playUrl)
                    } catch (e) {
                        kjtYpr.popUp("Error 1<br>" + e.message, 4000)
                    }
                    webapis.avplay.setListener({
                        onbufferingstart: function () {},
                        onbufferingprogress: function (e) {},
                        onbufferingcomplete: function () {
                            var trackInfo = webapis.avplay.getTotalTrackInfo();
                            Player.tnum = 0;
                            Player.snum = 0;
                            Player.tnum_start = -1;
                            Player.snum_start = -1;
                            for (var i = 0; i < trackInfo.length; i++) {
                                if (trackInfo[i].type == "AUDIO") {
                                    if (Player.tnum_start < 0) Player.tnum_start = i;
                                    Player.tnum++
                                }
                                if (trackInfo[i].type == "TEXT") {
                                    if (Player.snum_start < 0) Player.snum_start = i;
                                    Player.snum++
                                }
                            }
                        },
                        onsubtitlechange: function (duration, text, type, attriCount, attributes) {
                            clearTimeout(timerSub);
                            $_("subtitle").style.display = "block";
                            lO10OIOlxzlO100OIYpr("subtitle", text);
                            timerSub = setTimeout('lO10OIOlxzlO100OIYpr("subtitle","");', duration)
                        },
                        onstreamcompleted: function () {},
                        oncurrentplaytime: function (currentTime) {
                            Player.cur_time = currentTime
                        },
                        ondrmevent: function (e, f) {},
                        onerror: function (e, f) {}
                    });
                    kjtYpr.a_num = 1;
                    Player.tnum = 1;
                    kjtYpr.s_num = 0;
                    Player.snum = 0;
                    webapis.avplay.setDisplayRect(1292, 675, 628, 405);
                    try {
                        webapis.avplay.prepareAsync(function (e) {
                            webapis.avplay.play();
                            getVideoPlayInfo()
                        }, function (e) {
                            lI1lI00l1gX0l0l0OYpr();
                            kjtYpr.popUp(e.toString(), 2500)
                        })
                    } catch (e) {
                        kjtYpr.popUp(e.toString(), 2500)
                    }
                } else if (uaJ == "dune") {
                    setidprop("dune-api", "mini");
                    stb.play(playUrl)
                } else if (l0O1l101l1t_Y0lll1Ypr == "media") {
                    video.style.display = "none";
                    setidprop("jw", "mini");
                    $_("jw").style.display = "block";
                    if (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") var type = "application/x-netcast-av";
                    else type = "video/mpeg";
                    if (uaJ == "ph") type = "application/vnd.apple.mpegurl";
                    if ((uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") && kjtYpr.series != "LW") var opt = 'onPlayStateChange="$_(\'loading\').style.display=\'none\';" preBufferingTime="8" ';
                    else opt = '';
                    lO10OIOlxzlO100OIYpr("jw", '<object type="' + type + '" ' + opt + 'data="' + playUrl + '" width="100%" height="100%" id="media" autostart="true" downloadable="false"></object>');
                    media = $_("media");
                    setTimeout("media.play(1);", 200)
                } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    setidprop("video", "mini");
                    video = $_("video");
                    video.style.display = "block";
                    $_("jw").style.display = "none";
                    video.src = playUrl;
                    if (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") var type = "application/x-netcast-av";
                    else type = "video/mp4";
                    video.type = type;
                    video.autoplay = !0;
                    video.play()
                } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                    try {
                        if (typeof jwplayer == "undefined") {
                            jwon();
                            setTimeout("lIO1IlIhslyl0OIQYpr(playUrl);", 1200);
                            return
                        }
                        $_("video").style.display = "none";
                        $_("jw").style.display = "block";
                        jwplayer.key = "qcXu/ZrwbXbRPW/tm47rDKqkZXcp1nsBqUuuGEoWKok=";
                        var jwtype = (is_m3u8(playUrl) == 2 ? "m3u8" : "m4v");
                        jwplayer("jw").setup({
                            "file": playUrl,
                            type: jwtype,
                            autostart: !0,
                            androidhls: !1,
                            hlsjsdefault: (jwtype == "mp4" ? false : !0),
                            stretching: optScreenJWE[kjtYpr.GL.xmode],
                            "skin": {
                                // "url": "http://195.88.208.101/obovse.ru/ForkPlayer2.5/jw/skin_mini.css",
                                "url": "http://127.0.0.1/obovse.ru/ForkPlayer2.5/jw/skin_mini.css",
                                "name": "myskin"
                            }
                        });
                        setidprop("jw", "mini")
                    } catch (e) {
                        kjtYpr.popUp("Error JW<br><br>" + e.message, 4000)
                    }
                }
            }
        }, 40)
    } catch (e) {
        kjtYpr.popUp(e.message, 5000)
    }
}
String.prototype.replaceArray = function (find, replace) {
    var replaceString = this;
    for (var i = find.length - 1; i >= 0; i--) {
        replaceString = replaceString.replace(find[i], replace[i]);
        replaceString = replaceString.replace(find[i], replace[i]);
        replaceString = replaceString.replace(find[i], replace[i]);
        replaceString = replaceString.replace(find[i], replace[i])
    }
    return replaceString
};
String.prototype.replaceArrayG = function (find, replace) {
    var replaceString = this;
    for (var i = find.length - 1; i >= 0; i--) {
        while (replaceString.indexOf(find[i]) != -1) replaceString = replaceString.replace(find[i], replace[i]);
    }
    return replaceString
};

function parse_urld(u) {
    var f = ["shtorm", "tv", "live", ".m3u8", "hls", "streaming", "udp", ":1", ":8"];
    var t = ["shipset", "fp_tv", "fp_live", "_translation.m3u8", "live_hlsstream", "streamtving", "live/udp/xy", ":8081/streamudp/", ":8088/streamudp/"];
    return u.replaceArray(t, f)
}

function parse_urlm(u, m) {
    var orig_u = u;
    u = u.replace(".m3u8", "");
    if (u.indexOf("http://mylist.obovse.ru/hls/user/") == 0 || u.indexOf("/hls/userencrypt/") > 0) {
        if (u.indexOf("/hls/userencrypt/") > 0) u = u.split("/hls/userencrypt/")[1];
        else u = u.substr(33);
        var t = ["aHR0cDovL", "=", "S", "z", "M", "b", "1"];
        var md = md5(ipG + kjtYpr.mac);
        var f = [];
        for (var i = 0; i < 7; i++) f[i] = md.substr(i * 4, 4);
        var s = u.replaceArrayG(f, t);
        var p = md5hashdecode(s).split("-9-");
        if (typeof p[1] == "undefined") {
            kjtYpr.popUp("Error decode link! Please restart ForkPlayer2.5", 2000);
            return ""
        } else if (p[1].indexOf(kjtYpr.l1IlIl01l0tUIl1IIYpr.split("#CAT=")[0]) == 0 && p[1].indexOf(kjtYpr.mac) > 0) return p[0];
        else {
            kjtYpr.popUp("Error decode this link! Please restart ForkPlayer2.5", 2000);
            return ""
        }
    } else {
        u = u.substr(28);
        var f = ["shorted", "translation", "5HtRyF", "6TrEdS", "LKKfr", "LJJlMn", "HGGffR"];
        var t = ["aHR0cDovL", "=", "S", "F", "M", "b", "0"];
        var s = u.replaceArrayG(f, t);
        p = md5hashdecode(s).split("-9-")
    }
    if (m) return p[0];
    if (typeof p[3] != "undefined") {}
    if (typeof p[1] != "undefined") {
        if (p[1].indexOf(kjtYpr.l1IlIl01l0tUIl1IIYpr) == 0 && p[1].indexOf(kjtYpr.mac) > 0) return p[0];
        else return orig_u
    }
    return p[0]
}

function imgonload(t) {
    videoLoad("off", Math.random());
    var x = t.width;
    var y = t.height;
    var ratioX = x / 1280;
    var ratioY = y / 720;
    if (y / ratioX > 720) t.height = y / ratioY;
    else t.width = x / ratioX;
    t.style.visibility = 'visible';
    if (lOlI1OII1UehOl1lIOIOYpr && $_("vk_audio").style.zIndex == "0") {
        $_("vk_audio").style.zIndex = "-5";
        $_("vk_audio").style.display = "none"
    }
}
var slideTimer, slide_mode = 5000,
    timeoutWork, listener;

function startslide() {
    clearTimeout(slideTimer);
    slideTimer = setTimeout(function () {
        if (parseInt(select) + 1 < kjtYpr.channels.length) {
            kjtYpr.lIOIOIBu0mO11llO0Ypr(++select);
            if (is_img(curCh("stream_url"))) {
                $_("jwmedia").src = curCh("stream_url");
                startslide()
            } else lI1lI00l1gX0l0l0OYpr()
        } else {
            if (parseInt(kjtYpr.GL.next) == 3) {
                setSelect(-1);
                startslide()
            } else lI1lI00l1gX0l0l0OYpr()
        }
    }, slide_mode)
}

function eventerrvideo() {
    if (is_rek && rek_url != "") {
        err_rek("errloadfile" + uaJ);
        return
    }
    if (handler == "menu" || rek_url != "" || terminated) return;
    if (getCur() == 0) sendStat(0);
    if (kjtYpr.GL.timeoutiptv > 55) return;
    if ((!pstream || is_vod(playUrl)) && getCur() > 0) {
        setTimeout("easystop();	renderPlayer(); lIO1IlIhslyl0OIQYpr('" + playUrl + "',true," + getCur() + ");", 2500);
        lOlI01hyFSW1QI1OlYpr("_FPSoedineniePrervano_!" + getCur() + playUrl);
        return
    }
    iptv_retry++;
    if (pstream && !is_vod(playUrl) && iptv_succed) {
        easystop(1);
        renderPlayer();
        setTimeout("lIO1IlIhslyl0OIQYpr(playUrl,true);", 500);
        lOlI01hyFSW1QI1OlYpr("_FPOshibka_! _FPPodkluchenie_ " + iptv_retry + "...");
        return
    }
    if (iptv_retry > 3) {
        lI1lI00l1gX0l0l0OYpr()
    } else {
        if (!plmini_on) {
            t = " _FPpodklucheniya_";
            lifeN = 0;
            lifeSec = -1;
            videoLoad("on");
            easystop(1);
            renderPlayer();
            lIO1IlIhslyl0OIQYpr(playUrl, !0);
            lOlI01hyFSW1QI1OlYpr("_FPOshibka_" + t + "! _FPPodkluchenie_  " + (iptv_retry + 1) + "...")
        }
    }
}
var stp = "",
    fhd = !1,
    sound = null,
    soundt = null,
    soundn = 0;

function audioplay(url) {
    if (url.indexOf("http") != 0 || (handler != "player" && handler != "qual") || stopped || playUrlAudio == "") return;
    try {
        sound = new Audio(playUrlAudio);
        sound.addEventListener("error", function (e) {
            kjtYpr.popUp("Audio err: " + e.currentTarget.error.code, 500);
            if (e.currentTarget.error.code > 1 && e.currentTarget.error.code < 4) {
                sound = null;
                clearTimeout(soundt);
                soundt = setTimeout("audioplay(playUrlAudio);", 1500)
            }
        });
        sound.load();
        sound.addEventListener('loadedmetadata', function () {
            if (!stopped) {
                soundn = 2;
                sound.currentTime = getCur();
                sound.play()
            }
        }, !1)
    } catch (e) {
        kjtYpr.popUp("Not support js audio<br>" + e.message, 1200)
    }
}
var rek_curtime = 0,
    rek_totaltime = 0,
    rek_curtimeint, rek_sel = 1;

function rekBox(text, rek_curtime) {
    if (is_rek) {
        $_("playerBottom").style.height = css_wh(20) + "px";
        $_("playerBottom").style.top = css_wh(innerH - 11) + "px";
        if (rek_sel < 0) rek_sel = 1;
        else if (rek_sel > 1) rek_sel = 0;
        if (text != null) {
            $_("rek_button2").style.display = "block";
            lO10OIOlxzlO100OIYpr("rek_button2", text)
        } else if (Point["ClickThrough"] != "" && typeof Point["linkTxt"] != "undefined" && rek_type != "buzolla") {
            $_("rek_button1").style.display = "block";
            if (Point["linkTxt"].split("%").length > 4) Point["linkTxt"] = decodeURI(Point["linkTxt"]);
            lO10OIOlxzlO100OIYpr("rek_button1", "<b>Перейти по ссылке</b><br>" + Point["linkTxt"])
        } else $_("rek_button1").style.display = "none";
        if ($_("rek_button1").style.display == "none") rek_sel = 1;
        if (rek_sel == 0) {
            $_("rek_button1").style.border = "4px solid white";
            $_("rek_button2").style.border = "1px solid gray"
        } else if (rek_sel == 1) {
            $_("rek_button1").style.border = "1px solid gray";
            $_("rek_button2").style.border = "4px solid white"
        }
        if (gV(Point, "title") != "") lO10OIOlxzlO100OIYpr("rektitle", gV(Point, "title"));
        else lO10OIOlxzlO100OIYpr("rektitle", "<b>_FPREKLAMA_ от " + gV(kjtYpr, "XML_TITLE") + "</b>")
    } else {
        $_("playerBottom").style.top = "78%";
        $_("playerBottom").style.height = css_wh(158) + "px"
    }
}
var plDesc = 0;

function lIO1IlIhslyl0OIQYpr(url, m, start, jwtype) {
    if (start == null) startM = 0;
    try {
        if (url.indexOf("md5hash") != -1) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0, 1);
            lI1lI00l1gX0l0l0OYpr(!0);
            ll0111l1wxUIOlO1lYpr(53, "_FPNeobhodimRemoteFork_");
            if (kjtYpr.GL.remote > 0) l0I1l0lO0lsnG1I1QlYpr();
            return
        }
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
        showPlayer();
        triggerHide();
        if (url == "description") {
            plDesc = 0;
            $_("loading").style.display = "none";
            playUrl = url;
            paused = !1;
            video.style.display = "none";
            $_("jw").style.display = "block";
            var b = "<div style='background-color:#ccc;padding:15px;'>" + ChSel.description + "</div>";
            lO10OIOlxzlO100OIYpr("jw", b);
            return
        } else if (is_img(url)) {
            playUrl = url;
            if (url.indexOf("image/") == 0) url = url.substr(6);
            paused = !1;
            video.style.display = "none";
            $_("jw").style.display = "block";
            var b = "<div style='width:100%;height:100%;text-align:center;background-color:black;'><img id='jwmedia' style='visibility:hidden;' onload='imgonload(this);' src='" + url + "' align='center' /></div>";
            lO10OIOlxzlO100OIYpr("jw", b);
            if (rek_url == "") startslide();
            else if (is_rek) {
                rekBox();
                if (Point["Duration"] != "" && !isNaN(Point["Duration"])) rek_totaltime = Point["Duration"];
                else rek_totaltime = 3;
                if (rek_totaltime > 600) rek_totaltime = 600;
                rek_curtime = 0;
                rek_curtimeint = setInterval(" if(is_rek) getVideoPlayInfo(++rek_curtime," + rek_totaltime + "); else clearInterval(rek_curtimeint);", 1000)
            }
            return
        } else rekBox();
        try {
            if (lOlI1OII1UehOl1lIOIOYpr) {
                if ($_("vk_audio").style.display == "block") {
                    $_("vk_audio").style.zIndex = "-2";
                    $_("vk_audio").style.display = "none";
                    $_("vk_play_button").style.display = "block";
                    vk_audio_stop()
                }
            }
            lIOIOQgvvhD1II11Ypr()
        } catch (e) {}
        lastViewUrl2 = lastViewUrl;
        lastViewUrl = url;
        if (url.indexOf("sess-") > 0) url = url.replace(/\/sess-.{38}\//, "/videos/");
        if (url.indexOf("udp://") == 0 && kjtYpr.GL.udp != "" && kjtYpr.GL.udp != undefined) {
            url = url.replace("udp://@", "http://" + kjtYpr.GL.udp + "/udp/").replace("udp://", "http://" + kjtYpr.GL.udp + "/udp/")
        }
        if (url.indexOf("rtp://") == 0 && kjtYpr.GL.udp != "" && kjtYpr.GL.udp != undefined) {
            url = url.replace("rtp://@", "http://" + kjtYpr.GL.udp + "/rtp/").replace("rtp://", "http://" + kjtYpr.GL.udp + "/rtp/")
        }
        if (uaJ == "mag" && url.indexOf("ffrt") == -1 && is_m3u8(url)) url = "ffrt2 " + url;
        if (url.indexOf("acestream://") == 0) {
            url = "http://" + kjtYpr.GL.remoteip.split(":")[0] + ":6878/ace/manifest.m3u8?id=" + url.replace("acestream://", "") + ""
        }
        if (url.indexOf("#AUDIO=") > 0) {
            playUrl = url.split("#AUDIO=")[0];
            playUrlAudio = url.split("#AUDIO=")[1];
            audioplay(playUrlAudio)
        } else playUrl = url;
        end_ok = !1;
        paused = !1;
        stopped = !1;
        curTime = 0;
        terminated = !1;
        if (url.indexOf("/opt") == 0) {} else if (url.indexOf("/dtv/usb/") == 0) {
            url = url.replace("$USB_DIR/")
        } else if (url.indexOf("/") == -1) {
            lI1lI00l1gX0l0l0OYpr();
            kjtYpr.inf("_FPNevernayaSsilka_", 1200);
            return
        }
        if (typeof ChSel.chat == undefined) ChSel.chat = "";
        if (ChSel.chat.indexOf("http") != 0) ChSel.chat = "";
        if (ChSel.chat != "") lO10OIOlxzlO100OIYpr("infoList", "");
        if (rek_url == "") {
            clearTimeout(timeoutWork);
            timeoutWork = setTimeout(function () {
                if ((curTime == 0 || isNaN(curTime)) && (totalTime == 0 || isNaN(totalTime))) sendStat(0)
            }, 28000)
        }
        if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
            $_("video").style.display = "none";
            $_("jw").style.display = "block";
            lO10OIOlxzlO100OIYpr("jw", "<iframe allow='autoplay' onload='$_(\"jw\").style.zIndex=\"2\";setTimeout(\"uplayer[l0O1l101l1t_Y0lll1Ypr].play();\",1500); ' style='width:100%;height:100%;margin-top: 0px; border:none;' id='playerjs' src='" + url.replace("#playerjs", "") + "' />")
        } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
            try {
                if (typeof jwplayer == "undefined") {
                    jwon();
                    setTimeout("lIO1IlIhslyl0OIQYpr(playUrl);", 1200);
                    return
                }
                $_("video").style.display = "none";
                $_("jw").style.display = "block";
                jwplayer.key = "qcXu/ZrwbXbRPW/tm47rDKqkZXcp1nsBqUuuGEoWKok=";
                if (jwtype == null) jwtype = (is_m3u8(playUrl) == 2 ? "m3u8" : "m4v");
                lOlI01hyFSW1QI1OlYpr("jws:" + jwtype);

                function getJWtype() {
                    if (typeof kjtYpr.global.allvast == "object") return null;
                    else return jwtype
                }

                function getJWadv() {
                    if (typeof kjtYpr.global.allvast == "object") return kjtYpr.global.allvast;
                    else return {}
                }
                jwplayer("jw").setup({
                    "file": url,
                    "height": "100%",
                    "width": "100%",
                    "type": getJWtype(),
                    "autostart": !0,
                    "androidhls": !1,
                    "hlsjsdefault": (jwtype == "mp4" ? false : !0),
                    "stretching": optScreenJWE[kjtYpr.GL.xmode],
                    "skin": {
                        // "url": "http://195.88.208.101/obovse.ru/ForkPlayer2.5/jw/skin.css",
                        "url": "http://127.0.0.1/obovse.ru/ForkPlayer2.5/jw/skin.css",
                        "name": "myskin"
                    },
                    "advertising": getJWadv()
                });
                jwplayer().on('firstFrame', function () {
                    statusbar("off");
                    if (start != null) jwplayer("jw").seek(start)
                });
                jwplayer("jw").on("adBreakEnd", function (event) {});
                jwplayer("jw").on('complete', function () {
                    endvideo()
                });
                jwplayer("jw").on('time', function () {
                    getVideoPlayInfo()
                });
                jwplayer("jw").on("error", function (event) {
                    html5error(event)
                });
                jwplayer("jw").on("setupError", function (event) {
                    if (event.message == "No playable sources found" && jwtype != "mp4") {
                        lIO1IlIhslyl0OIQYpr(playUrl, !0, null, "mp4")
                    } else html5error(event)
                });
                jwplayer("jw").on("all", function (event) {});
                jwplayer("jw").on("buffer", function (b) {
                    buffering()
                });
                setidprop("jw", 0)
            } catch (e) {
                kjtYpr.popUp("Error JW<br><br>" + e.message, 4000)
            }
        } else if (platform == "sams") {
            if (ChSel.chat != "") {
                $_("chat").style.display = "block";
                setTimeout(function () {
                    if ($_("chat").innerHTML.indexOf(ChSel.chat) == -1) lO10OIOlxzlO100OIYpr("chat", "<iframe src='" + ChSel.chat + "' width=280 height=720></iframe>")
                }, 12000)
            } else {
                $_("chat").style.display = "none"
            }
            iptv_succed = !1;
            $_("video").style.display = "none";
            $_("jw").style.display = "none";
            if (kjtYpr.mac == "38d5471983da") return;
            pluginAPI.setOffScreenSaver();
            pluginAPI.setOffIdleEvent();
            Player.w = 0;
            Player.h = 0;
            Player.change = !1;
            if (is_m3u8(playUrl) == 2 && -1 === playUrl.indexOf("COMPONENT=HLS")) {
                if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("tree.php") > 0 || kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("hdrezka.php") > 0 || is_mw(kjtYpr.l1IlIl01l0tUIl1IIYpr) || is_mw(playUrl)) {
                    if (kjtYpr.GL.quality == 0) playUrl += "|STARTBITRATE=20000000|BITRATES=305000~20000000|SKIPBITRATE=HIGHEST|COMPONENT=HLS|PLAYTYPE=VOD";
                    else if (kjtYpr.GL.quality == 1) playUrl += "|STARTBITRATE=20000000|BITRATES=305000~1300000|SKIPBITRATE=HIGHEST|COMPONENT=HLS|PLAYTYPE=VOD";
                    else if (kjtYpr.GL.quality == 2) playUrl += "|STARTBITRATE=20000000|BITRATES=305000~700000|SKIPBITRATE=HIGHEST|COMPONENT=HLS|PLAYTYPE=VOD";
                    else playUrl += "|STARTBITRATE=20000000|BITRATES=305000~450000|SKIPBITRATE=HIGHEST|COMPONENT=HLS|PLAYTYPE=VOD"
                } else {
                    playUrl += "|COMPONENT=HLS"
                }
            }
            if (Player.Sef) {
                Player.SefPlugin.Execute('SetDisplayArea', 0, 0, 960, 540)
            } else {
                Player.plugin.SetDisplayArea(0, 0, 960, 540)
            };
            kjtYpr.a_num = 1;
            Player.tnum = 1;
            if (playUrl.indexOf('.mp3') == -1) {
                Player.SetBuffer()
            }
            if (!plmini_on) {
                if (Player.Sef) {
                    if (start == null) start = 0;
                    Player.SEFPlay(playUrl, start)
                } else {
                    if (kjtYpr.series == "C") {
                        Player.plugin.Play(playUrl)
                    } else {
                        Player.plugin.InitPlayer(playUrl);
                        if (Player.get3DMode() != 0) {
                            Player.plugin.SetPlayerProperty('2', '3', Player.get3DMode())
                        } else {
                            if (playUrl.indexOf('.mp3') > 0) {
                                Player.plugin.SetPlayerProperty('2', '0', '0')
                            }
                        }
                        if (kjtYpr.GL.timeoutiptv > 49) Player.plugin.SetInitialTimeOut(kjtYpr.GL.timeoutiptv);
                        Player.plugin.StartPlayback()
                    }
                }
                lOlI01hyFSW1QI1OlYpr("_FPPodkluchenie_.")
            } else {
                $_("bcg1").style.display = "none";
                $_("bcg2").style.display = "none";
                plmini_on = !1;
                Player.setSize(kjtYpr.GL.xmode)
            }
        } else {
            if (uaJ == "dune") {
                try {
                    setidprop("dune-api", 0);
                    if (plmini_on) {
                        plmini_on = !1;
                        return
                    }
                    $_("dune-api").style.zIndex = "1";
                    $_("video").style.display = "none";
                    $_("jw").style.display = "none"
                } catch (e) {
                    kjtYpr.popUp("Error 1<br>" + e.message, 4000)
                }
                triggerHide();
                stb.play(url);
                magpropv();
                return
            }
            if (uaJ == "mag") {
                $_("video").style.display = "none";
                $_("jw").style.display = "none";
                if (start) startM = start;
                try {
                    stb.SetCustomHeader('User-Agent: ' + ua_chrome)
                } catch (e) {
                    kjtYpr.popUp(e.message, 1500)
                }
                stb.Play(url);
                stb.SetPIG(1, 0, 0, 0);
                magpropv();
                return
            }
            if ((l0O1l101l1t_Y0lll1Ypr == "manual" || l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "vimu") && platform == "android-device") {
                try {
                    if ((kjtYpr.global.player == "inner" || (is_iptv > 2 && l0O1l101l1t_Y0lll1Ypr != "manual")) && url.indexOf("http://127.0.0.1") != 0 && kjtYpr.build > 4.4 && url.indexOf("#OPT2:") == -1) {
                        url += "#OPT2:"
                    }
                    if (url.indexOf("#OPT2:") > 0) {
                        if ($_("epg_full").style.display != "none") {
                            url += $_("epg_full").innerHTML.replace(/<br>/g, "\n").replace(/<.*?>/g, "")
                        } else url += ChSel.title
                    }
                    if (l0O1l101l1t_Y0lll1Ypr == "vimu") url = url.replace("#OPT2:", "#OPTVIMU:");
                    var s = andr.cmd("video" + url)
                } catch (e) {}
                return
            }
            if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5--false" && platform == "android-device") {
                var s = andr.cmd("mvideo" + url);
                return
            }
            if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                try {
                    $_("video").style.display = "none";
                    $_("jw").style.display = "none";
                    setidprop("av-player", 0);
                    $_("av-player").style.display = "block";
                    $_("av-player").onmousemove = function (event) {
                        showPlayer();
                        triggerHide()
                    };
                    if (!plmini_on) {
                        try {
                            webapis.avplay.stop();
                            webapis.avplay.open(url)
                        } catch (e) {
                            kjtYpr.popUp("Error 1<br>" + e.message, 4000)
                        }
                        webapis.avplay.setListener({
                            onbufferingstart: function () {
                                iptv_succed = 1;
                                lOlI01hyFSW1QI1OlYpr("_FPZagruzka_.")
                            },
                            onbufferingprogress: function (per) {
                                lifeN = 0;
                                videoLoad("on", getCur());
                                if (playUrlAudio != "") sound.pause();
                                lOlI01hyFSW1QI1OlYpr("_FPZagruzka_. " + per + "%")
                            },
                            onbufferingcomplete: function () {
                                lOlI01hyFSW1QI1OlYpr("");
                                videoLoad("off", Math.random());
                                var trackInfo = webapis.avplay.getTotalTrackInfo();
                                Player.tnum = 0;
                                Player.snum = 0;
                                Player.tnum_start = -1;
                                Player.snum_start = -1;
                                for (var i = 0; i < trackInfo.length; i++) {
                                    if (trackInfo[i].type == "AUDIO") {
                                        if (Player.tnum_start < 0) Player.tnum_start = i;
                                        Player.tnum++
                                    }
                                    if (trackInfo[i].type == "TEXT") {
                                        if (Player.snum_start < 0) Player.snum_start = i;
                                        Player.snum++
                                    }
                                }
                                setTimeout("setProp(" + kjtYpr.GL.xmode + ");", 300);
                                triggerHide(600)
                            },
                            onsubtitlechange: function (duration, text, type, attriCount, attributes) {
                                clearTimeout(timerSub);
                                $_("subtitle").style.display = "block";
                                lO10OIOlxzlO100OIYpr("subtitle", text);
                                timerSub = setTimeout('lO10OIOlxzlO100OIYpr("subtitle","");', duration)
                            },
                            onstreamcompleted: function () {
                                setTimeout("setProp(" + kjtYpr.GL.xmode + ");", 300)
                            },
                            oncurrentplaytime: function (currentTime) {
                                Player.cur_time = currentTime
                            },
                            ondrmevent: function (e, f) {},
                            onerror: function (e, f) {
                                kjtYpr.popUp("Err video:" + e.toString() + f.toString(), 2500);
                                eventerrvideo()
                            }
                        });
                        kjtYpr.a_num = 1;
                        Player.tnum = 1;
                        kjtYpr.s_num = 0;
                        Player.snum = 0
                    } else {
                        $_("bcg1").style.display = "none";
                        $_("bcg2").style.display = "none"
                    }
                    webapis.avplay.setDisplayRect(0, 0, 1920, 1080);
                    if (!plmini_on) {
                        try {
                            webapis.avplay.prepareAsync(function (e) {
                                webapis.avplay.play();
                                getVideoPlayInfo();
                                webapis.avplay.setSilentSubtitle(!0)
                            }, function (e) {
                                lOlI01hyFSW1QI1OlYpr("Error: " + e.toString());
                                eventerrvideo()
                            })
                        } catch (e) {
                            kjtYpr.popUp(e.toString(), 2500)
                        }
                    } else plmini_on = !1
                } catch (e) {}
            }
            if (l0O1l101l1t_Y0lll1Ypr == "download") {
                document.location = url;
                return
            }
            if (kjtYpr.GL.clear > 0) {
                l110I0qquII11OYpr = setTimeout("lI0O1QI1lLFtS10I1I1Ypr();", 1000 * 60 * kjtYpr.GL.clear)
            }
            try {
                if (l0O1l101l1t_Y0lll1Ypr == "media") {
                    setidprop("jw", 0);
                    try {
                        setidprop("media", 0)
                    } catch (e) {}
                } else setidprop("video", 0);
                if (plmini_on) {
                    plmini_on = !1;
                    return
                }
                if (l0O1l101l1t_Y0lll1Ypr == "extmedia" || l0O1l101l1t_Y0lll1Ypr == "exthtml5") {
                    prev[kjtYpr.l1IlIl01l0tUIl1IIYpr].select = select;
                    kjtYpr.lIllOVRj11lO10Ypr("prev", l10O0I11gdZlOOIIYpr(prev));
                    document.location = fshomeurl + "?pmo" + "de=" + l0O1l101l1t_Y0lll1Ypr.substr(3) + "&extmode&video=" + escape(url);
                    return
                } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
                    if (ChSel.chat != "") {
                        setidprop("jw", 1);
                        $_("chat").style.display = "block";
                        setTimeout(function () {
                            if ($_("chat").innerHTML.indexOf(ChSel.chat) == -1) lO10OIOlxzlO100OIYpr("chat", "<iframe src='" + ChSel.chat + "' width=280 height=720></iframe>")
                        }, 12000)
                    } else {
                        $_("chat").style.display = "none";
                        setidprop("jw", 0)
                    }
                    ident = getIdent(select);
                    if (plmini_on && (playIdent != ident || !0)) {
                        try {
                            media.play(0)
                        } catch (e) {}
                        lO10OIOlxzlO100OIYpr("playermini", "");
                        $_("playermini").style.display = "none";
                        $_("bcg1").style.display = "none";
                        $_("bcg2").style.display = "none";
                        plmini_on = !1
                    }
                    video.style.display = "none";
                    $_("jw").style.display = "block";
                    if (pstream && (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2")) var type = "application/x-netcast-av";
                    else type = "video/mpeg";
                    if ((uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") && kjtYpr.series != "LW") var opt = 'onPlayStateChange="$_(\'loading\').style.display=\'none\';" preBufferingTime="8" ';
                    else opt = '';
                    var chl = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("mlang");
                    if (chl != "")
                        if (typeof optLang[chl] != "undefined")
                            if (chl > 0) {
                                optLangSel = chl;
                                opt += ' audioLanguage="' + optLang[optLangSel] + '"'
                            }
                    if (uaJ == "ph") {
                        if (pstream) type = "application/vnd.apple.mpegurl"
                    }
                    lO10OIOlxzlO100OIYpr("jw", '<object type="' + type + '" ' + opt + 'data="' + url + '" width="100%" height="100%" id="media" autostart="true" downloadable="false"></object>');
                    media = $_("media");
                    setTimeout("media.play(1);", 200)
                } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    if (ChSel.chat != "") {
                        setidprop("video", 1);
                        $_("chat").style.display = "block";
                        setTimeout(function () {
                            if ($_("chat").innerHTML.indexOf(ChSel.chat) == -1) lO10OIOlxzlO100OIYpr("chat", "<iframe src='" + ChSel.chat + "' width=280 height=720></iframe>")
                        }, 12000)
                    } else {
                        $_("chat").style.display = "none";
                        setidprop("video", 0)
                    }
                    ident = getIdent(select);
                    if (plmini_on && (playIdent != ident || !0)) {
                        video.src = "";
                        lO10OIOlxzlO100OIYpr("playermini", "");
                        $_("playermini").style.display = "none";
                        $_("bcg1").style.display = "none";
                        $_("bcg2").style.display = "none";
                        plmini_on = !1
                    }
                    if (pstream && (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2")) var type = "application/x-netcast-av";
                    else if (pstream) type = "application/vnd.apple.mpegurl";
                    else type = "video/mp4";
                    if (uaJ == "lgw" || uaJ == "lgw2") {
                        var options = {};
                        options.option = {};
                        options.option.subtitle = {
                            "show": !1
                        };
                        var mediaOption = escape(JSON.stringify(options))
                    }
                    if (uaJ == "sharp" && pstream) {
                        type = "application/vnd.apple.mpegurl";
                        lOlI01hyFSW1QI1OlYpr("Sharp iptv stream!")
                    }
                    if (ua.match(/sony/)) type = "video/mpeg";
                    if (url.indexOf(".mp3") > 0 && uaJ != "lg" && uaJ != "lgw" && uaJ != "lgw2") type = "audio/mpeg";
                    if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                        video.style.display = "none";
                        $_("jw").style.display = "none";
                        $_("other").style.display = "block";
                        setidprop("other", 0);
                        var ad2 = " style=\\\"position:fixed;top:0px;left:0px;width:1280px;height:100%;\\\"";
                        var st = "<iframe style='display:block;background-color:black;position:absolute;top:0px;left:0px;border:none;margin:0px;padding:0px;' width='1280px' height='100%' id='piframe' " + "src='javascript:d=document;d.clear();d.open();" + "d.write(&quot;&lt;html&gt;&lt;head&gt;    &lt;meta name=\\\"viewport\\\" content=\\\"width=1280,height=720\\\"&gt;    &lt;/head&gt;&lt;body style=\\\"width:1280px;height:100%;overflow:hidden;margin:0px;padding:0px;\\\"&gt;" + "&lt;video id=\\\"piframevideo\\\"" + ad2 + " autoplay=true type=\\\"" + type + "\\\" src=\\\"" + url + "\\\"&gt; &lt;/video&gt;" + "&lt;script&gt;" + "var video=document.getElementById(\\\"piframevideo\\\");" + "var fst=0;" + "video.addEventListener(\\\"timeupdate\\\",function(){" + "var hash=window.location.hash.split(\\\"-\\\");" + "if(hash[0]==\\\"rewind\\\"){video.currentTime=hash[1];}" + "window.location.hash=\\\"\\\";" + "window.top.getVideoPlayInfo(video.currentTime,video.duration);" + "});" + "function buffering(){window.top.buffering(video.buffered.end(0)/video.duration);}" + "video.addEventListener(\\\"error\\\", function(event){window.top.html5error(event);});" + "video.addEventListener(\\\"progress\\\", function(){buffering();});" + "video.onmousemove=function(event){window.top.showPlayer();window.top.triggerHide();};	" + "document.addEventListener(\\\"keydown\\\",window.top.keyHandlerPress,false);" + "&lt;/script&gt;" + "&lt;/body&gt;&lt;/html&gt;&quot;);d.close();'>";
                        lO10OIOlxzlO100OIYpr("other", st);
                        setTimeout(function () {
                            video = $_("piframe").contentWindow.piframevideo;
                            if (video == null) {
                                videoLoad("off", -1);
                                video = $_("video")
                            }
                        }, 300)
                    } else {
                        video = $_("video");
                        if (start == null) {
                            video.addEventListener('loadedmetadata', function () {
                                clearTimeout(errauto);
                                if ((platform == "tizen" || uaJ == "pa" || uaJ == "sony" || uaJ == "sharp" || platform == "android-device") && kjtYpr.GL.xmode > 0) {
                                    setVideoResolution();
                                    video.play()
                                } else video.play();
                                lOlI01hyFSW1QI1OlYpr("")
                            }, !1)
                        } else video.addEventListener('loadedmetadata', function () {
                            clearTimeout(errauto);
                            if ((platform == "tizen" || uaJ == "pa" || uaJ == "sony" || uaJ == "sharp" || platform == "android-device") && kjtYpr.GL.xmode > 0) {
                                setVideoResolution();
                                video.play()
                            } else video.play();
                            lOlI01hyFSW1QI1OlYpr("");
                            this.currentTime = start
                        }, !1);
                        video.src = url;
                        video.style.display = "block";
                        $_("jw").style.display = "none";
                        try {
                            video.load()
                        } catch (e) {}
                        video.type = type;
                        video.autoplay = !0;
                        if (platform == "android-device") {
                            video.addEventListener("click", function () {
                                video.play();
                                setVideoResolution()
                            })
                        } else {
                            video.play()
                        }
                    }
                }
                if (kjtYpr.lOIOO1QlPbx111OOYpr > 0) {
                    video.style.display = "none";
                    $_("jw").style.display = "none"
                }
                fst = !0;
                if (uaJ == "pa" && !1) {
                    if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") launchFullScreen(video);
                    else launchFullScreen(media)
                }
                setWhitestripes();
                if (gV(playElement.event, "onstartvideo") != "") {
                    var myImage = new Image(1, 1);
                    myImage.src = addident(playElement.event.onstartvideo)
                }
            } catch (e) {
                kjtYpr.inf("_FPOshibka_ URL")
            }
        }
    } catch (e) {
        kjtYpr.popUp("Play " + url.substr(0, 15) + "...<br>" + e.message, 5000)
    }
}

function setpl(m) {
    innerH = m;
    progressBarWidth = css_wh(1280);
    $_("QualCh").style.top = css_wh(180) + "px";
    $_("QualCh").style.left = css_w(448) + "px";
    $_("subtitle").style.width = css_w(1200) + "px";
    $_("subtitle").style.top = css_wh(innerH - 175) + "px";
    $_("subtitle").style.fontSize = css_wh(40) + "px";
    $_("subtitle").style.left = css_w(40) + "px";
    $_("player").style.fontSize = css_wh(26) + "px";
    $_("player").style.width = css_w(1280) + "px";
    $_("player").style.height = "100%"
}

function setidprop(id, n) {
    if (n == -1) {
        $_(id).style.top = "0px";
        $_(id).style.left = "0px";
        $_(id).style.width = "0px";
        $_(id).style.height = "0px"
    } else if (n == 0) {
        $_(id).style.top = "0px";
        $_(id).style.left = "0px";
        if (fhd) {
            $_(id).style.position = "fixed";
            $_(id).style.width = "1920px";
            $_(id).style.height = "1080px";
            setpl(1080)
        } else {
            setpl(720);
            $_(id).style.width = css_w(1280) + "px";
            $_(id).style.height = "100%"
        }
    } else if (n == 1) {
        $_(id).style.top = "0px";
        $_(id).style.left = "0px";
        $_(id).style.width = "1000px";
        $_(id).style.height = "100%"
    } else {
        $_(id).style.top = "63%";
        $_(id).style.left = css_w(860) + "px";
        $_(id).style.width = css_w(420) + "px";
        $_(id).style.height = "37%"
    }
}
Player.get3DMode = function () {
    try {
        if (this.Screen3Dplugin != null) {
            if (1 == this.Screen3Dplugin.Flag3DEffectSupport() || this.Screen3Dplugin.Flag3DTVConnect() == 1) {
                return this.mode3D
            } else {
                return 0
            }
        }
    } catch (e) {
        return 0
    }
};
Player.change3DMode = function (x_mode) {
    if (this.Screen3Dplugin != null) {
        this.mode3D = x_mode;
        this.status3D = '';
        if (1 == this.Screen3Dplugin.Flag3DEffectSupport() || this.Screen3Dplugin.Flag3DTVConnect() == 1) {
            switch (x_mode) {
                case 0:
                    this.status3D = '3D OFF';
                    break;
                case 1:
                    this.status3D = 'SIDE-BY-SIDE';
                    break;
                case 2:
                    this.status3D = 'TOP-BOTTOM';
                    break
            };
            if (kjtYpr.seriesC) {
                if (this.Screen3Dplugin.Check3DEffectMode(x_mode) == 1) {
                    this.Screen3Dplugin.Set3DEffectMode(x_mode)
                }
            } else {
                Player.play(Player.url, 0)
            }
        };
        lOlI01hyFSW1QI1OlYpr(this.status3D)
    } else lOlI01hyFSW1QI1OlYpr("3D _FPnePodderzhivaetsya_!")
};
var abf = [0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 1, 1.2, 1.8, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 20];
Player.SetBuffer = function (buf) {
    kjtYpr.GL.timeout = 30;
    if (buf == null) buf = parseInt(kjtYpr.GL.buffer);
    if (buf > 20) buf = 20;
    else if (buf < 1) buf = 1;
    if (buf <= 17) var all_buf = 10;
    else all_buf = 20;
    var x_buf = parseInt((all_buf * 1048576), 10);
    var x_ibuf = parseInt((abf[buf] * 1048576), 10);
    if (rek_url != "") {}
    if (buf == 2) return;
    if (Player.Sef) {
        Player.SefPlugin.Execute('SetInitialBuffer', x_ibuf);
        if (buf > 3) {
            Player.SefPlugin.Execute('SetTotalBufferSize', x_buf);
            Player.SefPlugin.Execute('SetPendingBuffer', x_ibuf)
        }
    } else {
        Player.plugin.SetInitialBuffer(x_ibuf);
        if (buf > 3) {
            Player.plugin.SetTotalBufferSize(x_buf);
            Player.plugin.SetPendingBuffer(x_ibuf)
        }
    }
};
Player.GetResolution = function () {
    if (playUrl.indexOf('.mp3') < 0 && this.w == 0) {
        try {
            if (this.Sef) {
                var return_result = this.SefPlugin.Execute('GetVideoResolution');
                return_result = return_result.split('|');
                if (return_result.length > 0) {
                    this.w = return_result[0];
                    this.h = return_result[1]
                }
            } else {
                this.h = this.plugin.GetVideoHeight();
                this.w = this.plugin.GetVideoWidth()
            }
        } catch (e) {
            this.w = 0;
            this.h = 0
        }
    };
    if (this.w == 5) {
        this.h = 432;
        this.w = 540
    } else {
        if (this.w == 4) {
            this.h = 270;
            this.w = 480
        } else {
            if (this.w == 3) {
                this.h = 288;
                this.w = 384
            } else {
                if (this.w < 128 || this.w == '') {
                    this.h = 0;
                    this.w = 0
                }
            }
        }
    };
    var res = this.w + 'X' + this.h;
    if (this.w > 0) lO10OIOlxzlO100OIYpr("infR", Player.w + "x" + Player.h);
    if (playUrl.indexOf('.mp3') > 0) {
        res = '- MP3 -'
    }
    if (kjtYpr.GL.xmode == 1) lOlI01hyFSW1QI1OlYpr("FULL");
    else if (kjtYpr.GL.xmode == 0) lOlI01hyFSW1QI1OlYpr("ORIGINAL");
    else if (kjtYpr.GL.xmode == 2) lOlI01hyFSW1QI1OlYpr("MANUAL " + kjtYpr.GL.Pw + "%/" + kjtYpr.GL.Ph + "%")
};
Player.OnBufferingStart = function () {
    if ($_("playerBottom").style.display == "none" && $_("loading").style.display == "none") lOlI01hyFSW1QI1OlYpr("_FPZagruzka_. 1%");
    else lO10OIOlxzlO100OIYpr("infR", "_FPZagruzka_. 1%")
};
Player.OnBufferingProgress = function (per) {
    videoLoad("on", Player.cur_time);
    if ($_("playerBottom").style.display == "none") lOlI01hyFSW1QI1OlYpr("_FPZagruzka_. " + per + "%");
    else lO10OIOlxzlO100OIYpr("infR", "_FPZagruzka_. " + per + "% ");
    clearTimeout(Player.start_timeout)
};
var last_w = 0,
    last_h = 0;
Player.OnBufferingComplete = function () {
    clearTimeout(Player.start_timeout);
    clearTimeout(buffering_timer);
    setTimeout('videoLoad("off", Math.random());', 500);
    glSec = 0;
    this.jump = !1;
    try {
        Player.total_time = parseInt((Player.Sef) ? Player.SefPlugin.Execute('GetDuration') : Player.plugin.GetDuration())
    } catch (e) {};
    if (Player.total_time < 1) setTimeout("Player.total_time = parseInt((Player.Sef) ? Player.SefPlugin.Execute('GetDuration') : Player.plugin.GetDuration());", 1200);
    Player.total_time = Math.ceil(this.total_time / 1000);
    Player.GetResolution();
    getVideoPlayInfo();
    if (playUrl.indexOf('.mp3') < 0) setTimeout("Player.setSize(" + kjtYpr.GL.xmode + ");", 100);
    Player.GetAudioNum();
    lO10OIOlxzlO100OIYpr("infR", Player.w + "x" + Player.h)
};
var sefUrl = "";
Player.SEFPlay = function (x_url, x_sec, mode) {
    sefUrl = x_url;
    if (mode) Player.SefPlugin.Close();
    if (kjtYpr.mac == "244b036e2256") Player.SefPlugin.Open('Player', '1.010', 'Player');
    else Player.SefPlugin.Open('Player', '1.000', 'Player');
    Player.SefPlugin.Execute('InitPlayer', x_url);
    Player.SefPlugin.OnEvent = 'Player.SefOnEvent';
    if (Player.get3DMode() != 0) {
        if (kjtYpr.buffer > 10) {
            kjtYpr.buffer = 10
        };
        Player.SefPlugin.Execute('SetPlayerProperty', '2', '3', Player.get3DMode())
    } else {
        if (x_url.indexOf('.mp3') > 0) {
            if (kjtYpr.buffer > 0.5) {
                kjtYpr.buffer = 0.5
            };
            Player.SefPlugin.Execute('SetPlayerProperty', '5', '0', '0')
        }
    };
    if (kjtYpr.GL.timeoutiptv > 49) Player.SefPlugin.Execute('SetInitialTimeOut', kjtYpr.GL.timeoutiptv);
    Player.SefPlugin.Execute('StartPlayback', x_sec)
};

function setProp(n) {
    if (plmini_on) return;
    if (n < 0) n = 2;
    else if (n > 2) n = 0;
    if (n == 0) {
        var text = 'ORIGINAL';
        webapis.avplay.setDisplayMethod("PLAYER_DISPLAY_MODE_LETTER_BOX")
    } else if (n == 1) {
        text = 'FULL';
        webapis.avplay.setDisplayMethod("PLAYER_DISPLAY_MODE_FULL_SCREEN")
    } else if (n == 2) {
        text = 'AUTO';
        webapis.avplay.setDisplayMethod("PLAYER_DISPLAY_MODE_AUTO_ASPECT_RATIO")
    }
    kjtYpr.GL.xmode = n;
    kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
    var streaminfo = webapis.avplay.getCurrentStreamInfo();
    for (var i = 0; i < streaminfo.length; i++) {
        if (streaminfo[i].type == "VIDEO") {
            var j = l1l0IOIl_puQl1I1IYpr(streaminfo[i].extra_info);
            text += " " + j.Width + "x" + j.Height
        }
    }
    lOlI01hyFSW1QI1OlYpr(text)
}
Player.setSize = function (x_mode) {
    if (plmini_on) return;
    var x_res = 960,
        y_res = 540;
    if (this.w == 0 || this.w == '') Player.GetResolution();
    var area_x, area_y, area_w, area_h, crop_x, crop_y, crop_w, crop_h, text;
    area_x = 0;
    area_y = 0;
    area_w = 960;
    area_h = 540;
    crop_x = 0;
    crop_y = 0;
    crop_w = this.w;
    crop_h = this.h;
    if (ChSel.chat != "") {
        if (this.Sef) {
            this.SefPlugin.Execute('SetDisplayArea', 0, 0, 750, 540)
        } else {
            this.plugin.SetDisplayArea(0, 0, 750, 540)
        };
        lOlI01hyFSW1QI1OlYpr("CHAT");
        return
    }
    if (this.w == 0 || this.w == '') return;
    switch (x_mode) {
        case 0:
            if (crop_w / crop_h < 1.79 || this.w == 0) {
                text = 'ORIGINAL';
                area_w = y_res * crop_w / crop_h;
                area_x = (x_res - area_w) / 2
            } else {
                text = 'ORIGINAL';
                area_h = x_res * crop_h / crop_w;
                area_y = (y_res - area_h) / 2
            };
            break;
        case 1:
            text = 'FULL';
            break;
        case 2:
            text = 'MANUAL';
            if (this.change) {
                text += " " + kjtYpr.GL.Pw + "%/" + kjtYpr.GL.Ph + "%"
            } else kjtYpr.SetZoom = !1;
            if (kjtYpr.GL.Pw <= 100) {
                area_w = (x_res / 100) * kjtYpr.GL.Pw;
                area_x = (x_res - area_w) / 2
            } else {
                crop_x = crop_w * (kjtYpr.GL.Pw / 200 - 0.5);
                crop_w = crop_w * (2 - kjtYpr.GL.Pw / 100)
            }
            if (kjtYpr.GL.Ph <= 100) {
                area_h = (y_res / 100) * kjtYpr.GL.Ph;
                area_y = (y_res - area_h) / 2
            } else {
                crop_y = crop_h * ((kjtYpr.GL.Ph / 200) - 0.5);
                crop_h = crop_h * (2 - kjtYpr.GL.Ph / 100)
            }
            if ((kjtYpr.GL.Pw > 100 || kjtYpr.GL.Ph > 100) && (kjtYpr.serieF || kjtYpr.serieH)) text += "";
            break;
        default:
            Player.setSize(0);
            return;
            text = 'Не определён!';
            break
    };
    if (this.Sef) {
        this.SefPlugin.Execute('SetDisplayArea', area_x, area_y, area_w, area_h);
        if (x_mode != 1) this.SefPlugin.Execute('SetCropArea', crop_x, crop_y, crop_w, crop_h);
        else if (this.change) this.SefPlugin.Execute('SetCropArea', 0, 0, 0, 0)
    } else {
        this.plugin.SetDisplayArea(area_x, area_y, area_w, area_h);
        if (x_mode != 1) this.plugin.SetCropArea(crop_x, crop_y, crop_w, crop_h);
        else if (this.change) this.plugin.SetCropArea(0, 0, 0, 0)
    };
    lOlI01hyFSW1QI1OlYpr(text);
    this.change = !0
};
Player.OnCurrentPlayTime = function (_0xf8efx1e) {
    Player.oncur++;
    if ($_("loading").style.display == "block") {
        videoLoad("off", Math.random())
    }
    this.cur_time = parseInt(_0xf8efx1e, 10);
    this.cur_time = Math.ceil(this.cur_time / 1000);
    if (last_w != this.w || last_h != this.h) {}
    getVideoPlayInfo()
};
var iptv_succed = !1;
Player.SefOnEvent = function (num, _0xf8efx2e) {
    switch (num) {
        case 1:
        case 3:
        case 4:
        case 6:
            if (is_rek && rek_url != "") {
                err_rek("errloadfilesams" + num);
                return
            }
            if (handler == "menu" || rek_url != "" || terminated) return;
            if (Player.cur_time == 0) sendStat(0);
            if (kjtYpr.GL.timeoutiptv > 55) return;
            if ((!pstream || is_vod(playUrl)) && Player.cur_time > 0) {
                if (num == 4) {
                    setTimeout("samsStop();	lIO1IlIhslyl0OIQYpr('" + sefUrl + "',true," + Player.cur_time + ");", 2500);
                    lOlI01hyFSW1QI1OlYpr("_FPSoedineniePrervano_!" + Player.cur_time + sefUrl)
                }
                return
            }
            iptv_retry++;
            if (pstream && !is_vod(playUrl) && iptv_succed) {
                samsStop();
                setTimeout("lIO1IlIhslyl0OIQYpr(playUrl,true);", 500);
                lOlI01hyFSW1QI1OlYpr("_FPOshibka_! _FPPodkluchenie_ " + iptv_retry + "...");
                return
            }
            if (iptv_retry > 3) {
                lI1lI00l1gX0l0l0OYpr()
            } else {
                if (!plmini_on) {
                    if (num == 1) var t = " _FPsoedineniya_";
                    else if (num == 3) t = " 404";
                    else if (num == 4) t = " _FPpodklucheniya_";
                    else t = "";
                    lifeN = 0;
                    lifeSec = -1;
                    videoLoad("on");
                    samsStop();
                    lIO1IlIhslyl0OIQYpr(playUrl, !0);
                    lOlI01hyFSW1QI1OlYpr("_FPOshibka_" + t + "! _FPPodkluchenie_  " + (iptv_retry + 1) + "...")
                }
            }
            break;
        case 11:
            Player.OnBufferingStart();
            iptv_succed = !0;
            break;
        case 12:
            iptv_succed = !0;
            iptv_retry = 0;
            Player.OnBufferingComplete();
            lI1IOI10aO11QYpr();
            break;
        case 13:
            iptv_succed = !0;
            Player.OnBufferingProgress(_0xf8efx2e);
            break;
        case 14:
            if ($_("loading").style.display == "block") {
                videoLoad("off", Math.random())
            }
            Player.OnCurrentPlayTime(_0xf8efx2e);
            break
    }
};
Player.SEFSetNextAudioStream = function (n) {
    if (!this.Sef) {
        lOlI01hyFSW1QI1OlYpr('_FPNedostupno_!')
    } else {
        try {
            if (this.tnum < 2) {
                lOlI01hyFSW1QI1OlYpr('_FPDrugZvDorNet_!')
            } else {
                var x_val0 = this.SefPlugin.Execute('GetCurrentStreamID', 1);
                if (x_val0 >= 0) {
                    x_val0 += n;
                    if (x_val0 > (this.tnum - 1)) {
                        x_val0 = 0
                    } else if (x_val0 < 0) {
                        x_val0 = (this.tnum - 1)
                    }
                    Player.SetAudioStream(x_val0, 1)
                }
            }
        } catch (e) {}
    }
};
Player.LangCodes = {
    6514793: 'Китайская',
    6647399: 'Английская',
    6713957: 'Француская',
    6776178: 'Немецкая',
    6911073: 'Итальянская',
    6975598: 'Японская',
    7040882: 'Корейская',
    7368562: 'Португальская',
    7501171: 'Русская',
    7565409: 'Испанская'
};
Player.SetAudioStream = function (x_val0, x_val1) {
    if (this.tnum > x_val0) {
        kjtYpr.a_num = (x_val0 + 1).toString();
        this.SefPlugin.Execute('SetStreamID', 1, x_val0);
        var langCode = this.SefPlugin.Execute('GetStreamLanguageInfo', 1, x_val0);
        var _0xf8efxcf = Player.LangCodes[langCode];
        _0xf8efxcf = (_0xf8efxcf == null) ? 'Неизвестная' : langCode;
        lOlI01hyFSW1QI1OlYpr('_FPZvukDorozhka_ №' + (x_val0 + 1).toString())
    } else {}
};
Player.GetAudioNum = function () {
    this.tnum = 1;
    if (this.Sef) {
        try {
            this.tnum = this.SefPlugin.Execute('GetTotalNumOfStreamID', 1)
        } catch (e) {
            this.tnum = 1
        }
    }
};
Player.Set3Dtype = function (n) {
    if (this.Screen3Dplugin != null) {
        try {
            if (1 == this.Screen3Dplugin.Flag3DEffectSupport() || this.Screen3Dplugin.Flag3DTVConnect() == 1) {
                Player.mode3D += n;
                if (Player.mode3D > 2) Player.mode3D = 0;
                else if (Player.mode3D < 0) Player.mode3D = 2;
                switch (Player.mode3D) {
                    case 0:
                        lOlI01hyFSW1QI1OlYpr('3D OFF');
                        break;
                    case 1:
                        lOlI01hyFSW1QI1OlYpr('3D SIDE - BY - SIDE');
                        break;
                    case 2:
                        lOlI01hyFSW1QI1OlYpr('3D TOP - BOTTOM');
                        break
                };
                Player.Screen3Dplugin.Set3DEffectMode(Player.mode3D)
            } else lOlI01hyFSW1QI1OlYpr('3D _FPnePodderzhivaetsya_!')
        } catch (e) {
            lOlI01hyFSW1QI1OlYpr("3D error:" + e)
        }
    } else lOlI01hyFSW1QI1OlYpr('3D _FPnePodderzhivaetsya_!')
};
var buffering_timer = null;

function pauseMedia() {
    clearTimeout(slideTimer);
    if (playUrlAudio != "") sound.pause();
    if (paused) setTimeout("hidePlayer(true);", 1000);
    if (is_img(playUrl)) {
        if (!is_rek) kjtYpr.popUp("_FPSlideshow_: _FPOstanovleno_", 1200);
        paused = !0;
        return
    }
    lO10OIOlxzlO100OIYpr("recovery", "");
    if (rek_url == "") lll11I0lOt1br10I11Ypr = 0;
    if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
        uplayer[l0O1l101l1t_Y0lll1Ypr].pause()
    } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
        jwplayer("jw").pause()
    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
        webapis.avplay.pause()
    } else if (uaJ == "dune") {
        if (stb.canPause()) {
            stb.pause()
        } else {
            stb.stop()
        }
    } else if (uaJ == "mag") {
        stb.Pause()
    } else if (platform == "sams") {
        if (Player.Sef) {
            Player.SefPlugin.Execute('Pause')
        } else {
            Player.plugin.Pause()
        }
    } else {
        if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
            video.pause()
        } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
            media.play(0)
        }
    }
    SaveTime();
    buffering_timer = setTimeout('kjtYpr.longpause=true;', 30000);
    paused = !0
}

function goMedia() {
    if (playUrlAudio != "") sound.play();
    if (is_img(playUrl)) {
        if (!is_rek) {
            if (!paused) {
                if (slide_mode == 5000) slide_mode = 9000;
                else if (slide_mode == 9000) slide_mode = 13000;
                else slide_mode = 5000
            }
            startslide();
            kjtYpr.popUp("_FPSlideshow_: " + (slide_mode / 1000) + "_FPsec_.", 1200)
        }
        paused = !1;
        return
    }
    if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
        uplayer[l0O1l101l1t_Y0lll1Ypr].play()
    } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
        jwplayer("jw").play()
    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
        webapis.avplay.play()
    } else if (uaJ == "dune") {
        stb.resume()
    } else if (uaJ == "mag") {
        stb.Continue()
    } else if (platform == "sams") {
        if (Player.Sef) {
            Player.SefPlugin.Execute('Resume')
        } else {
            Player.plugin.Resume()
        };
        if (playUrl.indexOf('http') == 0 && kjtYpr.longpause) {
            setTimeout('l00II10LBpj1OIIIYpr(-3);', 100)
        }
    } else {
        if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
            video.play()
        } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
            media.play(1)
        }
    }
    clearTimeout(buffering_timer);
    kjtYpr.longpause = !1;
    paused = !1;
    lI1IOI10aO11QYpr();
    if (platform == "android-device") {
        setVideoResolution()
    }
}

function samsStop() {
    try {
        stopped = !0;
        terminated = !0;
        $_("loading").style.display = "none";
        if (Player.mode3D != 0) Player.Screen3Dplugin.Set3DEffectMode(0);
        Player.mode3D = 0;
        Player.total_time = 0;
        Player.cur_time = 0;
        Player.oncur = 0;
        if (Player.Sef) {
            Player.SefPlugin.Execute('Stop');
            Player.SefPlugin.Execute('ClearScreen');
            Player.SefPlugin.Close()
        } else {
            if (Player.plugin != null) {
                Player.plugin.Stop();
                Player.plugin.ClearScreen()
            }
        }
    } catch (e) {}
}
var timeF = 0,
    timerF;

function focuschange(h) {
    if (h.match(/false/i)) {
        timeF = T.inetTime
    }
    if (h.match(/true/i) && (handler == "player" || handler == "qual")) {
        if (timeF > 0 && (T.inetTime - timeF) > 40000) {
            if ((pstream && !is_vod()) || ident == "" || rek_url != "" || is_img(playUrl)) {
                lI1lI00l1gX0l0l0OYpr();
                return
            } else {
                if (ftimes == null) ftimes = {};
                ftimes[getIdent(select)] = [1, 1, Math.ceil(T.inetTime / 10000000)];
                kjtYpr.lIllOVRj11lO10Ypr("times", l10O0I11gdZlOOIIYpr(ftimes));
                set_times(!0)
            }
            if (kjtYpr.GL.next > 0) {
                showPlayer();
                showPlayer();
                kjtYpr.popUp("Нажмите Назад или закройте видео для отмены действия <b>" + sNext[kjtYpr.GL.next] + "</b> через 5сек.", 5000, "on");
                timerF = setTimeout(function () {
                    if (parseInt(kjtYpr.GL.next) == 2) kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr);
                    else if (parseInt(kjtYpr.GL.next) == 1 && parseInt(select) + 1 < count && kjtYpr.channels[parseInt(select) + 1].stream_url != '') l11OlO1EMTi1OOl1Ypr();
                    else if (parseInt(kjtYpr.GL.next) == 3) l11OlO1EMTi1OOl1Ypr()
                }, 5000)
            } else lI1lI00l1gX0l0l0OYpr()
        } else lI1lI00l1gX0l0l0OYpr()
    }
}
var is_adult = !1;

function lI1lI00l1gX0l0l0OYpr(noforce) {
    timeF = 0;
    if (!plmini_on) SaveTime();
    if (app_cors_once && !app_cors) {
        app_cors_once = !1;
        app_cors = app_cors_orig
    }
    if (gV(playElement.event, "onstopvideo") != "") {
        var myImage = new Image(1, 1);
        myImage.src = addident(playElement.event.onstopvideo.replace("[curTime]", curTime).replace("[totalTime]", totalTime))
    }
    lIIlO1uuOl100Ypr();
    sendr = !0;
    stopped = !0;
    iptv_succed = !1;
    Player.cur_time = 0;
    Player.total_time = 0;
    curTime = -1;
    totalTime = 0;
    PLINDEX = -1;
    subsrc = [];
    kjtYpr.inf("", 1);
    THVPerr = 0;
    if (fhd) setpl(720);
    if (playUrlAudio != "") {
        if (sound != null) sound.src = ""
    }
    $_("popUp").style.display = "none";
    $_("subtitle").style.display = "none";
    $_("thvpinfo").style.display = "none";
    clearTimeout(thvptimer);
    clearInterval(timerSub);
    kjtYpr.ll0Il1IRfsIQOO0Ypr = [];
    flashmode = null;
    clearTimeout(loaderTimer);
    clearTimeout(timerF);
    clearTimeout(slideTimer);
    clearTimeout(endTimer);
    clearTimeout(plmini_timer);
    clearTimeout(eventtimer);
    clearTimeout(timeoutWork);
    clearTimeout(advTimer);
    kjtYpr.inf("");
    epg_select = -1;
    clearTimeout(setRekTimer);
    clearTimeout(l110I0qquII11OYpr);
    clearTimeout(l1ll1O00QKcMlO01l0OYprTimer);
    lO10OIOlxzlO100OIYpr("chat", "");
    lO10OIOlxzlO100OIYpr("epg_full", "");
    $_("chat").style.display = "none";
    $_("epg_full").style.display = "none";
    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("extensions://") == 0) {
        $_("ext").style.display = "block";
        $_("frame-id").contentWindow.postMessage({
            'cmd': 'focus',
            'text': ''
        }, "*")
    }
    if (noforce && handler == "menu") return;
    if (is_img(playUrl) || playUrl == "description") {
        lO10OIOlxzlO100OIYpr("jw", "");
        $_("jw").style.display = "none";
        playUrl = "";
        if (lOlI1OII1UehOl1lIOIOYpr)
            if ($_("vk_audio").style.zIndex == "-5") {
                $_("vk_audio").style.zIndex = "0";
                $_("vk_audio").style.display = "block"
            }
    } else {
        plmini_on = !1;
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
        if (minimize) {
            minimizeplayer(!1)
        }
        if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
            uplayer[l0O1l101l1t_Y0lll1Ypr].stop()
        } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
            jwplayer("jw").remove()
        }
        if (platform == "sams" && l0O1l101l1t_Y0lll1Ypr != "jw") {
            $_("loading").style.display = "none";
            if (kjtYpr.mac == "244b036e2256") setTimeout("samsStop();", 100);
            else samsStop()
        } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
            try {
                webapis.avplay.stop();
                webapis.avplay.close()
            } catch (e) {}
            $_("av-player").style.display = "none"
        } else {
            if (Math.random() > 0.4 && $_("player").style.display == "block" && rek_url == "") {
                if ((platform == "sams" || uaJ == "sony" || uaJ == "pa" || uaJ == "mag") && Math.random() > 0.62) kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> _FPBlueKnProporcii_");
                else {
                    if (is_iptv > 2) {
                        if (Math.random() > 0.6) kjtYpr.popUp("_FPNpl10IIOr1dDIlIlOOYpr_?<br> <span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPVmEmVp_");
                        else kjtYpr.popUp("_FPNpl10IIOr1dDIlIlOOYpr_?<br>_FPVoVremProsNazh_ <span style='background-color:orange;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPdVp_. ")
                    } else if (Math.random() > 0.6) kjtYpr.popUp("_FPVmVpostBiCe_ " + ((pstream) ? "IPTV" : "_FPVi" + "deo_") + " _FPpleer_а <span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPMenu_ -> HTML5 _FPpleer_ / _FPVstroenniy_</i>");
                    else kjtYpr.popUp("_FPHotChtVfon_ <span style='background-color:red;font-size:10px;'>&nbsp;&nbsp;&nbsp;</span> _FPvVrPrVid_</i>");
                    if (Math.random() > 0.3) kjtYpr.popUp("<img width='35' height='35' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> _FPKnInfoPerRezh_")
                }
            }
            if (uaJ == "dune") {
                try {
                    stb.stop()
                } catch (e) {}
                $_("dune-api").style.zIndex = "0"
            } else if (uaJ == "mag") {
                try {
                    stb.Stop()
                } catch (e) {}
            } else {
                try {
                    pauseMedia()
                } catch (e) {}
                if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    lO10OIOlxzlO100OIYpr("other", "");
                    $_("other").style.display = "none";
                    setidprop("other", -1);
                    $_("jw").style.display = "none";
                    try {
                        video.style.display = "none";
                        video.src = ""
                    } catch (e) {}
                } else if (l0O1l101l1t_Y0lll1Ypr == "html5") {
                    video.style.display = "none";
                    video.src = ""
                } else {
                    $_("jw").style.display = "none";
                    lO10OIOlxzlO100OIYpr("jw", "");
                    lO10OIOlxzlO100OIYpr("other", "")
                }
            }
        }
    }
    videoLoad("off", Math.random());
    handler = "menu";
    $_("QualCh").style.display = "none";
    $_("player").style.display = "none";
    $_("main").style.display = "block";
    $_("recovery").style.display = "none";
    if (is_iptv > 2) {
        jsc_142427789(null, "notimer")
    }
    setfon();
    $_("bcg1").style.display = "none";
    $_("bcg2").style.display = "none";
    $_("playermini").style.display = "none";
    linkOver();
    set_times();
    if (platform == "sams") Player.cur_time = 0;
    $_("whitestripes1").style.display = "none";
    $_("whitestripes2").style.display = "none"
}

function selectLang() {
    $_("QualCh").style.display = "block";
    var l1100I1QvJubu0lIOOYpr = "";
    kjtYpr.lllIIIlf0RlI1lOYpr = 0;
    try {
        if (video.audioTracks.length > 1) {
            for (var i = 0; i < video.audioTracks.length; i++) {
                l1100I1QvJubu0lIOOYpr = l1100I1QvJubu0lIOOYpr + "<div class='menuchannel' id='audioCh" + i + "' style='font-size:21px;'>" + video.audioTracks[i].language + "</div>"
            }
        } else l1100I1QvJubu0lIOOYpr = l1100I1QvJubu0lIOOYpr + "<div class='menuchannel' style='color:gray;font-size:21px;'>_FPOneaudiotrack_</div>"
    } catch (e) {
        l1100I1QvJubu0lIOOYpr = l1100I1QvJubu0lIOOYpr + "<div class='menuchannel' style='color:gray;font-size:21px;'>_FPOneaudiotrack_</div>"
    }
    $_("QualCh").style.display = "block";
    lO10OIOlxzlO100OIYpr("QualCh", $_("QualCh").innerHTML + l1100I1QvJubu0lIOOYpr);
    handler = "qual";
    kjtYpr.lOII1010Q1zuYIQ1I1Ypr()
}
var advTimer, setRekTimer, l1ll1O00QKcMlO01l0OYprTimer, lifeSec = -1,
    lifeN = 0,
    ident = "";

function l1ll1O00QKcMlO01l0OYpr() {
    if (is_iptv > 2 || (!is_vod(url) && pstream)) {
        l1ll1O00QKcMlO01l0OYprTimer = setTimeout("l1ll1O00QKcMlO01l0OYpr();", 1200);
        if (stopped || paused || $_("loading").style.display == "block") return;
        if (kjtYpr.GL.timeoutiptv > 55) return;
        curTime = getCur();
        if ((iptv_succed || curTime > 0 || (curTime == 0 && (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") && kjtYpr.series != "LW"))) {
            if (curTime != lifeSec) {
                lifeN = 0;
                lifeSec = curTime
            } else {
                lifeN++;
                if (ttmac) kjtYpr.popUp("lifeN" + lifeN, 1000);
                if (lifeN > 12 && lifeN > kjtYpr.GL.timeoutiptv * 1.2) {
                    lifeN = 0;
                    lifeSec = -1;
                    iptv_retry++;
                    easystop(1);
                    if (iptv_retry > 2) sendStat(0);
                    lIO1IlIhslyl0OIQYpr(playUrl, !0);
                    lOlI01hyFSW1QI1OlYpr("_FPPodkluchenie_ " + iptv_retry + "...")
                }
            }
        }
    }
}
var rekLifeTimer;

function rekLife() {
    if (!is_rek) return;
    if (is_img(playUrl)) return;
    rekLifeTimer = setTimeout("rekLife();", 1000);
    if (paused || rek_url == "") return;
    curTime = getCur();
    if (curTime != lifeSec) {
        lifeN = 0;
        lifeSec = curTime
    } else {
        lifeN++;
        if (lifeN > 10) {
            if (ttmac) kjtYpr.popUp("REK END LifeN " + lifeN);
            lifeN = 0;
            lifeSec = -1;
            if (curTime < 1) err_rek("errreklifeend0");
            else err_rek("errreklifeend")
        }
    }
}

function is_show_rek() {
    var ti = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("rek");
    if (ti == "") ti = 0;
    if (isNaN(ti)) ti = 0;
    if (rek_q > 9) return !1;
    if (rek_num > 0) return !1;
    if (rek_url == "" && rek_last > 0 && T.inetTime - rek_last > rek_interval && is_white()) {
        return !0
    }
    if (ttmac) {
        if (rek_url == "" && rek_last > 0 && is_white() && T.inetTime - ti < rek_interval)
            setTimeout(function () {
                kjtYpr.popUp("Next rek " + Math.ceil((rek_interval - (T.inetTime - ti)) / 60000), 1200)
            }, 1200)
    }
    if (rek_url != "") {
        if (!is_white()) {
            is_adult = !0;
            rek_url = "";
            return !1
        }
        if (T.inetTime - ti < rek_interval) {
            return !1
        } else return !0
    }
}

function arrurl(u) {
    var url = "";
    try {
        var z = l1l0IOIl_puQl1I1IYpr(u);
        if (z != null) {
            var n = 0,
                nmin = 10;
            for (var i = 0; i < z.length; i++) {
                if (z[i][2] < nmin && kjtYpr.GL.quality <= z[i][2]) {
                    n = i;
                    nmin = z[i][2]
                }
            }
            url = z[n][1];
            if (url == null || url == "null" || url == "") {
                lI1lI00l1gX0l0l0OYpr();
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                return
            }
            kjtYpr.ll0Il1IRfsIQOO0Ypr = z;
            subsrc = [];
            if (z[n][3] != null)
                if (z[n][3][0][0] != null) subsrc = z[n][3]
        }
    } catch (e) {}
    return url
}
var pstr = "",
    playElement = {},
    is_arc = !1;

function lI1l1IOllHHCTuO0OlOYpr(url, ttl) {
    if (!is_rek && rek_url != "") {
        rek_url = ""
    }
    if (rek_url != "") {
        pstream = (url.indexOf(".m3u8") > 0) ? 1 : 0;
        l0O1l101l1t_Y0lll1Ypr = (pstream) ? kjtYpr.GL.streamplayer : kjtYpr.GL.player;
        if (platform == "android-device") l0O1l101l1t_Y0lll1Ypr = "html5";
        if (platform == "sams") l0O1l101l1t_Y0lll1Ypr = "media";
        if (ttmac) {
            setTimeout('kjtYpr.popUp("REK: ' + rek_url + '", 2000);', 6500)
        }
    }
    try {
        if (url == null || url == undefined) {
            kjtYpr.popUp("_FPPustayaSsilka_");
            lI1lI00l1gX0l0l0OYpr();
            return
        }
        lO10OIOlxzlO100OIYpr("epg_full", "");
        if (url.indexOf("[") == 0) url = arrurl(url);
        else if (url.indexOf("{") == 0) {
            kjtYpr.YoutubeURL = l1l0IOIl_puQl1I1IYpr(url);
            if (kjtYpr.YoutubeURL == null) {
                kjtYpr.inf("Error JSON decode stream url. Must be {\"720\":{\"url\":\"\",\"title\":\"\"}}", 1800)
            } else l0O0ll1QVvyRH10OOIYpr();
            return
        } else if (url.indexOf("NotFound") == 0) {
            return
        }
        if (url.indexOf("[") == 0) url = arrurl(url);
        if (is_m3u8(url)) pstream = !0;
        else pstream = !1;
        if (lastmode == null) {
            if (url.indexOf("#playerjs") > 0) l0O1l101l1t_Y0lll1Ypr = "playerjs";
            else if (platform == "tizen") {
                l0O1l101l1t_Y0lll1Ypr = (pstream) ? kjtYpr.GL.streamplayer : kjtYpr.GL.player
            } else {
                if (url.indexOf("#media") > 0) {
                    l0O1l101l1t_Y0lll1Ypr = "media";
                    url = url.replace("#media", "")
                } else l0O1l101l1t_Y0lll1Ypr = (pstream) ? kjtYpr.GL.streamplayer : kjtYpr.GL.player
            }
        } else l0O1l101l1t_Y0lll1Ypr = lastmode;
        if ((kjtYpr.l1IlIl01l0tUIl1IIYpr.match(/(kinokrad|hdtubes).php/)) && (uaJ == "lgw2" || uaJ == "lgw" || model == "chrome") && l0O1l101l1t_Y0lll1Ypr == "html5") {
            if (l0O1l101l1t_Y0lll1Ypr != "ifrhtml5") {
                l0O1l101l1t_Y0lll1Ypr = "ifrhtml5";
                kjtYpr.popUp("Этот ресурс запущено с типом плеера:<br>Iframe html5 плеер", 2000)
            }
        }
        if (platform == "android-device" && l0O1l101l1t_Y0lll1Ypr == "media" && is_iptv > 2) {
            if (kjtYpr.build < 4.5) {
                l0O1l101l1t_Y0lll1Ypr = "html5";
                kjtYpr.popUp("Обновите aForkPlayer для возможности запуска стримов Медиа плеером", 2500)
            }
        }
        if (kjtYpr.global.player == "inner") {
            if (platform == "android-device" && l0O1l101l1t_Y0lll1Ypr == "media") {
                if (kjtYpr.build < 4.5) l0O1l101l1t_Y0lll1Ypr = "html5"
            } else if (document.location.href.indexOf("operatv.obovse.ru") > 0 && l0O1l101l1t_Y0lll1Ypr == "media") {
                if (uaJ == "android") {
                    lI1lI00l1gX0l0l0OYpr(!0);
                    ll0111l1wxUIOlO1lYpr(5, "Установите aForkPlayer.apk<br>http://obovse.ru/aForkPlayer.apk", "Скачать|_FPOtmena_");
                    return
                }
                l0O1l101l1t_Y0lll1Ypr = "html5"
            }
        }
        vivat_tek = null;
        var orig_url = url;
        handler = "player";
        setPosition(0);
        $_("main").style.display = "none";
        if (platform == "android-device" && rek_url != "") l0O1l101l1t_Y0lll1Ypr = "html5";
        if (l0O1l101l1t_Y0lll1Ypr == "tizen") fhd = !0;
        else fhd = !1;
        fhd = !1;
        if (fhd) setpl(1080);
        $_("player").style.display = "block";
        optLangSel = 0;
        $_("QualCh").style.display = "none";
        if (is_img(url)) hidePlayer();
        else resetProgress();
        $_("main").style.display = "none";
        if (ttl == null) playElement = ChSel;
        else playElement = ttl;
        if (typeof playElement.subtitles == "object") {
            subsrc = playElement.subtitles
        } else if (playElement.subtitles != "") {
            playElement.subtitles = l1l0IOIl_puQl1I1IYpr(playElement.subtitles);
            if (typeof playElement.subtitles == "object") subsrc = playElement.subtitles
        }
        ident = getIdent();
        stopped = !1;
        info_mode = 0;
        iptv_retry = 0;
        startM = 0;
        Player.oncur = 0;
        if (is_iptv > 2 || (!is_vod(url) && pstream)) {
            clearTimeout(l1ll1O00QKcMlO01l0OYprTimer);
            lifeN = 0;
            lifeSec = -1;
            l1ll1O00QKcMlO01l0OYprTimer = setTimeout("l1ll1O00QKcMlO01l0OYpr();", 2000);
            epg_channels = kjtYpr.channels;
            epg_select = select;
            $_("progressBall").style.display = "none";
            getshowEpg()
        } else {
            epg_channels = [];
            epg_select = -5;
            $_("progressBall").style.display = "block"
        }
        if (gV(ChSel, "catchup") != "" || gV(ChSel, "catchup_days") != "") {
            is_arc = 1;
            $_("progressBall").style.display = "block";
            if (gV(ChSel, "catchup") == "") ChSel.catchup = "default";
            if (gV(ChSel, "catchup_days") == "") ChSel.catchup_days = 3;
            if (gV(ChSel, "arcCurTime") != "") {
                arc_timestamp = parseInt(ChSel.arcCurTime);
                arc_fwd = arc_timestamp - T.timestamp
            }
        } else is_arc = 0;
        lastView2 = lastView;
        lastView = select;
        lastViewTitle2 = lastViewTitle;
        lastViewTitle = gV(playElement, "title");
        lastViewUrlOrig = url;
        renderPlayer(url);
        $_('progressBall').className = 'progressBall';
        if (kjtYpr.extmode) {
            if (l0O1l101l1t_Y0lll1Ypr == "media") {
                media = $_("media");
                try {
                    $_("video").style.display = "none"
                } catch (e) {}
            } else {
                $_("jw").style.display = "none";
                $_("video").style.display = "block";
                video.play()
            }
            kjtYpr.extmode = !1
        } else {
            if (plmini_on) lIO1IlIhslyl0OIQYpr(url);
            else {
                playUrl = url;
                setTimeout("lIO1IlIhslyl0OIQYpr(playUrl);", 70)
            }
        }
        triggerHide();
        videoLoad("on");
        getSaveTime(orig_url)
    } catch (e) {
        kjtYpr.popUp("Err Play media:<br>" + e.message);
        lIO1IlIhslyl0OIQYpr(url)
    }
    if (subsrc.length > 0) lOlI01hyFSW1QI1OlYpr(" ");
    if (is_thvp(url)) {
        getthvpinfo();
        $_("thvpinfo").style.display = "block"
    } else $_("thvpinfo").style.display = "none"
}
var lastSec = 0,
    loaderTimer = null;

function videoLoad(mode, sec) {
    if (l0O1l101l1t_Y0lll1Ypr == "jw") {
        $_("loading").style.display = "none";
        return
    }
    if (ttmac) {
        kjtYpr.popUp("videoLoad " + mode + "<br>" + sec, 400);
        pop2msg = []
    }
    clearTimeout(loaderTimer);
    if (plmini_on) {
        $_("loading").style.left = css_w(1020) + "px";
        $_("loading").style.top = css_wh(innerH - 185) + "px"
    } else {
        $_("loading").style.left = css_w(580) + "px";
        $_("loading").style.top = css_wh(250) + "px"
    }
    if (mode == "on") {
        if (handler == "menu" && !plmini_on) return;
        $_("loading").style.display = "block";
        if (sec != null) {
            lastSec = sec
        }
        if (l0O1l101l1t_Y0lll1Ypr == "media" && uaJ == "lg" && kjtYpr.series != "LW") {
            loaderTimer = setTimeout('$_("loading").style.display="none";', 25000)
        } else {
            if (l0O1l101l1t_Y0lll1Ypr == "tizen" || platform == "sams") loaderTimer = setTimeout('$_("loading").style.display="none";', kjtYpr.GL.timeoutiptv * 1000);
            else if (platform != "sams" && uaJ != "mag" && l0O1l101l1t_Y0lll1Ypr != "tizen") {
                if (pstream || l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
                    loaderTimer = setTimeout('$_("loading").style.display="none";', 1500)
                } else loaderTimer = setTimeout('$_("loading").style.display="none";', 10000)
            } else loaderTimer = setTimeout('$_("loading").style.display="none";', 60000)
        }
    }
    if (mode == "off" && ($_("loading").style.display != "none" || is_img(playUrl)) && lastSec != sec) {
        forwarded = !1;
        $_("loading").style.display = "none";
        triggerHide(900, !0)
    }
}

function renderPlayer(url) {
    if (plmini_on) return;
    if (url == null) url = playUrl;
    var shortUrl = (url == 'assync') ? ".." + playElement.stream_url.substr(url.length - 23) : ".." + url.substr(url.length - 23);
    lO10OIOlxzlO100OIYpr("recovery", "");
    if (platform == "android-device") {
        if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5" || l0O1l101l1t_Y0lll1Ypr == "jw" || l0O1l101l1t_Y0lll1Ypr == "playerjs") {
            $_("player").style.backgroundColor = "transparent"
        } else $_("player").style.backgroundColor = "black"
    }
    $_("jw").style.zIndex = "0";
    if (platform == "sams") pstr = "";
    else if (l0O1l101l1t_Y0lll1Ypr == "playerjs") pstr = "JS";
    else if (l0O1l101l1t_Y0lll1Ypr == "jw") pstr = "<img id='ico_p' style='padding-top:1px;' width='" + css_w(27) + "' src='" + _img("_OI_jw.png") + "' />";
    else if (l0O1l101l1t_Y0lll1Ypr == "tizen") pstr = "<img id='ico_p' style='padding-top:1px;' width='" + css_w(27) + "' src='" + _img("_OT_p_tizen.png") + "' />";
    else if (l0O1l101l1t_Y0lll1Ypr == "media") pstr = "<img id='ico_p' style='padding-top:3px;' width='" + css_w(27) + "' src='" + _img("_OI_p_media.png") + "' />";
    else if (l0O1l101l1t_Y0lll1Ypr == "html5") pstr = "<img id='ico_p' style='padding-top:1px;' width='" + css_w(27) + "' src='" + _img("_OI_p_html5.png") + "' />";
    else if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") pstr = "<img id='ico_p' style='padding-top:1px;' width='" + css_w(27) + "' src='" + _img("_OI_p_html5_ifr.png") + "' />";
    else if (l0O1l101l1t_Y0lll1Ypr == "ext") pstr = "_FPVneshniy_ _FPpleer_";
    else if (l0O1l101l1t_Y0lll1Ypr == "download") pstr = "_FPPereadresaciyaNaFail_...";
    if (is_rek) {
        $_("prekinfo").style.display = "block";
        return
    } else if (ChSel.stream_url == "description") {
        $_("playerBottom").style.height = css_wh(20) + "px";
        $_("playerBottom").style.top = css_wh(innerH - 11) + "px"
    } else {
        lO10OIOlxzlO100OIYpr("pstr", pstr);
        lO10OIOlxzlO100OIYpr("infR", "");
        lO10OIOlxzlO100OIYpr("infPl", "")
    }
    lO10OIOlxzlO100OIYpr("remainingTime", "");
    lO10OIOlxzlO100OIYpr("totalTime", "");
    if (kjtYpr.GL.next == 1) var vr = "_FPPosledovatelno_";
    else if (kjtYpr.GL.next == 2) vr = "_FPPovtoryat_ _FPodin_";
    else if (kjtYpr.GL.next == 4) vr = "_FPOtkl._";
    else vr = "_FPPovtoryat_ _FPvse_";
    if (is_img(playUrl)) var timer = 40;
    else timer = 1200;
    tl = "<div id='chtitle'>" + playElement.title + "</div>";
    if (is_iptv > 2) vr = "<img width='" + css_w(28) + "' height='" + css_wh(23) + "' src='" + playElement.logo_30x30 + "'> ";
    var dopnum = "";
    if (typeof ChSel.playlist == "object") {
        if (ChSel.playlist.length) {
            dopnum = "<br><span style='font-size:80%;'>" + (PLINDEX + 1) + "/" + (ChSel.playlist.length) + "</span>"
        }
    }
    lO10OIOlxzlO100OIYpr("ptt", "<div id='info_right' style='padding-top:" + css_wh(33) + "px;text-align:right;'>" + vr + "<br>" + shortUrl + "<div id='pinfo' style='float:right;color:#CB0048;'></div></div>" + "<div id='info_num'>" + (parseInt(select) + 1) + "." + dopnum + "</div>" + tl);
    getshowEpg();
    setTimeout(function () {}, timer)
}

function setLoadPosition(position, per) {
    gl_buf = 0;
    if (is_arc) {
        $_("arrowtime").style.display = "block";
        var xt = T.timestamp + arc_fwd + position;
        var tt = gV(playElement, "catchup_days") * 24 * 3600;
        pos = Math.ceil(((tt + arc_fwd + position) / tt) * progressBarWidth);
        setPosition(pos);
        if (pos / progressBarWidth > 0.96) pos = Math.ceil(0.96 * progressBarWidth);
        if (pos / progressBarWidth < 0.02) pos = 30;
        $_("arrowtime").style.left = (pos - css_w(80)) + "px";
        lO10OIOlxzlO100OIYpr('arrowtime', dt(xt, !0, !0));
        return
    }
    curTime = getCur();
    totalTime = getTotal();
    position = curTime + position;
    if (position > 0 && position < totalTime) {
        var pos = Math.ceil((position / totalTime) * progressBarWidth);
        var xn = Math.ceil(T.inetTime / 1000) - 7 * 24 * 3600;
        if (arc_fwd == 0)
            setPosition(pos);
        $_("arrow").style.display = "none";
        $_("arrowtime").style.display = "block";
        if (pos / progressBarWidth > 0.96) pos = Math.ceil(0.96 * progressBarWidth);
        if (pos / progressBarWidth < 0.02) pos = 30;
        $_("arrowtime").style.left = (pos - css_w(30)) + "px";
        if (per == null) lO10OIOlxzlO100OIYpr('arrowtime', getTimeFromMS(position));
        else lO10OIOlxzlO100OIYpr('arrowtime', per + "%")
    }
}
var qch_num = "",
    last_qnum = -1,
    qch_pos = 0,
    qch_timer, qch_stimer;
qch_a = [
    ["0", " "],
    ["1", ".", "/", ":", ","],
    ["2", "а", "б", "в", "г", "a", "b", "c"],
    ["3", "д", "е", "ё", "ж", "з", "d", "e", "f"],
    ["4", "и", "й", "к", "л", "g", "h", "i"],
    ["5", "м", "н", "о", "п", "j", "k", "l"],
    ["6", "р", "с", "т", "у", "m", "n", "o"],
    ["7", "ф", "х", "ц", "ч", "p", "q", "r", "s"],
    ["8", "ш", "щ", "ъ", "ы", "t", "u", "v"],
    ["9", "ь", "э", "ю", "я", "w", "x", "y", "z"]
];

function setKey(k) {
    if (kjtYpr.typeList == "start") return;
    $_("quick_search").style.display = "block";
    $_("quick_but").style.display = "block";
    if (last_qnum == k) qch_pos++;
    else {
        if (last_qnum != -1) {
            $_("quick_search").value += qch_a[last_qnum][qch_pos]
        }
        qch_pos = 0
    }
    last_qnum = k;
    if (qch_pos > qch_a[k].length - 1) qch_pos = 0;
    var s = "";
    for (var i = 0; i < qch_a[k].length; i++) {
        if (i == qch_pos) s += "<span style='background-color:#7D7DEC;'>";
        s += qch_a[k][i];
        if (qch_a[k][i] == " ") s += "&nbsp;";
        if (i == qch_pos) s += "</span>"
    }
    lO10OIOlxzlO100OIYpr("quick_but", s);
    setKeySearch();
    clearTimeout(qch_timer);
    qch_timer = setTimeout(function () {
        $_("quick_search").value += qch_a[last_qnum][qch_pos];
        setKeySearch();
        last_qnum = -1;
        $_("quick_but").style.display = "none"
    }, 1000)
}

function setKeySearch() {
    clearTimeout(qch_stimer);
    qch_stimer = setTimeout(function () {
        kjtYpr.channels = [];
        for (var i = 0; i < kjtYpr.origchannels.length; i++) {
            var s = (i + 1) + " " + kjtYpr.origchannels[i].title;
            if (s.toLowerCase().indexOf($_("quick_search").value) > -1) {
                kjtYpr.channels.push(kjtYpr.origchannels[i]);
                kjtYpr.channels[kjtYpr.channels.length - 1].orig_num = i
            }
        }
        ll1lIOiIO0lO1IIIYpr = Math.random();
        kjtYpr.lIOIOIBu0mO11llO0Ypr()
    }, 1800)
}

function setPercent(per) {
    if (pstream && !is_vod(playUrl)) {
        clearTimeout(qch_timer);
        qch_timer = setTimeout(function () {
            qch_num = parseInt(qch_num);
            if (1 + qch_num > kjtYpr.channels.length) {
                kjtYpr.popUp("Не существует!", 1300)
            } else {
                select = qch_num - 1;
                kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr)
            }
            qch_num = ""
        }, 1300);
        qch_num = qch_num + per / 10;
        kjtYpr.popUp(qch_num, 1300);
        return
    }
    if (is_arc) {
        var tt = Math.ceil(T.timestamp - (1 - (per / 100)) * gV(playElement, "catchup_days") * 24 * 3600);
        arc_fwd = 0;
        arc_timestamp = 0;
        arcfwd(Math.ceil(tt - T.timestamp));
        return
    } else sec = Math.ceil(((per / 100) * getTotal()) - getCur());
    setLoadPosition(sec, per);
    if (sec < 0) l00II10LBpj1OIIIYpr(sec, !0);
    else lQ1llOmVIbIlO1lYpr(sec, !0)
}

function arcurl(u, t, catchup, catchup_source) {
    var au = u;
    if (catchup == "default" && catchup_source != "") {
        au = catchup_source.replace("${start}", t).replace("${timestamp}", T.timestamp).replace("${offset}", T.timestamp - t)
    } else if (catchup == "append" && catchup_source != "") {
        au += catchup_source.replace("${start}", t).replace("${timestamp}", T.timestamp).replace("${offset}", T.timestamp - t)
    } else if (catchup == "flussonic" || catchup == "fs" || catchup == "flussonic-hls") {
        au = au.replace(/([^\?]*\/)([^\?]*?)(\.|\?|$)(.*)/, "$1$2-" + t + "-10800$3$4")
    } else if (catchup == "shift" || 1) {
        if (u.indexOf("?") > 0) au += "&";
        else au += "?";
        au += "utc=" + t + "&lutc=" + T.timestamp
    }
    return au
}
var forwarded = !1,
    arc_fwd = 0,
    arc_timestamp = 0;

function arcfwd(sec) {
    if (platform == "sams") samsStop();
    else if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
        lO10OIOlxzlO100OIYpr("other", "");
        video.src = ""
    } else if (l0O1l101l1t_Y0lll1Ypr == "html5") {
        video.src = ""
    } else {
        lO10OIOlxzlO100OIYpr("jw", "");
        lO10OIOlxzlO100OIYpr("other", "")
    }
    arc_fwd += sec;
    videoLoad("on");
    arc_timestamp = T.timestamp + arc_fwd;
    if (gV(playElement, "source_url") != "") var u = playElement.source_url;
    else u = playElement.stream_url;
    lIO1IlIhslyl0OIQYpr(arcurl(u, (T.timestamp + arc_fwd), gV(playElement, "catchup"), gV(playElement, "catchup_source")));
    getVideoPlayInfo()
}

function lQ1llOmVIbIlO1lYpr(sec, mode) {
    if (rek_url != "" && !l1OlOlOTIFl10lIYpr) return !1;
    if (sec == null) {
        if (glSec == 0) sec = 10;
        else if (glSec < 100) sec = 25;
        else sec = 60
    }
    if (mode == null) {
        glSec += sec;
        setLoadPosition(glSec);
        clearTimeout(wdtimer);
        wdtimer = setTimeout("lQ1llOmVIbIlO1lYpr(" + glSec + ",true)", 1200);
        return
    }
    glSec = 0;
    sec = Math.ceil(sec);
    $_("arrow").style.display = "none";
    $_("arrowtime").style.display = "none";
    if (gV(playElement, "catchup") != "" && gV(playElement, "catchup_days") != "") {
        arcfwd(sec)
    } else if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
        uplayer[l0O1l101l1t_Y0lll1Ypr].seek(getCur() + sec)
    } else if (uaJ == "dune") {
        stb.setPositionInSeconds(getCur() + sec)
    } else if (uaJ == "mag") {
        stb.SetPosTime(stb.GetPosTime() + sec)
    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
        webapis.avplay.jumpForward(sec * 1000);
        Player.cur_time = getCur() + sec
    } else if (platform == "sams") {
        videoLoad("on", Player.cur_time);
        if (Player.Sef) {
            Player.SefPlugin.Execute('JumpForward', sec)
        } else {
            Player.plugin.JumpForward(sec)
        }
    } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
        if (media.playPosition + sec * 1000 < media.playTime) {
            videoLoad("on", media.playPosition);
            media.seek(media.playPosition + sec * 1000)
        }
    } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
        jwplayer("jw").seek(jwplayer("jw").getPosition() + sec)
    } else {
        if (uaJ == "spark") {
            var mt = (Math.ceil(video.currentTime / 1000) + sec) * 1000;
            if (mt > video.duration) {
                var mt = sec + video.currentTime
            }
            video.currentTime = mt
        } else if (getCur() < getTotal() || getTotal() < 2) {
            forwarded = !0;
            videoLoad("on", video.currentTime);
            video.currentTime += sec
        }
    }
    if (playUrlAudio != "") sound.currentTime = getCur();
    setTimeout("lI1IOI10aO11QYpr();", 3000)
}

function l00II10LBpj1OIIIYpr(sec, mode) {
    if (rek_url != "" && !l1OlOlOTIFl10lIYpr) return !1;
    if (sec == null) {
        if (glSec == 0) sec = -10;
        else if (glSec > -100) sec = -25;
        else sec = -60
    }
    if (mode == null) {
        glSec += sec;
        setLoadPosition(glSec);
        clearTimeout(wdtimer);
        wdtimer = setTimeout("l00II10LBpj1OIIIYpr(" + glSec + ",true)", 1200);
        return
    }
    glSec = 0;
    sec = Math.ceil(sec);
    $_("arrow").style.display = "none";
    $_("arrowtime").style.display = "none";
    if (gV(playElement, "catchup") != "") {
        arcfwd(sec)
    } else if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
        uplayer[l0O1l101l1t_Y0lll1Ypr].seek(getCur() + sec)
    } else if (uaJ == "dune") {
        stb.setPositionInSeconds(getCur() + sec)
    } else if (uaJ == "mag") {
        stb.SetPosTime(stb.GetPosTime() + sec)
    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
        webapis.avplay.jumpBackward(-1000 * sec);
        Player.cur_time = getCur() + sec
    } else if (platform == "sams") {
        videoLoad("on", Player.cur_time);
        if (Player.Sef) {
            Player.SefPlugin.Execute('JumpBackward', -1 * sec)
        } else {
            Player.plugin.JumpBackward(-1 * sec)
        }
    } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
        jwplayer("jw").seek(jwplayer("jw").getPosition() + sec)
    } else {
        if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
            videoLoad("on", media.playPosition);
            if (media.playPosition + sec * 1000 > 0) media.seek(media.playPosition + sec * 1000);
            else media.seek(0)
        } else {
            videoLoad("on", video.currentTime);
            if (getCur() + sec > 0) {
                video.currentTime += sec
            } else video.currentTime = 0
        }
    }
    if (playUrlAudio != "") sound.currentTime = getCur();
    setTimeout("lI1IOI10aO11QYpr();", 3000)
}
var lll11I0lOt1br10I11Ypr = 0,
    ftimes = null;

function getSaveTime(u) {
    if ((pstream && !is_vod()) || ident == "" || rek_url != "" || is_rek || is_iptv > 2) return;
    try {
        if (ftimes == null) return;
        if (typeof ftimes[ident] != "undefined") {
            lll11I0lOt1br10I11Ypr = ftimes[ident][0];
            $_("recovery").style.display = $_("playerBottom").style.display;
            $_("recovery").style.zIndex = "2";
            lO10OIOlxzlO100OIYpr("recovery", "_FPVozobnovitNa_<br/>[" + getTimeFromMS(lll11I0lOt1br10I11Ypr) + "]");
            if (ftimes[ident][2]) ftimes[ident][2]++;
            else ftimes[ident][2] = 1;
            kjtYpr.lIllOVRj11lO10Ypr("times", l10O0I11gdZlOOIIYpr(ftimes))
        } else if (gV(ChSel, "start_time") > 0) {
            lll11I0lOt1br10I11Ypr = ChSel.start_time;
            $_("recovery").style.display = $_("playerBottom").style.display;
            $_("recovery").style.zIndex = "2";
            lO10OIOlxzlO100OIYpr("recovery", "_FPVozobnovitNa_<br/>[" + getTimeFromMS(lll11I0lOt1br10I11Ypr) + "]")
        } else if (typeof allTimes[ident] != "undefined") {
            lll11I0lOt1br10I11Ypr = allTimes[ident][0];
            $_("recovery").style.display = $_("playerBottom").style.display;
            $_("recovery").style.zIndex = "2";
            lO10OIOlxzlO100OIYpr("recovery", allTimes[ident].d + "<br/>[" + getTimeFromMS(lll11I0lOt1br10I11Ypr) + "]")
        }
    } catch (e) {}
}

function lQO1lT_OpIQlOlOYpr() {
    if (rek_url != "") {
        if (ttmac) kjtYpr.popUp("lQO1lT_OpIQlOlOYpr false rek=" + rek_url, 2500);
        return
    }
    if (ttmac) kjtYpr.popUp("lQO1lT_OpIQlOlOYpr " + st, 2500);
    if (platform == "sams" || l0O1l101l1t_Y0lll1Ypr == "tizen" || l0O1l101l1t_Y0lll1Ypr == "jw") {
        if (getCur() < 1) return;
        var st = lll11I0lOt1br10I11Ypr - getCur();
        if (st > 0) lQ1llOmVIbIlO1lYpr(st);
        else l00II10LBpj1OIIIYpr(st)
    } else {
        totalTime = getTotal();
        if (isNaN(totalTime)) return;
        if (totalTime < 1) return;
        var sec = lll11I0lOt1br10I11Ypr;
        if (uaJ == "dune") {
            stb.setPositionInSeconds(sec)
        } else if (uaJ == "mag") {
            stb.SetPosTime(sec)
        } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
            videoLoad("on", media.playPosition);
            media.seek(sec * 1000)
        } else {
            videoLoad("on", video.currentTime);
            video.currentTime = sec
        }
    }
    lO10OIOlxzlO100OIYpr("recovery", "");
    lll11I0lOt1br10I11Ypr = 0
}

function SaveTime(mode) {
    try {
        try {
            if (rek_url != "" || is_rek) return
        } catch (e) {}
        if (platform == "sams" || platform == "android-device" || platform == "tizen") limit_arr = 1500;
        else limit_arr = 400;
        if (lastViewUrlGo)
            if (lastViewUrlOrig != lastViewUrl) {
                return
            }
        if (pstream && !is_vod() && (getTotal() < 300 || getTotal() > 11 * 3600)) {
            return
        }
        if (ident == "" || rek_url != "" || is_img(playUrl)) {
            return
        }
        if (plmini_on) return;
        if (typeof mode == 'undefined') mode = '0';
        curTime = getCur();
        totalTime = getTotal();
        if (curTime > 2 && totalTime > 0) {
            if (ftimes == null) ftimes = {};
            try {
                var st = 0,
                    id = null,
                    len = 0;
                for (i in ftimes) {
                    if (ftimes[i][2] < st || st == 0) {
                        id = i;
                        st = ftimes[i][2]
                    }
                    len++
                }
                if (len > limit_arr) delete ftimes[id];
                if (typeof ftimes[ident] != "undefined") {
                    if (curTime > ftimes[ident][0] || totalTime - ftimes[ident][0] < 40) ftimes[ident][0] = curTime;
                    ftimes[ident][1] = totalTime;
                    ftimes[ident][2] = Math.ceil(T.inetTime / 10000000)
                } else ftimes[ident] = [curTime, totalTime, Math.ceil(T.inetTime / 10000000)];
                kjtYpr.lIllOVRj11lO10Ypr("times", l10O0I11gdZlOOIIYpr(ftimes))
            } catch (e) {}
        }
    } catch (e) {
        kjtYpr.popUp("Ошибка сохранения позиции видеофайла: " + e.message, 500)
    }
}

function getIdent(sel) {
    if (select < 0) return "";
    if (rek_url != "" && sel == null) return "";
    if (sel == null) sel = select;
    var gi = gV(kjtYpr.channels[sel], "ident");
    if (gi != "") {
        if (gi.length == 10) return gi;
        else return md5(gi).substr(0, 10)
    }
    var title = kjtYpr.channels[sel].title.replace("[HD] ", "").replace("[SD] ", "");
    var s = "";
    try {
        if (kjtYpr.channels[sel].stream_url.indexOf("audio") == 0) return "";
        s = (inset["tab" + insetActive].length > 1) ? inset["tab" + insetActive][inset["tab" + insetActive].length - 1].title + "-" + title : "-" + title;
        s = s.replace(/_FPGlobPoisk_.*?"/, "");
        return md5(s).substr(0, 10)
    } catch (e) {}
    return ""
}

function setWhitestripes() {
    if (whitestripes < 1) {
        $_("whitestripes1").style.display = "none";
        $_("whitestripes2").style.display = "none"
    } else {
        if (whitestripes > 100) whitestripes = 100;
        $_("whitestripes1").style.display = "block";
        $_("whitestripes2").style.display = "block";
        $_("whitestripes1").style.height = whitestripes + "px";
        $_("whitestripes2").style.height = whitestripes + "px";
        $_("whitestripes2").style.top = css_wh((720 - whitestripes)) + "px"
    }
}

function addqualhls4(s) {
    s = s.replace(/\r/g, "").replace(/\n/g, "");
    kjtYpr.YoutubeURL = {};
    var regexp = new RegExp("RESOLUTION=(.*?),.*?(http.*?m3u8)", "ig");
    var n = 0;
    while ((ch = regexp.exec(s)) != null) {
        var r = ch[1].split("x")[1];
        if (isNaN(r)) r = 1;
        if (timestamp > 2 || r <= 720) kjtYpr.YoutubeURL[r] = {
            "title": ch[1],
            "type": "",
            "url": ch[2],
            "audio": 1
        }
    }
}
var optScreen = ["_FPOriginal_", "_FPRastyanut_", "_FPRuchnoi_"];
var optScreenJW = ["_FPOriginal_", "_FPRastyanut_", "Fill"];
var optScreenJWE = ["uniform", "exactfit", "fill"];
var optLang = ["Нет", "ru", "rus", "ua", "en", "eng", "de", "fr", "lt", "et"],
    optLangSel = 0,
    optId = [];
var audioTrackHtml5 = 0;

function newOptions() {
    var l1100I1QvJubu0lIOOYpr = "",
        id = 0;
    $_("QualCh").style.top = css_wh(innerH - 540) + "px";
    try {
        if (typeof kjtYpr.YoutubeURL != "undefined" && kjtYpr.YoutubeURL != null) {
            $_("QualCh").style.top = css_wh(100) + "px";
            for (var i in kjtYpr.YoutubeURL) {
                if (kjtYpr.YoutubeURLselect != i) l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, i + "p " + gV(kjtYpr.YoutubeURL[i], "type"), !0, "enterqual" + i)
            }
        }
        if (uaJ == "mag") l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPGromkost_", !1, "magvolume");
        if (uaJ == "mag" || uaJ == "dune") {
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPProporcii_ _FPvideo_: " + kjtYpr.GL.xmode, !1, "magprop")
        } else if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPInFullScreen_", !0, "full");
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPGromkost_", !1, "playerjsvolume")
        } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "JW _FPEkran_: " + optScreenJW[kjtYpr.GL.xmode], !1, "jwstretching");
            if (jwplayer("jw").getAudioTracks().length > 1) {
                var curA = jwplayer("jw").getCurrentAudioTrack();
                if (curA == 0) curA = "Auto";
                l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "JW Audio: " + jwplayer("jw").getAudioTracks()[jwplayer("jw").getCurrentAudioTrack()].name + " (" + curA + "/" + jwplayer("jw").getAudioTracks().length + ")", !1, "jwaudio")
            }
            if (jwplayer("jw").getQualityLevels().length > 1) {
                var curA = jwplayer("jw").getCurrentQuality();
                if (curA == 0) curA = "Auto";
                l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "JW Quality: " + " (" + curA + "/" + (jwplayer("jw").getQualityLevels().length - 1) + ")", !1, "jwquality")
            }
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "JW Rate: " + jwplayer("jw").getPlaybackRate() + "x", !1, "jwrate")
        } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPEkran_: " + optScreen[kjtYpr.GL.xmode], !1, "tizenekran");
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPZvukDorozhka_ " + kjtYpr.a_num + "/" + Player.tnum, !1, "setaudio");
            if (Player.snum > 0) l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPSubtitles_ MKV: " + kjtYpr.s_num + "/" + Player.snum, !1, "setsubtitle")
        } else if (platform == "sams") {
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPGromkost_", !1, "samsvolume");
            if (Player.tnum > 20) Player.tnum = 1;
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPZvukDorozhka_ " + kjtYpr.a_num + "/" + Player.tnum, !1, "samsdor");
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPTip_ 3D", !1, "sams3d");
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPBuffer_: " + abf[kjtYpr.GL.buffer] + " Мб", !1, "samsbuf");
            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPEkran_: " + optScreen[kjtYpr.GL.xmode], !1, "samsekran");
            if (kjtYpr.GL.xmode == 2) {
                l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPShirina_: " + kjtYpr.GL.Pw + "%", !1, "samsekranPw");
                l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPVisota_: " + kjtYpr.GL.Ph + "%", !1, "samsekranPh")
            }
        } else {
            if (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPOpciiEkrana_", !0, "lgoptions");
            if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                try {
                    if (video.audioTracks != null)
                        if (video.audioTracks.length > 1) {
                            l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPZvukDorozhka_ " + video.audioTracks[audioTrackHtml5].language + " " + (audioTrackHtml5 + 1) + "/" + video.audioTracks.length, !1, "audioTracks");
                            for (var i = 0; i < video.audioTracks.length; i++) {}
                        }
                } catch (e) {}
                if (kjtYpr.GL.xmode == 0) l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPProporcii_ _FPvideo_ Auto", !1, "prophtml5");
                else l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPProporcii_ _FPvideo_ " + kjtYpr.GL.xmode, !1, "prophtml5");
                if (kjtYpr.GL.xmode == 4) {
                    kjtYpr.GL.Pw = parseFloat(kjtYpr.GL.Pw);
                    kjtYpr.GL.Ph = parseFloat(kjtYpr.GL.Ph);
                    if (kjtYpr.GL.Pw < 200) kjtYpr.GL.Pw = 1280;
                    if (kjtYpr.GL.Ph < 200) kjtYpr.GL.Ph = 720;
                    l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPShirina_: " + kjtYpr.GL.Pw + "", !1, "setpw");
                    l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPVisota_: " + kjtYpr.GL.Ph + "", !1, "setph")
                }
            }
            if (((uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") && l0O1l101l1t_Y0lll1Ypr == "media")) {
                l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPPredpDor_: " + optLang[optLangSel], !1, "lgzvdor")
            }
            if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPInFullScreen_", !0, "full")
        }
        if (subsrc.length > 0) {
            if (sub_sel == 0) l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPSubtitles_: _FPOtkl_", !1, "subtitle");
            else l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPSubtitles_: " + subsrc[sub_sel - 1][0], !1, "subtitle")
        }
        if (whitestripes < 1) l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPAdd stripes_:_FPOtkl._", !1, "whitestripes");
        else l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPAdd stripes_:" + whitestripes + "px", !1, "whitestripes");
        l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, sNext[kjtYpr.GL.next], !1, "rezhim");
        l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPDisplay time_: " + shint(kjtYpr.GL.time), !1, "time");
        l1100I1QvJubu0lIOOYpr += l0Q0OlOf0N101IYpr(id++, "_FPZakrit_", !0, "close");
        $_("QualCh").style.display = "block";
        kjtYpr.opLength = id;
        lO10OIOlxzlO100OIYpr("QualCh", l1100I1QvJubu0lIOOYpr);
        handler = "qual";
        lQ1I0l1y1GO0l1I1I1Ypr()
    } catch (e) {
        kjtYpr.popUp(e.message)
    }
}

function lQ1I0l1y1GO0l1I1I1Ypr() {
    if (kjtYpr.lIIl1ll1IGO_xc1llIlIYpr < 0) kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = kjtYpr.opLength - 1;
    else if (kjtYpr.lIIl1ll1IGO_xc1llIlIYpr == kjtYpr.opLength) kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = 0;
    for (var i = 0; i < kjtYpr.opLength; i++) {
        if (i == kjtYpr.lIIl1ll1IGO_xc1llIlIYpr) {
            $_("ql1100I1QvJubu0lIOOYpr" + i).style.color = "#FFFFFF"
        } else {
            $_("ql1100I1QvJubu0lIOOYpr" + i).style.color = "#888888"
        }
    }
}
var l110I0qquII11OYpr = null;

function lI0O1QI1lLFtS10I1I1Ypr() {
    return;
    if (curTime > 0 && totalTime > 0 && kjtYpr.GL.clear > 0) {
        if (!paused) {
            kjtYpr.lOIOO1QlPbx111OOYpr = curTime;
            lIO1IlIhslyl0OIQYpr(playUrl)
        } else {}
        if (kjtYpr.GL.clear > 0) l110I0qquII11OYpr = setTimeout("lI0O1QI1lLFtS10I1I1Ypr();", 1000 * 60 * kjtYpr.GL.clear)
    }
}
var lI1011uhqlWIlIlYpr = null,
    magprop = 1;

function magpropv() {
    if (uaJ == "dune") {
        if (kjtYpr.GL.xmode > 3) kjtYpr.GL.xmode = 1;
        if (kjtYpr.GL.xmode < 1) kjtYpr.GL.xmode = 3;
        stb.setAspectRatio(kjtYpr.GL.xmode - 1)
    } else if (uaJ == "mag") {
        if (kjtYpr.GL.xmode > 5) kjtYpr.GL.xmode = 1;
        if (kjtYpr.GL.xmode < 1) kjtYpr.GL.xmode = 5;
        if (kjtYpr.GL.xmode == 1) stb.SetAspect(0x10);
        else if (kjtYpr.GL.xmode == 2) stb.SetAspect(0x20);
        else if (kjtYpr.GL.xmode == 3) stb.SetAspect(0x30);
        else if (kjtYpr.GL.xmode == 4) stb.SetAspect(0x40);
        else if (kjtYpr.GL.xmode == 5) stb.SetAspect(0x50)
    }
    lOlI01hyFSW1QI1OlYpr("_FPProporcii_: " + kjtYpr.GL.xmode)
}
var curV = 1;

function lII1OIO0Nvu1Il00IYpr(x) {
    try {
        switch (optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr]) {
            case "audioTracks":
                try {
                    audioTrackHtml5 += x;
                    if (audioTrackHtml5 < 0) audioTrackHtml5 = video.audioTracks.length - 1;
                    else if (audioTrackHtml5 > video.audioTracks.length - 1) audioTrackHtml5 = 0;
                    for (var i = 0; i < video.audioTracks.length; i++) {
                        if (i == audioTrackHtml5) video.audioTracks[i].enabled = !0;
                        else video.audioTracks[i].enabled = !1
                    }
                    video.audioTracks[audioTrackHtml5].language + lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPZvukDorozhka_ " + video.audioTracks[audioTrackHtml5].language + video.audioTracks[audioTrackHtml5].label + " " + (audioTrackHtml5 + 1) + "/" + video.audioTracks.length)
                } catch (e) {
                    lOlI01hyFSW1QI1OlYpr(e.message)
                }
                break;
            case "samsvolume":
                if (x == -1) plaginAudio.SetVolumeWithKey(1);
                else if (x == 1) plaginAudio.SetVolumeWithKey(0);
                break;
            case "samsdor":
                Player.SEFSetNextAudioStream(x);
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPZvukDorozhka_ " + kjtYpr.a_num + "/" + Player.tnum);
                break;
            case "sams3d":
                Player.Set3Dtype(x);
                break;
            case "samsbuf":
                kjtYpr.GL.buffer = parseInt(kjtYpr.GL.buffer) + x;
                if (kjtYpr.GL.buffer < 0) kjtYpr.GL.buffer = 1;
                else if (kjtYpr.GL.buffer > 20) kjtYpr.GL.buffer = 20;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPBuffer_: " + abf[kjtYpr.GL.buffer] + " _FPMb_");
                Player.SetBuffer(kjtYpr.GL.buffer);
                break;
            case "samsekran":
                if (typeof kjtYpr.GL.xmode == "undefined") kjtYpr.GL.xmode = 0;
                kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode) + x;
                if (kjtYpr.GL.xmode > 2) kjtYpr.GL.xmode = 0;
                else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 2;
                Player.setSize(kjtYpr.GL.xmode);
                newOptions();
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "tizenekran":
                if (typeof kjtYpr.GL.xmode == "undefined") kjtYpr.GL.xmode = 0;
                kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode) + x;
                if (kjtYpr.GL.xmode > 2) kjtYpr.GL.xmode = 0;
                else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 2;
                setProp(kjtYpr.GL.xmode);
                newOptions();
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "samsekranPw":
                kjtYpr.GL.Pw = parseInt(kjtYpr.GL.Pw) + x;
                if (kjtYpr.GL.Pw > 200) kjtYpr.GL.Pw = 200;
                Player.setSize(kjtYpr.GL.xmode);
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPShirina_: " + kjtYpr.GL.Pw + "%");
                kjtYpr.lIllOVRj11lO10Ypr("xmodePw", kjtYpr.GL.Pw);
                break;
            case "samsekranPh":
                kjtYpr.GL.Ph = parseInt(kjtYpr.GL.Ph) + x;
                if (kjtYpr.GL.Ph > 200) kjtYpr.GL.Ph = 200;
                Player.setSize(kjtYpr.GL.xmode);
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPVisota_: " + kjtYpr.GL.Ph + "%");
                kjtYpr.lIllOVRj11lO10Ypr("xmodePh", kjtYpr.GL.Ph);
                break;
            case "videoqual":
                clearTimeout(lI1011uhqlWIlIlYpr);
                kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex += x;
                if (kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex > kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1) kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex = 0;
                else if (kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex < 0) kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex = kjtYpr.ll0Il1IRfsIQOO0Ypr.length - 1;
                lI1011uhqlWIlIlYpr = setTimeout(function () {
                    videoLoad("on");
                    if (Player.Sef) {
                        Player.SefPlugin.Execute('Stop');
                        Player.SefPlugin.Execute('ClearScreen');
                        Player.SefPlugin.Close()
                    } else {
                        if (Player.plugin != null) {
                            Player.plugin.Stop();
                            Player.plugin.ClearScreen()
                        }
                    };
                    Player.w = 0;
                    Player.h = 0;
                    Player.state = Player.STOPPED;
                    Player.play(kjtYpr.ll0Il1IRfsIQOO0Ypr[kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex][1]);
                    lO10OIOlxzlO100OIYpr("qual_text", kjtYpr.ll0Il1IRfsIQOO0Ypr[kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex][0])
                }, 1500);
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPKachestvo_: " + kjtYpr.ll0Il1IRfsIQOO0Ypr[kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex][0]);
                break;
            case "time":
                kjtYpr.GL.time = parseInt(kjtYpr.GL.time);
                if (isNaN(kjtYpr.GL.time)) kjtYpr.GL.time = 0;
                kjtYpr.GL.time += x;
                if (kjtYpr.GL.time < 0) kjtYpr.GL.time = 1;
                else if (kjtYpr.GL.time > 1) kjtYpr.GL.time = 0;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPDisplay time_: " + shint(kjtYpr.GL.time));
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "setpw":
                kjtYpr.GL.Pw = parseInt(kjtYpr.GL.Pw);
                kjtYpr.GL.Pw += x;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPShirina_: " + kjtYpr.GL.Pw + "");
                chvr = !0;
                setVideoResolution();
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "setph":
                kjtYpr.GL.Ph = parseInt(kjtYpr.GL.Ph);
                kjtYpr.GL.Ph += x;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPVisota_: " + kjtYpr.GL.Ph + "");
                chvr = !0;
                setVideoResolution();
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "setsubtitle":
                if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                    kjtYpr.s_num += x;
                    if (kjtYpr.s_num < 0) kjtYpr.s_num = Player.snum - 0;
                    else if (kjtYpr.s_num > Player.snum - 0) kjtYpr.s_num = 0;
                    if (kjtYpr.s_num == 0) webapis.avplay.setSilentSubtitle(!0);
                    else {
                        try {
                            webapis.avplay.setSilentSubtitle(!1);
                            webapis.avplay.setSelectTrack("TEXT", (kjtYpr.s_num + Player.snum_start - 1))
                        } catch (e) {
                            kjtYpr.popUp("Error: " + e.toString(), 2500)
                        }
                    }
                    lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPSubtitles_ " + kjtYpr.s_num + "/" + Player.snum)
                }
                break;
            case "setaudio":
                if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                    kjtYpr.a_num += x;
                    if (kjtYpr.a_num < 1) kjtYpr.a_num = Player.tnum - 0;
                    else if (kjtYpr.a_num > Player.tnum - 0) kjtYpr.a_num = 1;
                    if (Player.tnum < 2) {
                        lOlI01hyFSW1QI1OlYpr('_FPDrugZvDorNet_!')
                    } else {
                        try {
                            webapis.avplay.setSelectTrack("AUDIO", (kjtYpr.a_num + Player.tnum_start - 1))
                        } catch (e) {
                            kjtYpr.popUp("Error: " + e.message, 2500)
                        }
                    }
                    lOlI01hyFSW1QI1OlYpr("_FPZvukDorozhka_ " + kjtYpr.a_num + "/" + Player.tnum);
                    lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPZvukDorozhka_ " + kjtYpr.a_num + "/" + Player.tnum)
                }
                break;
            case "rezhim":
                kjtYpr.GL.next = parseInt(kjtYpr.GL.next);
                if (isNaN(kjtYpr.GL.next)) kjtYpr.GL.next = 0;
                kjtYpr.GL.next += x;
                if (kjtYpr.GL.next < 1) kjtYpr.GL.next = 3;
                else if (kjtYpr.GL.next > 3) kjtYpr.GL.next = 1;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, sNext[kjtYpr.GL.next]);
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "subtitle":
                sub_sel += x;
                if (sub_sel < 0) sub_sel = subsrc.length;
                if (sub_sel > subsrc.length) sub_sel = 0;
                if (sub_sel == 0) lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPSubtitles_: _FPOtkl_");
                else lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPSubtitles_: " + subsrc[sub_sel - 1][0]);
                lOl101lNI00OlYpr();
                lOlI01hyFSW1QI1OlYpr(" ");
                break;
            case "magvolume":
                if (uaJ == "mag") {
                    xVol += x * 5;
                    if (xVol > 100) xVol = 100;
                    if (xVol < 0) xVol = 0;
                    lOlI01hyFSW1QI1OlYpr("Громкость: " + xVol);
                    stb.SetVolume(xVol)
                }
                break;
            case "whitestripes":
                whitestripes += x;
                if (whitestripes < 0) whitestripes = 0;
                if (whitestripes < 1) lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPAdd stripes_:_FPOtkl._");
                else lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPAdd stripes_:" + whitestripes + "px");
                setWhitestripes();
                break;
            case "magprop":
                kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode) + x;
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                magpropv(kjtYpr.GL.xmode);
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPProporcii_ _FPvideo_: " + magprop);
                break;
            case "lgzvdor":
                optLangSel += x;
                if (optLangSel > optLang.length - 1) optLangSel = 0;
                else if (optLangSel < 0) optLangSel = optLang.length - 1;
                media.audioLanguage = optLang[optLangSel];
                kjtYpr.lIllOVRj11lO10Ypr("mlang", optLangSel);
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPPredpDor_: " + optLang[optLangSel]);
                break;
            case "full":
                if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
                    uplayer[l0O1l101l1t_Y0lll1Ypr].fullscreen();
                    $_("playerjs").style.width = "100%";
                    $_("playerjs").style.height = "100%"
                } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    launchFullScreen(video);
                    $_("video").style.width = "100%";
                    $_("video").style.height = "100%"
                } else launchFullScreen(media);
                $_("QualCh").style.display = "none";
                handler = "player";
                break;
            case "close":
                $_("QualCh").style.display = "none";
                handler = "player";
                break;
            case "lgoptions":
                llIOIlIbDll1QYpr();
                break;
            case "prophtml5":
                kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode) + x;
                if (kjtYpr.GL.xmode > 4) kjtYpr.GL.xmode = 0;
                else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 4;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPProporcii_ _FPvideo_ " + kjtYpr.GL.xmode);
                chvr = !0;
                setVideoResolution();
                newOptions();
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                break;
            case "playerjsvolume":
                curV += x * 0.1;
                if (curV > 1) curV = 1;
                else if (curV < 0) curV = 0;
                if (l0O1l101l1t_Y0lll1Ypr == "playerjs") {
                    uplayer[l0O1l101l1t_Y0lll1Ypr].volume(curV);
                    lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "_FPGromkost_ " + Math.ceil(curV * 100) + "%")
                }
                break;
            case "jwstretching":
                kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode) + x;
                if (kjtYpr.GL.xmode > 2) kjtYpr.GL.xmode = 0;
                else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 2;
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "JW _FPEkran_: " + optScreenJW[kjtYpr.GL.xmode]);
                kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                lIO1IlIhslyl0OIQYpr(playUrl, null, getCur());
                break;
            case "jwquality":
                var curA = jwplayer("jw").getCurrentQuality();
                curA += x;
                if (curA >= jwplayer("jw").getQualityLevels().length) curA = 0;
                else if (curA < 0) curA = jwplayer("jw").getQualityLevels().length - 1;
                jwplayer("jw").setCurrentQuality(curA);
                if (curA == 0) curA = "Auto";
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "JW Quality: " + " (" + curA + "/" + (jwplayer("jw").getQualityLevels().length - 1) + ")");
                break;
            case "jwaudio":
                var curA = jwplayer("jw").getCurrentAudioTrack();
                curA += x;
                if (curA >= jwplayer("jw").getAudioTracks().length) curA = 0;
                else if (curA < 0) curA = jwplayer("jw").getAudioTracks().length - 1;
                jwplayer("jw").setCurrentAudioTrack(curA);
                if (curA == 0) curA = "Auto";
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "JW Audio: " + jwplayer("jw").getAudioTracks()[jwplayer("jw").getCurrentAudioTrack()].name + " (" + curA + "/" + (jwplayer("jw").getAudioTracks().length) + ")");
                break;
            case "jwrate":
                var curA = jwplayer("jw").getPlaybackRate();
                curA += x * 0.25;
                if (curA > 4) curA = 0.25;
                else if (curA < 0.25) curA = 4;
                jwplayer("jw").setPlaybackRate(curA);
                lOlI01hyFSW1QI1OlYpr("Rate: " + curA + "x")
                lO10OIOlxzlO100OIYpr("opText" + kjtYpr.lIIl1ll1IGO_xc1llIlIYpr, "JW Rate: " + curA + "x");
                break;
            default:
                if (optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr].indexOf("enterqual") == 0) {
                    var q = optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr].split("enterqual")[1];
                    if (typeof kjtYpr.YoutubeURL[q] == "undefined") {
                        lOlI01hyFSW1QI1OlYpr("_FPOshibka_ _FPparsingaVideossilki_!");
                        return
                    }
                    var url = kjtYpr.YoutubeURL[q].url;
                    kjtYpr.YoutubeURLselect = q;
                    if (kjtYpr.YoutubeURL[q].audio != "1") url += "#AUDIO=" + kjtYpr.YoutubeURL[q].audio;
                    lOlI01hyFSW1QI1OlYpr("Play " + q + "p");
                    if (playUrlAudio != "" && sound != null) {
                        sound.pause();
                        sound.src = ""
                    }
                    lIO1IlIhslyl0OIQYpr(url, null, getCur());
                    $_("QualCh").style.display = "none";
                    handler = "player"
                }
                break
        }
    } catch (e) {}
}

function l0Q0OlOf0N101IYpr(id, text, click, x) {
    optId[id] = x;
    if (fhd) innerH = 1080;
    var s = "<div style='width: " + css_w(460) + "px;height: " + css_wh(43) + "px; overflow:hidden;' onmousemove=\"kjtYpr.lIIl1ll1IGO_xc1llIlIYpr=" + id + ";lQ1I0l1y1GO0l1I1I1Ypr();\" id='ql1100I1QvJubu0lIOOYpr" + id + "'><div onclick=\"lII1OIO0Nvu1Il00IYpr(-1);\" style='float:left;'><img width='" + css_w(40) + "' src='" + _img("_OI_turn_left.png") + "' ></div><div onclick=\"if(" + click + "==true) lII1OIO0Nvu1Il00IYpr(0);\"  id='opText" + id + "' style='font-size:" + css_wh(27) + "px;padding-top:3px;float:left;width:" + css_w(370) + "px;overflow:hidden;text-align:center;height:" + css_wh(32) + "px;'>" + text + "</div><div onclick=\"lII1OIO0Nvu1Il00IYpr(1);\" style='float:right;'><img width='" + css_w(40) + "' src='" + _img("_OI_turn_right.png") + "' ></div></div>";
    if (fhd) innerH = 720;
    return s
}

function launchFullScreen(element) {
    if (element.requestFullScreen) {
        element.requestFullScreen()
    } else if (element.mozRequestFullScreen) {
        element.mozRequestFullScreen()
    } else if (element.webkitRequestFullScreen) {
        element.webkitRequestFullScreen()
    }
}

function llIOIlIbDll1QYpr() {
    if (window.NetCastLaunchQMENU) {
        window.NetCastLaunchQMENU()
    }
}

function checkFileExtensions(url) {
    return !0;
    for (var i = 0; i < supportedMimeTypes.length; i++) {
        if (url.lastIndexOf(supportedMimeTypes[i]) > 0) {
            currentType = url.slice(url.indexOf(".") + 1, url.length);
            return !0
        }
    }
    return !1
};
var infPltimer = null;

function lOlI01hyFSW1QI1OlYpr(text) {
    if (text == null) text = "";
    clearTimeout(infPltimer);
    clearTimeout(inftimer);
    if (subsrc.length > 0) {
        if (sub_sel == 0) text += " _FPSubtitles_: _FPOtkl_ (" + subsrc.length + ")";
        else text += " _FPSubtitles_: " + subsrc[sub_sel - 1][0]
    }
    lO10OIOlxzlO100OIYpr("infPl", text);
    if ($_("playerBottom").style.display == "none" && $_("loading").style.display == "none") {
        inftimer = setTimeout('$_("player_time").style.display="block";$_("pstream").style.display="none";lO10OIOlxzlO100OIYpr("infPl","");', 1500);
        $_("player").style.display == "block";
        $_("playerBottom").style.display = "none";
        $_("buttonTop").style.display = "none";
        $_("recovery").style.display = "none";
        $_("ptt").style.display = "none";
        $_("pstream").style.display = "block";
        $_("player_time").style.display = "none";
        try {
            $_("ico_p").style.display = "none"
        } catch (e) {}
        try {
            $_("info_num").style.display = "none"
        } catch (e) {}
        try {
            $_("infR").style.display = "none"
        } catch (e) {}
        try {
            $_("epg_player").style.display = "none";
            $_("epg_player").style.height = "85px"
        } catch (e) {}
        triggerHide(4000)
    }
};
var chvr = !0;

function setVideoResolution() {
    if (kjtYpr.GL.xmode < 1 || !chvr || (platform == "android-device" && l0O1l101l1t_Y0lll1Ypr == "media")) return;
    if (l0O1l101l1t_Y0lll1Ypr != "html5" && l0O1l101l1t_Y0lll1Ypr != "ifrhtml5") {
        lOlI01hyFSW1QI1OlYpr("Доступно для HTML5 _FPpleer_!");
        return
    }
    lOlI01hyFSW1QI1OlYpr("_FPProporcii_: " + kjtYpr.GL.xmode);
    var xWidth = 0;
    var videoRatio = video.videoWidth / video.videoHeight,
        tagRatio = 16 / 9;
    if (kjtYpr.GL.xmode == 4) {
        kjtYpr.GL.Pw = parseFloat(kjtYpr.GL.Pw);
        kjtYpr.GL.Ph = parseFloat(kjtYpr.GL.Ph);
        if (kjtYpr.GL.Pw < 200) kjtYpr.GL.Pw = 1280;
        if (kjtYpr.GL.Ph < 200) kjtYpr.GL.Ph = 720;
        tagRatio = parseInt(kjtYpr.GL.Pw) / parseInt(kjtYpr.GL.Ph);
        video.style.top = "0px";
        video.style.left = "0px";
        video.style.width = kjtYpr.GL.Pw + "px";
        video.style.height = kjtYpr.GL.Ph + "px";
        if (videoRatio < tagRatio) {
            video.style.WebkitTransform = "scaleX(" + tagRatio / videoRatio + ")"
        } else {
            video.style.WebkitTransform = "scaleY(" + videoRatio / tagRatio + ")"
        }
        lOlI01hyFSW1QI1OlYpr("_FPProporcii_: " + kjtYpr.GL.xmode + " " + kjtYpr.GL.Pw + "x" + kjtYpr.GL.Ph)
    } else if (kjtYpr.GL.xmode <= 1) {
        if (videoRatio >= tagRatio - 0.01) {
            video.style.width = window.innerWidth + "px";
            video.style.height = window.innerHeight + "px";
            video.style.top = "0px";
            video.style.left = "0px";
            video.style.WebkitTransform = "scaleY(1)"
        } else {
            video.style.width = window.innerWidth + 16 + "px";
            video.style.height = window.innerHeight + 9 + "px";
            video.style.top = "-6px";
            video.style.left = "-8px";
            tagRatio = 4 / 3;
            if (videoRatio < tagRatio) {
                video.style.WebkitTransform = "scaleX(" + tagRatio / videoRatio + ")"
            } else {
                video.style.WebkitTransform = "scaleY(" + videoRatio / tagRatio + ")"
            }
        }
    } else if (kjtYpr.GL.xmode == 2) {
        if (videoRatio < tagRatio) {
            video.style.WebkitTransform = "scaleX(" + tagRatio / videoRatio + ")"
        } else {
            video.style.WebkitTransform = "scaleY(" + videoRatio / tagRatio + ")"
        }
        video.style.width = window.innerWidth + 16 + "px";
        video.style.height = window.innerHeight + 9 + "px";
        video.style.top = "-6px";
        video.style.left = "-8px"
    } else {
        tagRatio = 4 / 3;
        if (videoRatio < tagRatio) {
            video.style.WebkitTransform = "scaleX(" + tagRatio / videoRatio + ")"
        } else {
            video.style.WebkitTransform = "scaleY(" + videoRatio / tagRatio + ")"
        }
        video.style.width = xWidth ? "2576px" : "1728px";
        video.style.height = xWidth ? "1449px" : "976px";
        video.style.top = xWidth ? "-186px" : "-128px";
        video.style.left = xWidth ? "-328px" : "-224px"
    }
    if (kjtYpr.GL.xmode <= 1) {
        video.style.width = window.innerWidth + "px";
        video.style.height = window.innerHeight + "px";
        video.style.top = "0px";
        video.style.left = "0px"
    }
    chvr = !1
}

function trim2(str) {
    while (str.charAt(str.length - 1) == " ") {
        str = str.slice(0, str.length - 1)
    }
    while (str.charAt(0) == " ") {
        str = str.slice(1, str.length)
    }
    return str
}

function show_desc(mode) {
    if (mode) {
        $_("leftHalf").style.display = "block";
        $_("top").style.display = "block";
        $_("inset").style.display = "block";
        $_("top2").style.display = "block";
        $_("bottom").style.display = "block"
    } else {
        $_("leftHalf").style.display = "none";
        $_("top").style.display = "none";
        $_("inset").style.display = "none";
        $_("top2").style.display = "none";
        $_("bottom").style.display = "none"
    }
}
var subsrc = [],
    sub_sel = 0;

function l0llQlOl1LaOlQ1Ypr() {
    sub_sel = 0;
    audioTrackHtml5 = 0;
    curV = 1;
    $_("prekinfo").style.display = "none";
    $_("arrowtime").style.display = "none";
    lO10OIOlxzlO100OIYpr("qual_text", "");
    Player.cur_time = -1;
    Player.total_time = -1;
    curTime = -1;
    totalTime = -1;
    if (playUrlAudio != "") lO10OIOlxzlO100OIYpr("other", "");
    playUrlAudio = "";
    is_rek = !1;
    clearTimeout(advTimer);
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
    if (!norek) {
        insetIn(-1, "s", select);
        insetIn(0, "save")
    }
    norek = !1;
    clearTimeout(l110I0qquII11OYpr);
    kjtYpr.lOIOO1QlPbx111OOYpr = 0, curTime = 0, totalTime = 0, si = 0;
    kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = 0;
    kjtYpr.lIIl1ll1IGO_xc1llIlIYprQualIndex = 0;
    lastViewUrlGo = !1;
    arc_fwd = 0;
    arc_timestamp = 0;
    cntIndex = 1;
    chvr = !0
}

function videosub_timecode_min(tc) {
    try {
        tcpair = tc.split(' --> ');
        return l1O0lOITILeIIlOlYpr(tcpair[0])
    } catch (e) {
        return 0
    }
}

function videosub_timecode_max(tc) {
    try {
        tcpair = tc.split(' --> ');
        return l1O0lOITILeIIlOlYpr(tcpair[1])
    } catch (e) {
        return 1
    }
}

function l1O0lOITILeIIlOlYpr(tc) {
    tc1 = tc.split(',');
    tc2 = tc1[0].split(':');
    if (tc2.length == 2) tc2.unshift(0);
    secs = Math.floor(tc2[0] * 60 * 60) + Math.floor(tc2[1] * 60) + Math.floor(tc2[2]);
    return secs
}

function splitHls(xmlDoc, proxy) {
    var regexp = new RegExp("(https?://.*)", "ig");
    var n = 0,
        s = "";
    var U = [];
    while ((x = regexp.exec(xmlDoc)) != null) {
        U.push(x[1])
    }

    function getU(u) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status == 200) {
                    s += xhr.responseText;
                    n++;
                    if (n < U.length) getU(U[n]);
                    else {
                        parseVtt(s)
                    }
                } else {
                    if (proxy == null) {
                        return splitHls(xmlDoc, !0)
                    }
                }
            }
        };
        xhr.open('GET', u, !0);
        xhr.send()
    }
    getU(U[n])
}
var el = {
        "subtitles": []
    },
    timerSub, moveSub = 1;

function parseVtt(xmlDoc) {
    el.subtitles = [];
    records = xmlDoc.replace(/\r/g, "").split('\n\n');
    for (var r = 0; r < records.length; r++) {
        if (records[r].indexOf("-->") == -1) continue;
        record = records[r].split('\n');
        if (record[0].indexOf("-->") > 0) {
            record.unshift("");
            el.subtitles.push(record)
        } else {
            el.subtitles.push(record)
        }
    }
    lI1IOI10aO11QYpr()
}

function lOl101lNI00OlYpr() {
    var subtitlesrc = '';
    clearInterval(timerSub);
    if (subsrc.length > 0 && sub_sel > 0) {
        $_("subtitle").style.display = "block";
        subtitlesrc = subsrc[sub_sel - 1][1]
    } else {
        $_("subtitle").style.display = "none";
        return
    }
    if (typeof subsrc[sub_sel - 1][3] != "undefined") moveSub = subsrc[sub_sel - 1][3];
    else moveSub = 1;
    if (subtitlesrc.indexOf("md5hash") && subsrc[sub_sel - 1][2] != null && subsrc[sub_sel - 1][2] != "") {
        var xhr2 = new XMLHttpRequest();
        xhr2.onreadystatechange = function () {
            if (xhr2.readyState == 4) {
                if (xhr2.status == 200) {
                    subsrc[sub_sel - 1][2] = null;
                    subsrc[sub_sel - 1][1] = subsrc[sub_sel - 1][1].replace("md5hash", xhr2.responseText);
                    lOl101lNI00OlYpr()
                } else {
                    sub_sel = 0;
                    $_("subtitle").style.display = "none";
                    lOlI01hyFSW1QI1OlYpr("");
                    kjtYpr.popUp("Error download/parse subtitles<br>" + xhr2.status, 2000)
                }
            }
        };
        xhr2.open('GET', subsrc[sub_sel - 1][2], !0);
        xhr2.send();
        return
    }
    if (subtitlesrc.indexOf("LOCAL_IP") > 0) subtitlesrc = subtitlesrc.replace("LOCAL_IP", kjtYpr.GL.remoteip.split(":")[0]);
    timerSub = setInterval("ll1lllI1u1iWMOllIYpr();", 320);
    try {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status == 200) {
                    xmlDoc = xhr.responseText;
                    if (xmlDoc.indexOf("#EXTM3U") >= 0) {
                        return splitHls(xmlDoc)
                    }
                    parseVtt(xmlDoc)
                } else {
                    if (subtitlesrc.indexOf("/xhr.php") == -1) {
                        // subsrc[sub_sel - 1][1] = "http://195.88.208.101/xhr.php?u=" + encodeURIComponent(subsrc[sub_sel - 1][1]);
                        subsrc[sub_sel - 1][1] = "http://127.0.0.1/xhr.php?u=" + encodeURIComponent(subsrc[sub_sel - 1][1]);
                        lOl101lNI00OlYpr();
                        return
                    }
                    sub_sel = 0;
                    $_("subtitle").style.display = "none";
                    lOlI01hyFSW1QI1OlYpr("");
                    kjtYpr.popUp("Error download subtitles<br>" + xhr.status, 2000)
                }
            }
        };
        xhr.open('GET', subtitlesrc, !0);
        xhr.send()
    } catch (e) {
        sub_sel = 0;
        $_("subtitle").style.display = "none";
        lOlI01hyFSW1QI1OlYpr("");
        kjtYpr.popUp("Error download subtitles<br>" + e.message, 2000)
    }
    el.subcount = 0;
    if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
        video.addEventListener('seek', lI1IOI10aO11QYpr)
    }
}

function lI1IOI10aO11QYpr() {
    if ($_("subtitle").style.display == "none") return;
    el.subcount = 0;
    curTime = getCur() * moveSub;
    while (videosub_timecode_max(el.subtitles[el.subcount][1]) < curTime.toFixed(1)) {
        el.subcount++;
        if (el.subcount > el.subtitles.length - 1) {
            el.subcount = el.subtitles.length - 1;
            break
        }
    }
}

function ll1lllI1u1iWMOllIYpr() {
    try {
        if ($_("subtitle").style.display == "none") {
            clearInterval(timerSub);
            return
        }
        curTime = getCur() * moveSub;
        var subtitle = '';
        if (curTime.toFixed(1) >= videosub_timecode_min(el.subtitles[el.subcount][1]) && curTime.toFixed(1) <= videosub_timecode_max(el.subtitles[el.subcount][1])) {
            subtitle = el.subtitles[el.subcount][2];
            if (typeof el.subtitles[el.subcount][3] != "undefined") subtitle += "<br>" + el.subtitles[el.subcount][3]
        }
        if (curTime.toFixed(1) > videosub_timecode_max(el.subtitles[el.subcount][1]) && el.subcount < (el.subtitles.length - 1)) {
            el.subcount++
        }
        lO10OIOlxzlO100OIYpr("subtitle", subtitle)
    } catch (e) {
        lO10OIOlxzlO100OIYpr("subtitle", "")
    }
}
try {
    if (hashR) {
        window.addEventListener("popstate", function (n) {
            if (document.location.hash == "#" + numBack) {
                keyHandler({
                    "keycode": VK_BACK
                });
                numBack = numBack2;
                numBack2 = Math.random();
                document.location.hash = numBack2
            }
        })
    } else {
        var t = Math.random();
        history.pushState(t), window.addEventListener("popstate", function (n) {
            n.state === t ? keyHandler({
                "keycode": VK_BACK
            }) : history.forward()
        });
        var gnStartX = 0;
        var gnStartY = 0;
        var gnEndX = 0;
        var gnEndY = 0;
        window.addEventListener('touchstart', function (event) {
            gnStartX = event.touches[0].pageX;
            gnStartY = event.touches[0].pageY
        }, !1);
        window.addEventListener('touchmove', function (event) {
            gnEndX = event.touches[0].pageX;
            gnEndY = event.touches[0].pageY
        }, !1);
        window.addEventListener('touchend', function (event) {
            if (uaJ == "android") {}
        }, !1)
    }
    document.addEventListener('visibilitychange', function () {
        if (document.hidden) {} else {
            llllQO1WlII1lOYpr();
            l0I1l0lO0lsnG1I1QlYpr();
            updateWeather()
        }
    }, !0)
} catch (e) {}

function screensaver(m) {
    if (m && kjtYpr.GL.scrsaver > 0) {
        if (parseInt(kjtYpr.GL.scrsaver) == 1) {
            screensaver_mod(1);
            lO10OIOlxzlO100OIYpr("scrsaver", "<img id='scrimgid' style='position: absolute; bottom: 0px; right: 0px;' src='" + _img("_OI_scrsaver1.gif") + "' />")
        }
        if (parseInt(kjtYpr.GL.scrsaver) == 2) {
            screensaver_mod(1)
        }
    }
}

function screensaver_mod(m) {
    if (m == 1) {
        isScreensaver = !0;
        $_("scrsaver").style.width = "100%";
        $_("scrsaver").style.height = "100%";
        $_("scrsaver").style.display = "block";
        $_("scrsaver").style.zIndex = "3"
    } else if (m == 0) {
        isScreensaver = !1;
        $_("scrsaver").style.width = "0px";
        $_("scrsaver").style.height = "0px";
        $_("scrsaver").style.display = "none";
        $_("scrsaver").style.zIndex = "-1";
        lO10OIOlxzlO100OIYpr("scrsaver", "")
    }
}
var nkh = 0,
    brs = 0,
    tTimer = null,
    rrT = null,
    rrK = null,
    start1 = 0,
    kth = 0;

function keyHandler(event) {
    start1 = new Date().getTime();
    $_("main").focus();
    key = event.keyCode || event.keycode || event.which;
    if (typeof key == "undefined" || (key == 0 && platform != "tizen")) key = event.keyCode;
    if (isScreensaver) {
        screensaver_mod(0);
        return
    }
    screensavertimer = -1;
    clearTimeout(tTimer);
    if (handler == "iframe") {
        return;
        if (key == VK_BLUE) {
            if (iframeExit) document.location.reload();
            iframeExit++
        } else iframeExit = 0
    }
    if (hashR && key == VK_BACK) {
        if (++nkh > 3) return;
        numBack = numBack2;
        numBack2 = Math.random();
        document.location.hash = numBack2
    }
    if (key == 463) key = VK_PAUSE;
    if (key == 10009) key = VK_BACK;
    if (uaJ == "pa" && !fullBody && !1) {
        try {
            launchFullScreen(document.getElementsByTagName('body')[0])
        } catch (e) {
            kjtYpr.popUp(e.message, 4000)
        }
        fullBody = !0
    }
    if (platform == "android-device") {
        try {
            okey = String(key);
            var nn = 0;
            for (var x in event) nn++;
            if (handler == "menu" && okey.indexOf("/") == -1 && nn == 1 && (key == VK_DOWN || key == VK_UP)) {
                return
            } else if (okey.match(/red/i)) key = VK_RED;
            else if (okey.match(/green/i)) key = VK_GREEN;
            else if (okey.match(/blue/i)) key = VK_BLUE;
            else if (okey.match(/yellow/i)) key = VK_YELLOW;
            else if (okey.match(/info/i)) key = VK_INFO;
            else if (okey.match(/F5/)) key = VK_RED;
            else if (okey.match(/F6/)) key = VK_GREEN;
            else if (okey.match(/F7/)) key = VK_YELLOW;
            else if (okey.match(/F8/)) key = VK_BLUE;
            else if (okey.match(/menu/i)) {
                if (ttmac && handler == "menu") {
                    if (curCh()["playlist_url"].indexOf("?list=") > 0) {
                        var k = curCh()["playlist_url"].split("?list=")[1];
                        lO10OIOlxzlO100OIYpr("infoList", unescape(k))
                    } else lO10OIOlxzlO100OIYpr("infoList", curCh()["playlist_url"] + curCh("stream_url"))
                }
                key = VK_RED
            } else if (okey.match(/center/i)) key = VK_ENTER;
            else if (okey.match(/(channeldown|previous)/i)) key = VK_PAGE_DOWN;
            else if (okey.match(/(channelup|next)/i)) key = VK_PAGE_UP;
            else if (okey.match(/pause/i)) key = VK_PAUSE;
            else if (okey.match(/mediaplay/i)) key = VK_PLAY;
            else if (okey.match(/stop/i)) key = VK_STOP;
            else if (okey.match(/rewind/i)) key = VK_REWIND;
            else if (okey.match(/forward/i)) key = VK_FAST_FWD;
            else if (okey.match(/left/i)) key = VK_LEFT;
            else if (okey.match(/up/i)) key = VK_UP;
            else if (okey.match(/right/i)) key = VK_RIGHT;
            else if (okey.match(/down/i)) key = VK_DOWN;
            else if (okey.match(/(enter|inter)/i)) key = VK_ENTER;
            else {
                var kk = key.split("/");
                k1 = parseInt(kk[0]);
                k2 = parseInt(kk[1]);
                if (isNaN(k1)) k1 = 0;
                if (isNaN(k2)) k2 = 0;
                if (k1 > k2) key = k1;
                else if (k2 > k1) key = k1;
                if (key == 82) key = VK_RED
            }
        } catch (e) {}
    }
    if (key == 8 && platform != "sams") key = VK_BACK;
    if (booting) {
        if (((key == VK_RED || key == VK_A)) || (platform == "sams" && key == tvKey.KEY_TOOLS)) {
            if (brs++) sbrosok(!0);
            return
        }
    }
    if (key == rrK) {
        rrK = null;
        return
    } else {
        rrK = key;
        setTimeout("rrK=null;", 80)
    }
    if (box_low) $_("rightHalf").style.zIndex = $_('infoList').style.zIndex;
    if (platform == "sams") {
        if (key == VK_BACK || key == VK_EXIT) {
            if (kjtYpr.Exittrue < 2) {
                widgetAPI.blockNavigation(event)
            }
        } else if (key == tvKey.KEY_PANEL_VOL_UP || key == tvKey.KEY_VOL_UP) {
            plaginAudio.SetVolumeWithKey(0);
            return
        } else if (key == tvKey.KEY_VOL_DOWN || key == tvKey.KEY_PANEL_VOL_DOWN) {
            plaginAudio.SetVolumeWithKey(1);
            return
        } else if (key == tvKey.KEY_MUTE) {
            Player.isMuted = !Player.isMuted;
            pluginAudio.SetUserMute(Player.isMuted ? 1 : 0);
            return
        }
    } else if (key == VK_BACK || !0) {
        try {
            event.stopPropagation();
            event.preventDefault();
            event.stopImmediatePropagation()
        } catch (e) {}
    }
    if (uaJ == "mag") {
        if (key == KEY_VOLUME_PLUS) {
            xVol += 5;
            if (xVol > 100) xVol = 100;
            stb.SetVolume(xVol);
            lOlI01hyFSW1QI1OlYpr("Громкость: " + xVol)
        }
        if (key == KEY_VOLUME_MINUS) {
            xVol -= 5;
            if (xVol < 0) xVol = 0;
            stb.SetVolume(xVol);
            lOlI01hyFSW1QI1OlYpr("Громкость: " + xVol)
        }
        if (key > 30) kjtYpr.Exittrue = 0
    } else if (key != VK_EXIT) kjtYpr.Exittrue = 0;
    if (uaJ == "sony") {
        if (key == 112) key = VK_BLUE;
        else if (key == 113) key = VK_RED;
        else if (key == 114) key = VK_GREEN;
        else if (key == 115) key = VK_YELLOW;
        else if (key == 457) key = VK_INFO
    }
    if (startPay == 5) {
        kjtYpr.inf("Ожидайте несколько секунд...", 1000);
        return
    } else if (startPay == 1 && $_("popUp").style.display == "block") {
        return !1
    } else if (startPay == 2) {
        lO10OIOlxzlO100OIYpr("popUp", "");
        $_("popUp").style.display = "none";
        closeMenu();
        pop2on = !1;
        startPay = 0
    }
    if (handler != "confirm" && handler != "vk" && tscreen == "game" && (key == VK_BACK || key == VK_ENTER || key == VK_DOWN || key == VK_UP)) {
        if (key == VK_BACK) {
            if (!tomflight_f) tomflight_fail();
            else {
                tscreen = "main";
                $_("game").style.display = "none";
                $_("game").style.zIndex = "0"
            }
        }
        if (key == VK_UP) {
            tomflight_click()
        } else if (key == VK_DOWN) {
            tomflight_down()
        } else {
            tomflight_click()
        }
        return
    }
    if (handler == "confirm" && $_("vk").style.display == "block") handler = "vk";
    switch (parseInt(kjtYpr.GL["return"])) {
        case 1:
            if (key == VK_RED || key == VK_A) key = VK_BACK;
            break;
        case 2:
            if (key == VK_GREEN) key = VK_BACK;
            break;
        case 3:
            if (key == VK_YELLOW) key = VK_BACK;
            break;
        case 4:
            if (key == VK_BLUE) key = VK_BACK;
            break;
        case 5:
            if (key == VK_LEFT) {
                if (handler == "menu" && select >= 0 && !l1IOIIz1l0Ol110Ypr()) key = VK_BACK
            }
            break
    }
    if (pop2on && startPay == 0) {
        lO10OIOlxzlO100OIYpr("popUp", "");
        $_("popUp").style.display = "none";
        pop2on = !1
    }
    if (handler == "ext") {
        if (key == VK_RED || key == VK_A) {
            ext_close();
            return
        }
        if ($_("ext").style.display == "none" || typeof $_("frame-id") == "undefined") handler = "menu";
        if (key == VK_BACK) $_("frame-id").contentWindow.postMessage({
            'cmd': 'return',
            'text': ''
        }, "*")
    }
    switch (handler) {
        case "group":
            switch (key) {
                case VK_LEFT:
                case VK_ENTER:
                    handler = 'menu';
                    ll1lIOiIO0lO1IIIYpr = Math.random();
                    kjtYpr.lIOIOIBu0mO11llO0Ypr();
                    break;
                case VK_BACK:
                    handler = 'menu';
                    kjtYpr.lI11111bPNQ0III1Ypr();
                    break;
                case VK_DOWN:
                    listGroup(++chGroupSel);
                    break;
                case VK_UP:
                    listGroup(--chGroupSel);
                    break;
                default:
                    break
            }
            break;
        case "confirm":
            switch (key) {
                case VK_LEFT:
                    ll0111l1wxUIOlO1lYprx--;
                    if (ll0111l1wxUIOlO1lYprx < 0) ll0111l1wxUIOlO1lYprx = 1;
                    ll0111l1wxUIOlO1lYprmove();
                    break;
                case VK_RIGHT:
                    ll0111l1wxUIOlO1lYprx++;
                    if (ll0111l1wxUIOlO1lYprx > 1) ll0111l1wxUIOlO1lYprx = 0;
                    ll0111l1wxUIOlO1lYprmove();
                    break;
                case VK_ENTER:
                    ll0111l1wxUIOlO1lYprok();
                    break;
                case VK_BACK:
                    ll0111l1wxUIOlO1lYprx = 1;
                    ll0111l1wxUIOlO1lYprok();
                    break;
                case VK_DOWN:
                    if ($_("sourcecode") != null) {
                        $_("sourcecode").scrollTop += 200
                    }
                    break;
                case VK_UP:
                    if ($_("sourcecode") != null) {
                        $_("sourcecode").scrollTop -= 200
                    }
                    break;
                default:
                    break
            }
            break;
        case "move":
            switch (key) {
                case VK_DOWN:
                    kjtYpr.Edit(kjtYpr.l1IlIl01l0tUIl1IIYpr, "down");
                    handler = "move";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr("move");
                    break;
                case VK_LEFT:
                    kjtYpr.Edit(kjtYpr.l1IlIl01l0tUIl1IIYpr, "left");
                    handler = "move";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr("move");
                    break;
                case VK_RIGHT:
                    kjtYpr.Edit(kjtYpr.l1IlIl01l0tUIl1IIYpr, "right");
                    handler = "move";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr("move");
                    break;
                case VK_UP:
                    kjtYpr.Edit(kjtYpr.l1IlIl01l0tUIl1IIYpr, "up");
                    handler = "move";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr("move");
                    break;
                case VK_BACK:
                case VK_ENTER:
                    handler = "menu";
                    kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
                    break
            }
            break;
        case "context":
            switch (key) {
                case VK_DOWN:
                    if (subMenu.length) kjtYpr.l1l0l1OvIo1ll001lYprPos(++sublllIOl1r11OIl1Ypr, !0);
                    else kjtYpr.l1l0l1OvIo1ll001lYprPos(++lllIOl1r11OIl1Ypr);
                    break;
                case VK_UP:
                    if (subMenu.length) kjtYpr.l1l0l1OvIo1ll001lYprPos(--sublllIOl1r11OIl1Ypr, !0);
                    else kjtYpr.l1l0l1OvIo1ll001lYprPos(--lllIOl1r11OIl1Ypr);
                    break;
                case VK_ENTER:
                    subMenuEnter();
                    break;
                case VK_RED:
                case VK_A:
                case VK_BACK:
                case 8:
                case 220:
                    Menu = [];
                    closeMenu();
                    handler = "menu";
                    break
            }
            break;
        case "vk":
            livecaret = !0;
            clearTimeout(livecarettimer);
            livecarettimer = setTimeout("livecaret=false;", 2500);
            switch (key) {
                case VK_0:
                    VK.enter(0);
                    break;
                case VK_1:
                    VK.enter(1);
                    break;
                case VK_2:
                    VK.enter(2);
                    break;
                case VK_3:
                    VK.enter(3);
                    break;
                case VK_4:
                    VK.enter(4);
                    break;
                case VK_5:
                    VK.enter(5);
                    break;
                case VK_6:
                    VK.enter(6);
                    break;
                case VK_7:
                    VK.enter(7);
                    break;
                case VK_8:
                    VK.enter(8);
                    break;
                case VK_9:
                    VK.enter(9);
                    break;
                case VK_DOWN:
                    if (VK.pos[0] == 3 || kjtYpr.lOOlOIIOlcsICI0l1QYpr > -1) {
                        if (kjtYpr.l1lIIOl110Ip101lYpr.length > 0) {
                            if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) kjtYpr.lOOlOIIOlcsICI0l1QYpr = 0;
                            else kjtYpr.lOOlOIIOlcsICI0l1QYpr++;
                            kjtYpr.lO1IIOIIW1lBO11IlYpr();
                            if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == kjtYpr.l1lIIOl110Ip101lYpr.length - 1 && VK.pos[0] == 3) VK.pos[0]++
                        } else VK.pos[0]++
                    } else VK.pos[0]++;
                    VK.setpos();
                    break;
                case VK_UP:
                    if (VK.pos[0] == 0 || kjtYpr.lOOlOIIOlcsICI0l1QYpr > -1) {
                        if (kjtYpr.l1lIIOl110Ip101lYpr.length > 0) {
                            if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) kjtYpr.lOOlOIIOlcsICI0l1QYpr = kjtYpr.l1lIIOl110Ip101lYpr.length - 1;
                            else kjtYpr.lOOlOIIOlcsICI0l1QYpr--;
                            kjtYpr.lO1IIOIIW1lBO11IlYpr();
                            if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1 && VK.pos[0] == 0) VK.pos[0]--
                        } else VK.pos[0]--
                    } else VK.pos[0]--;
                    VK.setpos();
                    break;
                case VK_LEFT:
                    VK.pos[1]--;
                    VK.setpos();
                    break;
                case VK_RIGHT:
                    VK.pos[1]++;
                    VK.setpos();
                    break;
                case VK_ENTER:
                    if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) VK.enter(VK.l1OII0nIl1IOlQI1Ypr[VK.pos[0]][VK.pos[1]][VK.shift]);
                    else {
                        VK.enter("Enter");
                        kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
                        kjtYpr.lO1IIOIIW1lBO11IlYpr();
                        VK.pos[0] = 2;
                        VK.pos[1] = 12;
                        VK.setpos()
                    }
                    break;
                case VK_G:
                case VK_GREEN:
                case 35:
                    if (["playlist_url"].indexOf("allsearch.php") > 0) kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdSetSearch");
                    else VK.enter("_OI_international.png");
                    break;
                case VK_BLUE:
                    VK.enter("_OI_enter.png");
                    break;
                case 46:
                case VK_YELLOW:
                    clearQuick();
                    break;
                case VK_RED:
                    VK.enter("_OI_backspace.png");
                    break;
                case VK_BACK:
                case 220:
                    clearTimeout(xml_livetimer);
                    lastStr = "";
                    returnVK();
                    break;
                default:
                    if ((key >= 65 && key <= 90) || (key >= 186 && key <= 222) || key == 32 || key == 8 || key == 46) {
                        var s = "";
                        if (key == 46) {
                            VK.enter("_OI_backspace.png");
                            return
                        }
                        if (key == 186) s = ";";
                        if (key == 187) s = "=";
                        if (key == 188) s = ",";
                        if (key == 189) s = "-";
                        if (key == 190) s = ".";
                        if (key == 191) s = "/";
                        if (key == 192) s = "`";
                        if (key == 219) s = "[";
                        if (key == 220) s = "\\";
                        if (key == 221) s = "]";
                        if (key == 222) s = "'";
                        if (VK.l1OII0nIl1IOlQI1Ypr[1][0][0] == "q") {
                            if (s == "") s = String.fromCharCode(key).toLowerCase()
                        } else {
                            var from = "qwertyuiop[]asdfghjkl;'zxcvbnm,./".split("");
                            var dest = "йцукенгшщзхъфывапролджэячсмитьбю.".split("");
                            if (s == "") s = String.fromCharCode(key).toLowerCase();
                            s = s.replaceArray(from, dest)
                        }
                        if (VK.shift) s = s.toUpperCase();
                        if (s != "") VK.enter(s)
                    }
                    break
            }
            break;
        case "qual":
            switch (key) {
                case VK_BACK:
                case 8:
                case 220:
                    $_("QualCh").style.display = "none";
                    handler = "player";
                    break;
                case VK_LEFT:
                    lII1OIO0Nvu1Il00IYpr(-1);
                    break;
                case VK_RIGHT:
                    lII1OIO0Nvu1Il00IYpr(1);
                    break;
                case VK_UP:
                    kjtYpr.lIIl1ll1IGO_xc1llIlIYpr--;
                    lQ1I0l1y1GO0l1I1I1Ypr();
                    break;
                case VK_DOWN:
                    kjtYpr.lIIl1ll1IGO_xc1llIlIYpr++;
                    lQ1I0l1y1GO0l1I1I1Ypr();
                    break;
                case VK_ENTER:
                    lII1OIO0Nvu1Il00IYpr(0);
                    break;
                case VK_BLUE:
                    if (platform == "sams") {
                        kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode);
                        kjtYpr.GL.xmode += 1;
                        if (kjtYpr.GL.xmode > 2) kjtYpr.GL.xmode = 0;
                        else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 2;
                        Player.setSize(kjtYpr.GL.xmode);
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                        kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = 4;
                        newOptions()
                    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                        setProp(parseInt(++kjtYpr.GL.xmode))
                    }
                    break
            }
            break;
        case "menu":
            if ($_("ext").style.display == "block") {
                handler = "ext";
                kjtYpr.popUp("<img width='55' src='" + _img("_OI_important.png") + "' style='float:left;padding-right:5px;' /> " + "Запущен iframe<br>" + "Меню (красная кнопка) - Закрыть<br>" + "CH UP / CH DOWN - Открыть другую вкладку" + "", 2000);
                return
            }
            if (vk_visual) {
                if (key == VK_BACK || key == 8 || key == 220 || key == VK_LEFT || key == VK_RIGHT || key == VK_LEFT || key == VK_DOWN || key == VK_ENTER || key == VK_STOP) {
                    vk_visual = 0;
                    vk_Visualaudio();
                    return
                }
            }
            if (is_ifr()) {
                if (kjtYpr.IFRAME_BACK == 1) kjtYpr.lI11111bPNQ0III1Ypr();
                else {
                    kjtYpr.inf("_FPTo cancel loading Iframes, press again_", 2000, "yellow", !0);
                    kjtYpr.IFRAME_BACK = 1
                }
                return !1
            }
            b = key;
            a[0] = Date.now();
            switch (key) {
                case 221:
                    sendStat(1);
                    break;
                case VK_0:
                    setKey(0);
                    break;
                case VK_1:
                    setKey(1);
                    break;
                case VK_2:
                    setKey(2);
                    break;
                case VK_4:
                    setKey(4);
                    break;
                case VK_5:
                    setKey(5);
                    break;
                case VK_6:
                    setKey(6);
                    break;
                case VK_7:
                    setKey(7);
                    break;
                case VK_8:
                    setKey(8);
                    break;
                case VK_9:
                    setKey(9);
                    break;
                case VK_EXIT:
                    kjtYpr.Exittrue++;
                    if (kjtYpr.Exittrue < 2) {
                        kjtYpr.inf("_FPNazhmExitEsheRazDlyaVihoda_!", 1300, "red")
                    } else {
                        if (kjtYpr.GL.ts == 1) {
                            autoexport()
                        } else if (uaJ == "mag") {
                            window.location = resolution_portal
                        } else widgetAPI.sendReturnEvent()
                    }
                    break;
                case VK_PAGE_UP:
                case 33:
                    kth = 0;
                    if ($_("scrolled") != null) var nd = "scrolled";
                    else nd = "rightHalf";
                    if ($_(nd).scrollTop <= 0) {
                        $_(nd).scrollTop = 0;
                        if (getSelect() >= 0) {
                            if (kjtYpr.menu.length) kjtYpr.lIOIOIBu0mO11llO0Ypr(0);
                            kjtYpr.lIOIOIBu0mO11llO0Ypr(-1)
                        } else $_("scrollsite").scrollTop -= 250
                    } else $_(nd).scrollTop -= 25;
                    break;
                case VK_PAGE_DOWN:
                case 34:
                    if (getSelect() == -1) {
                        select = oldselect;
                        kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
                        return
                    } else {
                        if ($_("scrolled") != null) var nd = "scrolled";
                        else nd = "rightHalf";
                        var th = $_(nd).scrollTop;
                        $_(nd).scrollTop += 25;
                        if (th == $_(nd).scrollTop) {
                            if (nd == "scrolled" && kth < 3) {
                                kth++;
                                var div = document.createElement('div');
                                div.id = "blinkdiv";
                                div.style.position = "relative";
                                div.style.height = "0px";
                                div.style.marginTop = "-4px";
                                div.style.display = "block";
                                div.style.width = $_(nd).style.width + "px";
                                div.style.border = "2px solid red";
                                $_(nd).appendChild(div);
                                setTimeout('$_("blinkdiv").parentNode.removeChild($_("blinkdiv"));', 800)
                            } else $_("scrollsite").scrollTop += 250
                        } else kth = 0
                    }
                    break;
                case VK_BACK:
                case 8:
                case 220:
                    if (menuSubSel > -2) return menu_hideSub();
                    clearTimeout(backtimer);
                    backtimer = setTimeout(function () {
                        plmini_canplay = !0;
                        kjtYpr.lI11111bPNQ0III1Ypr()
                    }, 30);
                    break;
                case VK_FAST_FWD:
                case VK_RIGHT:
                case VK_LEFT:
                case VK_REWIND:
                case VK_RED:
                case VK_A:
                case VK_GREEN:
                case VK_B:
                case VK_YELLOW:
                case VK_C:
                    lQQOIOO01HvItO11QYpr(handler, key);
                    break;
                case VK_Q:
                case VK_3:
                    if (ttmac || document.location.href.indexOf("960_540") > 0) {
                        if (curCh()["playlist_url"].indexOf("?list=") > 0) {
                            var k = curCh()["playlist_url"].split("?list=")[1];
                            $_("infoList").innerHTML = unescape(k)
                        } else $_("infoList").innerHTML = curCh()["playlist_url"] + curCh("stream_url")
                    } else setKey(3);
                    break;
                case VK_UP:
                    osetPos(0, -1);
                    break;
                case VK_DOWN:
                    osetPos(0, 1);
                    break;
                case VK_ENTER:
                    if (getSelect() == -4) {
                        if (omni_hor == 0) gotoStart();
                        else if (omni_hor == 1) page_rs();
                        else if (omni_hor == 2) editUrl()
                    } else if (getSelect() == -3) menu_play();
                    else if (getSelect() == -2) sidebar_play();
                    else if (getSelect() == -1) kjtYpr.PlayInset();
                    else {
                        if (plmini_on && curCh()["playlist_url"] == "") {
                            curTime = getCur();
                            if (curTime > 0) {
                                if (rek_url != "") {
                                    rek_url = "";
                                    is_adult = !0
                                }
                                ident = getIdent(select);
                                if (playIdent != ident) {
                                    lI1lI00l1gX0l0l0OYpr();
                                    setTimeout("kjtYpr.l0lI10EMI1I10Ypr();", 200)
                                } else {
                                    l0llQlOl1LaOlQ1Ypr();
                                    lI1l1IOllHHCTuO0OlOYpr(playUrl);
                                    if (platform == "sams") {
                                        setfon(!0);
                                        Player.OnBufferingComplete()
                                    }
                                    plmini_on = !1
                                }
                            } else {
                                if (curTime > 0) SaveTime("plmini");
                                lI1lI00l1gX0l0l0OYpr();
                                setTimeout("kjtYpr.l0lI10EMI1I10Ypr();", 200)
                            }
                        } else kjtYpr.l0lI10EMI1I10Ypr()
                    }
                    break;
                case VK_BLUE:
                    gotoStart();
                    break;
                case VK_P:
                case VK_PLAY:
                    if (is_iptv > 2) {
                        play_mini()
                    } else {
                        if (lOlI1OII1UehOl1lIOIOYpr) {
                            if (parseInt($_('vk_audio_pos').style.width) < 2 || stopped) {
                                l0OO10QIvTrl10lYpr();
                                $_("vk_play_button").style.display = "none"
                            } else goMedia()
                        }
                    }
                    break;
                case VK_PAUSE:
                    if (lOlI1OII1UehOl1lIOIOYpr) pauseMedia();
                    break;
                case VK_STOP:
                case VK_S:
                    clearTimeout(rettimer);
                    if (lOlI1OII1UehOl1lIOIOYpr && stopped) {
                        try {
                            $_("vk_audio").style.display = "none";
                            $_("vk_audio").style.zIndex = "-2";
                            $_("vk_play_button").style.display = "block"
                        } catch (e) {}
                    }
                    try {
                        if (minimize) {
                            minimizeplayer(!1)
                        }
                        lI1lI00l1gX0l0l0OYpr();
                        page_rs({
                            "src": "_stop"
                        })
                    } catch (e) {}
                    break
            }
            break;
        case "player":
            showPlayer();
            if (rek_url != "" && is_rek) {
                if (key == VK_LEFT) {
                    rek_sel--;
                    rekBox()
                }
                if (key == VK_RIGHT) {
                    rek_sel++;
                    rekBox()
                }
                if (key == VK_PAUSE) pauseMedia();
                else if (paused) goMedia();
                else if (key == VK_ENTER) {
                    if (rek_sel == 0 && Point["ClickThrough"] != "") {
                        pauseMedia();
                        ll0111l1wxUIOlO1lYpr(62, "Перейти по обьявлению <b>" + Point["linkTxt"] + "</b>?<br>" + (Point["ClickThrough"].indexOf("html://") == 0 ? "ForkPlayer при этом будет закрыт!" : Point["ClickThrough"]))
                    } else if (Point["skipTime"] > 0 && Point["skipTime"] < getCur()) {
                        pauseMedia();
                        endrek();
                        rek_url = "";
                        setTimeout(function () {
                            l1I1lllp1Fu1O0lYpr(Point["skip"], "skip")
                        }, 150);
                        return
                    }
                }
                return !1
            }
            b = "player" + key;
            a[0] = Date.now();
            switch (key) {
                case VK_0:
                    setPercent(0);
                    break;
                case VK_1:
                    setPercent(10);
                    break;
                case VK_2:
                    setPercent(20);
                    break;
                case VK_3:
                    setPercent(30);
                    break;
                case VK_4:
                    setPercent(40);
                    break;
                case VK_5:
                    setPercent(50);
                    break;
                case VK_6:
                    setPercent(60);
                    break;
                case VK_7:
                    setPercent(70);
                    break;
                case VK_8:
                    setPercent(80);
                    break;
                case VK_9:
                    setPercent(90);
                    break;
                case VK_FAST_FWD:
                    lQ1llOmVIbIlO1lYpr();
                    break;
                case VK_REWIND:
                    l00II10LBpj1OIIIYpr();
                    break;
                case 259:
                case 10190:
                    flastView();
                    break;
                case VK_L:
                case VK_INFO:
                    if ($_("loading").style.display == "block") $_("loading").style.display = "none";
                    info_mode++;
                    if (info_mode > 4) {
                        info_mode = 0;
                        hidePlayer()
                    }
                    if (info_mode == 1) {} else if (info_mode == 2) {
                        info_mode++;
                        hidePlayer()
                    } else if (info_mode == 3) {
                        hidePlayer()
                    } else if (info_mode == 4) {
                        hidePlayer()
                    }
                    if (info_mode > 0) return;
                    break;
                case VK_O:
                case 10252:
                    if (paused) {
                        if (lll11I0lOt1br10I11Ypr > 0) {
                            lQO1lT_OpIQlOlOYpr()
                        } else goMedia()
                    } else pauseMedia();
                    break;
                case VK_PAUSE:
                    pauseMedia();
                    break;
                case VK_PLAY:
                    if (lll11I0lOt1br10I11Ypr > 0) {
                        lQO1lT_OpIQlOlOYpr()
                    } else goMedia();
                    break;
                case VK_STOP:
                case VK_EXIT:
                case VK_BACK:
                    lI1lI00l1gX0l0l0OYpr();
                    break;
                case VK_Y:
                case VK_YELLOW:
                    if (is_vivat() > 2) {
                        try {
                            if (typeof curCh()["url_templ"] != "undefined") {
                                kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdVivatArc");
                                minimizeplayer(!0)
                            } else kjtYpr.popUp("Для этого канала нет архива!", 1500)
                        } catch (r) {}
                    } else if (is_iptv > 2) {
                        minimizeplayer(!0);
                        kjtYpr.l1l0l1OvIo1ll001lYprPlay("cmdEpg")
                    } else if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                        kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = 0;
                        optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr] = "jwquality";
                        lII1OIO0Nvu1Il00IYpr(1)
                    }
                    break;
                case VK_A:
                case VK_RED:
                    minimizeplayer(!0);
                    break;
                case VK_BLUE:
                    if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                        kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = 0;
                        optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr] = "jwstretching";
                        lII1OIO0Nvu1Il00IYpr(1)
                    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                        if (typeof kjtYpr.GL.xmode == "undefined") kjtYpr.GL.xmode = 0;
                        kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode) + 1;
                        if (kjtYpr.GL.xmode > 2) kjtYpr.GL.xmode = 0;
                        else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 2;
                        setProp(kjtYpr.GL.xmode);
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
                    } else if (platform == "sams") {
                        kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode);
                        kjtYpr.GL.xmode += 1;
                        if (kjtYpr.GL.xmode > 2) kjtYpr.GL.xmode = 0;
                        else if (kjtYpr.GL.xmode < 0) kjtYpr.GL.xmode = 2;
                        Player.setSize(kjtYpr.GL.xmode);
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
                    } else if (uaJ == "mag" || uaJ == "dune") {
                        magpropv(++kjtYpr.GL.xmode)
                    } else if (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") {
                        llIOIlIbDll1QYpr()
                    } else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                        kjtYpr.GL.xmode = parseInt(kjtYpr.GL.xmode);
                        kjtYpr.GL.xmode += 1;
                        if (kjtYpr.GL.xmode > 4) kjtYpr.GL.xmode = 0;
                        chvr = !0;
                        setVideoResolution();
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
                    }
                    break;
                case VK_GREEN:
                    if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                        kjtYpr.lIIl1ll1IGO_xc1llIlIYpr = 0;
                        optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr] = "jwaudio";
                        lII1OIO0Nvu1Il00IYpr(1)
                    } else if (l0O1l101l1t_Y0lll1Ypr == "tizen") {
                        var trackInfo = webapis.avplay.getTotalTrackInfo();
                        Player.tnum = 0;
                        Player.snum = 0;
                        Player.tnum_start = -1;
                        Player.snum_start = -1;
                        var s = "";
                        for (var i = 0; i < trackInfo.length; i++) {
                            s += trackInfo[i].type + "<br>";
                            if (trackInfo[i].type == "AUDIO") {
                                if (Player.tnum_start < 0) Player.tnum_start = i;
                                Player.tnum++
                            }
                            if (trackInfo[i].type == "TEXT") {
                                if (Player.snum_start < 0) Player.snum_start = i;
                                Player.snum++
                            }
                        }
                        optId[kjtYpr.lIIl1ll1IGO_xc1llIlIYpr] = "setaudio";
                        lII1OIO0Nvu1Il00IYpr(1)
                    } else if (platform == "sams") {
                        if (Player.total_time > 0) {
                            Player.SEFSetNextAudioStream(1)
                        } else lOlI01hyFSW1QI1OlYpr("Сейчас недоступно!")
                    } else {
                        if (l0O1l101l1t_Y0lll1Ypr == "media" && tFlp == "lg") {
                            if (pstream) var type = "application/x-netcast-av";
                            else type = "video/mp4";
                            lO10OIOlxzlO100OIYpr("jw", '<object type="' + type + '" preBufferingTime="8" audioLanguage="en" data="' + playUrl + '" width="100%" height="100%" id="media" autostart="true" downloadable="false"></object>');
                            media = $_("media");
                            setTimeout("media.play(1);", 200)
                        }
                    }
                    break;
                case VK_RIGHT:
                    if (playUrl == "description") {
                        plDesc -= css_wh(720);
                        if (plDesc > 0) plDesc = 0;
                        $_("jw").style.marginTop = plDesc + "px";
                        return
                    }
                    FsetFocus(1);
                    break;
                case VK_LEFT:
                    if (playUrl == "description") {
                        plDesc += css_wh(720);
                        if (plDesc > 0) plDesc = 0;
                        $_("jw").style.marginTop = plDesc + "px";
                        return
                    }
                    FsetFocus(-1);
                    break;
                case VK_UP:
                    if (playUrl == "description") {
                        plDesc += 15;
                        if (plDesc > 0) plDesc = 0;
                        $_("jw").style.marginTop = plDesc + "px";
                        return
                    }
                    if (rowID < 3) {
                        rowID++
                    }
                    if (!is_arc && !is_vod() && pstream && rowID == 2) rowID++;
                    if (rowID == 3) {
                        lOIO1lY1ula1IIlYpr = cntIndex;
                        cntIndex > 1 ? cntIndex = 1 : ""
                    }
                    try {
                        FsetFocus(0)
                    } catch (e) {
                        kjtYpr.popUp("Err set focus:<br>" + e.toString(), 3000);
                        lIO1IlIhslyl0OIQYpr(url)
                    }
                    break;
                case VK_DOWN:
                    if (playUrl == "description") {
                        plDesc -= 15;
                        $_("jw").style.marginTop = plDesc + "px";
                        return
                    }
                    if (rowID > 1) {
                        rowID--;
                        lOIO1lY1ula1IIlYpr != -1 ? cntIndex = lOIO1lY1ula1IIlYpr : ""
                    }
                    if (!is_arc && !is_vod() && pstream && rowID == 2) rowID--;
                    FsetFocus(0);
                    break;
                case VK_ENTER:
                    if ($_("playerBottom").style.display == "block") selectedButton();
                    break;
                case VK_PAGE_UP:
                    l11OlO1EMTi1OOl1Ypr();
                    break;
                case VK_PAGE_DOWN:
                    l11lIlQllugOllI1Ypr();
                    break;
                case VK_MUTE:
                    plVolume(0, !0)
                    break;
                case KEY_VOLUME_PLUS:
                    plVolume(10);
                    break;
                case KEY_VOLUME_MINUS:
                    plVolume(-10);
                    break
            }
            triggerHide();
            break
    }
    return !1
}

function lQQOIOO01HvItO11QYpr(mode, key) {
    switch (mode) {
        case "menu":
            switch (key) {
                case VK_N:
                case VK_FAST_FWD:
                    if (lOlI1OII1UehOl1lIOIOYpr) l0OO10QIvTrl10lYpr(null, ++vk_audio_sel);
                    break;
                case VK_REWIND:
                    if (lOlI1OII1UehOl1lIOIOYpr) l0OO10QIvTrl10lYpr(null, --vk_audio_sel);
                    break;
                case VK_BLUE:
                    gotoStart();
                    break;
                case VK_RED:
                case VK_A:
                    if ($_("ext").style.display == "block") {
                        handler = "menu";
                        lO10OIOlxzlO100OIYpr("ext", "");
                        $_("ext").style.display = "none";
                        return
                    }
                    if (minimize) {
                        minimizeplayer(!1)
                    } else kjtYpr.l1l0l1OvIo1ll001lYpr();
                    break;
                case VK_GREEN:
                case VK_B:
                    if (typeof curCh()["green"] == "object") {
                        kjtYpr.l0lI10EMI1I10Ypr(null, curCh()["green"])
                    } else kjtYpr.l1IOllIQV1ul00IlYpr("favorites");
                    break;
                case VK_YELLOW:
                case VK_C:
                    if (typeof curCh()["yellow"] == "object") {
                        kjtYpr.l0lI10EMI1I10Ypr(null, curCh()["yellow"])
                    } else if (curCh()["yellow_url"] != "") {
                        var ch = {};
                        ch.title = curCh()["yellow_title"];
                        ch.parser = curCh()["yellow_parser"];
                        ch.playlist_url = curCh()["yellow_url"];
                        kjtYpr.l0lI10EMI1I10Ypr(null, ch)
                    } else {
                        ll1lIOiIO0lO1IIIYpr = Math.random();
                        kjtYpr.l110l1lIPuoaO0I0IOYpr("mylist")
                    }
                    break;
                case VK_RIGHT:
                    osetPos(1, 0);
                    break;
                case VK_LEFT:
                    osetPos(-1, 0);
                    break
            }
            break
    }
}

function minimizeplayer(mode) {
    minimize = mode;
    if (mode) {
        hidePlayer(!0);
        $_("main").style.display = "block";
        $_("main").style.zIndex = "4";
        $_("main").style.background = "none";
        $_("main").style.opacity = "0.9";
        handler = "menu";
        kjtYpr.l0OlII0Ix1fI1I01Ypr("menu");
        linkOver();
        set_times()
    } else {
        $_("main").style.display = "none";
        $_("main").style.zIndex = "0";
        setfon();
        $_("main").style.opacity = "1";
        handler = "player"
    }
}

function trpt() {
    if (lll11I0lOt1br10I11Ypr > 0) {
        lQO1lT_OpIQlOlOYpr()
    }
}

function selectedButton() {
    rowID = parseInt(rowID);
    cntIndex = parseInt(cntIndex);
    if (rowID == 1 && cntIndex < 2) {} else if (rek_url != "") return;
    if (rowID == 1) {
        switch (cntIndex) {
            case 0:
                pauseMedia();
                break;
            case 1:
                if (lll11I0lOt1br10I11Ypr > 0 && rek_url == "") {
                    lQO1lT_OpIQlOlOYpr();
                    return
                }
                if (paused) goMedia();
                break;
            case 2:
                l00II10LBpj1OIIIYpr();
                break;
            case 3:
                lQ1llOmVIbIlO1lYpr();
                break;
            case 4:
                newOptions();
                break;
            case 5:
                flastView(!0);
                break;
            case 6:
                l11lIlQllugOllI1Ypr();
                cntIndex = 6;
                FsetFocus(0);
                break;
            case 7:
                l11OlO1EMTi1OOl1Ypr();
                cntIndex = 7;
                FsetFocus(0);
                break
        }
    } else if (rowID == 3) {
        switch (cntIndex) {
            case 0:
                minimizeplayer(!0);
                return;
                break;
            case 1:
                lI1lI00l1gX0l0l0OYpr();
                break
        }
    }
}
var lastView = -1,
    lastView2 = -1,
    lastViewUrl = "",
    lastViewUrl2 = "",
    lastViewTitle = "",
    lastViewTitle2 = "",
    lastViewUrlOrig = "",
    lastViewUrlGo = !1;

function flastView(m) {
    if (lastView2 < 0) {
        if (lastViewUrl2 != "") {
            return;
            try {
                if (platform == "sams") samsStop();
                else if (l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {
                    lO10OIOlxzlO100OIYpr("other", "");
                    video.src = ""
                } else if (l0O1l101l1t_Y0lll1Ypr == "html5") {
                    video.src = ""
                } else {
                    lO10OIOlxzlO100OIYpr("jw", "");
                    lO10OIOlxzlO100OIYpr("other", "")
                }
            } catch (e) {
                kjtYpr.popUp(e.message)
            }
            l0llQlOl1LaOlQ1Ypr();
            lI1l1IOllHHCTuO0OlOYpr(lastViewUrl2, {
                "title": lastViewTitle2,
                "stream_url": lastViewUrl2
            });
            lastViewUrlGo = !0
        }
    } else {
        select = lastView2;
        kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
        kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr)
    }
    if (m) {
        cntIndex = 5;
        FsetFocus(0)
    }
}

function l11lIlQllugOllI1Ypr() {
    if (typeof ChSel.playlist == "object") {
        PLINDEX--;
        if (PLINDEX < -1) PLINDEX = ChSel.playlist.length - 1;
        if (PLINDEX >= 0) {
            var ch = ChSel.playlist[PLINDEX];
            ch.playlist = ChSel.playlist;
            kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr, ch);
            return
        }
    }
    kjtYpr.lIOIOIBu0mO11llO0Ypr(--select);
    if (curCh("stream_url") != "") {
        easystop();
        kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr)
    } else lI1lI00l1gX0l0l0OYpr()
}
var PLINDEX = -1;

function l11OlO1EMTi1OOl1Ypr() {
    easystop();
    if (typeof ChSel.playlist == "object") {
        PLINDEX++;
        if (ChSel.playlist.length > PLINDEX) {
            var ch = ChSel.playlist[PLINDEX];
            ch.playlist = ChSel.playlist;
            kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr, ch);
            return
        }
    }
    kjtYpr.lIOIOIBu0mO11llO0Ypr(++select);
    if (curCh("stream_url") != "") {
        SaveTime();
        kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr)
    } else lI1lI00l1gX0l0l0OYpr()
}
var VK = {
    pos: [2, 7],
    last: [0, 0],
    last2: [0, 0],
    shift: 0,
    UrlSearch: null,
    focus: null,
};
VK.l1OII0nIl1IOlQI1Ypr = null;
VK.Show = function (id, mode) {
    $_("rightHalf").style.display = "block";
    $_("rightHalf").style.top = "11.8%";
    if (innerH > 720) $_("vk").style.top = "62%";
    else $_("vk").style.top = css_wh(445) + "px";
    if (select >= 0) ChSel = curCh();
    VK.US = [
        [
            ["1", "!"],
            ["2", "="],
            ["3", "#"],
            ["4", "$"],
            ["5", "%"],
            ["6", "^"],
            ["7", "&"],
            ["8", "*"],
            ["9", "("],
            ["0", ")"],
            [":", "+"],
            ["@", "-"],
            ["_OI_backspace.png", "_OI_backspace.png"]
        ],
        [
            ["q", "Q"],
            ["w", "W"],
            ["e", "E"],
            ["r", "R"],
            ["t", "T"],
            ["y", "Y"],
            ["u", "U"],
            ["i", "I"],
            ["o", "O"],
            ["p", "P"],
            ["[", "{"],
            ["]", "}"],
            ["_OI_international.png", "_OI_international.png"]
        ],
        [
            ["\\", "|"],
            ["a", "A"],
            ["s", "S"],
            ["d", "D"],
            ["f", "F"],
            ["g", "G"],
            ["h", "H"],
            ["j", "J"],
            ["k", "K"],
            ["l", "L"],
            ["_", ";"],
            ["'", '"'],
            ["_OI_enter.png", "_OI_enter.png"]
        ],
        [
            ["+", "#"],
            ["z", "Z"],
            ["x", "X"],
            ["c", "C"],
            ["v", "V"],
            ["b", "B"],
            ["n", "N"],
            ["m", "M"],
            [",", "<"],
            [".", ">"],
            ["/", "?"],
            ["_OI_space.png", "_OI_space.png"],
            ["_OI_shift.png", "_OI_shift.png"]
        ],
    ];
    VK.Russian = [
        [
            ["1", "!"],
            ["2", '"'],
            ["3", "\u2116"],
            ["4", ";"],
            ["5", "%"],
            ["6", ":"],
            ["7", "?"],
            ["8", "*"],
            ["9", "("],
            ["0", ")"],
            [":", "_"],
            ["@", "@"],
            ["_OI_backspace.png", "_OI_backspace.png"]
        ],
        [
            ["\u0439", "\u0419"],
            ["\u0446", "\u0426"],
            ["\u0443", "\u0423"],
            ["\u043A", "\u041A"],
            ["\u0435", "\u0415"],
            ["\u043D", "\u041D"],
            ["\u0433", "\u0413"],
            ["\u0448", "\u0428"],
            ["\u0449", "\u0429"],
            ["\u0437", "\u0417"],
            ["\u0445", "\u0425"],
            ["\u044A", "/"],
            ["_OI_international.png", "_OI_international.png"]
        ],
        [
            ["ф", "Ф"],
            ["\u044B", "І"],
            ["\u0432", "\u0412"],
            ["\u0430", "\u0410"],
            ["\u043F", "\u041F"],
            ["\u0440", "\u0420"],
            ["\u043E", "\u041E"],
            ["\u043B", "\u041B"],
            ["\u0434", "\u0414"],
            ["\u0436", "\u0416"],
            ["\u044D", "є"],
            ["і", "ї"],
            ["_OI_enter.png", "_OI_enter.png"]
        ],
        [
            ["\u044F", "\u042F"],
            ["\u0447", "\u0427"],
            ["\u0441", "\u0421"],
            ["\u043C", "\u041C"],
            ["\u0438", "\u0418"],
            ["\u0442", "\u0422"],
            ["\u044C", "\u042C"],
            ["\u0431", "\u0411"],
            ["\u044E", "\u042E"],
            [".", ","],
            ["+", "\u0401"],
            ["_OI_space.png", "_OI_space.png"],
            ["_OI_shift.png", "_OI_shift.png"]
        ],
    ];
    VK.Ukr = [
        [
            ["1", "!"],
            ["2", '"'],
            ["3", "\u2116"],
            ["4", ";"],
            ["5", "%"],
            ["6", ":"],
            ["7", "?"],
            ["8", "*"],
            ["9", "("],
            ["0", ")"],
            [":", "_"],
            ["-", "+"],
            ["_OI_backspace.png", "_OI_backspace.png"]
        ],
        [
            ["\u0439", "\u0419"],
            ["\u0446", "\u0426"],
            ["\u0443", "\u0423"],
            ["\u043A", "\u041A"],
            ["\u0435", "\u0415"],
            ["\u043D", "\u041D"],
            ["\u0433", "\u0413"],
            ["\u0448", "\u0428"],
            ["\u0449", "\u0429"],
            ["\u0437", "\u0417"],
            ["\u0445", "\u0425"],
            ["\u044A", "ї"],
            ["_OI_international.png", "_OI_international.png"]
        ],
        [
            ["ф", "Ф"],
            ["\u044B", "і"],
            ["\u0432", "\u0412"],
            ["\u0430", "\u0410"],
            ["\u043F", "\u041F"],
            ["\u0440", "\u0420"],
            ["\u043E", "\u041E"],
            ["\u043B", "\u041B"],
            ["\u0434", "\u0414"],
            ["\u0436", "\u0416"],
            ["\u044D", "є"],
            ["\\", "/"],
            ["_OI_enter.png", "_OI_enter.png"]
        ],
        [
            ["\u044F", "\u042F"],
            ["\u0447", "\u0427"],
            ["\u0441", "\u0421"],
            ["\u043C", "\u041C"],
            ["\u0438", "\u0418"],
            ["\u0442", "\u0422"],
            ["\u044C", "\u042C"],
            ["\u0431", "\u0411"],
            ["\u044E", "\u042E"],
            [".", ","],
            [",", "\u0401"],
            ["_OI_space.png", "_OI_space.png"],
            ["_OI_shift.png", "_OI_shift.png"]
        ],
    ];
    if (VK.l1OII0nIl1IOlQI1Ypr1 == null) VK.l1OII0nIl1IOlQI1Ypr1 = VK.Russian;
    if (VK.l1OII0nIl1IOlQI1Ypr2 == null) VK.l1OII0nIl1IOlQI1Ypr2 = VK.US;
    if (ChSel == null) VK.l1OII0nIl1IOlQI1Ypr = VK.l1OII0nIl1IOlQI1Ypr1;
    else if (ChSel.playlist_url == "cmdEnterlist") {
        VK.l1OII0nIl1IOlQI1Ypr = VK.l1OII0nIl1IOlQI1Ypr2
    } else VK.l1OII0nIl1IOlQI1Ypr = VK.l1OII0nIl1IOlQI1Ypr1;
    setTimeout(function () {
        if (startPay != 0) {
            $_('MenuCh').style.display = 'none';
            lO10OIOlxzlO100OIYpr('MenuCh', '');
            startPay = 0
        }
    }, 400);
    try {
        if (mode != null) VK.Mode = mode;
        else VK.Mode = 0;
        VK.id = id;
        VK.focus = $_(id);
        var html = "";
        for (i in VK.l1OII0nIl1IOlQI1Ypr) {
            for (j in VK.l1OII0nIl1IOlQI1Ypr[i]) {
                var but = VK.l1OII0nIl1IOlQI1Ypr[i][j][VK.shift];
                if (but.indexOf("_OI_") == 0) but = "<img src='" + _img(but) + "'>";
                html += "<div onmousemove=\"VK.pos[0]=" + i + ";VK.pos[1]=" + j + ";VK.setpos();\" " + "onclick=\"VK.enter(VK.l1OII0nIl1IOlQI1Ypr[VK.pos[0]][VK.pos[1]][VK.shift]);\" id='kb" + i + "" + j + "' style='margin:1px;padding: 0.1% 0%; border-radius:6px;float:left;font-size: 170%;width:7.2%;height:22%;overflow:hidden;'>" + but + "</div>"
            }
            html += "<br clear='both' />"
        }
        $_("vk").style.display = "block";
        $_("vk").style.textAlign = "center";
        $_("vk").style.verticalAlign = "middle";
        $_('infoList').style.zIndex = "1";
        lO10OIOlxzlO100OIYpr("vk", html);
        VK.setpos();
        handler = "vk";
        kjtYpr.l0OlII0Ix1fI1I01Ypr("VK");
        if (ChSel == null) VK.focus.type = "";
        else {
            if (typeof ChSel.type == "undefined") ChSel.type = "";
            if (ChSel.type == "password") VK.focus.type = ChSel.type
        }
    } catch (e) {}
    if (VK.Mode == 0) llIIl0IO0vMB0I0010Ypr(gV(ChSel, "value"))
};
VK.enter = function (str) {
    if (str.length == 1) {
        VK.focus.value += str;
        if (VK.shift == 1) {
            VK.shift = 0;
            VK.Show(VK.id)
        }
        try {} catch (e) {
            VK.focus.value = str
        }
        if (VK.Mode == 0) llIIl0IO0vMB0I0010Ypr(VK.focus.value)
    } else {
        switch (str) {
            case "_OI_shift.png":
                VK.shift = (VK.shift == 0) ? 1 : 0;
                VK.Show(VK.id);
                break;
            case "_OI_backspace.png":
                if (VK.focus.value.length > 0) VK.focus.value = VK.focus.value.substr(0, VK.focus.value.length - 1);
                llIIl0IO0vMB0I0010Ypr(VK.focus.value);
                break;
            case "_OI_space.png":
                VK.focus.value += " ";
                break;
            case "_OI_international.png":
                if (ChSel.playlist_url == "cmdEnterlist") {
                    if (VK.l1OII0nIl1IOlQI1Ypr2[1][0][0] == "q") VK.l1OII0nIl1IOlQI1Ypr2 = VK.Russian;
                    else VK.l1OII0nIl1IOlQI1Ypr2 = VK.US
                } else {
                    if (VK.l1OII0nIl1IOlQI1Ypr1[1][0][0] == "q") VK.l1OII0nIl1IOlQI1Ypr1 = VK.Russian;
                    else VK.l1OII0nIl1IOlQI1Ypr1 = VK.US
                }
                VK.Show(VK.id);
                break;
            case "_OI_enter.png":
                l11OllI0l1SAZgOOl1Ypr(VK.focus.value);
                break;
            case "Shift":
                VK.shift = (VK.shift == 0) ? 1 : 0;
                VK.Show(VK.id);
                break;
            case "CLEAR":
                VK.focus.value = "";
                break;
            case "Close":
                $_("vk").style.display = "none";
                kjtYpr.inputId = "";
                $_("main").style.display = "block";
                handler = "menu";
                kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
                break;
            case "Bksp":
                if (VK.focus.value.length > 0) VK.focus.value = VK.focus.value.substr(0, VK.focus.value.length - 1);
                llIIl0IO0vMB0I0010Ypr(VK.focus.value);
                break;
            case "Eng":
                VK.l1OII0nIl1IOlQI1Ypr = VK.US;
                VK.Show(VK.id);
                break;
            case "Rus":
                VK.l1OII0nIl1IOlQI1Ypr = VK.Russian;
                VK.Show(VK.id);
                break;
            case "Enter":
                l11OllI0l1SAZgOOl1Ypr(VK.focus.value);
                break;
            default:
                VK.focus.value += str;
                break
        }
    }
    if (kjtYpr.inputId == "unlockpass") {
        str = VK.focus.value;
        if (kjtYpr.GL.passwordkey == str) {
            if (kjtYpr.inputId2 == "cmdAddVivatRod") kjtYpr.Password2 = str;
            else kjtYpr.Password = str;
            $_("vk").style.display = "none";
            kjtYpr.inputId = "";
            $_("main").style.display = "block";
            handler = "menu";
            ll1lIOiIO0lO1IIIYpr = Math.random();
            kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
            ll1lIOiIO0lO1IIIYpr = Math.random();
            if (kjtYpr.inputId2 == "cmdAddVivatRod") kjtYpr.l1l0l1OvIo1ll001lYprPlay(kjtYpr.inputId2);
            else {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr();
                if (ChSel == null) page_rs({
                    "src": "_reload"
                });
                else kjtYpr.l0lI10EMI1I10Ypr()
            }
            if (kjtYpr.Password == "0000") kjtYpr.popUp("_FPViNeSmeniliPassRodKontrRekomendSm_</i>");
            else kjtYpr.popUp("<i>_FPParolDeistDk_</i>")
        }
    }
};
VK.setpos = function () {
    if (VK.last[0] == 4) {
        VK.pos[1] = VK.last2[1]
    }
    if (VK.pos[0] < 0) VK.pos[0] = VK.l1OII0nIl1IOlQI1Ypr.length - 1;
    if (VK.pos[1] < 0) VK.pos[1] = VK.l1OII0nIl1IOlQI1Ypr[VK.pos[0]].length - 1;
    if (VK.pos[0] > VK.l1OII0nIl1IOlQI1Ypr.length - 1) VK.pos[0] = 0;
    if (VK.pos[1] > VK.l1OII0nIl1IOlQI1Ypr[VK.pos[0]].length - 1) VK.pos[1] = 0;
    for (i in VK.l1OII0nIl1IOlQI1Ypr) {
        for (j in VK.l1OII0nIl1IOlQI1Ypr[i]) {
            if (i == VK.pos[0] && j == VK.pos[1] && kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) {
                $_("kb" + i + "" + j).style.backgroundColor = "#2478D0";
                $_("kb" + i + "" + j).style.color = "orange"
            } else {
                $_("kb" + i + "" + j).style.color = f_cols[kjtYpr.GL.color];
                $_("kb" + i + "" + j).style.backgroundColor = "#323c42"
            }
        }
    }
    VK.last2[0] = VK.last[0];
    VK.last2[1] = VK.last[1];
    VK.last[0] = VK.pos[0];
    VK.last[1] = VK.pos[1]
};

function lO0111lxMlIIl1IOYpr() {
    $_("vk").style.display = "none";
    kjtYpr.inputId = "";
    $_("main").style.display = "block";
    $_("player").style.display = "none";
    handler = "menu"
}

function getJserv() {
    // if (JtvServ == null) return "46.36.220.208";
    if (JtvServ == null) return "127.0.0.1";
    else return JtvServ
}

function lOlI11R1qyII110Ypr(ch) {
    var xs = "",
        xs2 = "",
        ttl = "&ttl=",
        logo = "&logo=";
    if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("?list=") > 0) {
        var tx = unescape(kjtYpr.l1IlIl01l0tUIl1IIYpr.split("?list=")[1])
    } else tx = kjtYpr.l1IlIl01l0tUIl1IIYpr;
    if (typeof epg_arr[tx] == "undefined") var b = !1;
    else b = !0;
    for (var index = 0; index < ch.length; index++) {
        if (ch[index].stream_url == "") continue;
        if (b && epg_arr[tx][ch[index].title] != undefined) var cc = epg_arr[tx][ch[index].title];
        else cc = jtvXML(ch[index]);
        if (cc == "") cc = l110II10zlBuI0110IYpr({
            "title": ch[index].title,
            "jtvname": ch[index].jtvname
        });
        if (cc == "") cc = jtvF(ch[index]);
        if (cc != "") {
            if (cc.indexOf("xmltv-") == 0) {
                var xf = cc.split("-");
                try {
                    if (gV(ch[index], "logo_30x30").indexOf("http") != 0) ch[index].logo_30x30 = JtvIMxmltv[xf[1]][xf[2]]
                } catch (e) {}
            } else if (ch[index].logo_30x30 == "") ch[index].logo_30x30 = "http://" + getJserv() + "/common/img/" + cc + ".png";
            ch[index].epg = cc;
            if (cc.indexOf("xmltv-") == 0) xs2 += cc + "-|-";
            else xs += cc + "-|-"
        }
        if (ch[index].logo_30x30 == "") ch[index].logo_30x30 = "" + _img("_OI_1px.png") + "";
        if (typeof ch[index].yellow != "object")
            if (gV(ch[index], "catchup") != "" || gV(ch[index], "catchup_days") != "" || gV(kjtYpr.global, "catchup") != "" || gV(kjtYpr.global, "catchup_days") != "") {
                if (gV(ch[index], "catchup_days") == "") {
                    if (gV(kjtYpr.global, "catchup_days") == "") ch[index].catchup_days = 3;
                    else ch[index].catchup_days = gV(kjtYpr.global, "catchup_days")
                }
                if (gV(ch[index], "catchup_source") == "") {
                    if (gV(kjtYpr.global, "catchup_source") == "") ch[index].catchup_source = "";
                    else ch[index].catchup_source = gV(kjtYpr.global, "catchup_source")
                }
                if (gV(ch[index], "catchup") == "") {
                    if (gV(kjtYpr.global, "catchup") == "") ch[index].catchup = "default";
                    else ch[index].catchup = gV(kjtYpr.global, "catchup")
                }
                if (ch[index].catchup_days > 0) {
                    var ac = {
                        "title": "_FPArchive_",
                        "playlist_url": gV(ch[index], "stream_url") + "#archive|" + gV(ch[index], "title") + "|" + cc + "|-" + ch[index].catchup_days + "|" + ch[index].catchup + "|" + ch[index].catchup_source
                    };
                    ac.SetTimeInterval = ch.SetTimeInterval;
                    ch[index].yellow = ac;
                    if (typeof ch[index].menu == "object") ch[index].menu.push(ac);
                    else ch[index].menu = [ac]
                }
            }
    }
    if (xs != "" || xs2 != "") {
        epg_last = 0;
        // if (xs != "") epg_src = "http://85.17.30.89/common/sip.php?do=apt&get=" + xs + ttl + logo;
        if (xs != "") epg_src = "http://127.0.0.1/common/sip.php?do=apt&get=" + xs + ttl + logo;
        else epg_src = "";
        // if (xs2 != "") epg_src2 = "http://195.88.208.101/obovse.ru/smarttv/api.php?do=xmltv&cmd=epg&src=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(JtvSRC)) + "&get=" + xs2;
        if (xs2 != "") epg_src2 = "http://127.0.0.1/obovse.ru/smarttv/api.php?do=xmltv&cmd=epg&src=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(JtvSRC)) + "&get=" + xs2;
        else epg_src2 = "";
        l00lI1I1FtuZI0OIYpr()
    }
}
var etst, errepg = 0;

function jtvF(ch) {
    try {
        for (j in JtvEF) {
            if (typeof JtvEF[j][ch.jtvname] != "undefined" || (ch.jtvname.indexOf("vivat") == 0)) return ch.jtvname;
            else if (typeof JtvCF[j][ch.title] != "undefined") return JtvCF[a[i]][ch.title];
            else if (typeof JtvEF[j][ch.title] != "undefined") return ch.title
        }
    } catch (e) {}
    return ""
}

function jtvXML(ch) {
    if (typeof JtvCFxmltv == "undefined") {
        loadxmltv()
    }
    try {
        for (j in JtvCFxmltv) {
            if (typeof JtvEFxmltv[j][ch.jtvname] != "undefined") {
                return "xmltv-" + j + "-" + ch.jtvname
            }
        }
        for (j in JtvCFxmltv) {
            if (typeof JtvCFxmltv[j][ch.title] != "undefined") {
                return "xmltv-" + j + "-" + JtvCFxmltv[j][ch.title]
            }
        }
    } catch (e) {}
    return ""
}
var chorig = "";

function l110II10zlBuI0110IYpr(ch, n) {
    var point = 0;
    if (typeof JtvC == "undefined") {
        clearTimeout(etst);
        etst = setTimeout(function () {
            errepg++;
            if (errepg < 7) {
                // AddToPage("http://85.17.30.89/common/jtv.js?vv=6");
                // AddToPage("http://46.36.220.208/common/jtv.js?vv=6");
                AddToPage("http://127.0.0.1/common/jtv.js?vv=6");
                AddToPage("http://127.0.0.1/common/jtv.js?vv=6");
                lOlI11R1qyII110Ypr(kjtYpr.channels)
            }
        }, 1900);
        return ""
    }
    if (typeof ch.jtvname == "undefined") ch.jtvname = "";
    if (ch.jtvname != "") {
        if (typeof JtvE[ch.jtvname] != "undefined" || ch.jtvname.indexOf("vivat") == 0) return ch.jtvname;
        for (j in JtvEF) {
            if (typeof JtvEF[j][ch.jtvname] != "undefined") return ch.jtvname
        }
    }
    if (typeof JtvC[ch.title] != "undefined") return JtvC[ch.title];
    else if (typeof JtvE[ch.title] != "undefined") return ch.title;
    else if (n == null) {
        chorig = l1l0IOIl_puQl1I1IYpr(l10O0I11gdZlOOIIYpr(ch));
        ch.title = ch.title.toLowerCase();
        try {
            ch.title = ch.title.trim()
        } catch (e) {}
        return l110II10zlBuI0110IYpr(ch, 1)
    } else if (n == ++point) {
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" 1000", "1000");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" and ", "+");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace("hd", "");
        ch.title = ch.title.replace("sd", "");
        try {
            ch.title = ch.title.trim()
        } catch (e) {}
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title + " (россия)";
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" (россия)", "");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title + " россия";
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" россия", "");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title + " hd";
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" hd", "");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" i", " 1");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" ii", "2");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace("інтер", "интер").replace("iнтер", "интер");
        ch.title = ch.title.replace("(ua)", "");
        ch.title = ch.title.replace("(en)", "");
        ch.title = ch.title.replace("(fr)", "");
        ch.title = ch.title.replace("Divan ", "");
        ch.title = ch.title.replace("music box", "musicbox");
        ch.title = ch.title.replace("2x2", "2х2");
        try {
            ch.title = ch.title.trim()
        } catch (e) {}
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(/_/g, " ");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(/ /g, "");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title + " ru";
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" ru", " ua");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(" ua", "");
        ch.title = ch.title.replace("1", " 1").replace("2", " 2").replace("3", " 3");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace("tv", "");
        try {
            ch.title = ch.title.trim()
        } catch (e) {}
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(".", "");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else if (n == ++point) {
        ch.title = ch.title.replace(/\(.*?\)/, "");
        return l110II10zlBuI0110IYpr(ch, ++n)
    } else {
        {
            for (j in JtvEF) {
                if (typeof JtvEF[j][chorig.title] != "undefined") return chorig.title
            }
            var s = chorig.title.toLowerCase();
            for (j in JtvCF) {
                if (typeof JtvCF[j][s] != "undefined") return JtvCF[j][s]
            }
        }
        return ""
    }
}

function dt(sec, b, b2, b3, offc) {
    sec = parseInt(sec);
    if (offc == null) sec += (parseInt(kjtYpr.GL.JTVRegion) + T.offset / 60) * 3600;
    var date = new Date(sec * 1000);
    var hours = "0" + date.getHours();
    var minutes = "0" + date.getMinutes();
    var d = "0" + date.getDate();
    var m = "0" + (1 + date.getMonth());
    if (b) s = d.substr(d.length - 2) + '.' + m.substr(m.length - 2);
    else s = "";
    if (b3) s += "." + date.getFullYear();
    if (b2) ss2 = ':' + ("0" + (sec % 60)).substr(("0" + (sec % 60)).length - 2);
    else ss2 = "";
    return s + " " + hours.substr(hours.length - 2) + ':' + minutes.substr(minutes.length - 2) + ss2
}
var prog_timer, epg_ch_full = {},
    ll1lO1OuWT0100Ypr_last = 0;

function ll1lO1OuWT0100Ypr(ch) {
    if (ch == null) ch = curCh();
    if (T.inetTime - ll1lO1OuWT0100Ypr_last < 1800000 || typeof ch.epg == "undefined") return;
    ll1lO1OuWT0100Ypr_last = T.inetTime;
    clearTimeout(prog_timer);
    var e = ch.epg;
    prog_timer = setTimeout(function () {
        if (handler == "menu" || handler == "player" || handler == "qual") {
            if (!modeGroup && typeof e != "undefined" && typeof epg_ch[e] != "undefined" && typeof epg_ch_full[e] == "undefined") {
                // if (e.indexOf("xmltv-") == 0) var u = "http://195.88.208.101/obovse.ru/smarttv/api.php?do=xmltv&cmd=epg&src=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(JtvSRC)) + "&mode=full&get=" + e;
                if (e.indexOf("xmltv-") == 0) var u = "http://127.0.0.1/obovse.ru/smarttv/api.php?do=xmltv&cmd=epg&src=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(JtvSRC)) + "&mode=full&get=" + e;
                // else u = "http://85.17.30.89/common/sip.php?do=full&get=" + e;
                else u = "http://127.0.0.1/common/sip.php?do=full&get=" + e;
                xhrt = new XMLHttpRequest();
                ch.description += "<center><img id='bloading' src='" + _img("_OI_b/loading.gif") + "' width=15 /></center>";
                if (handler != "vk") lO10OIOlxzlO100OIYpr("infoList", ch.description);
                xhrt.onreadystatechange = function () {
                    if (xhrt.readyState == 4) {
                        try {
                            $_("bloading").style.display = "none"
                        } catch (e) {}
                        var m = l1l0IOIl_puQl1I1IYpr(xhrt.responseText);
                        if (m != null) {
                            if (typeof m[e] == "object") {
                                epg_ch[e] = m[e];
                                epg_ch_full[e] = m[e];
                                if (e == ch.epg) {
                                    nj = "";
                                    ch.description = ch.title + "<br>";
                                    while (typeof epg_ch_full[e]["title" + nj] != "undefined") {
                                        ch.description += "<span style='color:rgb(197, 157, 157);'>" + dt(epg_ch_full[e]["start" + nj]) + " - " + dt(epg_ch_full[e]["end" + nj]) + "</span> " + epg_ch_full[e]["title" + nj] + "<br>";
                                        if (nj == "") nj = 2;
                                        else nj++
                                    }
                                    ch.description += "<div style='position:absolute;top:0px;width:98%;font-size:60%;text-align:right;vertical-align:top;'><span style='color:rgb(197, 157, 157);vertical-align:top;'>" + ch.epg + "</style> <img align='right' width=" + css_w(24) + " src='" + _img(ch.logo_30x30) + "' /></div>";
                                    if (handler != "vk") lO10OIOlxzlO100OIYpr("infoList", ch.description)
                                }
                            }
                        }
                    }
                };
                xhrt.open('GET', u, !0);
                xhrt.send()
            }
        }
    }, 5000)
}

function jsc_142427789(obj, timer) {
    var eup = !1;
    if (obj == null) var et = !0;
    else et = !1;
    if (obj != null) {
        if (epg_ch != null) {
            for (var j in obj) epg_ch[j] = obj[j]
        } else epg_ch = obj
    } else if (epg_ch != null) obj = epg_ch;
    else return;
    if (timer == null) epg_timer = setTimeout("epg_ch['now']=parseInt(epg_ch['now'])+60;jsc_142427789();", 60000);
    epg_time = obj.now;
    for (var i = 0; i < kjtYpr.channels.length; i++) {
        var e = kjtYpr.channels[i].epg;
        if (typeof e != "undefined" && typeof obj[e] != "undefined") {
            if (typeof epg_ch_full[e] != "undefined") obj[e] = epg_ch_full[e];
            kjtYpr.channels[i].description = kjtYpr.channels[i].title + "<br>";
            try {
                var w = 0;
                while (epg_time > obj[e].end && typeof obj[e].title2 != "undefined") {
                    var nj = "",
                        nk = 2;
                    while (typeof obj[e]["title" + nj] != "undefined") {
                        if (nj != "") nk = nj + 1;
                        obj[e]["title" + nj] = obj[e]["title" + nk];
                        obj[e]["start" + nj] = obj[e]["start" + nk];
                        obj[e]["end" + nj] = obj[e]["end" + nk];
                        nj = nk
                    }
                }
                w = Math.ceil(((epg_time - obj[e].start) / (obj[e].end - obj[e].start)) * css_w(410));
                var t = Math.ceil((obj[e].end - epg_time) / 60);
                if (t >= 0) {
                    t = "+" + t
                } else if (et) {
                    eup = !0
                }
            } catch (e) {}
            nj = "";
            while (typeof obj[e]["title" + nj] != "undefined") {
                kjtYpr.channels[i].description += "<span style='color:rgb(197, 157, 157);'>" + dt(obj[e]["start" + nj]) + " - " + dt(obj[e]["end" + nj]) + "</span> " + obj[e]["title" + nj] + "<br>";
                if (nj == "") nj = 2;
                else nj++
            }
            kjtYpr.channels[i].description += "<div style='position:absolute;top:0px;width:98%;font-size:60%;text-align:right;vertical-align:top;'><span style='color:rgb(197, 157, 157);vertical-align:top;'>" + kjtYpr.channels[i].epg + "</style> <img align='right' width=" + css_w(24) + " src='" + _img(kjtYpr.channels[i].logo_30x30) + "' /></div>";
            kjtYpr.channels[i].epgnow = {
                "title": obj[e].title,
                "time": t,
                "cur": w
            }
        }
    }
    if (T.inetTime - epg_last > 3600000) {
        l00lI1I1FtuZI0OIYpr();
        eup = 0
    }
    epgAppend();
    if (handler == "menu" && !modeGroup) {
        if (eup) l00lI1I1FtuZI0OIYpr()
    }
    if (handler == "group" || modeGroup) {}
}

function l00lI1I1FtuZI0OIYpr() {
    if (T.inetTime - epg_last < 60000 && T.inetTime > 0) {
        return
    }
    epg_last = T.inetTime;
    clearTimeout(epg_timer);
    if (epg_src != "") AddToPage(epg_src + "&" + Math.random());
    if (epg_src2 != "") {
        var x = epg_src2.split("&get=");
        PullDataFromPost(x[0] + "&mod=xhr&" + Math.random(), "get=" + encodeURIComponent(x[1]), "xmltv")
    }
}

function _L(s) {
    if (!0) return s;
    q = {
        "Инициализация плеера": "Initialization",
        "Загрузка...": "Loading...",
        "Загрузка.": "Loading.",
        "Меню": "Menu",
        "Закладки": "Bookmarks",
        "Внеш. закл.": "Ext. bookm.",
        "Старт меню": "Start",
        "Назад": "Back",
        "Пред.": "Prev.",
        "След.": "Next",
        "Язык": "Lang",
        "Пробел": "Space",
        "ВВОД": "ENTER",
        "Вверх": "Up",
        "Вниз": "Down",
        "Выбрать": "Select",
        "Настройки приложения": "Settings",
        "Настройки": "Settings",
        "Медиа плеер": "Media player",
        "HTML5 плеер": "HTML5 player",
        "Передвинуть": "Move",
        "Удалить из закладок": "Delete",
        "Перем. в Закладки / Разное": "Move to Bookmarks/Other",
        "Перем. в Закладки / Сериалы": "Move to Bookmarks/Serials",
        "Перем. в Закладки / Фильмы": "Move to Bookmarks/Films",
        "Перем. в Закладки / IPTV": "Move to Bookmarks/IPTV",
        "Добавить в Закладки / Разное": "Add to Bookmarks/Other",
        "Добавить в Закладки / Сериалы": "Add to Bookmarks/Serials",
        "Добавить в Закладки / Фильмы": "Add to Bookmarks/Films",
        "Добавить в Закладки / IPTV": "Add to Bookmarks/IPTV",
        "Закладки / Разное": "Bookmarks / Other",
        "Закладки / Сериалы": "Bookmarks / Serials",
        "Закладки / Фильмы": "Bookmarks / Films",
        "Закладки / IPTV": "Bookmarks / IPTV",
        "История просмотров": "History",
        "Очистить историю": "Clear history",
        "ВЫХОД": "EXIT",
        "Быстрый поиск": "Quick search",
        "История поисков": "Search history",
        " Вверх / Вниз - Передвинуть ENTER - Сохранить": "UP / DOWN - To move ENTER - To save",
        "Для доступа введите пароль": "Enter parent password",
        "Пароль действует до выхода из виджета.": "Password is valid until you exit the app",
        "Введите текст": "Enter text",
        "Жмите влево - вправо для изменения!": "Press left - right to change",
        "Пустая ссылка!": "Empty!",
        "_FPOshibka_ парсинга плейлиста!": "Error getting data!",
        "Стартовое меню": "Start Menu",
        "Января": "January",
        "Июля": "Jule",
        "Августа": "August",
        "Сентября": "September",
        "Среда": "Wednesday",
        "Четверг": "Thursday",
        "Пятница": "Friday",
        "Суббота": "Saturday",
        "Воскресенье": "Sunday",
        "Понедельник": "Monday",
        "Вторник": "Tuesday",
        "Пн": "Md",
        "Вт": "Tu",
        "Ср": "Wd",
        "Чт": "Th",
        "Пт": "Fr",
        "Сб": "St",
        "Вс": "Sn",
        "Введите новый пароль": "Enter new password",
        "Для удаления введите пароль": "Enter old password",
        "Пароль по умолчанию": "Default password",
        "История": "History",
        "Это стартовый плейлист!": "This is start playlist!",
        "Обработка ссылки.": "Processing...",
        "Добавлено в ": "Add to ",
        "Перемещено в ": "Move to ",
        "История очищена!": "Clearing history",
        "Такая закладка уже есть в ": "This bookmark exist in ",
        "Поиск": "Search",
        "<font color=\"FF1F53\">Поиск<\/font>": "Search",
        "Мои уведомления": "My push",
        "Навигация": "Navigation",
        "Извините, файлов не обнаружено!": "Sorry, files not found!",
        "Меню": "Menu"
    };
    if (q[s] == undefined) {
        if (kjtYpr.l1IlIl01l0tUIl1IIYpr == "tosettings") {
            s = s.replace("Регион", "Region");
            s = s.replace("Часовой пояс", "Time zone");
            s = s.replace("Количество строк", "Number of lines");
            s = s.replace("Качество видео", "Video Quality");
            s = s.replace("Плеер по умол", "Default player");
            s = s.replace("Возобновление", "Renewal");
            s = s.replace("Родительский контроль", "Parent control");
            s = s.replace("Мои уведомления", "My push");
            s = s.replace("Полный сброс настроек", "Full reset app");
            s = s.replace("Другие", "Other");
            s = s.replace("Украина", "Ukraine");
            s = s.replace("Россия", "Russia");
            s = s.replace("Медиа плеер", "Media player");
            s = s.replace("Выключено", "Off");
            s = s.replace("Включено", "On");
            s = s.replace("Другие", "Other")
        }
        return s
    } else return q[s]
}

function vk_enter() {
    // if (ipCountry != "UA") vk_prx = "http://195.88.208.101/xhr.php";
    if (ipCountry != "UA") vk_prx = "http://127.0.0.1/xhr.php";
    kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url;
    var data = {
        "playlist_name": "",
        "title": "vk.com",
        "icon": "http://obovse.ru/smarttv/img/vk_200x200.png",
        "channels": []
    };
    if (kjtYpr.GL.vk_id == "" || kjtYpr.GL.vk_token == "") {
        data.channels.push({
            "logo_30x30": _img("_OI_authorize.png"),
            "title": "_FPAuthorization_ _FPbyLogin_",
            "description": "В ForkPlayer хранится только ключ доступа, который можно удалить по адресу https://vk.com/apps?act=manage<br>Для успешного входа на странице https://vk.com/settings?act=security может потребоваться отключить Подтверждение входа по SMS<br>",
            "playlist_url": "vk://get_login/0"
        })
    } else {
        vk_cmd = "get_profile";
        vk_open("method/account.getProfileInfo?")
    }
    if (kjtYpr.GL.vk_id == "" || kjtYpr.GL.vk_token2 == "") {}
    data.channels.push({
        "logo_30x30": _img("_OI_vk_search.png"),
        "title": "_FPPoiskVideo_",
        "playlist_url": "vk://get_video/0",
        "search_on": "_FPVvediteText_"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_vk_search.png"),
        "title": "_FPPoiskPeople_",
        "playlist_url": "vk://get_users/0",
        "search_on": "_FPVvediteText_"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_vk_search.png"),
        "title": "_FPPoiskFoto_",
        "playlist_url": "vk://foto_get/0",
        "search_on": "_FPVvediteText_"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_vk_video.png"),
        "title": "_FPMoiVideo_",
        "playlist_url": "vk://get_video/0"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_vk_friend.png"),
        "title": "_FPDruzya_",
        "playlist_url": "vk://get_friends/0"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_vk_group.png"),
        "title": "_FPGruppi_",
        "playlist_url": "vk://get_groups/0"
    });
    data.channels.push({
        "logo_30x30": "" + _img("_OI_vk_doc.png"),
        "title": "_FPDocumenti_",
        "playlist_url": "vk://doc_get/0"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_fotogallery.png"),
        "title": "_FPPhoto_",
        "playlist_url": "vk://foto_getmenu/0"
    });
    if (kjtYpr.GL.vk_id != "" && kjtYpr.GL.vk_token != "") data.channels.push({
        "logo_30x30": _img("_OI_exit.png"),
        "title": "_FPExit_",
        "playlist_url": "vk://exit/0"
    });
    ll1lIOiIO0lO1IIIYpr = Math.random();
    kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, incID(), "ok");
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
}

function vk_exit() {
    kjtYpr.GL.vk_id = "";
    kjtYpr.GL.vk_token = "";
    kjtYpr.GL.vk_token2 = "";
    kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
    vk_enter()
}

function vk_get_login(t) {
    kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url;
    var data = {
        "playlist_name": "",
        "channels": []
    };
    data.channels.push({
        "logo_30x30": _img("_OI_authorize.png"),
        "title": "_FPLogin_ (vk.com):",
        "search_on": "_FPLogin_:",
        "playlist_url": "payd_login"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_authorize.png"),
        "title": "_FPPassword_:",
        "search_on": "_FPPassword_:",
        "playlist_url": "payd_pass"
    });
    data.channels.push({
        "logo_30x30": _img("_OI_ok.png"),
        "value": "",
        "title": "_FPPodtverdit_",
        "playlist_url": "vk://login_enter/" + t,
        "description": ""
    });
    kjtYpr.l00100lIKlBWw1lllIlYpr(data);
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
}

function vk_login_enter(t) {
    kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url;
    var data = {
        "playlist_name": "",
        "channels": []
    };
    if (payd.login != undefined && payd.pass != undefined) {
        payd.login = payd.login.replace("+", "");
        if (t == 0) var url = "https://oauth.vk.com/token?username=" + payd.login + "&password=" + payd.pass + "&grant_type=password&state=&client_id=4171611&client_secret=Z0TTXn6fiGIfJrM8j3T3&scope=friends%2Cphotos%2Caudio%2Cvideo%2Cwall%2Cgroups&v=5.67";
        else url = "https://oauth.vk.com/token?username=" + payd.login + "&password=" + payd.pass + "&grant_type=password&state=&client_id=2685278&client_secret=lxhD8OD7dMsqtXIm5IUY&scope=friends%2Cphotos%2Caudio%2Cvideo%2Cwall%2Cgroups&v=5.67";
        var urlc = 'curl -L "' + url + '"';
        if (t == "code") {
            url = 'curl -L "https://m.vk.com' + payd.post_url + '" -H "Pragma: no-cache" -H "Accept-Encoding: deflate" -H "Accept-Language: ru,en;q=0.8,uk;q=0.6,bg;q=0.4" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Accept: application/json, text/javascript, */*; q=0.01" -H "Cache-Control: no-cache" -H "X-Requested-With: XMLHttpRequest" -H "DNT: 1" --data "code=' + payd.code + '" --compressed'
        } else if (typeof payd.captcha_sid != "undefined") url += "&captcha_sid=" + payd.captcha_sid + "&captcha_key=" + payd.captcha;
        if (1) {
            RemoteXhr = new XMLHttpRequest();
            if (t == 1 && !1) {
                RemoteXhr.open("GET", vk_prx + "?u=" + encodeURIComponent(url), !0)
            } else if (app_cors) {
                RemoteXhr.open("GET", url, !0)
            } else if (kjtYpr.GL.remote == 2 && kjtYpr.GL.remoteactive) {
                RemoteXhr.open("GET", "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(urlc), !0)
            } else {
                RemoteXhr.open("GET", vk_prx + "?u=" + encodeURIComponent(urlc), !0)
            }
            RemoteXhr.onreadystatechange = function () {
                if (RemoteXhr.readyState == 4) {
                    var xs = l1l0IOIl_puQl1I1IYpr(RemoteXhr.responseText);
                    if (xs == null) xs = {};
                    if (typeof xs.access_token != "undefined") {
                        kjtYpr.GL.vk_id = xs.user_id;
                        if (t == 0) kjtYpr.GL.vk_token = xs.access_token;
                        else if (t == 1) kjtYpr.GL.vk_token2 = xs.access_token;
                        kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL));
                        vk_enter();
                        ll0111l1wxUIOlO1lYpr(53, "Authorization: " + (++t) + "<br>_FPUspIdPolz_:" + kjtYpr.GL.vk_id)
                    } else if (xs.error == "need_captcha") {
                        payd.captcha_sid = xs.captcha_sid;
                        kjtYpr.channels.splice(2, 0, {
                            "stream_url": "",
                            "logo_30x30": _img("_OI_authorize.png"),
                            "title": "Enter captcha:",
                            "search_on": "<img src='" + xs.captcha_img + "' width=300>",
                            "value": "",
                            "parser": "",
                            "playlist_url": "payd_captcha",
                            "description": "Нажмите для ввода кода с картинки"
                        });
                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100);
                        ll1lIOiIO0lO1IIIYpr = Math.random();
                        kjtYpr.lIOIOIBu0mO11llO0Ypr(select)
                    } else if (xs.error == "need_validation") {
                        xhr = null;
                        xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                var s = xhr.responseText.replace(/\n/g, "").replace(/\r/g, "");
                                var mtc = s.match(/method="post" action="(.*?)"/);
                                if (mtc != null) {
                                    payd.post_url = mtc[1];
                                    var mtc2 = s.match(/sub_header.*?>(.*?)<form/);
                                    var mtc3 = s.match(/field_prefix\">(.*?)<.*?field_prefix\">(.*?)</);
                                    var tlf = "<b>" + mtc3[1] + "........" + mtc3[2] + "</b>"
                                    if (mtc2 != null) {
                                        kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url + xs.error;
                                        var data = {
                                            "playlist_name": "",
                                            "channels": []
                                        };
                                        data.channels.push({
                                            "stream_url": "",
                                            "logo_30x30": _img("_OI_authorize.png"),
                                            "title": "Enter:",
                                            "search_on": tlf + " введите недостающие цифры",
                                            "value": "",
                                            "parser": "",
                                            "playlist_url": "payd_code",
                                            "description": mtc2[1] + "<br>" + tlf
                                        });
                                        data.channels.push({
                                            "logo_30x30": _img("_OI_ok.png"),
                                            "value": "",
                                            "title": "_FPPodtverdit_",
                                            "playlist_url": "vk://login_enter/code",
                                            "description": mtc2[1]
                                        });
                                        kjtYpr.l00100lIKlBWw1lllIlYpr(data);
                                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
                                    }
                                }
                            }
                        };
                        xhr.open('GET', vk_prx + "?u=" + encodeURIComponent(xs.redirect_uri), !0);
                        xhr.send()
                    } else {
                        kjtYpr.popUp("_FPOshibka_! 1<br>" + RemoteXhr.responseText + "<br>Убедитесь что вы ввели правильный логин и пароль от vk.com<br>" + RemoteXhr.responseText);
                        data.channels.push({
                            "logo_30x30": "none",
                            "title": "_FPOshibka_!<br>" + RemoteXhr.responseText + "<br>Убедитесь что вы ввели правильный логин и пароль от vk.com:",
                            "playlist_url": ""
                        });
                        kjtYpr.l00100lIKlBWw1lllIlYpr(data);
                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
                    }
                }
            };
            RemoteXhr.send()
        } else {
            kjtYpr.popUp("_FPNeobhodimRemoteFork_");
            l0I1l0lO0lsnG1I1QlYpr()
        }
    } else {
        data.channels.push({
            "logo_30x30": "none",
            "title": "Error:",
            "playlist_url": ""
        });
        kjtYpr.l00100lIKlBWw1lllIlYpr(data);
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
    }
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
}

function vk_get_menufriend(id) {
    kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url;
    var data = {
        "playlist_name": "",
        "channels": []
    };
    data.channels.push({
        "title": "_FPVideo_",
        "playlist_url": "vk://get_video/0/" + id
    });
    data.channels.push({
        "title": "_FPDocumenti_",
        "playlist_url": "vk://doc_get/0/" + id
    });
    data.channels.push({
        "title": "_FPPhoto_",
        "playlist_url": "vk://foto_getmenu/0/" + id
    });
    dtype = "ok";
    kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, incID(), "ok");
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
}

function vk_get_menugroup(id) {
    kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url;
    var data = {
        "playlist_name": "",
        "channels": []
    };
    data.channels.push({
        "title": "_FPVideo_",
        "playlist_url": "vk://get_video/0/" + id
    });
    data.channels.push({
        "title": "_FPDocumenti_",
        "playlist_url": "vk://doc_get/0/" + id
    });
    data.channels.push({
        "title": "_FPPhoto_",
        "playlist_url": "vk://foto_getmenu/0/" + id
    });
    kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, incID(), "ok");
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
}
var vk_byid, vk_album_id, vk_search;

function vk_foto_get(offset, owner, album_id) {
    if (owner == null || owner == "") owner = kjtYpr.GL.vk_id;
    if (offset == null) offset = "0";
    vk_owner = owner;
    vk_album_id = album_id;
    vk_cmd = "foto_get";
    vk_offset = 300 + parseInt(offset);
    if (vk_search != "" && vk_search != null) vk_open("method/photos.search?offset=" + offset + "&count=300&q=" + vk_search);
    else vk_open("method/photos.get?offset=" + offset + "&count=300&owner_id=" + owner + "&album_id=" + album_id)
}

function vk_foto_getmenu(offset, owner) {
    if (owner == null) owner = kjtYpr.GL.vk_id;
    vk_owner = owner;
    vk_cmd = "foto_getmenu";
    vk_open("method/photos.getAlbums?offset=0&count=150&need_covers=1&owner_id=" + owner)
}

function vk_doc_get(offset, owner, search) {
    if (owner == null) owner = kjtYpr.GL.vk_id;
    if (offset == null) offset = "0";
    vk_owner = owner;
    vk_cmd = "doc_get";
    vk_offset = 150 + parseInt(offset);
    vk_open("method/docs.get?offset=" + offset + "&count=150&owner_id=" + owner)
}

function vk_get_audio(offset, owner, search) {
    if (owner == null) owner = kjtYpr.GL.vk_id;
    else if (owner != "rec" && owner != "pop") owner = "&owner_id=" + owner;
    if (offset == null) offset = "0";
    vk_owner = owner;
    vk_search = search;
    vk_cmd = "get_audio";
    vk_offset = 150 + parseInt(offset);
    if (owner == "rec") vk_open("method/audio.getRecommendations?offset=" + offset + "&count=150&need_user=0");
    else if (owner == "pop") vk_open("method/audio.getPopular?offset=" + offset + "&count=150&need_user=0");
    else if (search != null) vk_open("method/audio.search?offset=" + offset + "&count=150&need_user=0&sort=0&q=" + search);
    else vk_open("method/audio.get?offset=" + offset + "&count=150&need_user=0" + owner)
}

function vk_get_video(offset, owner, search, byid) {
    if (owner == null) owner = kjtYpr.GL.vk_id;
    if (offset == null) offset = "0";
    vk_owner = owner;
    vk_cmd = "get_video";
    vk_search = search;
    vk_byid = byid;
    vk_offset = 100 + parseInt(offset);
    if (search != null) vk_open("method/video.search?offset=" + offset + "&count=100&need_user=0&filters=mp4&extended=1&adult=1&length=2&q=" + search);
    else vk_open("method/video.get?offset=" + offset + "&count=100&need_user=0&filters=mp4&extended=1&owner_id=" + owner)
}

function vk_get_users(offset, owner, search, byid) {
    if (owner == null) owner = kjtYpr.GL.vk_id;
    if (offset == null) offset = "0";
    vk_owner = owner;
    vk_cmd = "get_users";
    vk_byid = byid;
    vk_search = search;
    vk_offset = 300 + parseInt(offset);
    if (search != null) vk_open("method/users.search?offset=" + offset + "&count=300&fields=online,photo_100,photo_200,city,country,education,status&need_user=0&q=" + search)
}

function vk_get_friends(offset) {
    if (offset == null) offset = "0";
    vk_cmd = "get_friends";
    vk_offset = 50 + parseInt(offset);
    vk_open("method/friends.get?order=hints&fields=photo_50%2Cphoto_200&offset=" + offset + "&count=50")
}

function vk_get_groups(offset) {
    if (offset == null) offset = "0";
    vk_cmd = "get_groups";
    vk_offset = 50 + parseInt(offset);
    vk_open("method/groups.get?extended=1&fields=members_count&offset=" + offset + "&count=50")
}

function vk_groupbyid(id) {
    if (offset == null) offset = "0";
    vk_cmd = "get_groups";
    vk_offset = 50 + parseInt(offset);
    vk_open("method/groups.get?extended=1&fields=members_count&offset=" + offset + "&count=50")
}
var vk_u = "";

function vk_open(u, autostart) {
    if (autostart) {
        vk_autostart = !0
    } else vk_autostart = !1;
    vk_u = u;
    if ((kjtYpr.GL.vk_id != "" && kjtYpr.GL.vk_token != "") || u.indexOf("photos.search") > 0) {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = !0;
        if (u.indexOf("/audio") > 0) {
            if (kjtYpr.GL.vk_token2 == "") {
                ll0111l1wxUIOlO1lYpr(53, "Необходимо пройти авторизацию для аудиозаписей!")
            } else {
                if (u.indexOf("getLyrics") == -1 && !1) {
                    script.src = vk_prx + "?u=" + encodeURIComponent("https://api.vk.com/" + u + "&access_token=" + kjtYpr.GL.vk_token2 + "&callback=vkcallback&lang=undefined&v=5.07")
                } else script.src = "https://api.vk.com/" + u + "&access_token=" + kjtYpr.GL.vk_token2 + "&callback=vkcallback&lang=undefined&v=5.67"
            }
        } else if (u.indexOf("photos.search") > 0) script.src = "https://api.vk.com/" + u + "&callback=vkcallback&lang=undefined&v=5.67";
        else script.src = "https://api.vk.com/" + u + "&access_token=" + kjtYpr.GL.vk_token + "&callback=vkcallback&lang=undefined&v=5.67";
        statusbar(script.src, "link");
        script.onload = function () {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
        };
        document.getElementsByTagName('head')[0].appendChild(script)
    } else {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
        kjtYpr.popUp("_FPForAccessNeedAuthorization_")
    }
}

function lIOIOQgvvhD1II11Ypr() {
    try {
        if (kjtYpr.GL.vk_id == "" || kjtYpr.GL.vk_token == "") return;
        $_("vk_audio").style.display = "none"
    } catch (e) {}
}
var vk_autostart = !0;

function lIl1OAvvpIO0IYpr(mode) {
    if (((kjtYpr.GL.vk_id == "" || kjtYpr.GL.vk_token == "") && kjtYpr.lIlOOIIlIEIzH1l1OIYpr("vk_pl_url").indexOf("http") == -1) || kjtYpr.GL.audioplayer < 1) return;
    if (vk_audio_pl.length < 1) {
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("vk_audio_pl");
        if (s != "") {
            vk_audio_pl = l1l0IOIl_puQl1I1IYpr(s)
        }
        s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("vk_audio_sel");
        if (s != "") {
            vk_audio_sel = parseInt(s)
        }
    }
    if (vk_audio_pl.length < 1) {
        lOlI1OII1UehOl1lIOIOYpr = !1;
        return
    } else lOlI1OII1UehOl1lIOIOYpr = !0;
    try {
        $_("vk_audio").style.display = "block"
    } catch (e) {
        var div = document.createElement('div');
        div.id = 'vk_audio';
        div.style.position = "absolute";
        div.style.backgroundColor = "rgb(89, 117, 181)";
        div.style.padding = "2px 4px";
        div.style.borderRadius = "5px";
        div.style.display = "block";
        div.style.top = css_wh(600) + "px";
        div.style.left = css_w(950) + "px";
        div.style.fontSize = css_wh(18) + "px";
        div.style.width = css_w(300) + "px";
        div.style.height = css_wh(85) + "px";
        document.getElementsByTagName('body')[0].appendChild(div)
    }
    lO10OIOlxzlO100OIYpr("vk_audio", "<div id='audiotitle' style='height:" + css_wh(43) + "px;overflow:hidden;color:black;width:100%;'>" + vk_audio_pl[vk_audio_sel].description + "</div>" + "<div style='position:absolute;top:2px;left:" + css_w(218) + "px;height:" + css_wh(10) + "px; width: " + css_w(70) + "px;  text-align: right;'>" + (parseInt(vk_audio_sel) + 1) + "/" + vk_audio_pl.length + "</div>" + "<div id='rtma' style='position:absolute;  top: " + css_wh(62) + "px;  left: " + css_w(250) + "px;  width: " + css_w(50) + "px;  text-align: right;  height: " + css_wh(10) + "px;  font-size: " + css_wh(14) + "px;  color: #F8F9F6;'></div>" + "<div onclick=\"keyHandler({'keycode':VK_STOP});\" title='Закрыть / Кнопка СТОП' style='position:absolute;top:0px;left:" + css_w(292) + "px;height:" + css_wh(10) + "px;color:rgb(205, 30, 30);'>x</div>" + "<div id='vk_audio_bar' style='float:left;position:relative;top:" + css_wh(5) + "px;left:2px;height:" + css_wh(10) + "px;width:" + css_w(296) + "px;background-color:#a0b9d6;border-radius:3px;'><div id='vk_audio_pos' style='float:left;position:relative;left:2px;height:6px;top:2px;width:0px;background-color:#5885b8;'></div></div>" + "<ul style='padding-left: " + css_w(60) + "px;'>" + "<li onclick=\"keyHandler({'keycode':VK_REWIND})\" style='background-position: 0px -105px;display: inline-block;background-image:url(" + _img("_OI_audio_controls.png") + ");width:30px;height:35px;'></li>" + "<li onclick=\"keyHandler({'keycode':VK_PAUSE})\" style='background-position: 0px -38px;display: inline-block;background-image:url(" + _img("_OI_audio_controls.png") + ");width:30px;height:35px;'></li>" + "<li onclick=\"keyHandler({'keycode':VK_PLAY});\" style='background-position: 0px -3px;display: inline-block;background-image:url(" + _img("_OI_audio_controls.png") + ");width:30px;height:35px;'></li>" + "<li onclick=\"keyHandler({'keycode':VK_FAST_FWD})\" style='background-position: 0px -138px;display: inline-block;background-image:url(" + _img("_OI_audio_controls.png") + ");width:30px;height:35px;'></li>" + "<li id='vkr' title='Повтор' onclick=\"vk_audioRepeat(true);\" style='background-position: 0px -174px;display: inline-block;background-image:url(" + _img("_OI_audio_controls.png") + ");width:30px;height:35px;'></li>" + "<li title='Перемешать' onclick=\"vk_audioShuffle();\" style='background-position: 0px -73px;display: inline-block;background-image:url(" + _img("_OI_audio_controls.png") + ");width:30px;height:35px;'></li>" + "</ul>");
    $_('vk_audio_bar').onclick = function (e) {
        curTime = getCur();
        totalTime = getTotal();
        if (totalTime > 0) {
            var BarWidth = css_w(296);
            var x = e.pageX - $(this).offset().left;
            if (platform == "sams") {
                var a = (x / BarWidth) * Player.total_time;
                if (a > Player.cur_time) lQ1llOmVIbIlO1lYpr(a - Player.cur_time);
                else l00II10LBpj1OIIIYpr(a - Player.cur_time)
            } else if (l0O1l101l1t_Y0lll1Ypr == "media" || l0O1l101l1t_Y0lll1Ypr == "ext") {
                media.seek((x / BarWidth) * media.playTime)
            } else {
                video.currentTime = (x / BarWidth) * video.duration
            }
        }
    };
    if (mode == "autostart") {
        setTimeout('$_("vk_audio").style.zIndex="-2";$_("vk_audio").style.display="none";$_("vk_play_button").style.display="block";', 1500)
    }
    vk_audioRepeat()
}

function vk_audioRepeat(m) {
    if (m) {
        vk_repeat = !vk_repeat;
        if (vk_repeat) kjtYpr.inf("Повтор: включен!", 1000);
        else kjtYpr.inf("Повтор: отключен!", 1000)
    }
    if (vk_repeat) $_("vkr").style.backgroundPosition = "33px -174px";
    else $_("vkr").style.backgroundPosition = "0px -174px"
}

function vk_Visualaudio(n) {
    try {
        if (vk_visual) {
            lO10OIOlxzlO100OIYpr("jw", "<div style='z-index:1;width:100%;height:100%;background-color:black;'>" + "<img width=1280 height=720 src='" + _img("_OT_visual" + n + ".gif") + "' />" + "</div>");
            $_("jw").style.display = "block";
            $_("jw").style.zIndex = "1"
        } else {
            lO10OIOlxzlO100OIYpr("jw", "");
            $_("jw").style.zIndex = "0";
            $_("jw").style.display = "none"
        }
    } catch (e) {
        kjtYpr.popUp(e.message)
    }
}

function vk_audioShuffle() {
    kjtYpr.inf("Перемешано!", 1000);
    vk_audio_pl = shuffle(vk_audio_pl)
}

function shuffle(array) {
    for (var j, x, i = array.length; i; j = parseInt(Math.random() * i), x = array[--i], array[i] = array[j], array[j] = x);
    return array
}

function timeConverter(UNIX_timestamp) {
    var a = new Date(UNIX_timestamp * 1000);
    return a;
    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var year = a.getFullYear();
    var month = months[a.getMonth()];
    var date = a.getDate();
    var hour = a.getHours();
    var min = a.getMinutes();
    var sec = a.getSeconds();
    var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;
    return time
}
// var vkv_mini, vk_prx = "http://195.88.208.101/xhr.php";
var vkv_mini, vk_prx = "http://127.0.0.1/xhr.php";

function vkcallback(s) {
    var data = {};
    if (typeof s.error != "undefined") {
        if (s.error.error_msg.indexOf("invalid session") > 0) {
            kjtYpr.GL.vk_token = "";
            kjtYpr.GL.vk_id = "";
            kjtYpr.lIllOVRj11lO10Ypr("settings", l10O0I11gdZlOOIIYpr(kjtYpr.GL))
        } else if (vkv_mini == 2) {
            PullDataFromPost("http://obovse.ru/smarttv/api.php?do=xhrremote&v=post&u=" + encodeURIComponent(vk_byid), "s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(s.error.error_msg)), "xhrremote");
            return
        }
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
        kjtYpr.popUp("_FPOshibkaAvtorizacii_!<br>" + s.error.error_msg);
        return
    }
    if (vk_owner == "pop" || vk_owner == "rec") s.items = s.response;
    else s = s.response;
    if (vk_cmd != "get_profile" && vk_cmd != "getLyrics") {
        if (s.items.length == 0) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
            if (xml_live) {} else kjtYpr.popUp(vk_cmd + "<br>_FPZdesPusto_!");
            return
        }
    }
    if (vk_cmd == "foto_getmenu") {
        data = {
            "playlist_name": "",
            "channels": []
        };
        data.channels.push({
            "title": "_FPPhoto_ _FPfromPage_",
            "playlist_url": "vk://foto_get/0/" + vk_owner + "/profile"
        });
        data.channels.push({
            "title": "_FPPhoto_ _FPfromWall_",
            "playlist_url": "vk://foto_get/0/" + vk_owner + "/wall"
        });
        data.channels.push({
            "title": "_FPSavedPhoto_",
            "playlist_url": "vk://foto_get/0/" + vk_owner + "/saved"
        });
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            if (x.text == "") x.text = "Photo " + (i + 1);
            for (iu in x)
                if (iu.indexOf("photo") == 0) im = x[iu];
            var elem = {
                "logo_30x30": x.thumb_src,
                "title": "_FPAlbum_ " + x.title + " (" + x.size + " _FPphoto_)",
                "description": "_FPAlbum_ " + x.title + "<br>_FPPhoto_: " + x.size + "<br>" + x.description + "<br>Создан: " + timeConverter(x.created) + "<br>Обновлен: " + timeConverter(x.updated),
                "playlist_url": "vk://foto_get/0/" + vk_owner + "/" + x.id
            };
            if (x.size > 0) data.channels.push(elem)
        }
    } else if (vk_cmd == "foto_get") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://foto_get/" + vk_offset,
            "channels": []
        };
        if (vk_owner != null) data.next_page_url = "vk://foto_get/" + vk_offset + "/" + vk_owner;
        if (vk_album_id != null) data.next_page_url = "vk://foto_get/" + vk_offset + "/" + vk_owner + "/" + vk_album_id;
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            if (x.text == "") x.text = "Photo " + ((vk_offset - 300) + i + 1);
            for (iu in x)
                if (iu.indexOf("photo") == 0) im = x[iu];
            var elem = {
                "logo_30x30": x.photo_75.replace("https:", "http:"),
                "title": x.text,
                "description": "<img src='" + x.photo_604.replace("https:", "http:") + "' width='" + css_w(580) + "' /><br>_FPDate_: " + timeConverter(x.date) + "",
                "stream_url": im
            };
            data.channels.push(elem)
        }
    } else if (vk_cmd == "getLyrics") {
        if (s.lyrics_id == curCh()["lyrics_id"]) {
            curCh("description", "<div style='font-size:" + css_wh(20) + "px;line-height: normal;'>" + s.text.replace(/\n/g, "<br>") + "</div>");
            curCh()["lyrics_id"] = "";
            if (handler != "vk") lO10OIOlxzlO100OIYpr("infoList", curCh("description"))
        }
    } else if (vk_cmd == "doc_get") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://doc_get/" + vk_offset,
            "channels": []
        };
        if (vk_owner != null) data.next_page_url = "vk://doc_get/" + vk_offset + "/" + vk_owner;
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            var el = {
                "logo_30x30": "",
                "title": x.title + " " + ToSize(x.size),
                "description": "_FPTip_: " + x.ext + "<br>_FPRazmer_: " + ToSize(x.size)
            };
            if (x.ext == "xml" || x.ext == "m3u" || x.ext == "txt") {
                el.logo_30x30 = "" + _img("_OI_vk_doc.png");
                el.playlist_url = x.url
            } else if (x.ext == "zip" && platform == "sams") {
                el.logo_30x30 = "" + _img("_OI_vk_doc.png");
                el.title = x.title;
                el.playlist_url = "app://" + x.url + "&" + x.title + ".zip";
                el.description += "<br><font color='red'>_FPInstallWidgetInSmartHub_!</font>"
            } else if (x.ext == "jpg" || x.ext == "png" || x.ext == "gif") {
                el.logo_30x30 = x.url;
                el.stream_url = x.url + "&." + x.ext;
                el.description += "<img src='" + x.url + "' width='" + css_w(580) + "' />"
            }
            data.channels.push(el)
        }
    } else if (vk_cmd == "get_profile") {
        insetIn(-1, "put", "title", "_FPVkontakte_ " + s.first_name + " " + s.last_name);
        kjtYpr.lOIOIIujlv11O1OYpr()
    } else if (vk_cmd == "get_users") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://get_users/" + vk_offset,
            "channels": []
        };
        if (vk_search != null) data.next_page_url = "vk://get_users/" + vk_offset + "/0/" + vk_search;
        else if (vk_owner != null) data.next_page_url = "vk://get_users/" + vk_offset + "/" + vk_owner;
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            if (x.online) x.online = "<span style='color:#BBBBBB;'><i>Online</i></span><br>";
            else x.online = "";
            if (typeof x.university_name == "undefined") x.university_name = "";
            if (typeof x.city != "object") x.city = {
                "title": ""
            };
            if (typeof x.country != "object") x.country = {
                "title": ""
            };
            if (typeof x.photo_200 == "undefined") x.photo_200 = x.photo_100;
            if (x.university_name != "") x.university_name += "<br>";
            if (x.city.title != "") x.city.title += ", ";
            if (x.city.title + x.country.title != "") x.country.title += "<br>"
            data.channels.push({
                "logo_30x30": x.photo_100.replace("https:", "http:"),
                "title": x.first_name + " " + x.last_name,
                "description": "<div id=\"poster\" style=\"float:left;padding:4px;width:" + css_wh(200) + "px;height:" + css_w(200) + "px;	background-color:#EEEEEE;margin:0px 13px 1px 0px;\"><img src=\"" + x.photo_200.replace("https:", "http:") + "\" style=\"width:" + css_wh(200) + "px;float:left;\" /></div><span style='color:rgba(141,206,255,1);'>" + x.first_name + " " + x.last_name + "</span><br>" + "" + x.online + "" + x.city.title + "" + x.country.title + x.university_name + "<i>" + x.status + "</i>",
                "playlist_url": "vk://get_menufriend/" + x.id
            })
        }
        if (vk_autostart) {
            l0OO10QIvTrl10lYpr(data.channels);
            return
        }
        if (i) vk_pl_url = vk_u
    } else if (vk_cmd == "get_audio") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://get_audio/" + vk_offset,
            "channels": []
        };
        if (vk_search != null) data.next_page_url = "vk://get_audio/" + vk_offset + "/0/" + vk_search;
        else if (vk_owner != null) data.next_page_url = "vk://get_audio/" + vk_offset + "/" + vk_owner;
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            if (typeof x.photo != "undefined") {
                continue
            }
            if (x.url == "") ll0111l1wxUIOlO1lYpr(53, "Необходимо пройти авторизацию заново!");
            if (typeof x.lyrics_id == "undefined") x.lyrics_id = "";
            if (app_cors && platform != "android-device") var au = x.url;
            else au = vk_prx + "?fr=" + encodeURIComponent(x.url);
            data.channels.push({
                "lyrics_id": x.lyrics_id,
                "logo_30x30": _img("_OI_vk_audio.png"),
                "title": x.artist + " " + x.title + " " + llO0QkPmellIQI1Ypr(x.duration),
                "description": x.artist + "<br><span style='font-size:16px;color:#EEE;'>" + x.title + "</span>",
                "stream_url": au
            })
        }
        if (vk_autostart) {
            l0OO10QIvTrl10lYpr(data.channels);
            return
        }
        if (i) vk_pl_url = vk_u
    } else if (vk_cmd == "get_video") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://get_video/" + vk_offset,
            "channels": []
        };
        if (vk_search != null) data.next_page_url = "vk://get_video/" + vk_offset + "/0/" + vk_search;
        else if (vk_owner != null) data.next_page_url = "vk://get_video/" + vk_offset + "/" + vk_owner;
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            if (vk_byid != null) {
                if (vk_byid.indexOf(x.id) != -1) {
                    var pd = {
                        "response": {
                            "url240": x.files.mp4_240,
                            "url360": x.files.mp4_360,
                            "url480": x.files.mp4_480,
                            "url720": x.files.mp4_720
                        }
                    };
                    if (vkv_mini == 2) PullDataFromPost("http://obovse.ru/smarttv/api.php?do=xhrremote&v=post&u=" + encodeURIComponent(vk_byid), "s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr(pd)), "xhrremote");
                    else if (vkv_mini) plxmini(pd);
                    else plx(pd);
                    return
                }
            } else {
                var q = {};
                try {
                    z = x.files;
                    if (gV(z, "mp4_240") != "") q["240"] = {
                        "url": z.mp4_240
                    };
                    if (gV(z, "mp4_360") != "") q["360"] = {
                        "url": z.mp4_360
                    };
                    if (gV(z, "mp4_480") != "") q["480"] = {
                        "url": z.mp4_480
                    };
                    if (gV(z, "mp4_720") != "") q["720"] = {
                        "url": z.mp4_720
                    };
                    if (gV(z, "mp4_1080") != "") q["1080"] = {
                        "url": z.mp4_1080
                    }
                } catch (e) {}
                uvk = l10O0I11gdZlOOIIYpr(q);
                if (typeof uvk == "undefined") {
                    uvk = x.player;
                    data.channels.push({
                        "logo_30x30": x.photo_130.replace("https:", "http:"),
                        "title": x.title + " " + llO0QkPmellIQI1Ypr(x.duration),
                        "description": "<img src='" + x.photo_320.replace("https:", "http:") + "' width='" + css_w(580) + "' /><br>" + x.title + " " + llO0QkPmellIQI1Ypr(x.duration) + "<br>" + x.description,
                        "stream_url": uvk
                    })
                } else data.channels.push({
                    "logo_30x30": x.photo_130.replace("https:", "http:"),
                    "title": x.title + " " + llO0QkPmellIQI1Ypr(x.duration),
                    "description": "<img src='" + x.photo_320.replace("https:", "http:") + "' width='" + css_w(580) + "' /><br>" + x.title + " " + llO0QkPmellIQI1Ypr(x.duration) + "<br>" + x.description,
                    "stream_url": uvk
                })
            }
        }
        if (vk_byid != null) {
            if (vk_offset + 100 < s.count) {
                vk_get_video(vk_offset, vk_owner, null, vk_byid)
            } else {
                if (vkv_mini == 2) PullDataFromPost("http://obovse.ru/smarttv/api.php?do=xhrremote&v=post&u=" + encodeURIComponent(vk_byid), "s=" + encodeURIComponent(l10O0I11gdZlOOIIYpr({
                    "response": "Not found"
                })), "xhrremote");
                else kjtYpr.inf("Видео не найдено", 1200)
            }
            return
        }
    } else if (vk_cmd == "get_friends") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://get_friends/" + vk_offset,
            "channels": []
        };
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            data.channels.push({
                "logo_30x30": x.photo_50.replace("https:", "http:"),
                "title": x.first_name + " " + x.last_name,
                "description": x.first_name + " " + x.last_name,
                "playlist_url": "vk://get_menufriend/" + x.id
            })
        }
    } else if (vk_cmd == "get_groups") {
        data = {
            "playlist_name": "",
            "next_page_url": "vk://get_groups/" + vk_offset,
            "channels": []
        };
        for (var i = 0; i < s.items.length; i++) {
            var x = s.items[i];
            data.channels.push({
                "logo_30x30": x.photo_50.replace("https:", "http:"),
                "title": x.name,
                "description": x.name + "<br>Участников: " + x.members_count,
                "playlist_url": "vk://get_menugroup/-" + x.id
            })
        }
    }
    if (data.channels.length > 0) {
        insetIn(-1, "s", select);
        kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_vk_url;
        kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, incID(), "ok")
    } else kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1)
}

function l1OlOlOTIFl10lIYpr() {
    try {
        if (lOlI1OII1UehOl1lIOIOYpr) {
            if ($_("vk_audio").style.display == "block") return !0;
            else return !1
        }
    } catch (e) {
        return !1
    }
}

function vk_audio_stop() {
    stopped = !0;
    if (uaJ == "dune") {
        stb.stop()
    } else if (uaJ == "mag") {
        stb.Stop()
    } else if (platform == "sams") samsStop();
    else if (l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5") {} else {
        lO10OIOlxzlO100OIYpr("jw", "");
        lO10OIOlxzlO100OIYpr("other", "")
    }
}

function l0OO10QIvTrl10lYpr(pl, sel) {
    if (pl != null) {
        vk_autostart = !1;
        vk_audio_pl = [];
        for (var i = 0; i < pl.length; i++) {
            pl[i].stream_url = pl[i].stream_url.replace("audio://", "");
            if (is_audio(pl[i].stream_url)) {
                if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("ok.php") == -1 && pl[i].logo_30x30.indexOf("ok.ru") == -1 && kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("vk://") == -1 && pl[i].logo_30x30.indexOf("vk_audio.png") == -1) {
                    pl[i].description = insetIn(-1, "get", "title").replace(/<.*?>/g, "") + "<br><span style='font-size:16px;color:#EEE;'>" + pl[i].title.replace(/<.*?>/g, "").substr(0, 38) + "</span>"
                }
                vk_audio_pl.push(pl[i])
            } else {
                if (i < sel) sel--
            }
        }
        if (vk_pl_url != "") kjtYpr.lIllOVRj11lO10Ypr("vk_pl_url", vk_pl_url);
        else if (kjtYpr.l1IlIl01l0tUIl1IIYpr.indexOf("vk://") == -1) {
            vk_pl_url = kjtYpr.l1IlIl01l0tUIl1IIYpr;
            kjtYpr.lIllOVRj11lO10Ypr("vk_pl_url", vk_pl_url)
        }
    }
    if (sel != null) vk_audio_sel = sel;
    if (vk_audio_sel > vk_audio_pl.length - 1) vk_audio_sel = 0;
    else if (vk_audio_sel < 0) vk_audio_sel = vk_audio_pl.length - 1;
    if (vk_autostart) {
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("vk_pl_url");
        if (s != "" && s.indexOf("http") == -1) {
            vk_cmd = "get_audio";
            vk_open(s, vk_autostart);
            return
        }
    }
    var u = vk_audio_pl[vk_audio_sel].stream_url.replace("audio://", "");
    if (u.indexOf("md5hash") != -1) {
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
        lO10OIOlxzlO100OIYpr("audiotitle", "_FPZagruzka_...");
        xhr2 = new XMLHttpRequest();
        xhr2.onreadystatechange = function () {
            if (xhr2.readyState == 4) {
                if (xhr2.status == 200) {
                    vk_audio_pl[vk_audio_sel].stream_url = vk_audio_pl[vk_audio_sel].stream_url.replace("md5hash", xhr2.responseText);
                    l0OO10QIvTrl10lYpr(null, sel)
                } else lO10OIOlxzlO100OIYpr("audiotitle", "_FPOshibka_ " + xhr2.status + "")
            }
        };
        xhr2.open('GET', vk_audio_pl[vk_audio_sel].parser.split("|")[0].replace("//obovse.ru", "//" + ServerFromList), !0);
        xhr2.send();
        return
    }
    if (u.indexOf("error.") > 0) {
        kjtYpr.inf("_FPOshibka_ " + u.replace("&okhash.mp3", "") + " - " + vk_audio_pl[vk_audio_sel].title, 1500);
        if (lOlI1OII1UehOl1lIOIOYpr) setTimeout('l0OO10QIvTrl10lYpr(vk_audio_pl,++vk_audio_sel);', 2000);
        return
    }
    if (u.indexOf("&okhash.mp3") > 0) u = getHash(u);
    lOlI1OII1UehOl1lIOIOYpr = !0;
    if (!stopped) {
        vk_audio_stop()
    }
    stopped = !1;
    end_ok = !1;
    if (platform == "sams") {
        if (Player.Sef) {
            Player.SEFPlay(u, 0)
        } else if (kjtYpr.series == "C") {
            Player.plugin.Play(u)
        } else {
            Player.plugin.InitPlayer(u);
            Player.plugin.SetPlayerProperty('2', '0', '0');
            Player.plugin.StartPlayback()
        }
    } else {
        l0O1l101l1t_Y0lll1Ypr = kjtYpr.GL.player;
        var a = kjtYpr.GL.audioplayer;
        if (platform == "android-device") l0O1l101l1t_Y0lll1Ypr = "html5";
        if (uaJ == "mag") {
            stb.Play(u);
            stb.SetPIG(1, 0, 0, 0);
            try {
                stb.SetWinMode(0)
            } catch (e) {}
            try {
                stb.SetTopWin(0)
            } catch (e) {}
        } else if (uaJ == "dune") {
            stb.play(u)
        } else if (platform == "tizen") {
            try {
                webapis.avplay.stop();
                webapis.avplay.open(u)
            } catch (e) {
                kjtYpr.popUp("Error 1<br>" + u + "<br>" + e.message, 4000)
            }
            try {
                webapis.avplay.setListener({
                    oncurrentplaytime: function (currentTime) {
                        Player.cur_time = currentTime;
                        getVideoPlayInfo()
                    },
                    ondrmevent: function (e, f) {},
                    onerror: function (e, f) {}
                });
                webapis.avplay.prepareAsync(function (e) {
                    webapis.avplay.play();
                    getVideoPlayInfo()
                }, function (e) {
                    lI1lI00l1gX0l0l0OYpr();
                    kjtYpr.popUp(e.toString(), 2500)
                })
            } catch (e) {
                kjtYpr.popUp(e.toString(), 2500)
            }
        } else if (a == 1 || a == 2 || a == 4) {
            if (a != 4 && (a == 2 || l0O1l101l1t_Y0lll1Ypr == "html5" || l0O1l101l1t_Y0lll1Ypr == "ifrhtml5")) {
                $_("other").style.display = "block";
                lO10OIOlxzlO100OIYpr("other", '<audio id="audio" autoplay="autoplay" src="' + u + '"></audio>');
                video = $_("audio")
            } else {
                $_("other").style.display = "block";
                type = "video/mp4";
                lO10OIOlxzlO100OIYpr("other", '<object type="' + type + '" preBufferingTime="8" audioLanguage="ru" data="' + u + '" width="100%" height="100%" id="media" autostart="true" downloadable="false"></object>');
                media = $_("media");
                setTimeout("media.play(1);", 200)
            }
        } else if (a == 3) {
            video = $_("video");
            video.src = u;
            if (uaJ == "lg" || uaJ == "lgw" || uaJ == "lgw2") video.type = "video/mp4";
            else video.type = "audio/mpeg";
            video.autoplay = !0;
            video.play()
        }
    }
    lIl1OAvvpIO0IYpr();
    $_("vk_audio").style.zIndex = "2";
    kjtYpr.lIllOVRj11lO10Ypr("vk_audio_pl", l10O0I11gdZlOOIIYpr(vk_audio_pl));
    kjtYpr.lIllOVRj11lO10Ypr("vk_audio_sel", vk_audio_sel)
}

function llO0QkPmellIQI1Ypr(sec) {
    m = Math.floor(sec / 60);
    h = Math.floor(m / 60);
    m = m % 60;
    s = sec % 60;
    if (m < 10) m = "0" + m;
    if (s < 10) s = "0" + s;
    return h + ":" + m + ":" + s
}
var xhrz;
var xss = "",
    alls = "",
    wint_name = "";

function sefOnEvent(m, s) {
    alls += s + "|";
    kjtYpr.popUp(s);
    var FilePlugin = $_('pluginObjectFileSystem');
    name = wint_name;
    try {
        var fileSystemObj = new FileSystem();
        var len = "";
        var arrFiles = fileSystemObj.readDir('/mtd_rwcommon/common');
        for (var i = 2; i < arrFiles.length; i++) {
            if (arrFiles[i].name == name + ".zip") {
                len = ToSize(arrFiles[i].size)
            }
        }
    } catch (e) {}
    var c = s.split("?");
    if (c[0] == "1001") {
        kjtYpr.inf("Загрузка (" + len + ")! " + c[1] + "%", 1200, "#eee");
        c[1] = c[1] / 1.2;
        if (c[1] < 10) c[1] = 10;
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(c[1])
    } else if (c[0] == "1000") {
        kjtYpr.popUp("_FPIdetUstanovkaVidgeta_...");
        kjtYpr.inf("_FPUstanovka_ (" + len + ")...", 1200, "#eee");
        setTimeout(function () {
            FilePlugin.Unzip('/mtd_rwcommon/widgets/user/' + name + ".zip", '/mtd_rwcommon/widgets/user/' + name + '/');
            if (FilePlugin.IsExistedPath('/mtd_rwcommon/widgets/user/' + name + "/config.xml")) {
                kjtYpr.inf("_FPVidget_ " + name + " _FPuspeshnoUstanovlen_!", 2000, "green");
                kjtYpr.popUp("<b>_FPViklIvklTVchtobiUv_ " + name + " _FPvSmHubVidgNaidDop_", 6000);
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100);
                urlinst = '/mtd_rwcommon/widgets/user/' + name + '/index.html';
                ll0111l1wxUIOlO1lYpr(12, "_FPOpenWidget_ " + name + "?<br>_FPForkPlayerByClosed_ " + name + " _FPrecomOpenFromSmartHub_", "_FPOpen_|_FPOtmena_")
            } else {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                kjtYpr.inf("_FPOshibkaUstanovki_ " + name + " !", 2000, "orange")
            }
        }, 1000)
    }
}
var urlinst = "",
    siptimer;

function savezipfile(url, n) {
    alls = "";
    clearTimeout(siptimer);
    siptimer = setTimeout(function () {
        if (alls == "") sefOnEvent(1, "1000?1")
    }, 20000);
    kjtYpr.popUp(url + "...");
    urlinst = "";
    var FilePlugin = $_('pluginObjectFileSystem');
    try {
        var leftspace = "<font color='#EEE'>Свободно в ТВ:</font> " + ToSize(FilePlugin.GetTotalSize() - FilePlugin.GetUsedSize())
    } catch (e) {}
    Wdg = /\.zip$/i;
    if (Wdg.exec(url) != null) {
        if (n == null) var name = url.substr(url.lastIndexOf("/") + 1).replace(/.zip/i, "");
        else name = n;
        wint_name = name;
        if (FilePlugin.IsExistedPath('/mtd_rwcommon/widgets/user/' + name + '/config.xml') && !wlistRewrite) {
            clearTimeout(siptimer);
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            kjtYpr.inf("_FPVidget_ " + name + " _FPuzheEstVustanovlennih_!", 2000, "red");
            urlinst = '/mtd_rwcommon/widgets/user/' + name + '/index.html';
            ll0111l1wxUIOlO1lYpr(12, "_FPOpenWidget_ " + name + "?<br>_FPForkPlayerByClosed_ " + name + " _FPrecomOpenFromSmartHub_", "_FPOpen_|_FPOtmena_");
            return
        }
        if (Player.Sef) {
            Player.SefPlugin.Open("Download", "1.000", "");
            Player.SefPlugin.OnEvent = 'sefOnEvent';
            var ret = Player.SefPlugin.Execute('StartDownFile', url, '/mtd_rwcommon/widgets/user/' + name + ".zip", 10, 10);
            if (ret) {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(5)
            } else kjtYpr.inf("_FPOshibka_!", 2000, "orange")
        } else kjtYpr.inf("_FPnePodderzhivaetsya_ на вашем ТВ!", 2000, "orange");
        return;
        xhrz = new XMLHttpRequest();
        xhrz.onreadystatechange = function () {
            if (xhrz.readyState == 4) {
                data = xhrz.responseText;
                var s = '';
                zip.createReader(new zip.BlobReader(data), function (reader) {
                    reader.getEntries(function (entries) {
                        if (entries.length) {
                            entries[0].getData(new zip.TextWriter(), function (text) {
                                s += text;
                                kjtYpr.popUp(s);
                                reader.close(function () {})
                            }, function (current, total) {})
                        }
                    })
                }, function (error) {
                    kjtYpr.popUp(error)
                });
                return;
                var fileSystemObj = new FileSystem();
                fileSystemObj.deleteCommonFile(curWidget.id + '/' + name + ".zip");
                tizen.filesystem.resolve("/mtd_rwcommon/common/" + curWidget.id + "/" + name + ".zip", function (dir) {
                    documentsDir = dir;
                    documentsDir.write(xhrz.responseText)
                }, function (e) {}, "w");
                FilePlugin.Copy("/mtd_rwcommon/common/" + curWidget.id + "/" + name + ".zip", '/dtv/usb/sda1/' + name + '.zip');
                if (FilePlugin.IsExistedPath("/mtd_rwcommon/common/" + curWidget.id + "/" + name + ".zip")) {
                    kjtYpr.inf(xhrz.responseText.length);
                    FilePlugin.Unzip("/mtd_rwcommon/common/" + curWidget.id + "/" + name + ".zip", w_to);
                    if (FilePlugin.IsExistedPath(w_to + 'config.xml')) {
                        kjtYpr.inf("Виджет " + name + " успешно установлен!", 2000, "green");
                        kjtYpr.popUp("Выключите и включите ТВ чтоб увидеть " + name + " в смартхаб!</b><br>Виджет вы найдете в приложениях в смартхабе, или в Дополнительные приложения (Серия F)", 6000);
                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
                    } else {
                        kjtYpr.inf("" + name + " _FPOshibka_ установки!", 2000, "orange");
                        kjtYpr.lIllOVRj11lO10Ypr(name + ".zip", '<?xml version="1.0" encoding="UTF-8"?>\
<widget xmlns="http://www.samsung.com/"><ThumbIcon>icon/106.png</ThumbIcon>\
					    <BigThumbIcon>icon/115.png</BigThumbIcon>\
					    <ListIcon>icon/85.png</ListIcon>\
					    <BigListIcon>icon/95.png</BigListIcon>\
					    <category itemtype="string"/>\
					    <type itemtype="string">user</type>\
					    <fullwidget itemtype="boolean">y</fullwidget>\
					    <mouse itemtype="boolean">y</mouse>\
					    <ticker itemtype="boolean">n</ticker>\
					    <dcont itemtype="string">y</dcont>\
					    <widgetname itemtype="string">' + name + '-error</widgetname>\
					    <description itemtype="string"/>\
					    <width itemtype="number">1280</width>\
					    <height itemtype="number">720</height>\
					    <deleteJS>reset</deleteJS>\
					    <author itemtype="group">\
					        <name itemtype="string"/>\
					        <email itemtype="string"/>\
					        <link itemtype="string"/>\
					        <organization itemtype="string"/>\
					    </author>\
					</widget>');
                        FilePlugin.Copy("/mtd_rwcommon/common/" + curWidget.id + "/" + name + ".zip", '/dtv/usb/sda1/pl/config.xml');
                        FilePlugin.Copy("/mtd_rwcommon/common/" + curWidget.id + "/" + name + ".zip", w_to + 'config.xml')
                    }
                }
            }
        };
        xhrz.overrideMimeType('text/plain; charset=x-user-defined');
        xhrz.open('GET', url, !0);
        xhrz.send()
    }
}

function ScanUsbPort() {
    if (platform != "sams") return kjtYpr.inf("Чтение USB только для самсунг!", "orange", 1500);
    var StoragePlugin = $_('pluginStorage');
    var nUSBCount = StoragePlugin.GetUSBListSize();
    var data = {
        "playlist_name": "",
        "channels": []
    };
    if (nUSBCount > 0) {
        for (var i = 0; i < nUSBCount; i++) {
            var DeviceId = parseInt(StoragePlugin.GetUSBDeviceID(i));
            var MountPath = StoragePlugin.GetUSBMountPath(DeviceId, 0);
            var usbPath = '/dtv/usb/' + MountPath;
            text = StoragePlugin.GetUSBVendorName(DeviceId) + "<br>" + StoragePlugin.GetUSBModelName(DeviceId) + "<br>" + MountPath;
            data.channels.push({
                "title": StoragePlugin.GetUSBVendorName(DeviceId) + " (" + StoragePlugin.GetUSBModelName(DeviceId) + ")",
                "description": text,
                "playlist_url": "usb://" + usbPath
            })
        }
    } else kjtYpr.inf("_FPNoDevices_ USB", 1500, "orange");
    insetIn(-1, "s", select);
    kjtYpr.l1IlIl01l0tUIl1IIYpr = "usb://";
    data.channels.push({
        "title": "_FPTVmemory_",
        "description": "_FPTVmemory_ ТВ",
        "playlist_url": "usb:///mtd_rwcommon/common"
    });
    kjtYpr.l00100lIKlBWw1lllIlYpr(data);
    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0)
}

function usbDelete(usbPath) {
    var FilePlugin = $_('pluginObjectFileSystem');
    if (FilePlugin.IsExistedPath(usbPath)) FilePlugin.Delete(usbPath);
    else {
        kjtYpr.inf("_FPOshibka_ удаления!", 1800);
        return
    }
    if (FilePlugin.IsExistedPath(usbPath)) kjtYpr.inf("_FPOshibka_!", 1800);
    else kjtYpr.inf("Удалено!", 1800)
}

function sefOnEventDown(m, s) {
    var c = s.split("?");
    if (c[0] != "1000") {
        rettm = "_FPZagruzka_ " + c[1] + "% " + retname + " _FPQueue_: " + retlast + " _FPPressStopToCancel_";
        statusbar(rettm, "copy")
    } else statusbar("off")
}
var numret = 0,
    ret = null,
    retname = "",
    retlast = "",
    rettimer, retInterval, rettm = "";

function pasteFile(from, to, names) {
    ss = from.split("-|-");
    ssn = names.split("-|-");
    var retry = !1;
    for (var i = 0; i < ss.length; i++) {
        var x = usbCopy(ss[i], to, ssn[i]);
        if (x == 2) {
            retlast = ss.length;
            ss.splice(i, 1);
            ssn.splice(i, 1);
            i--
        } else if (x == 1) {
            retlast = ss.length;
            rettm = "_FPZagruzka_ " + ssn[i] + " _FPQueue_: " + (ss.length - 1) + " _FPPressStopToCancel_";
            statusbar(rettm, "copy");
            ss.splice(i, 1);
            ssn.splice(i, 1);
            i--;
            if (kjtYpr.l1IlIl01l0tUIl1IIYpr.replace("usb://", "").replace("xml://", "") == to) {
                ll1lIOiIO0lO1IIIYpr = Math.random();
                kjtYpr.l110l1lIPuoaO0I0IOYpr(kjtYpr.l1IlIl01l0tUIl1IIYpr)
            }
        } else if (x == -1) {
            retry = !0;
            numret++;
            retlast = ss.length;
            from = ss.join("-|-");
            names = ssn.join("-|-");
            rettimer = setTimeout('pasteFile("' + from + '","' + to + '","' + names + '")', 1300);
            break
        } else if (x == 0) {
            retry = !0;
            retlast = ss.length;
            from = ss.join("-|-");
            names = ssn.join("-|-");
            rettimer = setTimeout('pasteFile("' + from + '","' + to + '","' + names + '")', 1300);
            break
        }
    }
    if (!retry) retInterval = setInterval(function () {
        Player.SefPlugin.Open("Download", "1.000", "");
        if (Player.SefPlugin.Execute('StartDownFile', "http://ya.ru/", "/mtd_rwcommon/common/test", 1, 1)) {
            clearInterval(retInterval);
            statusbar("off")
        } else {
            statusbar(rettm, "copy")
        }
    }, 500)
}

function usbCopy(usbPath, to, names) {
    try {
        if (copyUsbMode == 1) return 0;
        var FilePlugin = $_('pluginObjectFileSystem');
        if (usbPath.indexOf("http") == 0) {
            if (Player.Sef) {
                var name = usbPath.substr(usbPath.lastIndexOf("/") + 1);
                if (name.indexOf("?") > 0) name = name.substr(0, name.indexOf("?"));
                if (names != null && names != "") {
                    names = totranslit(names, !1).replace(/[^a-zA-Z0-9.]/g, '_');
                    names += name.substr(name.lastIndexOf("."));
                    name = names
                }
                if (FilePlugin.IsExistedPath(to + '/' + name)) {
                    if (copyUsbMode == 0) {
                        copyUsbMode = 1;
                        ll0111l1wxUIOlO1lYpr(52, name + " _FPexistOverwrite_?", "_FPOverwriteAll_|_FPSkipAll_");
                        return 0
                    } else if (copyUsbMode == 3) {
                        statusbar("_FPSkipAll_ " + name, 2000);
                        return 2
                    }
                }
                Player.SefPlugin.Open("Download", "1.000", "");
                Player.SefPlugin.OnEvent = 'sefOnEventDown';
                ret = Player.SefPlugin.Execute('StartDownFile', usbPath, to + '/' + name, 1, 1);
                if (!ret) return -1;
                else {
                    kjtYpr.inf("_FPZagruzka_! _FPQueue_: " + retlast + " _FPPressStopToCancel_!", 2000);
                    retname = name;
                    return 1
                }
            } else kjtYpr.inf("_FPnePodderzhivaetsya_ на вашем ТВ!", 2000, "orange")
        } else {
            var FilePlugin = $_('pluginObjectFileSystem');
            FilePlugin.Copy(usbPath, to)
        }
    } catch (e) {
        kjtYpr.popUp(e.message)
    }
}
Playlist = /\.(m3u|xml|txt)$/i;
Wdg = /\.zip$/i;

function getUsbList(usbPath) {
    usbPath = usbPath.replace("//", "/").replace("//", "/");
    if (platform != "sams") return kjtYpr.inf("Чтение USB только для самсунг!", "orange", 1500);
    var FilePlugin = $_('pluginObjectFileSystem');
    try {
        var leftspace = "<font color='#EEE'>Свободно в ТВ:</font> " + ToSize(FilePlugin.GetTotalSize() - FilePlugin.GetUsedSize())
    } catch (e) {}
    if (Wdg.exec(usbPath) != null) {
        var name = usbPath.substr(usbPath.lastIndexOf("/") + 1).replace(/.zip/i, "");
        if (FilePlugin.IsExistedPath('/mtd_rwcommon/widgets/user/' + name + '/config.xml')) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            kjtYpr.inf("_FPVidget_ " + name + " _FPuzheEstVustanovlennih_!", 2000, "red")
        } else {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(10);
            setTimeout(function () {
                FilePlugin.Unzip(usbPath, '/mtd_rwcommon/widgets/user/' + name + '/');
                if (FilePlugin.IsExistedPath('/mtd_rwcommon/widgets/user/' + name + '/config.xml')) {
                    kjtYpr.inf("_FPVidget_ " + name + " _FPuspeshnoUstanovlen_!", 2000, "green");
                    kjtYpr.popUp("_FPViklIvklTVchtobiUv_ " + name + " _FPvSmHubVidgNaidDop_", 6000);
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(100)
                } else {
                    kjtYpr.inf("_FPOshibkaUstanovki_" + name + " !", 2000, "orange")
                }
            }, 300)
        }
        return
    }
    var fileSystemObj = new FileSystem();
    var arrFiles = fileSystemObj.readDir(usbPath);
    var data = {
        "playlist_name": "",
        "channels": []
    };
    if (arrFiles) {
        if (arrFiles.length == 2) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            kjtYpr.inf("_FPPustayaPapka_!", 1000);
            data.channels.push(emptyCh)
        }
        for (var i = 2; i < arrFiles.length; i++) {
            if (arrFiles[i].isDir) {
                data.channels.push({
                    "title": arrFiles[i].name,
                    "playlist_url": "usb://" + usbPath + "/" + arrFiles[i].name,
                    "description": arrFiles[i].name
                })
            }
        }
        for (var i = 2; i < arrFiles.length; i++) {
            if (!arrFiles[i].isDir) {
                if (Playlist.exec(arrFiles[i].name) != null)
                    data.channels.push({
                        "title": arrFiles[i].name,
                        "playlist_url": "xml://" + usbPath + "/" + arrFiles[i].name,
                        "description": arrFiles[i].name + "<br>" + ToSize(arrFiles[i].size) + "<br>" + "xml://" + usbPath + "/" + arrFiles[i].name
                    });
                else if (Wdg.exec(arrFiles[i].name) != null)
                    data.channels.push({
                        "logo_30x30": "none",
                        "title": "<font color='#FFC600'>" + arrFiles[i].name + "</font>",
                        "playlist_url": "usb://" + usbPath + "/" + arrFiles[i].name,
                        "description": "<span style='color:red;'><font color='#EEE'>Установка виджета:</font> " + arrFiles[i].name + "<br><font color='#EEE'>_FPRazmer_:</font> " + ToSize(arrFiles[i].size) + "<br>" + leftspace + "<br><br>Внимание! Убедитесь что в архиве находится именно виджет для самсунг смарт тв и достаточно свободного места</span>"
                    });
                else data.channels.push({
                    "title": arrFiles[i].name,
                    "stream_url": "" + usbPath + "/" + arrFiles[i].name,
                    "description": arrFiles[i].name + "<br>" + ToSize(arrFiles[i].size)
                })
            }
        }
    } else {
        if (arrFiles.length == 2) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            kjtYpr.inf("_FPPustayaPapka_!", 1000);
            data.channels.push(emptyCh)
        }
    }
    insetIn(-1, "s", select);
    kjtYpr.l1IlIl01l0tUIl1IIYpr = "usb://" + usbPath;
    kjtYpr.l00100lIKlBWw1lllIlYpr(data)
}

function TUsbList(dir) {
    var data = {
        "playlist_name": "",
        "channels": []
    };
    if (dir == "/") {
        tizen.filesystem.listStorages(function (r) {
            if (ttmac) {}
            for (var i = 0; i < r.length; i++) {
                data.channels.push({
                    "title": r[i].label,
                    "playlist_url": "usb:/" + dir + r[i].label,
                    "description": "usb:/" + dir + r[i].label + "<br>" + r[i].type + "<br>" + r[i].state
                })
            }
            kjtYpr.l1IlIl01l0tUIl1IIYpr = "usb:/" + dir;
            kjtYpr.l00100lIKlBWw1lllIlYpr(data)
        }, function () {})
    } else {
        if (dir.match(/\.wgt$/)) {
            kjtYpr.popUp("Install package " + dir, 1500);
            var onInstallation = {
                onprogress: function (packageId, percentage) {
                    kjtYpr.popUp("On installation(" + packageId + ") : progress(" + percentage + ")", 1000)
                },
                oncomplete: function (packageId) {
                    kjtYpr.popUp("Installation(" + packageId + ") Complete", 1000)
                }
            }
            var onError = function (err) {}
            tizen.filesystem.resolve(dir.substr(1), function (file) {
                kjtYpr.popUp("file URI : " + file.toURI(), 1500);
                try {
                    tizen.package.install(file.toURI(), onInstallation, onError)
                } catch (e) {
                    kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 0);
                    kjtYpr.popUp("Er: " + e.message, 1500)
                }
            }, function (err) {
                kjtYpr.popUp("Error occurred on resolve : " + err.name, 1500)
            }, "r");
            return
        }
        var documentsDir;

        function onsuccess(files) {
            try {
                for (var i = 0; i < files.length; i++) {
                    if (!files[i].isFile) {
                        data.channels.push({
                            "title": files[i].name,
                            "playlist_url": "usb:/" + dir + "/" + files[i].name,
                            "description": files[i].name
                        })
                    }
                }
                for (var i = 0; i < files.length; i++) {
                    if (files[i].isFile) {
                        if (Playlist.exec(files[i].name) != null)
                            data.channels.push({
                                "logo_30x30": _img('_OT_xmls.png'),
                                "title": files[i].name,
                                "playlist_url": "xml://" + files[i].fullPath,
                                "description": files[i].name + "<br>" + files[i].modified + "<br>" + ToSize(files[i].fileSize) + "<br>" + "xml://" + files[i].fullPath
                            });
                        else if (files[i].name.match(/\.wgt$/))
                            data.channels.push({
                                "logo_30x30": "",
                                "title": "<font color='#FFC600'>" + files[i].name + "</font>",
                                "playlist_url": "usb:/" + dir + "/" + files[i].name,
                                "description": "<span style='color:red;'><font color='#EEE'>Установка виджета:</font> " + files[i].name + "<br>" + files[i].modified + "<br>" + ToSize(files[i].fileSize) + "<br><br><br>Внимание! Убедитесь что в архиве находится именно виджет для самсунг TIZEN смарт тв и достаточно свободного места</span>"
                            });
                        else if (files[i].name.match(/\.(htm|html)$/))
                            data.channels.push({
                                "logo_30x30": "",
                                "title": "<font color='#FFC600'>" + files[i].name + "</font>",
                                "playlist_url": "html://" + files[i].fullPath,
                                "description": "<span style='color:red;'><font color='#EEE'>Открыть html страницу:</font> " + files[i].name + "<br>" + files[i].modified + "<br>" + ToSize(files[i].fileSize) + "<br><br><br>Внимание! ForkPlayer будет закрыт!</span>"
                            });
                        else {
                            data.channels.push({
                                "title": files[i].name,
                                "stream_url": files[i].fullPath,
                                "description": files[i].name + "<br>" + files[i].modified + "<br>" + ToSize(files[i].fileSize) + "<br>"
                            });
                            if (is_img(files[i].fullPath)) {
                                data.channels[data.channels.length - 1].logo_30x30 = files[i].fullPath;
                                data.channels[data.channels.length - 1].description = '<div id="poster" style="float:left;padding:4px;background-color:#EEEEEE;margin:0px 13px 1px 0px;"><img src="' + files[i].fullPath + '" style="width:180px;float:left;"></div>' + data.channels[data.channels.length - 1].description
                            }
                        }
                    }
                }
                kjtYpr.l1IlIl01l0tUIl1IIYpr = "usb:/" + dir;
                kjtYpr.l00100lIKlBWw1lllIlYpr(data)
            } catch (e) {
                kjtYpr.popUp("ONS=" + e.message, 2000)
            }
        }

        function onerror(error) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 0)
        }
        tizen.filesystem.resolve(dir.substr(1), function (dir2) {
            documentsDir = dir2;
            dir2.listFiles(onsuccess, onerror)
        }, function (e) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 0);
            kjtYpr.popUp(e.message, 2000)
        }, "r")
    }
}

function ToSize(b) {
    var a = (b >= 1073741824) ? (b / 1073741824)["toFixed"](2) + " ГБ" : (b >= 1048576) ? (b / 1048576)["toFixed"](2) + " МБ" : (b >= 1024) ? (b / 1024)["toFixed"](2) + " КБ" : (b >= 0) ? b + " Байт" : (b < 0) ? (2 + b / 1073741824)["toFixed"](2) + " ГБ" : "";
    return a
}

function parse_urlk(uk) {
    try {
        var parse_ur = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
        var result = parse_ur.exec(uk);
        return result
    } catch (e) {
        return uk
    }
}

function in_array(needle, haystack, strict) {
    var found = !1,
        key, strict = !!strict;
    for (key in haystack) {
        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {
            found = !0;
            break
        }
    }
    return found
}

function trutf8(utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;
    while (i < utftext.length) {
        c = utftext.charCodeAt(i);
        if (c < 128) {
            string += String.fromCharCode(c);
            i++
        } else if ((c > 191) && (c < 224)) {
            c2 = utftext.charCodeAt(i + 1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2
        } else {
            c2 = utftext.charCodeAt(i + 1);
            c3 = utftext.charCodeAt(i + 2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3
        }
    }
    return string
}

function md5hashdecode(str) {
    var md5hashchars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg' + 'hijklmnopqrstuvwxyz0123456789+/=';
    var md5hashdecoded = '';
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    str = str.replace(/[^a-z0-9\+\/\=]/gi, '');
    for (var i = 0; i < str.length;) {
        enc1 = md5hashchars.indexOf(str.charAt(i++));
        enc2 = md5hashchars.indexOf(str.charAt(i++));
        enc3 = md5hashchars.indexOf(str.charAt(i++));
        enc4 = md5hashchars.indexOf(str.charAt(i++));
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        md5hashdecoded = md5hashdecoded + String.fromCharCode(chr1);
        if (enc3 < 64) {
            md5hashdecoded += String.fromCharCode(chr2)
        }
        if (enc4 < 64) {
            md5hashdecoded += String.fromCharCode(chr3)
        }
    }
    return md5hashdecoded
}
var DMap = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    10: 10,
    11: 11,
    12: 12,
    13: 13,
    14: 14,
    15: 15,
    16: 16,
    17: 17,
    18: 18,
    19: 19,
    20: 20,
    21: 21,
    22: 22,
    23: 23,
    24: 24,
    25: 25,
    26: 26,
    27: 27,
    28: 28,
    29: 29,
    30: 30,
    31: 31,
    32: 32,
    33: 33,
    34: 34,
    35: 35,
    36: 36,
    37: 37,
    38: 38,
    39: 39,
    40: 40,
    41: 41,
    42: 42,
    43: 43,
    44: 44,
    45: 45,
    46: 46,
    47: 47,
    48: 48,
    49: 49,
    50: 50,
    51: 51,
    52: 52,
    53: 53,
    54: 54,
    55: 55,
    56: 56,
    57: 57,
    58: 58,
    59: 59,
    60: 60,
    61: 61,
    62: 62,
    63: 63,
    64: 64,
    65: 65,
    66: 66,
    67: 67,
    68: 68,
    69: 69,
    70: 70,
    71: 71,
    72: 72,
    73: 73,
    74: 74,
    75: 75,
    76: 76,
    77: 77,
    78: 78,
    79: 79,
    80: 80,
    81: 81,
    82: 82,
    83: 83,
    84: 84,
    85: 85,
    86: 86,
    87: 87,
    88: 88,
    89: 89,
    90: 90,
    91: 91,
    92: 92,
    93: 93,
    94: 94,
    95: 95,
    96: 96,
    97: 97,
    98: 98,
    99: 99,
    100: 100,
    101: 101,
    102: 102,
    103: 103,
    104: 104,
    105: 105,
    106: 106,
    107: 107,
    108: 108,
    109: 109,
    110: 110,
    111: 111,
    112: 112,
    113: 113,
    114: 114,
    115: 115,
    116: 116,
    117: 117,
    118: 118,
    119: 119,
    120: 120,
    121: 121,
    122: 122,
    123: 123,
    124: 124,
    125: 125,
    126: 126,
    127: 127,
    1027: 129,
    8225: 135,
    1046: 198,
    8222: 132,
    1047: 199,
    1168: 165,
    1048: 200,
    1113: 154,
    1049: 201,
    1045: 197,
    1050: 202,
    1028: 170,
    160: 160,
    1040: 192,
    1051: 203,
    164: 164,
    166: 166,
    167: 167,
    169: 169,
    171: 171,
    172: 172,
    173: 173,
    174: 174,
    1053: 205,
    176: 176,
    177: 177,
    1114: 156,
    181: 181,
    182: 182,
    183: 183,
    8221: 148,
    187: 187,
    1029: 189,
    1056: 208,
    1057: 209,
    1058: 210,
    8364: 136,
    1112: 188,
    1115: 158,
    1059: 211,
    1060: 212,
    1030: 178,
    1061: 213,
    1062: 214,
    1063: 215,
    1116: 157,
    1064: 216,
    1065: 217,
    1031: 175,
    1066: 218,
    1067: 219,
    1068: 220,
    1069: 221,
    1070: 222,
    1032: 163,
    8226: 149,
    1071: 223,
    1072: 224,
    8482: 153,
    1073: 225,
    8240: 137,
    1118: 162,
    1074: 226,
    1110: 179,
    8230: 133,
    1075: 227,
    1033: 138,
    1076: 228,
    1077: 229,
    8211: 150,
    1078: 230,
    1119: 159,
    1079: 231,
    1042: 194,
    1080: 232,
    1034: 140,
    1025: 168,
    1081: 233,
    1082: 234,
    8212: 151,
    1083: 235,
    1169: 180,
    1084: 236,
    1052: 204,
    1085: 237,
    1035: 142,
    1086: 238,
    1087: 239,
    1088: 240,
    1089: 241,
    1090: 242,
    1036: 141,
    1041: 193,
    1091: 243,
    1092: 244,
    8224: 134,
    1093: 245,
    8470: 185,
    1094: 246,
    1054: 206,
    1095: 247,
    1096: 248,
    8249: 139,
    1097: 249,
    1098: 250,
    1044: 196,
    1099: 251,
    1111: 191,
    1055: 207,
    1100: 252,
    1038: 161,
    8220: 147,
    1101: 253,
    8250: 155,
    1102: 254,
    8216: 145,
    1103: 255,
    1043: 195,
    1105: 184,
    1039: 143,
    1026: 128,
    1106: 144,
    8218: 130,
    1107: 131,
    8217: 146,
    1108: 186,
    1109: 190
}

function UnicodeToWin1251(s) {
    return parseHtmlEnteties(s)
}

function parseHtmlEnteties(str) {
    return str.replace(/&#([0-9]{1,4});/gi, function (match, numStr) {
        var num = parseInt(numStr, 10);
        return String.fromCharCode(num)
    })
}
var ip2long = function (ip) {
    var components;
    if (components = ip.match(/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/)) {
        var iplong = 0;
        var power = 1;
        for (var i = 4; i >= 1; i -= 1) {
            iplong += power * parseInt(components[i]);
            power *= 256
        }
        return iplong
    } else return -1
};
var inSubNet = function (ip, subnet) {
    var mask, base_ip, long_ip = ip2long(ip);
    if ((mask = subnet.match(/^(.*?)\/(\d{1,2})$/)) && ((base_ip = ip2long(mask[1])) >= 0)) {
        var freedom = Math.pow(2, 32 - parseInt(mask[2]));
        return (long_ip > base_ip) && (long_ip < base_ip + freedom - 1)
    } else return !1
};
var b64_ENCODE_keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

function b64_ENCODE(e) {
    var t = "";
    var n, r, i, s, o, u, a;
    var f = 0;
    e = b64_utf8_encode(e);
    while (f < e.length) {
        n = e.charCodeAt(f++);
        r = e.charCodeAt(f++);
        i = e.charCodeAt(f++);
        s = n >> 2;
        o = (n & 3) << 4 | r >> 4;
        u = (r & 15) << 2 | i >> 6;
        a = i & 63;
        if (isNaN(r)) {
            u = a = 64
        } else if (isNaN(i)) {
            a = 64
        }
        t = t + b64_ENCODE_keyStr.charAt(s) + b64_ENCODE_keyStr.charAt(o) + b64_ENCODE_keyStr.charAt(u) + b64_ENCODE_keyStr.charAt(a)
    }
    return t
}

function b64_utf8_encode(e) {
    e = e.replace(/\r\n/g, "\n");
    var t = "";
    for (var n = 0; n < e.length; n++) {
        var r = e.charCodeAt(n);
        if (r < 128) {
            t += String.fromCharCode(r)
        } else if (r > 127 && r < 2048) {
            t += String.fromCharCode(r >> 6 | 192);
            t += String.fromCharCode(r & 63 | 128)
        } else {
            t += String.fromCharCode(r >> 12 | 224);
            t += String.fromCharCode(r >> 6 & 63 | 128);
            t += String.fromCharCode(r & 63 | 128)
        }
    }
    return t
}

function initsnow() {
    var div = document.createElement('div');
    div.id = "snow";
    $_("main").appendChild(div);
    return
}

function fixEvent(e) {
    e = e || window.event;
    if (e.pageX == null && e.clientX != null) {
        var html = document.documentElement
        var body = document.body
        e.pageX = e.clientX + (html && html.scrollLeft || body && body.scrollLeft || 0) - (html.clientLeft || 0)
        e.pageY = e.clientY + (html && html.scrollTop || body && body.scrollTop || 0) - (html.clientTop || 0)
    }
    if (!e.which && e.button) {
        e.which = e.button & 1 ? 1 : (e.button & 2 ? 3 : (e.button & 4 ? 2 : 0))
    }
    return e
}

function getPosition(e) {
    var left = 0
    var top = 0
    while (e.offsetParent) {
        left += e.offsetLeft
        top += e.offsetTop
        e = e.offsetParent
    }
    left += e.offsetLeft
    top += e.offsetTop
    return {
        x: left,
        y: top
    }
}
var glscr = null,
    remotesubsrc = "",
    gl_zz, gl_uag;

function mw_get(zz, uag) {
    if (gV(glscr, 2) == "") return null;
    gl_zz = zz;
    gl_uag = uag;
    i = {
        a: 157,
        b: 455914,
        c: !1,
        d: "moonplayer",
        e: gl_zz.video_token,
        f: gl_uag
    };
    this.options = gl_zz;
    if (glscr != null) {
        glscr[1] = glscr[1].replace("this.options.video_token", 'gl_zz["video_token"]');
        glscr[1] = glscr[1].replace("navigator.userAgent", 'gl_uag');
        s = "try{" + glscr[1] + ";u=" + glscr[2] + ";}catch(e){ kjtYpr.popUp('Error MW GET: '+e.message,2000);}";
        eval(s);
        return u
    } else {
        return null
    }
}
var mainDom = "mastarti.com";
var tmglsrc = 0;
var mwtn = 0,
    xhr4, fastremote_timer;

function mwt(u, mode, request_id) {
    if (request_id != kjtYpr.REQUEST_ID) {
        return
    }
    if (mode == null) mode = "";
    xhr4 = null;
    xhr4 = new XMLHttpRequest();
    xhr4.onreadystatechange = function () {
        if (xhr4.readyState == 4) {
            if (xhr4.status == 200 && xhr4.responseText != "wait") {
                var s = xhr4.responseText;
                if (mode == "fastremote") {
                    POST_S = s;
                    lOOlIII1usp1UIlI1lYpr(waitc.xml_url, waitc.l00Q0OlutuW01I0Ypr + "&fastremote=1", waitc.sel, waitc.data_parse, waitc.l0Il01GzIvcIlllIYpr, request_id)
                } else if (s.indexOf("http") == 0) {
                    var xhrt3 = null;
                    xhrt3 = new XMLHttpRequest();
                    xhrt3.onreadystatechange = function () {
                        if (xhrt3.readyState == 4) {
                            var s = xhrt3.responseText;
                            if (s.match(/(http.*?m3u8)/)) {
                                if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                                    l0llQlOl1LaOlQ1Ypr();
                                    lI1l1IOllHHCTuO0OlOYpr("http://" + ServerFromList + "/smarttv/hdrezka.php?idcont=" + b64_ENCODE(s) + "&.m3u8")
                                } else {
                                    addqualhls4(s);
                                    k = 0;
                                    for (var i in kjtYpr.YoutubeURL) {
                                        if (parseInt(i) > k && i < (sQual[kjtYpr.GL.quality] + 40)) k = i
                                    }
                                    if (k == 0) {
                                        k = 10000;
                                        for (var i in data) {
                                            if (parseInt(i) < k && i > sQual[kjtYpr.GL.quality] - 40)
                                                if (data[i].audio == "1") k = i
                                        }
                                    }
                                    l0llQlOl1LaOlQ1Ypr();
                                    lI1l1IOllHHCTuO0OlOYpr(kjtYpr.YoutubeURL[k].url)
                                }
                            } else {
                                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                                lI1lI00l1gX0l0l0OYpr(!0)
                            }
                        }
                    };
                    xhrt3.open('GET', s, !0);
                    xhrt3.send()
                } else {
                    var mtc = s.match(/#EXT-X-MEDIA:TYPE=SUBTITLES.*?URI="(http.*?)"/);
                    if (mtc != null) {
                        subsrc = [];
                        subsrc.push(["1", mtc[1]])
                    }
                    if (s.indexOf('EXTM3U') == -1) {
                        s = s.replace(/#EXT-X-MEDIA:TYPE=SUBTITLES.*?URI=".*?"/, "");
                        PullDataFrom(s, "m3u8");
                        return
                    }
                    if (l0O1l101l1t_Y0lll1Ypr == "jw") {
                        l0llQlOl1LaOlQ1Ypr();
                        lI1l1IOllHHCTuO0OlOYpr("http://" + ServerFromList + "/smarttv/hdrezka.php?idcont=" + b64_ENCODE(s) + "&.m3u8")
                    } else {
                        var mtc = s.replace(/\r/g, "").replace(/\n/g, "").match(/(http.*?m3u8)/g);
                        if (mtc != null) {
                            var n = 3 - kjtYpr.GL.quality;
                            if (n < 0) n = 0;
                            if (timestamp < 1 && n == 3) n = 2;
                            if (n > mtc.length - 1) n = mtc.length - 1;
                            m3u8_url = mtc[n]
                        }
                        l0llQlOl1LaOlQ1Ypr();
                        lI1l1IOllHHCTuO0OlOYpr(m3u8_url);
                        addqualhls4(s)
                    }
                }
                xhr4 = null;
                return
            }
            mwtn++;
            if (mode == "fastremote") mn = 5;
            else mn = 5;
            if (mwtn < mn) fastremote_timer = setTimeout("mwt('" + u + "','" + mode + "','" + request_id + "')", 4000);
            else {
                xhr4 = null;
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                if (!is_ifr()) {
                    lI1lI00l1gX0l0l0OYpr(!0);
                    kjtYpr.popUp("Истекло время ожидания получения ссылки! Попробуйте позже или включите RemoteFork для более быстрой обработки ссылок", 2500)
                }
            }
        }
    };
    xhr4.open('GET', u, !0);
    xhr4.send()
}

function fmod(x, y) {
    var tmp;
    var tmp2;
    var p = 0;
    var pY = 0;
    var l = 0.0;
    var l2 = 0.0;
    tmp = x.toExponential().match(/^.\.?(.*)e(.+)$/);
    p = parseInt(tmp[2], 10) - (tmp[1] + '').length;
    tmp = y.toExponential().match(/^.\.?(.*)e(.+)$/);
    pY = parseInt(tmp[2], 10) - (tmp[1] + '').length;
    if (pY > p) {
        p = pY
    }
    tmp2 = (x % y);
    if (p < -100 || p > 20) {
        l = Math.round(Math.log(tmp2) / Math.log(10));
        l2 = Math.pow(10, l);
        return (tmp2 / l2).toFixed(l - p) * l2
    } else {
        return parseFloat(tmp2.toFixed(-p))
    }
}
var apptree = !0,
    cookies = "";
var playerKeyParamskey = 5,
    numClient, clientKey, f_id;
var h_cookies = {
    "mycook": "b9609d5f809490b022067ac8e9688230",
    "test": "1"
};
var usra = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.110 Safari/537.36";
var bb = !0;
var fpp = "",
    fkp = "";

function setcook(s, d) {
    if (d == null) d = "";
    try {} catch (e) {}
    var regexp0 = new RegExp("Set-Cookie:(.*)", "ig");
    var mtc = s.match(/Set-Cookie:(.*)/);
    while ((mtc = regexp0.exec(s)) != null) {
        var regexp = new RegExp(" ([0-9a-zA-Z%_\-]+)=([0-9a-zA-Z%_\-]+);", "ig");
        while ((ch = regexp.exec(mtc[1])) != null) {
            if (ch[1] == "Age" || ch[1] == "domain" || ch[1] == "path" || ch[1] == "expires" || ch[1] == "Max-Age" || ch[2].indexOf(";") > 0 || ch[1].indexOf(";") > 0) continue;
            if (d == "tree.tv" && ch[1] == "PHPSESSID" && !1) {} else {
                h_cookies[ch[1]] = ch[2]
            }
        }
    }
    cookies = '';
    for (var i in h_cookies) {
        if (cookies != "") cookies += "; ";
        cookies += i + '=' + h_cookies[i] + ""
    }
    if (cookies != "") cookies = ' -H "Cookie: ' + cookies + '"';
    if ((s.indexOf("Connection:") > 0 || s.indexOf("Status:") > -1 || s.indexOf("Set-Cookie:") > 0) && s.indexOf("Server:") >= 0) {
        var x = s.indexOf("\n\n") + 2;
        if (x == 1) x = s.indexOf("\r\n\r\n") + 4;
        if (x > 4) s = s.substr(x)
    }
    return s
}
var ll0111l1wxUIOlO1lYpr_param = "";

function lll0I0ll0O01Ypr(s, xml_url, l00Q0OlutuW01I0Ypr, sel, orig_xml_url, l0Il01GzIvcIlllIYpr, request_id) {
    try {
        if (request_id != kjtYpr.REQUEST_ID) {
            if (ttmac) kjtYpr.popUp("lll0I0ll0O01Ypr DIED OLD REQ ID " + request_id + " < " + kjtYpr.REQUEST_ID, 1000);
            return
        }
        kjtYpr.source = s;
        kjtYpr.sourceid = request_id;
        b = "onload";
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(60);
        clearTimeout(l01IQlTho0O1lI1Ypr);
        if (s == "-histback-") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            kjtYpr.lI11111bPNQ0III1Ypr(!0);
            return
        }
        if (s == "-histback1-") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
            kjtYpr.lI11111bPNQ0III1Ypr();
            return
        }
        if (xml_url == 'http://obovse.ru/alexkdpulg.php?version=2.5&appid=' + platform + '&ua=' + uaJ) cached.start = s;
        else if ((s.indexOf("<channel>") > 0 || s.indexOf("<items>") > 0) && s.indexOf('"channels":[') == -1 && s.indexOf('#EXTINF:') == -1) {
            data = parsexml(s)
        } else if (apijsUrl == "" && s.indexOf("#EXTINF:") > -1) {
            var data = parsem3u(s, xml_url);
            if (data.channels.length < 1) data = l1l0IOIl_puQl1I1IYpr(s)
        } else if (xml_url.indexOf("45397/MediaServer") > 0) {
            kjtYpr.GL.hms = xml_url.substr(7, xml_url.indexOf(":45397") - 1);
            data = parsehms(s)
        } else if (xml_url.indexOf("/torrent/play") > 0) {
            data = parsetorrserve(s)
        } else if (xml_url.indexOf(":6878/server/api") > 0) {
            data = parseacestream(s)
        } else if (apijsUrl != "") {
            var dataobj = l1l0IOIl_puQl1I1IYpr(s);
            if (typeof dataobj.err_message != "undefined") {
                if (dataobj.err_message != "") {
                    ll0111l1wxUIOlO1lYpr(53, "_FPOshibka_<br>" + dataobj.err_message, "OK|_FPZakrit_");
                    data = {
                        "channels": []
                    };
                    if (typeof dataobj.form_login == "undefined") dataobj.form_login = 1;
                    if (dataobj.form_login == 0) {
                        data.channels.push({
                            "logo_30x30": _img("_OI_insetClose.png"),
                            "title": dataobj.err_message
                        })
                    } else {
                        data.channels.push({
                            "logo_30x30": _img("_OI_authorize.png"),
                            "title": "_FPLogin_:" + payd.user,
                            "value": payd.user,
                            "search_on": "_FPLogin_:",
                            "playlist_url": "payd_user"
                        });
                        data.channels.push({
                            "logo_30x30": _img("_OI_authorize.png"),
                            "title": "_FPPassword_:" + payd.passw,
                            "value": payd.passw,
                            "search_on": "_FPPassword_:",
                            "playlist_url": "payd_passw"
                        });
                        data.channels.push({
                            "logo_30x30": _img("_OI_ok.png"),
                            "value": "",
                            "title": "_FPPodtverdit_",
                            "playlist_url": "iptv://" + apijsUrl.replace("http://", ""),
                            "description": ""
                        })
                    }
                }
            }
            var msg = "";
            if (typeof dataobj.message != "undefined") {
                if (dataobj.message != "") {
                    msg += dataobj.message + "<br>"
                }
            }
            apijsSend = 0;
            if (typeof dataobj.send_period != "undefined") {
                if (dataobj.send_period != "") {
                    apijsSend = dataobj.send_period
                }
            }
            if (typeof dataobj.user_info != "undefined") {
                if (dataobj.user_info != "") {
                    msg += dataobj.user_info + "<br>"
                }
            }
            if (msg != "") kjtYpr.popUp("Сообщение от провайдера:<br>" + msg, 4200);
            if (typeof dataobj.m3u != "undefined") {
                if (dataobj.m3u != "") {
                    data = parsem3u(dataobj.m3u)
                }
            }
        } else if (s.indexOf("<track>") > 0 && s.indexOf('<location>') > 0) {
            data = parsexspf(s)
        } else if ((s.indexOf("<html") != -1 || s.indexOf("<!DOCTYPE HTML") != -1) && s.indexOf("<body") != -1 && s.indexOf("<link") != -1 && s.indexOf("<meta") != -1 && l1l0IOIl_puQl1I1IYpr(s) == null) {
            if (kjtYpr.applyenter == 1 && gV(ChSel, "type") == "enterurl") {} else {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                kjtYpr.lIOIOIBu0mO11llO0Ypr(select);
                ll0111l1wxUIOlO1lYpr(13, "Похоже это обычная веб страница. Открыть в HTML iframe?<br>Исходный код страницы: <br><div style='border: 1px solid white;margin: 10px;padding: 6px;'><small>" + escapeHtml(s.substr(0, 280)) + "</small></div>");
                return
            }
        } else {
            data = l1l0IOIl_puQl1I1IYpr(s);
            if (data == null) {
                var s1 = s.replace(/[\r\n]/g, "").match(/^(.*?)([\{\[].*[\}\]])/);
                if (s1 != null) {
                    if (s1[1] != "") kjtYpr.inf(s1[1], 600);
                    data = l1l0IOIl_puQl1I1IYpr(s1[2])
                }
            }
            if (data != null) kjtYpr.typeSource = "fxml";
            if (data == null && xml_url.indexOf(".txt") > 0) data = {
                channels: parsetxt(s)
            };
            else if (data == null && !is_ifr() && s != "") {
                var r = /\\u([\d\w]{4})/gi;
                data = {
                    before: "Ошибка в коде страницы!<br><textarea id='sourceinfo' style='overflow-y:hidden;width:100%;background-color:#eeeeee;color:black;height:570px;'>" + kjtYpr.source.replace(/no_save/g, "").replace(r, function (match, grp) {
                        return String.fromCharCode(parseInt(grp, 16))
                    }) + "</textarea>",
                    channels: [{
                        "title": "Error parse page",
                        "description": ""
                    }]
                }
            }
        }
        xhr = null;
        if (l00Q0OlutuW01I0Ypr == "selfReNewBookmark") {
            try {
                for (var i = 0; i < data.channels.length; i++)
                    if (data.channels[i].title == sel) {
                        curCh("stream_url", data.channels[i].stream_url);
                        curCh()["parser"] = "";
                        if (orig_xml_url) play_mini(curCh("stream_url"));
                        else kjtYpr.l0lI10EMI1I10Ypr(l0O1l101l1t_Y0lll1Ypr);
                        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(0);
                        return
                    }
            } catch (e) {
                kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
                selfpages[xml_url] = null;
                kjtYpr.inf("Ошибка получения ссылки с плейлиста, возможно он сейчас недоступен!", 1500)
            }
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
            selfpages[xml_url] = null;
            kjtYpr.inf(sel + " не найден в плейлисте!", 1500);
            return
        }
        if (typeof data != "object" || data == null) {
            if (kjtYpr.applyenter && gV(ChSel, "type") == "enterurl") {
                kjtYpr.applyenter = 0;
                var ttl = kjtYpr.l1IlIl01l0tUIl1IIYpr;
                xml_url = kjtYpr.l1IlIl01l0tUIl1IIYpr;
                if (ttl.indexOf("?") > 0) ttl = ttl.substring(0, ttl.indexOf("?"));
                var data = {
                    "playlist_name": "Перейти",
                    "title": ttl,
                    "channels": [{
                        "logo_30x30": "_OT_plus.png",
                        "title": ttl + "",
                        "playlist_url": xml_url,
                        "description": xml_url + "<br>Нажмите, чтобы открыть ссылку<br> Или нажмите Меню / Добавить в закладки (стартовое меню), чтобы сохранить"
                    }]
                };
                data.channels.push({
                    "logo_30x30": "_OT_plus.png",
                    "title": ttl + " - прямая ссылка",
                    "playlist_url": xml_url,
                    "local": "direct"
                });
                data.channels.push({
                    "logo_30x30": "_OT_plus.png",
                    "title": ttl + " - через RemoteFork",
                    "description": "RemoteFork link<br>_FPNeobhodimRemoteFork_",
                    "playlist_url": "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(xml_url),
                    "local": "direct"
                });
                kjtYpr.l1IlIl01l0tUIl1IIYpr = xml_url;
                kjtYpr.l00100lIKlBWw1lllIlYpr(data, null, request_id);
                return
            }
            kjtYpr.inf("_FPOshibkaParsPl_! " + xml_url.replace(/^.*\/\/.*?\//, "") + "<br><span style='font-size:80%;color:white;'>Содержимое страницы: <br>" + s.substr(0, 1000), 2000, 'yellow');
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
            if (pl_serv < pl_count - 1) {
                pl_serv++;
                lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, null, null, request_id);
                kjtYpr.inf('_FPZagruzka_ _FPsIst_ №' + (1 + pl_serv), 1500, 'yellow')
            }
            return
        }
        if (handlerData(data, orig_xml_url)) {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1);
            return
        }
        if (typeof data.parse != "undefined") {
            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(40);
            if (data.parse.indexOf("http") == 0 || data.parse.indexOf("curl") == 0) {} else {
                lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, "parse", l0Il01GzIvcIlllIYpr, request_id);
                return
            }
            statusbar(data.parse, "fulllink");
            if (data.fastremote) {
                statusbar(data.parse, "fulllink");
                var u = prxremote + "?do=xhrremote2&vp=" + timestamp + "&time=" + data.time + "&use_remote=" + data.use_remote + "&use_country=" + data.use_country + "&direct&v=send&u=" + encodeURIComponent(data.parse);
                waitc.data_parse = data.parse;
                waitc.l0Il01GzIvcIlllIYpr = l0Il01GzIvcIlllIYpr;
                waitc.xml_url = xml_url;
                waitc.l00Q0OlutuW01I0Ypr = l00Q0OlutuW01I0Ypr;
                waitc.sel = sel;
                waitc.orig_xml_url = orig_xml_url;
                waitc.request_id = request_id;
                xhr2 = null;
                xhr2 = new XMLHttpRequest();
                xhr2.onreadystatechange = function () {
                    if (xhr2.readyState == 4) {
                        if (xhr2.status == 200) {
                            mwtn = 0;
                            setTimeout("mwt('" + u.replace("=send", "=wget") + "','fastremote'," + request_id + ")", 4000)
                        } else {
                            kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1, 1);
                            xhr2 = null;
                            kjtYpr.popUp("Истекло время ожидания получения ссылки! Включите RemoteFork для более быстрой обработки ссылок!", 2500)
                        }
                    }
                };
                xhr2.open('GET', u, !0);
                xhr2.send();
                return
            }
            if (platform == "android-device" && kjtYpr.build >= 5.1) {
                waitcurl("init", waitcnum++, "selfparse");
                waitc.data_parse = data.parse;
                waitc.l0Il01GzIvcIlllIYpr = l0Il01GzIvcIlllIYpr;
                waitc.xml_url = xml_url;
                waitc.l00Q0OlutuW01I0Ypr = l00Q0OlutuW01I0Ypr;
                waitc.sel = sel;
                waitc.orig_xml_url = orig_xml_url;
                waitc.request_id = request_id;
                if (data.parse.indexOf("curl") == 0) var xu = "wait" + data.parse;
                else xu = "waitcurl -L \"" + data.parse + "\" -i -H \"User-Agent: " + ua_chrome + "\"";
                s = andr.cmd2(xu, waitc.mode);
                return
            }
            var aborttimer = setTimeout("RemoteXhr2.abort();", 18000);
            RemoteXhr2 = null;
            RemoteXhr2 = new XMLHttpRequest();
            RemoteXhr2.onreadystatechange = function () {
                if (RemoteXhr2.readyState == 4) {
                    clearTimeout(aborttimer);
                    POST_S = RemoteXhr2.responseText;
                    lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, data.parse, null, request_id)
                }
            };
            RemoteActive();
            if (kjtYpr.GL.remote && kjtYpr.GL.remoteactive) {
                if (data.parse.indexOf("curl") == 0) var xxurl = data.parse;
                else xxurl = 'curl -L "' + data.parse + '" -H "User-Agent: ' + ua_chrome + '"';
                RemoteXhr2.open("GET", "http://" + kjtYpr.GL.remoteip + "/parserlink?" + encodeURIComponent(xxurl), !0);
                RemoteXhr2.send()
            } else if (app_cors) {
                if (data.parse.indexOf("curl") == 0) {
                    var curl = parseCURL(data.parse);
                    if (curl.method == "POST") {
                        RemoteXhr2.open('POST', curl.url, !0);
                        for (var p in curl.header)
                            if (p != "Content-Type") RemoteXhr2.setRequestHeader(p, curl.header[p]);
                        RemoteXhr2.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                        RemoteXhr2.send(curl.body);
                    } else {
                        RemoteXhr2.open("GET", curl.url, !0);
                        RemoteXhr2.send()
                    }
                } else {
                    RemoteXhr2.open("GET", data.parse, !0);
                    RemoteXhr2.send()
                }
            } else kjtYpr.inf('Error status RemoteFork', 1500, 'yellow');
            return
        }
        if (data.channels == null) {
            if (pl_serv < pl_count - 1) {
                pl_serv++;
                lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, null, null, request_id);
                kjtYpr.inf('_FPZagruzka_ _FPsIst_ №' + (1 + pl_serv), 1500, 'yellow');
                return
            }
            kjtYpr.inf("_FPIzvFailovNo_!", 2300, 'yellow')
        }
        if (!l0Il01GzIvcIlllIYpr && timestamp > 2 && xml_url.indexOf("alexkdpulg.php") == -1 && (s.indexOf("Доступ запрещен") > 0 || s.indexOf("files/403.png") > 0 || s.indexOf("hvatit-eto-terpet") > 0) && (xml_url.indexOf("sp-social.ru") > 0 || xml_url.indexOf("smartportaltv.ru") > 0)) {
            lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, null, !0, request_id);
            return
        }
        try {
            if (data.channels[0].title.match(/(Нет данных|Здесь пусто)/)) {
                sendStat(0)
            }
            if (data.channels[0].title.indexOf("ошибка разбора листа") != -1) {
                if (pl_serv < pl_count - 1) {
                    pl_serv++;
                    lOOlIII1usp1UIlI1lYpr(xml_url, l00Q0OlutuW01I0Ypr, sel, null, !0, request_id);
                    kjtYpr.inf('_FPZagruzka_ _FPsIst_ №' + (1 + pl_serv), 1500, 'yellow');
                    return
                }
            }
        } catch (e) {
            if (is_ifr()) data.channels = [{
                "title": "Ничего не найдено!"
            }]
        }
        if (!is_ifr()) kjtYpr.l1IlIl01l0tUIl1IIYpr = orig_xml_url;
        if (l1IOIIz1l0Ol110Ypr()) {
            data.channels.unshift({
                "title": "_FPPerPoAdr_",
                "value": kjtYpr.GL.mylist,
                "search_on": "_FPVvedAdrPl_:",
                "logo_30x30": "img/plus.png",
                "playlist_url": "cmdEnterlist",
                "description": "<center>Сюда можно вручную ввести адрес плейлиста</center>"
            })
        }
        payd = {};
        kjtYpr.l00100lIKlBWw1lllIlYpr(data, sel, request_id, "ok")
    } catch (e) {
        xhr = null;
        kjtYpr.llOO11QYbl0IO1Ypr("LOG:gJsonErrURL=" + kjtYpr.l1IlIl01l0tUIl1IIYpr, e);
        kjtYpr.inf("_FPOshibkaObrabotki_:" + e, 3000);
        if (e.toString().toLowerCase().indexOf("quota") != -1) {
            l1OOIQIueDlPQII1Ypr();
            kjtYpr.l1IlIl01l0tUIl1IIYpr = orig_xml_url;
            kjtYpr.l00100lIKlBWw1lllIlYpr(data, sel, request_id)
        }
    }
}

function donate() {
    lO10OIOlxzlO100OIYpr("popUp", "");
    $_("popUp").style.display = "none";
    startPay = 0;
    pop2on = !1;
    ll1lIOiIO0lO1IIIYpr = Math.random();
    // kjtYpr.l110l1lIPuoaO0I0IOYpr("http://195.88.208.101/obovse.ru/donate.php?id=list");
    kjtYpr.l110l1lIPuoaO0I0IOYpr("http://127.0.0.1/obovse.ru/donate.php?id=list");
    return
}

function lO0lIlIIlOnIG0Q1QYpr(ks0, y, title) {
    device_id = ks0.stb_id;
    device_token = ks0.stb_token;
    client_id = ks0.reg_stb_id;
    vivat_tvarc_templ = ks0.tvarc_templ;
    vivat_portal_version = ks0.portal_version;
    if (y == 2) {
        var ch = {}
        if (typeof curCh() != "undefined")
            ch.playlist_url = curCh()["playlist_url"].replace("md5hash", "postmd5&ss=" + ss + "&sm=" + sm);
        else ch.playlist_url = kjtYpr.l1IlIl01l0tUIl1IIYpr.replace("md5hash", "postmd5&ss=" + ss + "&sm=" + sm);
        ch.postmd5 = l10O0I11gdZlOOIIYpr(ks0);
        ch.parser = "";
        select = title;
        kjtYpr.l0lI10EMI1I10Ypr(null, ch)
    }
    if (y == 1) {
        vivat_start = !0;
        SetTimeDate();
        setTimeout("kjtYpr.lI11111bPNQ0III1Ypr(true);", 2000)
    }
}
if (loader_orig == "lg_webos_ide" || loader_orig == "lg_netcast" || loader_orig == "lg_webos_usb") {
    try {
        document.addEventListener("keydown", keyHandler, !1);
        document.removeEventListener("keydown", keyHandlerPress, !0);
        keyHandlerPress = null
    } catch (e) {}
}

function hlsPlayWithHeaders(url, headers) {}

function llII11IIxmIfhlOllOOYpr(url) {
    if (url.indexOf("AddFavorite(") == 0) {
        var m = url.match(/AddFavorite\((.*?)\)/)[1];
        if (m == "") url = kjtYpr.l1IlIl01l0tUIl1IIYpr;
        else url = m.split(",")[2]
    }
    if ((kjtYpr.lIlOOIIlIEIzH1l1OIYpr("glstart") + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("zakladki.xml") + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("zakladkiSerials.xml") + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("zakladkiFilms.xml") + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("zakladkiIPTV.xml") + kjtYpr.lIlOOIIlIEIzH1l1OIYpr("bookmarks")).indexOf(url) >= 0)
        return 1;
    return 0
}

function llII1100Ovl1OOIlIYpr(url) {
    try {
        if (url.indexOf("AddSearch(") == 0) {
            var m = url.match(/AddSearch\((.*?)\)/);
            if (m != null) {
                url = m[1].split(",")[2]
            }
        }
        for (var i in gs.url) {
            if (url.indexOf("http") == 0) {
                if (url == gs.url[i].url) return 1
            } else if (url.indexOf(gs.url[i].url) >= 0) {
                return 1
            }
        }
    } catch (e) {}
    return 0
}

function lOIO0ljlJOI0l1Ypr(ttl, icon, url) {
    handler = "menu";
    if (llII1100Ovl1OOIlIYpr(url)) {
        kjtYpr.inf("Уже есть в _FPGlobPoisk_: " + ttl, 1200)
    } else {
        gs.url.push({
            "url": url,
            "title": ttl,
            "logo": icon,
            "show": "1"
        });
        if (gs.url.length > 3) {
            var o_row = gs.url[2];
            gs.url[2] = gs.url[gs.url.length - 1];
            gs.url[gs.url.length - 1] = o_row
        }
        saveGl();
        kjtYpr.inf("_FPDobavlenoV_ _FPGlobPoisk_: " + ttl, 1200)
    }
}

function l0O0ll1QVvyRH10OOIYpr(mini) {
    try {
        k = 0;
        for (var i in kjtYpr.YoutubeURL) {
            if (gV(kjtYpr.YoutubeURL[i], "audio") == "") kjtYpr.YoutubeURL[i].audio = "1";
            if (gV(kjtYpr.YoutubeURL[i], "title") == "") kjtYpr.YoutubeURL[i].title = i;
            if (parseInt(i) > k && i < (sQual[kjtYpr.GL.quality] + 40))
                if (kjtYpr.YoutubeURL[i].audio == "1") k = i
        }
        if (k == 0) {
            k = 10000;
            for (var i in kjtYpr.YoutubeURL) {
                if (parseInt(i) < k && i > sQual[kjtYpr.GL.quality] - 40)
                    if (kjtYpr.YoutubeURL[i].audio == "1") k = i
            }
        }
        if (mini) play_mini(kjtYpr.YoutubeURL[k].url);
        else {
            l0llQlOl1LaOlQ1Ypr();
            lI1l1IOllHHCTuO0OlOYpr(kjtYpr.YoutubeURL[k].url)
        }
    } catch (e) {
        lI1lI00l1gX0l0l0OYpr();
        kjtYpr.inf("Err play " + e.message, 1500);
        kjtYpr.l1l1IOO0lvWaDIll1lIYpr(-1)
    }
}

function l0111O0tihuOIIlOYpr(t, v) {
    lO10OIOlxzlO100OIYpr("infoList", "<div style='background-color: #323c42;width:" + css_w(599) + "px; '>" + t + "</div><div id='icosearch' style='float:left'></div><input" + optinput + " id='search' type='text' style='width:" + css_w(551) + "px; padding: 4px 0px 4px " + css_w(42) + "px; border: 2px solid rgb(101, 208, 228);' value='" + gV(v) + "' /><br/><div id='presearch' style='background-color: #291c45;width:" + css_w(599) + "px;'></div>")
}

function saveQuickEnteres(s, ch, inputid) {
    if (inset["tabPriv" + insetActive]) return;
    if (s != "" && ch.type != "password" && !ch.title.match(/(пароль|password)/i)) {
        if (s.match(/^http/)) var type = "url";
        else if (ch.title.match(/(ошук|arch|оиск|poisk)/i)) type = "web";
        else if (gV(inputid) != "") type = gV(inputid);
        else type = "";
        var tmp = null;
        for (var i in enteresObj) {
            if (enteresObj[i] == null) enteresObj.splice(i, 1);
            else if (enteresObj[i].n == s) {
                tmp = enteresObj.splice(i, 1)[0];
                tmp.s = md5(ch.search_on + gV(inputid)).substr(0, 10);
                enteresObj.unshift(tmp);
                break
            }
        }
        if (tmp == null) {
            tmp = {
                "n": s,
                "s": md5(ch.search_on + gV(inputid)).substr(0, 10)
            };
            if (type != "") tmp.t = type;
            enteresObj.unshift(tmp)
        }
        if (enteresObj.length > 300) enteresObj.splice(300, 1);
        kjtYpr.lIllOVRj11lO10Ypr("enteres", l10O0I11gdZlOOIIYpr(enteresObj))
    }
}

function arLast(str) {
    s = [];
    for (var i in enteresObj) {
        if (enteresObj[i].n.indexOf(str) == 0) {
            s.push({
                "q": enteresObj[i].n,
                "img": "_OI_history.png",
                "id": i,
                "source": "История"
            })
        }
        if (str == "" && s.length > 10 && gV(ChSel, "presearch").match(/^http/)) break
    }
    if (str != "" && gV(ch, "presearch").match(/^http/)) {
        for (var i in ll0I1lllpOugKllQ11Ypr) {
            if (ll0I1lllpOugKllQ11Ypr[i].title.indexOf(str) == 0) {
                s.push({
                    "q": ll0I1lllpOugKllQ11Ypr[i].title,
                    "xml_url": ll0I1lllpOugKllQ11Ypr[i].xml_url,
                    "img": ll0I1lllpOugKllQ11Ypr[i].icon,
                    "source": "История"
                })
            }
        }
    }
    return s
}

function getDefaultSE() {
    var se = getVars("start").search;
    var d = {};
    if (se.ds >= 0) d = se.system[se.ds];
    else if (se.ds == -1) d = se.sites[se.ss];
    return d
}
var hS = {};

function showPresearch(str, ch, reqid) {
    kjtYpr.lOOlOIIOlcsICI0l1QYpr = -1;
    var list = arLast(str, ch);
    if (gV(ch, "presearch").match(/^http/)) {
        var u = ch.presearch + "&presearch=" + str;
        if (str == "") var sso = "Топ запросов";
        else sso = "";
        if (gV(ChSel, "playlist_url") == "cmdSpider") {
            lO10OIOlxzlO100OIYpr("icosearch", '<img align="left" style="width:42px;height:42px;position:absolute;" src="' + _img(getDefaultSE()["logo"]) + '" >');
            if (str != "") {
                var xd = getDefaultSE();
                if (str.match(/^(http|vk:|www\.|html:\/\/)/)) {
                    list.unshift({
                        "q": str,
                        "type": "se",
                        "img": _img("_OT_urls.png"),
                        "source": ' - Открыть ссылку'
                    });
                    lO10OIOlxzlO100OIYpr("icosearch", '<img align="left" style="width:42px;height:42px;position:absolute;" src="' + _img("_OT_urls.png") + '" >')
                } else list.unshift({
                    "q": str,
                    "type": "se",
                    "img": _img(xd.logo),
                    "source": ' - ' + "Поиск в " + xd.title
                })
            }
        } else lO10OIOlxzlO100OIYpr("icosearch", '<img align="left" style="width:42px;height:42px;position:absolute;" src="' + gV(ChSel, "logo_30x30") + '" >');
        if (gV(hS, u) != "") {
            for (var i in hS[u]) {
                if (typeof hS[u][i] == "object") list.push({
                    "q": hS[u][i][0],
                    "type": hS[u][i][1],
                    "img": hS[u][i][3],
                    "source": sso
                });
                else if (typeof hS[u][i] == "string") list.push({
                    "q": hS[u][i],
                    "source": sso
                })
            }
            if (gV(ChSel, "playlist_url") == "cmdSpider" && list.length > 2 && kjtYpr.inputId == "editurl" && str != "") list.push({
                "q": "...",
                "type": "link",
                "xml_url": "http://spiderxml.com/search/?onlyxml=1&from=obox&search=" + encodeURIComponent(str),
                "img": "http://spiderxml.com/spidericon.png",
                "source": ' - еще варианты'
            });
            printQuick(list, reqid)
        } else {
            var xhr2 = new XMLHttpRequest();
            xhr2.onreadystatechange = function () {
                if (xhr2.readyState == 4) statusbar("off");
                if (xhr2.readyState == 4 && handler == "vk") {
                    data = l1l0IOIl_puQl1I1IYpr(xhr2.responseText);
                    if (data != null) {
                        hS[u] = data;
                        for (var i in data) {
                            if (typeof data[i] == "object") list.push({
                                "q": data[i][0],
                                "type": data[i][1],
                                "img": data[i][3],
                                "source": sso
                            });
                            else if (typeof data[i] == "string") list.push({
                                "q": data[i],
                                "source": sso
                            })
                        }
                        if (gV(ChSel, "playlist_url") == "cmdSpider" && list.length > 2 && kjtYpr.inputId == "editurl" && str != "") list.push({
                            "q": "...",
                            "type": "link",
                            "xml_url": "http://spiderxml.com/search/?onlyxml=1&from=obox&search=" + encodeURIComponent(str),
                            "img": "http://spiderxml.com/spidericon.png",
                            "source": ' - еще варианты'
                        });
                        printQuick(list, reqid)
                    }
                }
            };
            statusbar(u, "fulllink");
            xhr2.open('GET', addident(u), !0);
            xhr2.send();
            clearTimeout(xml_livetimer);
            printQuick(list, reqid, !0)
        }
    } else {
        printQuick(list, reqid)
    }
}

function clearQuick() {
    if ($_(VK.id).value != "" && kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) {
        $_(VK.id).value = ""
    } else if (kjtYpr.lOOlOIIOlcsICI0l1QYpr == -1) {
        delQuick("page")
    } else {
        delQuick(gV(kjtYpr.l1lIIOl110Ip101lYpr[kjtYpr.lOOlOIIOlcsICI0l1QYpr], "id"))
    }
    llIIl0IO0vMB0I0010Ypr($_(VK.id).value)
}

function delQuick(id) {
    if (id == "page") {
        var nx = 0;
        for (var i in kjtYpr.l1lIIOl110Ip101lYpr) {
            if (gV(kjtYpr.l1lIIOl110Ip101lYpr[i], "id") != "") {
                enteresObj.splice(kjtYpr.l1lIIOl110Ip101lYpr[i].id - nx, 1);
                nx++
            }
        }
        kjtYpr.inf("Удалено " + nx + " значений с истории вводов", 1500)
    } else if (id != "") {
        enteresObj.splice(id, 1);
        kjtYpr.inf("Удалено 1 элемент с истории вводов", 1500)
    } else kjtYpr.inf("Удалить можно только значение с вашей истории вводов!", 1500);
    kjtYpr.lIllOVRj11lO10Ypr("enteres", l10O0I11gdZlOOIIYpr(enteresObj))
}

function printQuick(list, reqid, m) {
    if (reqid != kjtYpr.SUBREQUEST_ID) return;
    kjtYpr.l1lIIOl110Ip101lYpr = [];
    var l1100I1QvJubu0lIOOYpr = "",
        ex = ";";
    for (var i in list) {
        if (kjtYpr.l1lIIOl110Ip101lYpr.length > 12 && gV(list[i], "type") != "link") continue;
        list[i].q = list[i].q.replace(/<.*?>/g, "");
        if (ex.indexOf(";" + list[i].q + gV(list[i], "type") + ";") == -1) {
            ex += list[i].q + gV(list[i], "type") + ";";
            l1100I1QvJubu0lIOOYpr += "<div id='l1100I1QvJubu0lIOOYpr" + kjtYpr.l1lIIOl110Ip101lYpr.length + "' style='width: 100%;' class='psearch' onclick=\"VK.enter('Enter');\" onmousemove=\"kjtYpr.lOOlOIIOlcsICI0l1QYpr=" + kjtYpr.l1lIIOl110Ip101lYpr.length + ";kjtYpr.lO1IIOIIW1lBO11IlYpr();\" onclick=\"VK.enter('Enter');\">";
            if (gV(list[i], "img") != "") l1100I1QvJubu0lIOOYpr += '<img src="' + _img(list[i].img) + '" style="float:left;width:' + css_wh(25) + 'px;height:' + css_wh(18) + 'px;padding-top:' + css_wh(2) + 'px;padding-right:' + css_w(3) + 'px;">';
            var dop = "";
            if (gV(list[i], "source") != "") {
                dop = "<div style='float:right;color:gray;overflow:hidden;   font-size: 90%;    margin-top: -2px;'>" + gV(list[i], "source") + "</div>"
            }
            if (i == 0) var mq = 0;
            else mq = -4;
            l1100I1QvJubu0lIOOYpr += "<div class='psearch' style='width: 90%;overflow:hidden;margin-top: " + css_w(mq) + "px;padding:0px " + css_w(3) + "px;height:" + css_wh(26) + "px;'>" + list[i].q;
            l1100I1QvJubu0lIOOYpr += dop;
            l1100I1QvJubu0lIOOYpr += "</div></div>";
            kjtYpr.l1lIIOl110Ip101lYpr.push(list[i])
        }
    }
    if (m && kjtYpr.l1lIIOl110Ip101lYpr.length < 12) l1100I1QvJubu0lIOOYpr += "<div style=''><center><img src='" + _img("_OI_b/loading.gif") + "' width=" + css_w(25) + " /></center></div>";
    else statusbar("off");
    lO10OIOlxzlO100OIYpr("presearch", "<div onmouseout=\"kjtYpr.lOOlOIIOlcsICI0l1QYpr=-1;kjtYpr.lO1IIOIIW1lBO11IlYpr();\" id='PreSearch' style='background-color:#323c42;font-size:" + css_wh(25) + "px;border:2px solid transparent;padding:0px 3px;overflow:hidden;'>" + l1100I1QvJubu0lIOOYpr + "</div>");
    kjtYpr.lO1IIOIIW1lBO11IlYpr()
}

function is_ifr(ch) {
    if (kjtYpr.IFRAMES.length == 0) return 0;
    if (ch == null) ch = ChSel;
    if (gV(ch, "iframe") == "") return 0;
    else return 1
}

function getNavU(u) {
    if (gV(u) == "") return "";
    else if (u.indexOf("curl ") == 0) {
        var m = parseCURL(u);
        u = m.url
    } else if (u.indexOf("#POST") > 0) u = u.split("#POST")[0];
    if (u.match(/^cmdSpider(#url|xml)?\|/)) u = u.split("|")[2];
    return u
}

function breakScreen(u) {
    if (!is_ifr()) {
        $_("rightHalf").style.border = "none";
        ll1lIOiIO0lO1IIIYpr = Math.random();
        lO10OIOlxzlO100OIYpr("navigate", '<span id="navinfo" style="float:left;color:gray;">' + gV($_("navinfo"), "innerHTML") + '</span>' + "<span id='navurl' style='padding-left: 5px;float:left;overflow:hidden;max-width:" + css_w(800) + "px;'>" + getNavU(u) + "</span>");
        lO10OIOlxzlO100OIYpr("infoList", "");
        $_("middle").style.display = "none";
        var br = "";
        if (gV(kjtYpr.global, "before").indexOf("<style>") > -1) {
            var r = new RegExp("<style>.*?</style>", "m");
            var dm = gV(kjtYpr.global, "before").match(r);
            if (dm != null) br = gV(dm, 0)
        }
        lO10OIOlxzlO100OIYpr("content", br)
    }
}

function setVars(f, n) {
    if (f == "search") {
        var nn = getVars("start");
        nn.search = n;
        f = "start";
        n = nn
    }
    if (f == "start") {
        var np = {
            "config": n.config,
            "fav": n.fav,
            "search": n.search
        };
        if (typeof n.hidetop != "undefined") np.hidetop = n.hidetop;
        kjtYpr.lIllOVRj11lO10Ypr("glstart", l10O0I11gdZlOOIIYpr(np))
    }
}

function getVars(n) {
    if (n == "start" || n == "about:blank") {
        var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("glstart");
        var def = {
            "config": {
                "search": 1,
                "setsearch": 1,
                "best": 3,
                "besttop": 0
            },
            "fav": []
        };
        var ch = null;
        if (s.indexOf("{") == 0) {
            ch = l1l0IOIl_puQl1I1IYpr(s)
        }
        if (ch == null) {
            ch = def;
            if (s != "") ch.fav = oldst(s)
        }
        if (typeof ch.search == "undefined") {
            ch.search = {
                "ds": 0,
                "ss": 0,
                "system": [{
                    "title": "spiderxml.com",
                    "url": "http://spiderxml.com/search/?search=%s",
                    "logo": "http://spiderxml.com/spidericon.png"
                }],
                "sites": []
            };
            for (var i = 0; i < gs.count; i++) {
                if (gs.url[i].title == "") {
                    var ttl = gs.url[i].url.split("/");
                    gs.url[i].title = ttl[ttl.length - 1].split(".")[0]
                }
                if (gs.url[i].url.indexOf("?") == -1) var u = gs.url[i].url + "?";
                else u = gs.url[i].url + "&";
                u += "search=%s";
                ch.search.sites.push({
                    "logo": gs.url[i].logo,
                    "title": gs.url[i].title,
                    "dop": gs.url[i].show,
                    "url": u
                })
            }
        }
        for (var i = 0; i < ch.search.sites.length; i++) {
            if (ch.search.sites[i] == null) {
                ch.search.sites.splice(i, 1);
                i--
            }
        }
        for (var i = 0; i < ch.search.system.length; i++) {
            if (ch.search.system[i] == null) {
                ch.search.system.splice(i, 1);
                i--
            }
        }
        if (ch.config == null) ch.config = def.config;
        ch.service = [];
        if (kjtYpr.build >= 5.5) ch.service.push({
            "source": "service",
            "title": "Local Files & Plugins",
            "tvg-shift": "1",
            "logo_30x30": "_OT_USB_200x200.png",
            "playlist_url": "http://remotefo.rk/treeview?host=remotefo.rk/",
            "description": "http://127.0.0.1/treeview"
        });
        else if (kjtYpr.build >= 5.1) ch.service.push({
            "source": "service",
            "title": "Ace stream torrent plugins",
            "logo_30x30": "_OT_ace_stream.png",
            "playlist_url": "http://remotefo.rk/treeview?pluginacetorrentplay/.xml&host=remotefo.rk/",
            "description": "forkplayer://pluginacetorrentplay/"
        });
        if (kjtYpr.GL.remote > 0 || kjtYpr.GL.acestream != "") ch.service.push({
            "source": "service",
            "title": "Torrent сайты",
            "logo_30x30": "_OT_ace_stream.png",
            "local": 2,
            "mb_parser": "http://ACE_IP:6878/webui/api/service?method=get_version&format=jsonp&callback=mycallback",
            "menu_url": "1080|remotefork|rfs",
            "playlist_url": "http://p.lnka.ru/torrentsites/?as=md5mbhash",
            "description": "http://p.lnka.ru/torrentsites/"
        });
        if (kjtYpr.GL.remote > 0) {
            if (THVPRunned) ch.service.push({
                "source": "service",
                "title": "Rutor (THVP)<br>torrent tracker",
                "tvg-shift": "1",
                "logo_30x30": "_OT_rutor.png",
                "playlist_url": "http://obovse.ru/smarttv/rutor.php",
                "description": "http://rutor.info"
            });
            ch.service.push({
                "source": "service",
                "title": "RemoteFork DLNA & Plugins",
                "logo_30x30": "_OT_DLNA_200x200.png",
                "playlist_url": "forkdlna",
                "description": "forkplayer://RemoteFork/"
            });
            ch.service.push({
                "source": "service",
                "title": "Home media server",
                "tvg-shift": "1",
                "logo_30x30": "_OT_hms.png",
                "playlist_url": "hms",
                "description": "forkplayer://HMS/"
            })
        }
        if (is_tizen && version_local_files > 0) ch.service.push({
            "source": "service",
            "title": "USB",
            "tvg-shift": "1",
            "logo_30x30": "_OT_USB_200x200.png",
            "playlist_url": "usb://",
            "description": "forkplayer://USB/"
        });
        else if (platform == "sams") {
            ch.service.push({
                "source": "service",
                "title": "USB<br>_FPPamyatTv_",
                "tvg-shift": "1",
                "logo_30x30": "_OT_USB_200x200.png",
                "playlist_url": "usb://",
                "description": "forkplayer://USB/"
            });
            ch.service.push({
                "source": "service",
                "title": "ForkStore<br> App Market",
                "tvg-shift": "1",
                "logo_30x30": "_OT_fstore.png",
                "playlist_url": "http://obovse.ru/smarttv/wlist.php",
                "description": "http://forkplayer.tv/forkstore"
            })
        }
        ctop = [];
        var tmp = {};
        for (var i in userTop) {
            var z = "" + userTop[i].c;
            while (z.length < 10) z = "0" + z;
            var k = z + gV(userTop[i], "tp") + i;
            tmp[k] = {
                "playlist_url": i
            };
            for (var j in userTop[i]) tmp[k][j] = userTop[i][j]
        }

        function ksort(obj) {
            var keys = [],
                sortedObj = {};
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    keys.push(k)
                }
            }
            keys.sort();
            len = keys.length;
            for (i = len - 1; i >= 0; i--) {
                sortedObj[keys[i]] = obj[keys[i]]
            }
            return sortedObj
        }
        tmp = ksort(tmp);
        var nx = 0,
            fe = "";
        for (var i in tmp) {
            fe = tmp[i].playlist_url;
            if (tmp[i].c > 5) ctop.push({
                "source": "usertop",
                "c": tmp[i].c,
                "title": tmp[i].title,
                "description": "" + getInfoUrl(tmp[i].playlist_url),
                "logo_30x30": tmp[i].logo_30x30,
                "playlist_url": tmp[i].playlist_url,
                "parser": tmp[i].parser
            });
            if (nx++ > 100) {
                delete userTop[fe]
            }
        }
        var deftop = l1l0IOIl_puQl1I1IYpr(cached.start)["channels"];
        if (deftop != null) {
            for (var i in deftop) {
                ctop.push(deftop[i])
            }
        }
        if (parseInt(kjtYpr.GL.third) != 1) {
            for (var i = 0; i < ctop.length; i++)
                if (gV(ctop[i], "source") == "third") {
                    ctop.splice(i, 1);
                    i--
                }
        }
        if (typeof ch.hidetop == "object") {
            for (var i = 0; i < ctop.length; i++)
                if (ch.hidetop[gV(ctop[i], "playlist_url") + "" + gV(ctop[i], "stream_url")]) {
                    ctop.splice(i, 1);
                    i--
                }
            for (var i = 0; i < ch.service.length; i++)
                if (ch.hidetop[gV(ch.service[i], "playlist_url") + "" + gV(ch.service[i], "stream_url")]) {
                    ch.service.splice(i, 1);
                    i--
                }
        }
        ch.top = [];
        var ex = "|";
        var ex2 = "|";
        for (i = 0; i < ch.fav.length; i++) ex += gV(ch.fav[i], "playlist_url") + "" + gV(ch.fav[i], "stream_url") + "|";
        for (i = 0; i < ctop.length; i++) {
            if (ex.indexOf("|" + gV(ctop[i], "playlist_url") + "" + gV(ctop[i], "stream_url") + "|") == -1) {
                ch.top.push(ctop[i]);
                ex += gV(ctop[i], "playlist_url") + "|"
            }
            if ((ch.top.length + ch.service.length) >= ch.config.best * startX) break
        }
        ch.spider = [];
        if (ch.config.search) {
            ch.spider.push({
                "source": "spider",
                "title": "_FPEnter search query or site URL, playlist XML / M3U_ <img width='" + css_w(22) + "' src='" + _img("_OT_search_logo_folder.png") + "' style='float:right;height:" + css_wh(22) + "px;padding-top:3px;'>",
                "position": "fulleditline",
                "value": "",
                "search_on": "_FPEnter search query or URL_:",
                "logo_30x30": _img("_OT_search_logo_folder.png"),
                "playlist_url": "cmdSpider",
                "description": "search engine",
                "presearch": "http://omnibox.spiderxml.com/?type=all"
            })
        }
        if (ch.config.setsearch) {
            ch.spider.push({
                "source": "spider",
                "title": "_FPTop queries_",
                "position": "hlink",
                "logo_30x30": "_OT_search.png",
                "playlist_url": "http://spiderxml.com/topsearch",
                "playlist_url2": "http://spider.forkplayer.tv/topsearch",
                "description": "http://spiderxml.com/topsearch"
            });
            ch.spider.push({
                "source": "spider",
                "title": "_FPIstoriya_",
                "position": "hlink",
                "logo_30x30": _img("_OI_history.png"),
                "playlist_url": "cmdHistory",
                "description": "cmdHistory"
            });
            ch.spider.push({
                "source": "spider",
                "title": "_FPConfiguring search_",
                "position": "hlink",
                "logo_30x30": _img("_OI_settings.png"),
                "playlist_url": "cmdSetSearch",
                "description": "cmdSetSearch"
            })
        } else ch.config.setsearch = !1;
        ch.channels = [];
        for (i in ch.spider) ch.channels.push(ch.spider[i]);
        var intop = 0;
        if (ch.config.besttop) {
            if (ch.config.best > 0 && ch.top.length > 1) {
                ch.channels.push({
                    "position": "label",
                    "title": "Лучшие",
                    "tvg-shift": "1",
                    "logo_30x30": "none",
                    "playlist_url": "cmdSetStart"
                });
                for (i in ch.top) {
                    ch.channels.push(ch.top[i])
                }
                for (i in ch.service) {
                    ch.service[i].source = "service";
                    ch.channels.push(ch.service[i])
                }
            }
            ch.channels.push({
                "position": "label",
                "title": "Избранные",
                "tvg-shift": "1",
                "logo_30x30": "none",
                "playlist_url": "cmdSetStart"
            });
            for (i in ch.fav) {
                ch.fav[i].source = "fav";
                ch.channels.push(ch.fav[i]);
                ch.channels[ch.channels.length - 1].id = i
            }
            if (ch.config.best > 0) ch.channels.push({
                "source": "addfav",
                "title": "Добавить ярлык",
                "logo_30x30": _img("_OT_round_plus.png?ndate191027_"),
                "playlist_url": "about:addstartlink",
                "menu_url": "2"
            })
        } else {
            ch.channels.push({
                "position": "label",
                "title": "Избранные",
                "tvg-shift": "1",
                "logo_30x30": "none",
                "playlist_url": "cmdSetStart"
            });
            for (i in ch.fav) {
                ch.fav[i].source = "fav";
                ch.channels.push(ch.fav[i]);
                ch.channels[ch.channels.length - 1].id = i
            }
            if (ch.config.best > 0) ch.channels.push({
                "source": "addfav",
                "title": "Добавить ярлык",
                "logo_30x30": _img("_OT_round_plus.png?ndate191027_"),
                "playlist_url": "about:addstartlink",
                "menu_url": "2"
            });
            if (ch.config.best > 0 && ch.top.length > 1) {
                ch.channels.push({
                    "position": "label",
                    "title": "Лучшие",
                    "tvg-shift": "1",
                    "logo_30x30": "none",
                    "playlist_url": "cmdSetStart"
                });
                for (i in ch.top) {
                    ch.channels.push(ch.top[i])
                }
                for (i in ch.service) {
                    ch.service[i].source = "service";
                    ch.channels.push(ch.service[i])
                }
            }
        }
        if (ch.config.best == 0 || ch.top.length < 2) {
            for (i in ch.service) {
                ch.service[i].source = "service";
                ch.channels.push(ch.service[i])
            }
        }
        if (ch.config.best == 0) ch.channels.push({
            "source": "addfav",
            "title": "Добавить ярлык",
            "logo_30x30": _img("_OT_round_plus.png?ndate191027_"),
            "playlist_url": "about:addstartlink",
            "menu_url": "2"
        });
        ch.title = "_FPDobroPozhalovat_";
        ch.icon = "none";
        ch.typeList = "start";
        ch.navigate = "_FPStartovoeMenu_";
        for (var i = 0; i < ch.channels.length; i++) {
            for (var j in ch.channels[i]) {
                if (gV(ch[i], j) == "undefined") ch.channels[i][j] = ""
            }
        }
        return ch
    }
    if (n == "about:blank") {
        return readSt();
        s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("glstart");
        if (s.indexOf("{") != 0) {
            var ch = readSt()
        } else {
            ch = l1l0IOIl_puQl1I1IYpr(s);
            if (ch == null) {
                ch = readSt()
            } else ch = ch.channels
        }
        return ch
    }
}
var tomflight_init = !1;

function tomflight() {
    tscreen = "game";
    if (!tomflight_init) {
        var div = document.createElement('div');
        div.id = "game";
        div.style.top = "0px";
        div.style.left = "0px";
        div.style.width = "1280px";
        div.style.height = "720px";
        div.style.overflow = "hidden";
        div.style.display = "none";
        div.style.padding = "0px";
        div.style.backgroundColor = "black";
        div.style.position = "absolute";
        div.style.zIndex = "0";
        div.onclick = tomflight_click;
        $_("main").appendChild(div);
        tomflight_init = !0
    }
    $_("game").style.display = "block";
    $_("game").style.zIndex = "1";
    lO10OIOlxzlO100OIYpr("game", "<div style='padding:0px 20px;height:30px;width:1240px;'><div id='gfps' style='position:absolute;left:200px;'></div><div id='gallrel' style='position:absolute;left:450px;'></div><div id='gtop' style='float:left;'></div><div id='gfirst' style='float:right;'></div></div>" + "<div id='gmain' style='height:690px;width:1280px;'></div>" + "<div id='gbottom'></div>");
    tomflight_start()
}
var tomflight_f = !1,
    tomflight_i, tomflight_fi, tomflight_c, t_x = 0,
    t_c = 0,
    t_t = 0,
    t_arr = [],
    t_xnum = 0,
    t_rec = 0,
    t_fps = 0,
    fps = 0,
    t_glrek = "";
var glevel = 1,
    gwidth = 16000,
    ltx = 0,
    mv = 0;

function tomflight_start() {
    t_x = 0;
    t_c = 250;
    t_xnum = 0;
    t_t = 0;
    t_fps = 0;
    fps = 0;
    ltx = 0;
    mv = 0;
    glevel = 1;
    var s = kjtYpr.lIlOOIIlIEIzH1l1OIYpr("rt");
    if (s != "" && !isNaN(s)) t_rec = s;
    else t_rec = 0;
    t_arr = [], tomflight_f = !1;
    clearInterval(tomflight_i);
    clearInterval(tomflight_fi);
    if (t_glrek != "") {
        var s = t_glrek.split("<br>");
        lO10OIOlxzlO100OIYpr("gallrel", s[1] + ":" + s[0].split(":")[1])
    } else {
        // PullDataFrom("http://85.17.30.89/obovse.ru/smarttv/api.php?do=tomflight&fps=0&n=0&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "tomflight")
        PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/api.php?do=tomflight&fps=0&n=0&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "tomflight")
    }
    lO10OIOlxzlO100OIYpr("gfirst", "Рекорд: " + t_rec);
    lO10OIOlxzlO100OIYpr("gmain", "<div id='gtowers' style=\"position:absolute;top:30px;left:" + t_x + "px;height:100%;width:" + gwidth + "px;background:url(" + img_dir + "/tomflight/tomflight_fon.jpg);\"></div>" + "<div id='gcat' style='position:absolute;top:" + t_c + "px;left:150px;height:48px;width:64px;background-color:gray;background:url(" + img_dir + "/tomflight/tom.png);'></div>");
    tomflight_tower(t_x);
    tomflight_i = setInterval("tomflight_render();", 40);
    tomflight_fi = setInterval(function () {
        if (tomflight_f) {
            clearInterval(tomflight_fi);
            return
        }
        fps = (t_fps / 2).toFixed(1);
        mv = -1 * ((t_x - ltx) / 2).toFixed(1);
        t_fps = 0;
        ltx = t_x;
        lO10OIOlxzlO100OIYpr("gfps", "FPS: " + fps)
    }, 2000)
}

function tomflight_render() {
    if (tomflight_f || handler == "vk") return;
    var ind = 1;
    if (fps > 2 && t_x < -150 && mv > 15) {
        if (fps > 2) ind = 24 / fps;
        else ind = 24 / 3
    }
    ind = ind + ((glevel - 1) / 10) * ind;
    t_x -= Math.ceil(7 * ind);
    t_t++;
    t_fps++;
    t_c += Math.ceil(1 + (t_t / 3.5)) * ind;
    if (t_x * -1 > gwidth) {
        tomflight_tower();
        glevel++;
        t_x = 0;
        kjtYpr.popUp("Уровень: " + glevel)
    }
    $_("gcat").style.top = t_c + "px";
    $_("gtowers").style.left = t_x + "px";
    tomflight_isset()
}

function tomflight_down() {
    if (tomflight_f) return;
    t_c += 75;
    $_("gcat").style.backgroundPosition = "0px 48px";
    $_("gcat").style.top = t_c + "px";
    setTimeout('$_("gcat").style.backgroundPosition="0px 0px";', 120);
    tomflight_isset()
}

function tomflight_click(m, k, n) {
    if (tomflight_f) return;
    if (n == null) {
        t_c -= 55;
        $_("gcat").style.backgroundPosition = "0px 96px";
        n = 0;
        clearTimeout(tomflight_c)
    } else t_c -= 10;
    t_t = 0;
    $_("gcat").style.top = t_c + "px";
    if (n < 2) tomflight_c = setTimeout("tomflight_click(null,null," + (n + 1) + ");", 30);
    else setTimeout('$_("gcat").style.backgroundPosition="0px 0px";', 100);
    tomflight_isset()
}

function tomflight_tower(x) {
    var s = "",
        i = 2,
        l = 0,
        ls = 0,
        dm = 120;
    t_arr = [];
    while (l + 400 < gwidth) {
        var r = Math.ceil(80 + 340 * Math.random());
        if (ls > 0) {
            if (ls - r > dm) r = ls - dm;
            else if (r - ls > dm) r = ls + dm
        }
        var l = i * 400;
        t_arr.push([l, r]);
        s += "<div style='position:absolute;top:0px;left:" + l + "px;height:" + r + "px;width:130px;background:url(" + img_dir + "/tomflight/tomfligh_t_down.png);background-position:0px " + r + "px;'></div>" + "<div style='position:absolute;top:" + (r + 150) + "px;left:" + l + "px;height:" + (690 - r - 150) + "px;width:130px;background:url(" + img_dir + "/tomflight/tomfligh_t_up.png);'></div>";
        i++;
        ls = r
    }
    lO10OIOlxzlO100OIYpr("gtowers", s)
}
var last = -1;

function tomflight_isset() {
    var s = "";
    var x = 150 - t_x;
    for (var i = 0; i < t_arr.length; i++) {
        if (x + 62 > t_arr[i][0] && x < 130 + t_arr[i][0]) {
            if (x > t_arr[i][0] + 60) {
                t_xnum = (glevel - 1) * t_arr.length + i + 1
            }
            s = " INTO " + t_c + " " + t_arr[i][1];
            if (t_c - 27 < t_arr[i][1] || t_c > t_arr[i][1] + 140) {
                s = " INTO FAIL " + t_c + " " + t_arr[i][1];
                tomflight_fail()
            }
        }
    }
    if (t_c > 800 && !tomflight_f) tomflight_fail();
    if (last != t_xnum) lO10OIOlxzlO100OIYpr("gtop", "Счет: " + t_xnum);
    last = t_xnum
}

function tomflight_fail() {
    if (tomflight_f) return;
    tomflight_f = !0;
    clearInterval(tomflight_fi);
    clearInterval(tomflight_i);
    clearTimeout(tomflight_c);
    setTimeout(function () {
        if (t_xnum > 0) {
            // PullDataFrom("http://85.17.30.89/obovse.ru/smarttv/api.php?do=tomflight&fps=" + fps + "&n=" + t_xnum + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "tomflight")
            PullDataFrom("http://127.0.0.1/obovse.ru/smarttv/api.php?do=tomflight&fps=" + fps + "&n=" + t_xnum + "&initial=" + box_client + "|" + kjtYpr.mac + "|" + kjtYpr.hardware + "|" + kjtYpr.serial, "tomflight")
        }
        if (t_xnum > t_rec) {
            t_rec = t_xnum;
            kjtYpr.lIllOVRj11lO10Ypr("rt", t_xnum);
            s = "";
            ll0111l1wxUIOlO1lYpr(31, "Новый рекорд!<br>Счет: " + t_xnum + "<br>", "_FPZakrit_|_FPNachatZanovo_")
        } else ll0111l1wxUIOlO1lYpr(31, "Вы проиграли<br>Счет: " + t_xnum + "<br>Рекорд: " + t_rec, "_FPZakrit_|_FPNachatZanovo_")
    }, 1000)
}